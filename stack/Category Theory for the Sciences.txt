
Category Theory for the Sciences


Category Theory for the Sciences
David I. Spivak
The MIT Press
Cambridge, Massachusetts
London, England

c‚Éù2014 Massachusetts Institute of Technology
All rights reserved. No part of this book may be reproduced in any form by any elec-
tronic or mechanical means (including photocopying, recording, or information storage
and retrieval) without permission in writing from the publisher.
MIT Press books may be purchased at special quantity discounts for business or sales
promotional use. For information, please email special sales@mitpress.mit.edu.
Library of Congress Cataloging-in-Publication Data
Spivak, David I., 1978‚Äì author.
Category theory for the sciences / David I. Spivak.
pages cm
Includes bibliographical references and index.
ISBN 978-0-262-02813-4 (hardcover : alk. paper) 1.
Science‚ÄîMathematical models. 2. Categories (Mathematics) I. Title.
Q175.32.M38S65 2014
512‚Äô.62‚Äîdc23
2014007215
10
9
8
7
6
5
4
3
2
1

Contents
1
Introduction
1
1.1
A brief history of category theory . . . . . . . . . . . . . . . . . . . . . . .
4
1.2
Intention of this book
. . . . . . . . . . . . . . . . . . . . . . . . . . . . .
5
1.3
What is requested from the student . . . . . . . . . . . . . . . . . . . . . .
7
1.4
Category theory references . . . . . . . . . . . . . . . . . . . . . . . . . . .
7
2
The Category of Sets
9
2.1
Sets and functions
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
9
2.2
Commutative diagrams
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
23
2.3
Ologs
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
24
3
Fundamental Considerations in Set
41
3.1
Products and coproducts . . . . . . . . . . . . . . . . . . . . . . . . . . . .
41
3.2
Finite limits in Set . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
55
3.3
Finite colimits in Set
. . . . . . . . . . . . . . . . . . . . . . . . . . . . .
75
3.4
Other notions in Set . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
90
4
Categories and Functors, Without Admitting It
115
4.1
Monoids . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116
4.2
Groups . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 140
4.3
Graphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 146
4.4
Orders . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 162
4.5
Databases: schemas and instances
. . . . . . . . . . . . . . . . . . . . . . 184
5
Basic Category Theory
203
5.1
Categories and functors
. . . . . . . . . . . . . . . . . . . . . . . . . . . . 203
5.2
Common categories and functors from pure math . . . . . . . . . . . . . . 239
5.3
Natural transformations . . . . . . . . . . . . . . . . . . . . . . . . . . . . 267
v

vi
CONTENTS
5.4
Categories and schemas are equivalent, Cat ¬ª Sch . . . . . . . . . . . . . 306
6
Fundamental Considerations of Categories
315
6.1
Limits and colimits . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 315
6.2
Other notions in Cat . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 360
7
Categories at Work
375
7.1
Adjoint functors
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 375
7.2
Categories of functors
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 401
7.3
Monads
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 433
7.4
Operads . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 452
References
475
Index
479

Acknowledgments
I would like to express my deep appreciation to the many scientists with whom I have
worked over the past six years.
It all started with Paea LePendu, who Ô¨Årst taught
me about databases when I was naively knocking on doors in the University of Oregon
computer science department. This book would never have been written if Tristan Nguyen
and Dave Balaban had not noticed my work and encouraged me to continue.
Dave
Balaban and Peter Gates have been my scientiÔ¨Åc partners since the beginning, working
hard to understand what I am oÔ¨Äering and working just as hard to help me understand
all that I am missing. Peter Gates has deepened my understanding of data in profound
ways.
I have also been tremendously lucky to know Haynes Miller, who made it possible
for me to settle at MIT, with the help of Clark Barwick and Jacob Lurie. I knew that
MIT would be the best place in the world for me to pursue this type of research, and it
consistently lives up to expectation. Researchers like Markus Buehler and his graduate
students Tristan Giesa and Dieter Brommer have been a pleasure to work with, and the
many materials science examples scattered throughout this book are a testament to how
much our work together has inÔ¨Çuenced my thinking.
I would also like to thank the collaborators and conversation partners with whom
I have discussed subjects written about in this book.
Besides the people mentioned
previously, these include Steve Awodey, Allen Brown, Adam Chlipala, Carlo Curino, Dan
Dugger, Henrik Forssell, David Gepner, Jason Gross, Bob Harper, Ralph Hutchison,
Robert Kent, Jack Morava, Scott Morrison, David Platt, Joey Perricone, Dylan Rupel,
Guarav Singh, Sam Shames, Nat Stapleton, Patrick Schultz, Ka Yu Tam, Ryan Wisnesky,
Jesse Wolfson, and Elizabeth Wood.
I would like to thank Peter Kleinhenz and Peter Gates for reading an earlier version
of this book and providing invaluable feedback before I began teaching the 18-S996 class
at MIT in spring 2013. In particular, the Ô¨Årst Ô¨Ågure of the book, Figure 1.1, is a slight
alteration of a diagram Gates sent me to help motivate the book for scientists. I would
also like to greatly thank the 18-S996 course grader Darij Grinberg, who not only was
vii

the best grader I have had in my 14 years of teaching, but gave me more comments
than anyone else on the book itself. I would like to thank the students from the 18-S996
class at MIT who found typos, pointed out unclear explanations, and generally helped
improve the book in many ways: Aaron Brookner, Leon Dimas, Dylan Erb, Deokhwan
Kim, Taesoo Kim, Owen Lewis, Yair Shenfeld, and Adam Strandberg, among others.
People outside the class, V. Galchin, K. Hofmeyr, D. McAdams, D. Holmes, C. McNally,
P. O‚ÄôNeill, and R. Harper, also contributed to Ô¨Ånding errata and making improvements.
I‚Äôd also like to thank Marie Lufkin Lee, Marc Lowenthal, Katherine Almeida, and
everyone else at MIT Press who helped get this book ready for publication. And thanks
to Laura Baldwin, who helped me work through some painful LaTeX issues. The book is
certainly far better than when I originally submitted it. I also appreciate the willingness
of the Press to work with me in making a copy of this book publicly available.
Thanks also to my teacher Peter Ralston, who taught me to repeatedly question the
obvious. My ability to commit to a project like this one and to see it to fruition has
certainly been enhanced since I studied with him.
Finally, I acknowledge my appreciation for support from the OÔ¨Éce of Naval Research
and Air Force OÔ¨Éce of ScientiÔ¨Åc Research1 without which this book would not have been
remotely possible.
I believe that the funding of basic research is an excellent way of
ensuring that the United States remains a global leader in the years to come.
1Grant numbers: N000140910466, N000141010841, N000141310260, FA9550-14-1-0031.
viii

Chapter 1
Introduction
The diagram in Figure 1.1 is intended to evoke thoughts of the scientiÔ¨Åc method.
	

	
	

	

		




	

Figure 1.1
An observation analyzed by a person yields a hypothesis, which analyzed
by a person produces a prediction, which motivates the speciÔ¨Åcation of an
experiment, which when executed results in an observation.
1

2
CHAPTER 1. INTRODUCTION
Its statements look valid, and a good graphic can be very useful for leading a reader
through a story that the author wishes to tell.
But a graphic has the power to evoke feelings of understanding without really meaning
much. The same is true for text: it is possible to use a language like English to express
ideas that are never made rigorous or clear. When someone says, ‚ÄúI believe in free will,‚Äù
what does she believe in? We may all have some concept of what she‚Äôs saying‚Äîsomething
we can conceptually work with and discuss or argue about. But to what extent are we
all discussing the same thing, the thing she intended to convey?
Science is about agreement. When we supply a convincing argument, the result of
this convincing is agreement.
When, in an experiment, the observation matches the
hypothesis‚Äîsuccess!‚Äîthat is agreement. When my methods make sense to you, that is
agreement. When practice does not agree with theory, that is disagreement. Agreement
is the good stuÔ¨Äin science; it is the celebratory moment.
But it is easy to think we are in agreement, when we really are not. Modeling our
thoughts on heuristics and graphics may be convenient for quick travel down the road, but
we are liable to miss our turnoÔ¨Äat the Ô¨Årst mile. The danger is in mistaking convenient
conceptualizations for what is actually there. It is imperative that we have the ability at
any time to ground in reality. What does that mean?
Data. Hard evidence. The physical world. It is here that science is grounded and
heuristics evaporate. So let‚Äôs look again at Figure 1.1. It is intended to evoke an idea of
how science is performed. Do hard evidence and data back up this theory? Can we set
up an experiment to Ô¨Ånd out whether science is actually performed according to such a
protocol? To do so we have to shake oÔ¨Äthe impressions evoked by the diagram and ask,
What does this diagram intend to communicate?
In this book I will use a mathematical tool called ologs, or ontology logs, to give
some structure to the kinds of ideas that are often communicated in graphics. Each olog
inherently oÔ¨Äers a framework in which to record data about the subject. More precisely, it
encompasses a database schema, which means a system of interconnected tables that are
initially empty but into which data can be entered. For example, consider the following
olog:
a mass
an object of mass
m held at height h
above the ground
has as mass

when dropped has
as number of sec-
onds till hitting the
ground

has as height
in meters

a real number h
?
?
2hÀú9.8
 a real number

3
This olog represents a framework in which to record data about objects held above the
ground, their mass, their height, and a comparison (the question mark) between the
number of seconds till they hit the ground and a certain real-valued function of their
height. Ologs are discussed in detail throughout this book.
Figure 1.1 looks like an olog, but it does not conform to the rules laid out for ologs (see
Section 2.3). In an olog, every arrow is intended to represent a mathematical function. It
is diÔ¨Écult to imagine a function that takes in predictions and outputs experiments, but
such a function is necessary in order for the arrow
a prediction
motivates the speciÔ¨Åcation of
√ù√ù√ù√ù√ù√ù√ù√ù√ù√ù√ù√ù√ù√ù√ù√ù√ù√ù√ë an experiment
in Figure 1.1 to make sense. To produce an experiment design from a prediction probably
requires an expert, and even then the expert may be motivated to specify a diÔ¨Äerent
experiment on Tuesday than he is on Monday. But perhaps this criticism leads to a
way forward. If we say that every arrow represents a function when in the context of a
speciÔ¨Åc expert who is actually doing the science at a speciÔ¨Åc time, then Figure 1.1 begins
to make sense. In fact, the Ô¨Ågure is reconsidered in Section 7.3 (Example 7.3.3.10), where
background methodological context is discussed.
This book extols the virtues of a new branch of mathematics, category theory, which
was invented for powerful communication of ideas between diÔ¨Äerent Ô¨Åelds and subÔ¨Åelds
within mathematics.
By powerful communication of ideas I mean something precise.
DiÔ¨Äerent branches of mathematics can be formalized into categories. These categories
can then be connected by functors. And the sense in which these functors provide pow-
erful communication of ideas is that facts and theorems proven in one category can be
transferred through a connecting functor to yield proofs of analogous theorems in another
category. A functor is like a conductor of mathematical truth.
I believe that the language and tool set of category theory can be useful throughout
science. We build scientiÔ¨Åc understanding by developing models, and category theory is
the study of basic conceptual building blocks and how they cleanly Ô¨Åt together to make
such models. Certain structures and conceptual frameworks show up again and again
in our understanding of reality. No one would dispute that vector spaces are ubiquitous
throughout the sciences. But so are hierarchies, symmetries, actions of agents on objects,
data models, global behavior emerging as the aggregate of local behavior, self-similarity,
and the eÔ¨Äect of methodological context.
Some ideas are so common that our use of them goes virtually undetected, such as set-
theoretic intersections. For example, when we speak of a material that is both lightweight
and ductile, we are intersecting two sets. But what is the use of even mentioning this
set-theoretic fact? The answer is that when we formalize our ideas, our understanding
is clariÔ¨Åed. Our ability to communicate with others is enhanced, and the possibility for

4
CHAPTER 1. INTRODUCTION
developing new insights expands. And if we are ever to get to the point that we can input
our ideas into computers, we will need to be able to formalize these ideas Ô¨Årst.
It is my hope that this book will oÔ¨Äer scientists a new vocabulary in which to think
and communicate, and a new pipeline to the vast array of theorems that exist and are
considered immensely powerful within mathematics.
These theorems have not made
their way into the world of science, but they are directly applicable there. Hierarchies are
partial orders, symmetries are group elements, data models are categories, agent actions
are monoid actions, local-to-global principles are sheaves, self-similarity is modeled by
operads, context can be modeled by monads. All of these will be discussed in the book.
1.1
A brief history of category theory
The paradigm shift brought on by Einstein‚Äôs theory of relativity led to a widespread
realization that there is no single perspective from which to view the world. There is no
background framework that we need to Ô¨Ånd; there are inÔ¨Ånitely many diÔ¨Äerent frameworks
and perspectives, and the real power lies in being able to translate between them. It is
in this historical context that category theory got its start.1
Category theory was invented in the early 1940s by Samuel Eilenberg and Saunders
Mac Lane.
It was speciÔ¨Åcally designed to bridge what may appear to be two quite
diÔ¨Äerent Ô¨Åelds: topology and algebra. Topology is the study of abstract shapes such as
7-dimensional spheres; algebra is the study of abstract equations such as y2z ‚Äú x3 ¬¥ xz2.
People had already created important and useful links (e.g., cohomology theory) between
these Ô¨Åelds, but Eilenberg and Mac Lane needed to precisely compare diÔ¨Äerent links with
one another. To do so they Ô¨Årst needed to boil down and extract the fundamental nature
of these two Ô¨Åelds. But in doing so, the ideas they worked out amounted to a framework
that Ô¨Åt not only topology and algebra, but many other mathematical disciplines as well.
At Ô¨Årst category theory was little more than a deeply clarifying language for existing
diÔ¨Écult mathematical ideas. However, in 1957 Alexander Grothendieck used category
theory to build new mathematical machinery (new cohomology theories) that granted
unprecedented insight into the behavior of algebraic equations. Since that time, categories
have been built speciÔ¨Åcally to zoom in on particular features of mathematical subjects
and study them with a level of acuity that is unavailable elsewhere.
Bill Lawvere saw category theory as a new foundation for all mathematical thought.
Mathematicians had been searching for foundations in the nineteenth century and were
reasonably satisÔ¨Åed with set theory as the foundation. But Lawvere showed that the
category of sets is simply one category with certain nice properties, not necessarily the
1The following history of category theory is far too brief and perhaps reÔ¨Çects more of the author‚Äôs
aesthetic than any kind of objective truth. References are Kromer [19], Marquis [30], and Landry and
Marquis [22].

1.2. INTENTION OF THIS BOOK
5
center of the mathematical universe. He explained how whole algebraic theories can be
viewed as examples of a single system.
He and others went on to show that higher-
order logic was beautifully captured in the setting of category theory (more speciÔ¨Åcally
toposes). It is here also that Grothendieck and his school worked out major results in
algebraic geometry.
In 1980, Joachim Lambek showed that the types and programs used in computer
science form a speciÔ¨Åc kind of category. This provided a new semantics for talking about
programs, allowing people to investigate how programs combine and compose to create
other programs, without caring about the speciÔ¨Åcs of implementation. Eugenio Moggi
brought the category-theoretic notion of monads into computer science to encapsulate
ideas that up to that point were considered outside the realm of such theory.
It is diÔ¨Écult to explain the clarity and beauty brought to category theory by people
like Daniel Kan and Andr¬¥e Joyal. They have each repeatedly extracted the essence of
a whole mathematical subject to reveal and formalize a stunningly simple yet extremely
powerful pattern of thinking, revolutionizing how mathematics is done.
All this time, however, category theory was consistently seen by much of the mathe-
matical community as ridiculously abstract. But in the twenty-Ô¨Årst century it has Ô¨Ånally
come to Ô¨Ånd healthy respect within the larger community of pure mathematics. It is the
language of choice for graduate-level algebra and topology courses, and in my opinion will
continue to establish itself as the basic framework in which to think about and express
mathematical ideas.
As mentioned, category theory has branched out into certain areas of science as well.
Baez and Dolan [6] have shown its value in making sense of quantum physics, it is well
established in computer science, and it has found proponents in several other Ô¨Åelds as well.
But to my mind, we are at the very beginning of its venture into scientiÔ¨Åc methodology.
Category theory was invented as a bridge, and it will continue to serve in that role.
1.2
Intention of this book
The world of applied mathematics is much smaller than the world of applicable mathe-
matics. As mentioned, this book is intended to create a bridge between the vast array
of mathematical concepts that are used daily by mathematicians to describe all man-
ner of phenomena that arise in our studies and the models and frameworks of scientiÔ¨Åc
disciplines such as physics, computation, and neuroscience.
For the pure mathematician I try to prove that concepts such as categories, func-
tors, natural transformations, limits, colimits, functor categories, sheaves, monads, and
operads‚Äîconcepts that are often considered too abstract even for math majors‚Äîcan be
communicated to scientists with no math background beyond linear algebra. If this ma-
terial is as teachable as I think, it means that category theory is not esoteric but well

6
CHAPTER 1. INTRODUCTION
aligned with ideas that already make sense to the scientiÔ¨Åc mind. Note, however, that this
book is example-based rather than proof-based, so it may not be suitable as a reference
for students of pure mathematics.
For the scientist I try to prove the claim that category theory includes a formal
treatment of conceptual structures that the scientist sees often, perhaps without realizing
that there is well-oiled mathematical machinery to be employed. A major topics is the
structure of information itself: how data is made meaningful by its connections, both
internal and outreaching, to other data.2 Note, however, that this book should certainly
not be taken as a reference on scientiÔ¨Åc matters themselves. One should assume that any
account of physics, materials science, chemistry, and so on, has been oversimpliÔ¨Åed. The
intention is to give a Ô¨Çavor of how category theory may help model scientiÔ¨Åc ideas, not
to explain those ideas in a serious way.
Data gathering is ubiquitous in science. Giant databases are currently being mined
for unknown patterns, but in fact there are many (many) known patterns that simply
have not been catalogued.
Consider the well-known case of medical records.
In the
early twenty-Ô¨Årst century, it is often the case that a patient‚Äôs medical history is known
by various doctor‚Äôs oÔ¨Éces but quite inadequately shared among them. Sharing medical
records often means faxing a handwritten note or a Ô¨Ålled-in house-created form from one
oÔ¨Éce to another.
Similarly, in science there exists substantial expertise making brilliant connections
between concepts, but this expertise is conveyed in silos of English prose known as journal
articles. Every scientiÔ¨Åc journal article has a methods section, but it is almost impossible
to read a methods section and subsequently repeat the experiment‚Äîthe English language
is inadequate to precisely and concisely convey what is being done.
The Ô¨Årst thought I wish to convey in this book is that reusable methodologies can
be formalized and that doing so is inherently valuable. Consider the following analogy.
Suppose one wants to add up the area of a region in space (or the area under a curve). One
breaks the region down into small squares, each with area A, and then counts the number
of squares, say n. One multiplies these numbers together and says that the region has an
area of about nA. To obtain a more precise and accurate result, one repeats the process
with half-size squares. This methodology can be used for any area-Ô¨Ånding problem (of
which there are more than a Ô¨Årst-year calculus student generally realizes) and thus it
deserves to be formalized. But once we have formalized this methodology, it can be taken
to its limit, resulting in integration by Riemann sums. Formalizing the problem can lead
2The word data is generally considered to be the plural form of the word datum. However, individual
datum elements are only useful when they are organized into structures (e.g., if one were to shuÔ¨Ñe the
cells in a spreadsheet, most would consider the data to be destroyed). It is the whole organized structure
that really houses the information; the data must be in formation in order to be useful. Thus I use
the word data as a collective noun (akin to sand); it bridges the divide between the individual datum
elements (akin to grains of sand) and the data set (akin to a sand pile).

1.3. WHAT IS REQUESTED FROM THE STUDENT
7
to powerful techniques that were unanticipated at the outset.
I intend to show that category theory is incredibly eÔ¨Écient as a language for exper-
imental design patterns, introducing formality while remaining Ô¨Çexible. It forms a rich
and tightly woven conceptual fabric that allows the scientist to maneuver between dif-
ferent perspectives whenever the need arises. Once she weaves that fabric into her own
line of research, she has an ability to think about models in a way that simply would not
occur without it. Moreover, putting ideas into the language of category theory forces a
person to clarify her assumptions. This is highly valuable both for the researcher and for
her audience.
What must be recognized in order to Ô¨Ånd value in this book is that conceptual chaos
is a major problem. Creativity demands clarity of thinking, and to think clearly about a
subject requires an organized understanding of how its pieces Ô¨Åt together. Organization
and clarity also lead to better communication with others. Academics often say they
are paid to think and understand, but that is not the whole truth. They are paid to
think, understand, and communicate their Ô¨Åndings. Universal languages for science, such
as calculus and diÔ¨Äerential equations, matrices, or simply graphs and pie charts, already
exist, and they grant us a cultural cohesiveness that makes scientiÔ¨Åc research worthwhile.
In this book I attempt to show that category theory can be similarly useful in describing
complex scientiÔ¨Åc understandings.
1.3
What is requested from the student
The only way to learn mathematics is by doing exercises. One does not get Ô¨Åt by merely
looking at a treadmill or become a chef by merely reading cookbooks, and one does not
learn math by watching someone else do it. There are about 300 exercises in this book.
Some of them have solutions in the text, others have solutions that can only be accessed
by professors teaching the class.
A good student can also make up his own exercises or simply play around with the
material. This book often uses databases as an entry to category theory. If one wishes to
explore categorical database software, FQL (functorial query language) is a great place
to start. It may also be useful in solving some of the exercises.
1.4
Category theory references
I wrote this book because the available books on category theory are almost all written
for mathematicians (the rest are written for computer scientists). One book, Conceptual
Mathematics by Lawvere and Schanuel [24], oÔ¨Äers category theory to a wider audience,

8
CHAPTER 1. INTRODUCTION
but its style is not appropriate for a course or as a reference. Still, it is very well written
and clear.
The bible of category theory is Categories for the Working Mathematician by Mac
Lane [29].
But as the title suggests, it was written for working mathematicians and
would be opaque to my target audience. However, once a person has read the present
book, Mac Lane‚Äôs book may become a valuable reference.
Other good books include Awodey‚Äôs Category theory [4], a recent gentle introduction
by Simmons [37], and Barr and Wells‚Äôs Category Theory for Computing Science, [11].
A paper by Brown and Porter, ‚Äò‚ÄòCategory Theory: an abstract setting for analogy and
comparison‚Äù [9] is more in line with the style of this book, only much shorter. Online, I
Ô¨Ånd Wikipedia [46] and a site called nLab [34] to be quite useful.
This book attempts to explain category theory by examples and exercises rather than
by theorems and proofs. I hope this approach will be valuable to the working scientist.

Chapter 2
The Category of Sets
The theory of sets was invented as a foundation for all of mathematics. The notion of
sets and functions serves as a basis on which to build intuition about categories in gen-
eral. This chapter gives examples of sets and functions and then discusses commutative
diagrams. Ologs are then introduced, allowing us to use the language of category theory
to speak about real world concepts. All this material is basic set theory, but it can also
be taken as an investigation of the category of sets, which is denoted Set.
2.1
Sets and functions
People have always found it useful to put things into bins.
a thing
is put into
 a bin
The study of sets is the study of things in bins.
2.1.1
Sets
You probably have an innate understanding of what a set is. We can think of a set X
as a collection of elements x P X, each of which is recognizable as being in X and such
that for each pair of named elements x, x1 P X we can tell if x ‚Äú x1 or not.1 The set
of pendulums is the collection of things we agree to call pendulums, each of which is
1Note that the symbol x1, read ‚Äúx-prime,‚Äù has nothing to do with calculus or derivatives. It is simply
notation used to name a symbol that is somehow like x. This suggestion of kinship between x and x1 is
meant only as an aid for human cognition, not as part of the mathematics.
9

10
CHAPTER 2. THE CATEGORY OF SETS
X 
Y 
Figure 2.1 A set X with nine elements, and a set Y with no elements, Y ‚Äú H.
recognizable as being a pendulum, and for any two people pointing at pendulums we can
tell if they‚Äôre pointing at the same pendulum or not.
Notation 2.1.1.1. The symbol H denotes the set with no elements (see Figure 2.1), which
can also be written as t u. The symbol N denotes the set of natural numbers:
N :‚Äú t0, 1, 2, 3, 4, . . . , 877, . . .u.
(2.1)
The symbol Z denotes the set of integers, which contains both the natural numbers and
their negatives,
Z :‚Äú t. . . , ¬¥551, . . . , ¬¥2, ¬¥1, 0, 1, 2, . . .u.
(2.2)
If A and B are sets, we say that A is a subset of B, and write A ƒé B, if every element
of A is an element of B. So we have N ƒé Z. Checking the deÔ¨Ånition, one sees that for
any set A, we have (perhaps uninteresting) subsets H ƒé A and A ƒé A. We can use set-
builder notation to denote subsets. For example, the set of even integers can be written
tn P Z | n is evenu. The set of integers greater than 2 can be written in many ways, such
as
tn P Z | n ƒÖ 2u
or
tn P N | n ƒÖ 2u
or
tn P N | n ƒõ 3u.
The symbol D means ‚Äúthere exists.‚Äù So we could write the set of even integers as
tn P Z | n is evenu ‚Äú tn P Z | Dm P Z such that 2m ‚Äú nu.
The symbol D! means ‚Äúthere exists a unique.‚Äù So the statement ‚ÄúD!x P R such that x2 ‚Äú 0‚Äù
means that there is one and only one number whose square is 0. Finally, the symbol @

2.1. SETS AND FUNCTIONS
11
means ‚Äúfor all.‚Äù So the statement ‚Äú@m P N Dn P N such that m ƒÉ n‚Äù means that for every
number there is a bigger one.
As you may have noticed in deÔ¨Åning N and Z in (2.1) and (2.2), we use the colon-
equals notation ‚ÄúA :‚Äú XY Z‚Äù to mean something like ‚ÄúdeÔ¨Åne A to be XY Z.‚Äù That is, a
colon-equals declaration does not denote a fact of nature (like 2 ` 2 ‚Äú 4) but a choice of
the writer.
We also often discuss a certain set with one element, denoted tu, as well as the
familiar set of real numbers, R, and some variants such as Rƒõ0 :‚Äú tx P R | x ƒõ 0u.
Exercise 2.1.1.2.
Let A :‚Äú t1, 2, 3u. What are all the subsets of A? Hint: There are eight.
‚ô¶
Solution 2.1.1.2.
The most obvious ones are these six:
t1u,
t2u,
t3u,
t1, 2u,
t1, 3u,
t2, 3u.
But the empty set and the whole set are always subsets too:
H,
t1, 2, 3u.
‚ô¶
A set can have other sets as elements. For example, the set
X :‚Äú tt1, 2u, t4u, t1, 3, 6uu
has three elements, each of which is a set.
2.1.2
Functions
If X and Y are sets, then a function f from X to Y , denoted f : X √ë Y , is a mapping
that sends each element x P X to an element of Y , denoted fpxq P Y . We call X the
domain of the function f, and we call Y the codomain of f.
Note that for every element x P X, there is exactly one arrow emanating from x, but
for an element y P Y , there can be several arrows pointing to y, or there can be no arrows
pointing to y (see Figure 2.2).
Slogan 2.1.2.1.
Given a function f : X √ë Y , we think of X as a set of things, and Y as a set
of bins. The function tells us in which bin to put each thing.

12
CHAPTER 2. THE CATEGORY OF SETS
X 
Y 
x1 
x4 
y5 
y4 
y3 
y2 
y1 
x2 
x3 
Figure 2.2 A function from a set X to a set Y .
Application 2.1.2.2. In studying the mechanics of materials, one wishes to know how a
material responds to tension. For example, a rubber band responds to tension diÔ¨Äerently
than a spring does. To each material we can associate a force-extension curve, recording
how much force the material carries when extended to various lengths. Once we Ô¨Åx a
methodology for performing experiments, Ô¨Ånding a material‚Äôs force-extension curve would
ideally constitute a function from the set of materials to the set of curves.
‚ô¶‚ô¶
Exercise 2.1.2.3.
Here is a simpliÔ¨Åed account of how the brain receives light. The eye contains about
100 million photoreceptor (PR) cells. Each connects to a retinal ganglion (RG) cell. No
PR cell connects to two diÔ¨Äerent RG cells, but usually many PR cells can attach to a
single RG cell.
Let PR denote the set of photoreceptor cells, and let RG denote the set of retinal
ganglion cells.
a. According to the above account, does the connection pattern constitute a function
RG √ë PR, a function PR √ë RG, or neither one?
b. Would you guess that the connection pattern that exists between other areas of the
brain are function-like? Justify your answer.
‚ô¶

2.1. SETS AND FUNCTIONS
13
Solution 2.1.2.3.
a. To every element of PR we associate an element of RG, so this is a function PR √ë RG.
b. (Any justiÔ¨Åed guess is legitimate.) With no background in the subject, I might guess
this happens in any case of immediate perception being translated to neural impulses.
‚ô¶
Example 2.1.2.4. Suppose that X is a set and X1 ƒé X is a subset. Then we can consider
the function X1 √ë X given by sending every element of X1 to ‚Äúitself‚Äù as an element of
X. For example, if X ‚Äú ta, b, c, d, e, fu and X1 ‚Äú tb, d, eu, then X1 ƒé X. We turn that
into the function X1 √ë X given by b √û√ë b, d √û√ë d, e √û√ë e.2
As a matter of notation, we may sometimes say the following: Let X be a set, and let
i: X1 ƒé X be a subset. Here we are making clear that X1 is a subset of X, but that i is
the name of the associated function.
Exercise 2.1.2.5.
Let f : N √ë N be the function that sends every natural number to its square, e.g.,
fp6q ‚Äú 36. First Ô¨Åll in the blanks, then answer a question.
a. 2 √û√ë
b. 0 √û√ë
c. ¬¥2 √û√ë
d. 5 √û√ë
e. Consider the symbol √ë and the symbol √û√ë. What is the diÔ¨Äerence between how these
two symbols are used so far in this book?
‚ô¶
Solution 2.1.2.5.
a. 4
b. 0
c. The function does not apply to ¬¥2 because ¬¥2 is not an element of N.
2This kind of arrow, √û√ë , is read ‚Äúmaps to.‚Äù A function f : X √ë Y means a rule for assigning to each
element x P X an element fpxq P Y . We say that ‚Äúx maps to fpxq‚Äù and write x √û√ë fpxq.

14
CHAPTER 2. THE CATEGORY OF SETS
d. 25
e. The symbol √ë is used to denote a function from one set to another. For example, the
arrow in g: X √ë Y is a symbol that tells us that g is the name of a function from set X
to set Y . The symbol √û√ë is used to tell us where the function sends a speciÔ¨Åc element
of the domain. So in our squaring function f : N √ë N, we write 5 √û√ë 25 because the
function f sends 5 to 25.
‚ô¶
Given a function f : X √ë Y , the elements of Y that have at least one arrow pointing
to them are said to be in the image of f; that is, we have
impfq :‚Äú ty P Y | Dx P X such that fpxq ‚Äú yu.
(2.3)
The image of a function f is always a subset of its codomain, impfq ƒé Y .
Exercise 2.1.2.6.
If f : X √ë Y is depicted by Figure 2.2, write its image, impfq as a set.
‚ô¶
Solution 2.1.2.6.
The image is impfq ‚Äú ty1, y2, y4u.
‚ô¶
Given a function f : X √ë Y and a function g: Y √ë Z, where the codomain of f is
the same set as the domain of g (namely, Y ), we say that f and g are composable
X
f
√ù√ù√ù√ë Y
g
√ù√ù√ù√ë Z.
The composition of f and g is denoted by g Àù f : X √ë Z. See Figure 2.3.
Slogan 2.1.2.7.
Given composable functions X
f√ù√ë Y
g√ù√ë Z, we have a way of putting every
thing in X into a bin in Y , and we have a way of putting each bin from Y
into a larger bin in Z. The composite, g Àù f : X √ë Z, is the resulting way
that every thing in X is put into a bin in Z.
Exercise 2.1.2.8.
If A ƒé X is a subset, Example 2.1.2.4 showed how to think of it as a function
i: A √ë X.
Given a function f : X √ë Y , we can compose A
i√ù√ë X
f√ù√ë Y and get a
function f Àù i: A √ë Y . The image of this function is denoted
fpAq :‚Äú impf Àù iq,

2.1. SETS AND FUNCTIONS
15
y1 
Z 
z2 
z1 
y1
Y 
y4 
y2 
y3 
X 
x2 
x1 
x3 
y1
y
x1
y2
x
y4
x3
x
y
y
y3
x
Figure 2.3 Functions f : X √ë Y and g: Y √ë Z compose to a function g Àù f : X √ë Z
(follow the arrows).
see (2.3) for the deÔ¨Ånition of image.
Let X ‚Äú Y :‚Äú Z, let A :‚Äú t¬¥1, 0, 1, 2, 3u ƒé X, and let f : X √ë Y be given by
fpxq ‚Äú x2. What is the image set fpAq?
‚ô¶
Solution 2.1.2.8.
By deÔ¨Ånition of image (see (2.3), we have
fpAq ‚Äú ty P Z | Da P A such that f Àù ipaq ‚Äú yu.
Since A ‚Äú t¬¥1, 0, 1, 2, 3u and since ipaq ‚Äú a for all a P A, we have fpAq ‚Äú t0, 1, 4, 9u.
Note that an element of a set can only be in the set once; even though fp¬¥1q ‚Äú fp1q ‚Äú 1,
we need only mention 1 once in fpAq. In other words, if a student has an answer such as
t1, 0, 1, 4, 9u, this suggests a minor confusion.
‚ô¶
Notation 2.1.2.9. Let X be a set and x P X an element. There is a function tu √ë X
that sends  √û√ë x.
We say that this function represents x P X.
We may denote it
x: tu √ë X.

16
CHAPTER 2. THE CATEGORY OF SETS
Exercise 2.1.2.10.
Let X be a set, let x P X be an element, and let x: tu √ë X be the function
representing it. Given a function f : X √ë Y , what is f Àù x?
‚ô¶
Solution 2.1.2.10.
It is the function tu √ë Y that sends  to fpxq. In other words, it represents the
element fpxq.
‚ô¶
Remark 2.1.2.11. Suppose given sets A, B, C and functions A
f√ù√ë B
g√ù√ë C. The classical
order for writing their composition has been used so far, namely, g Àù f : A √ë C. For any
element a P A, we write g Àù fpaq to mean gpfpaqq. This means ‚Äúdo g to whatever results
from doing f to a.‚Äù
However, there is another way to write this composition, called diagrammatic order.
Instead of g Àù f, we would write f; g: A √ë C, meaning ‚Äúdo f, then do g.‚Äù Given an
element a P A, represented by a: tu √ë A, we have an element a; f; g.
Let X and Y be sets. We write HomSetpX, Y q to denote the set of functions X √ë Y .3
Note that two functions f, g: X √ë Y are equal if and only if for every element x P X, we
have fpxq ‚Äú gpxq.
Exercise 2.1.2.12.
Let A ‚Äú t1, 2, 3, 4, 5u and B ‚Äú tx, yu.
a. How many elements does HomSetpA, Bq have?
b. How many elements does HomSetpB, Aq have?
‚ô¶
Solution 2.1.2.12.
a. 32. For example, 1 √û√ë x, 2 √û√ë x, 3 √û√ë x, 4 √û√ë y, 5 √û√ë x.
b. 25. For example, x √û√ë 1, y √û√ë 4.
‚ô¶
3The notation HomSetp¬¥, ¬¥q will make more sense later, when it is seen in a larger context. See
especially Section 5.1.

2.1. SETS AND FUNCTIONS
17
Exercise 2.1.2.13.
a. Find a set A such that for all sets X there is exactly one element in HomSetpX, Aq.
Hint: Draw a picture of proposed A‚Äôs and X‚Äôs. How many dots should be in A?
b. Find a set B such that for all sets X there is exactly one element in HomSetpB, Xq.
‚ô¶
Solution 2.1.2.13.
a. Here is one: A :‚Äú tu. (Here is another, A :‚Äú t48u, and another, A :‚Äú ta1u).
X:=
1‚Äö
2‚Äö
3‚Äö
A:=
‚Äö
Why? We are trying to count the number of functions X √ë A. Regardless of X
and A, in order to give a function X √ë A one must answer the question, Where do
I send x? several times, once for each element x P X. Each element of X is sent
to an element in A. For example, if X ‚Äú t1, 2, 3u, then one asks three questions:
Where do I send 1? Where do I send 2? Where do I send 3? When A has only one
element, there is only one place to send each x. A function X √ë tu would be written
1 √û√ë , 2 √û√ë , 3 √û√ë . There is only one such function, so HomSetpX, tuq has one
element.
b. B ‚Äú H is the only possibility.
B :‚Äú
To give a function B √ë X one must answer the question, Where do I send b? for
each b P B. Because B has no elements, no questions must be answered in order
to provide such a function. There is one way to answer all the necessary questions,
because doing so is immediate (‚Äúvacuously satisÔ¨Åed‚Äù). It is like commanding John to
‚Äúassign a letter grade to every person who is over 14 feet tall.‚Äù John is Ô¨Ånished with
his job the moment the command is given, and there is only one way for him to Ô¨Ånish
the job. So HomSetpH, Xq has one element.

18
CHAPTER 2. THE CATEGORY OF SETS
X 
x1 
x4 
x2 
x3 
Y 
y1 
y4 
y2 
y3 
Figure 2.4 An isomorphism X
‚Äì
√ù√ë Y .
‚ô¶
For any set X, we deÔ¨Åne the identity function on X, denoted
idX : X √ë X,
to be the function such that for all x P X, we have idXpxq ‚Äú x.
DeÔ¨Ånition 2.1.2.14 (Isomorphism). Let X and Y be sets. A function f : X √ë Y is
called an isomorphism, denoted f : X
‚Äì
√ù√ë Y , if there exists a function g: Y √ë X such
that g Àù f ‚Äú idX and f Àù g ‚Äú idY .
X
f

Y
g

In this case we also say that f is invertible and that g is the inverse of f. If there exists an
isomorphism X
‚Äì
√ù√ë Y , we say that X and Y are isomorphic sets and may write X ‚Äì Y .
Example 2.1.2.15. If X and Y are sets and f : X √ë Y is an isomorphism, then the
analogue of Figure 2.2 will look like a perfect matching, more often called a one-to-one
correspondence. That means that no two arrows will hit the same element of Y , and
every element of Y will be in the image. For example, Figure 2.4 depicts an isomorphism
X
‚Äì
√ù√ë Y between four element sets.

2.1. SETS AND FUNCTIONS
19
Application 2.1.2.16. There is an isomorphism between the set NucDNA of nucleotides
found in DNA and the set NucRNA of nucleotides found in RNA. Indeed, both sets
have four elements, so there are 24 diÔ¨Äerent isomorphisms. But only one is useful in
biology. Before we say which one it is, let us say there is also an isomorphism NucDNA ‚Äì
tA, C, G, Tu and an isomorphism NucRNA ‚Äì tA, C, G, Uu, and we will use the letters as
abbreviations for the nucleotides.
The convenient isomorphism NucDNA
‚Äì
√ù√ë NucRNA is that given by RNA transcription;
it sends
A √û√ë U, C √û√ë G, G √û√ë C, T √û√ë A.
(See also Application 5.1.2.21.) There is also an isomorphism NucDNA
‚Äì
√ù√ë NucDNA (the
matching in the double helix), given by
A √û√ë T, C √û√ë G, G √û√ë C, T √û√ë A.
Protein production can be modeled as a function from the set of 3-nucleotide sequences
to the set of eukaryotic amino acids. However, it cannot be an isomorphism because there
are 43 ‚Äú 64 triplets of RNA nucleotides but only 21 eukaryotic amino acids.
‚ô¶‚ô¶
Exercise 2.1.2.17.
Let n P N be a natural number, and let X be a set with exactly n elements.
a. How many isomorphisms are there from X to itself?
b. Does your formula from part (a) hold when n ‚Äú 0?
‚ô¶
Solution 2.1.2.17.
a. There are n!, pronounced ‚Äún factorial.‚Äù For example, if X ‚Äú ta, b, c, du, then we have
4! ‚Äú 4 Àö 3 Àö 2 Àö 1 ‚Äú 24 isomorphisms X
‚Äì
√ù√ë X. One such isomorphism is a √û√ë a, b √û√ë
d, c √û√ë b, d √û√ë b. The heuristic reason that the answer is 4! is that there are four
ways to pick where a goes, but then only three remaining ways to pick where b goes,
then only two remaining ways to pick were c goes, and then only one remaining way
to pick where d goes.
To really understand this answer, list all the isomorphisms
t1, 2, 3, 4u ‚Äì
√ù√ë t1, 2, 3, 4u for yourself.
b. Yes, there is one function H √ë H and it is an isomorphism.
‚ô¶

20
CHAPTER 2. THE CATEGORY OF SETS
Proposition 2.1.2.18. The following facts hold about isomorphism.
1. Any set A is isomorphic to itself; i.e., there exists an isomorphism A ‚Äì
√ù√ë A.
2. For any sets A and B, if A is isomorphic to B, then B is isomorphic to A.
3. For any sets A, B, and C, if A is isomorphic to B, and B is isomorphic to C, then
A is isomorphic to C.
Proof.
1. The identity function idA : A √ë A is invertible; its inverse is idA because
idA Àù idA ‚Äú idA.
2. If f : A √ë B is invertible with inverse g: B √ë A, then g is an isomorphism with
inverse f.
3. If f : A √ë B and f 1 : B √ë C are each invertible with inverses g: B √ë A and
g1 : C √ë B, then the following calculations show that f 1 Àù f is invertible with
inverse g Àù g1:
pf 1 Àù fq Àù pg Àù g1q ‚Äú f 1 Àù pf Àù gq Àù g1 ‚Äú f 1 Àù idB Àù g1 ‚Äú f 1 Àù g1 ‚Äú idC
pg Àù g1q Àù pf 1 Àù fq ‚Äú g Àù pg1 Àù f 1q Àù f ‚Äú g Àù idB Àù f ‚Äú g Àù f ‚Äú idA
‚ñ°
Exercise 2.1.2.19.
Let A and B be these sets:
A:=
a‚Äö
7‚Äö
Q‚Äö
B:=
r8‚Äö
‚ÄúBob‚Äù
‚Äö
‚ô£‚Äö
Note that the sets A and B are isomorphic. Suppose that f : B √ë t1, 2, 3, 4, 5u sends
‚ÄúBob‚Äù to 1, sends ‚ô£to 3, and sends r8 to 4. Is there a canonical function A √ë t1, 2, 3, 4, 5u
corresponding to f?4
‚ô¶
4Canonical, as used here, means something like ‚Äúbest choice,‚Äù a choice that stands out as the only
reasonable one.

2.1. SETS AND FUNCTIONS
21
Solution 2.1.2.19.
No. There are a lot of choices, and none is any more reasonable than any other, i.e.,
none are canonical. (In fact, there are six choices; do you see why?)
The point of this exercise is to illustrate that even if one knows that two sets are
isomorphic, one cannot necessarily treat them as the same. To treat them as the same,
one should have in hand a speciÔ¨Åed isomorphism g: A
‚Äì
√ù√ë B, such as a √û√ë r8,
7 √û√ë
‚ÄúBob‚Äù,
Q √û√ë ‚ô£. Now, given f : B √ë t1, 2, 3, 4, 5u, there is a canonical function A √ë
t1, 2, 3, 4, 5u corresponding to f, namely, f Àù g.
‚ô¶
Exercise 2.1.2.20.
Find a set A such that for any set X, there is an isomorphism of sets
X ‚Äì HomSetpA, Xq.
Hint: A function A √ë X points each element of A to an element of X. When would
there be the same number of ways to do that as there are elements of of X?
‚ô¶
Solution 2.1.2.20.
Let A ‚Äú tu. Then to point each element of A to an element of X, one must simply
point  to an element of X.
The set of ways to do that can be put in one-to-one
correspondence with the set of elements of X. For example, if X ‚Äú t1, 2, 3u, then  √û√ë 3
is a function A √ë X representing the element 3 P X. See Notation 2.1.2.9.
‚ô¶
Notation 2.1.2.21. For any natural number n P N, deÔ¨Åne a set
n :‚Äú t1, 2, 3, . . . , nu.
(2.4)
We call n the numeral set of size n. So, in particular, 2 ‚Äú t1, 2u, 1 ‚Äú t1u, and 0 ‚Äú H.
Let A be any set. A function f : n √ë A can be written as a length n sequence
f ‚Äú pfp1q, fp2q, . . . , fpnqq.
(2.5)
We call this the sequence notation for f.
Exercise 2.1.2.22.
a. Let A ‚Äú ta, b, c, du. If f : 10 √ë A is given in sequence notation by pa, b, c, c, b, a, d, d, a, bq,
what is fp4q?
b. Let s: 7 √ë N be given by spiq ‚Äú i2. Write s in sequence notation.
‚ô¶

22
CHAPTER 2. THE CATEGORY OF SETS
Solution 2.1.2.22.
a. c
b. p1, 4, 9, 16, 25, 36, 49q
‚ô¶
DeÔ¨Ånition 2.1.2.23 (Cardinality of Ô¨Ånite sets). Let A be a set and n P N a natural
number. We say that A has cardinality n, denoted
|A| ‚Äú n,
if there exists an isomorphism of sets A ‚Äì n. If there exists some n P N such that A has
cardinality n, then we say that A is Ô¨Ånite. Otherwise, we say that A is inÔ¨Ånite and write
|A| ƒõ 8.
Exercise 2.1.2.24.
a. Let A ‚Äú t5, 6, 7u. What is |A|?
b. What is |t1, 1, 2, 3, 5u|?
c. What is |N|?
d. What is |tn P N | n ƒè 5u|?
‚ô¶
Solution 2.1.2.24.
a. |5, 6, 7| ‚Äú 3.
b. |t1, 1, 2, 3, 5u| ‚Äú 4. As explained in Solution 2.1.2.8, a set contains each of its elements
only once. So we have t1, 1, 2, 3, 5u ‚Äú t1, 2, 3, 5u, which has cardinality 4.
c. |N| ƒõ 8.
d. |tn P N | n ƒè 5u| ‚Äú |t0, 1, 2, 3, 4, 5u| ‚Äú 6.
‚ô¶
We will see in Corollary 3.4.5.6 that for any m, n P N, there is an isomorphism m ‚Äì n
if and only if m ‚Äú n. So if we Ô¨Ånd that A has cardinality m and that A has cardinality
n, then m ‚Äú n.

2.2. COMMUTATIVE DIAGRAMS
23
Proposition 2.1.2.25. Let A and B be Ô¨Ånite sets. If there is an isomorphism of sets
f : A √ë B, then the two sets have the same cardinality, |A| ‚Äú |B|.
Proof. If f : A √ë B is an isomorphism and B ‚Äì n, then A ‚Äì n because the composition
of two isomorphisms is an isomorphism.
‚ñ°
2.2
Commutative diagrams
At this point it is diÔ¨Écult to precisely deÔ¨Åne diagrams or commutative diagrams in
general, but we can get a heuristic idea.5 Consider the following picture:
A
f

h

B
g

C
(2.6)
We say this is a diagram of sets if each of A, B, C is a set and each of f, g, h is a function.
We say this diagram commutes if g Àù f ‚Äú h. In this case we refer to it as a commutative
triangle of sets, or, more generally, as a commutative diagram of sets.
Application 2.2.1.1. In its most basic form, the central dogma of molecular biology is that
DNA codes for RNA codes for protein. That is, there is a function from DNA triplets to
RNA triplets and a function from RNA triplets to amino acids. But sometimes we just
want to discuss the translation from DNA to amino acids, and this is the composite of
the other two. The following commutative diagram is a picture of this fact
DNA

	
RNA

AA
‚ô¶‚ô¶
Consider the following picture:
A
f

h

B
g

C
i
 D
5Commutative diagrams are precisely deÔ¨Åned in Section 6.1.2.

24
CHAPTER 2. THE CATEGORY OF SETS
We say this is a diagram of sets if each of A, B, C, D is a set and each of f, g, h, i is a
function. We say this diagram commutes if g Àù f ‚Äú i Àù h. In this case we refer to it as a
commutative square of sets. More generally, it is a commutative diagram of sets.
Application 2.2.1.2. Given a physical system S, there may be two mathematical ap-
proaches f : S √ë A and g: S √ë B that can be applied to it. Either of those results in a
prediction of the same sort, f 1 : A √ë P and g1 : B √ë P. For example, in mechanics we
can use either the Lagrangian approach or the Hamiltonian approach to predict future
states. To say that the diagram
S


A

B
 P
commutes would say that these approaches give the same result.
‚ô¶‚ô¶
Note that diagram (2.6) is considered to be the same diagram as each of the following:
A
f

h

B
g

C
A
f

h

B
g
 C
B
g

C
A
h

f

In all these we have h ‚Äú g Àù f, or in diagrammatic order, h ‚Äú f; g.
2.3
Ologs
In this book I ground the mathematical ideas in applications whenever possible.
To
that end I introduce ologs, which serve as a bridge between mathematics and various
conceptual landscapes. The following material is taken from Spivak and Kent [43], an

2.3. OLOGS
25
introduction to ologs.
D
an amino acid
found in dairy
is

A
arginine
‚úì
‚úì
has

is

is

E
an electrically-
charged side
chain
is

X
an amino acid
has

has

has

R
a side chain
N
an amine group
C
a carboxylic acid
(2.7)
2.3.1
Types
A type is an abstract concept, a distinction the author has made. Each type is represented
as a box containing a singular indeÔ¨Ånite noun phrase. Each of the following four boxes
is a type:
a man
an automobile
a pair pa, wq, where w is
a woman and a is an au-
tomobile
a pair pa, wq, where w is
a woman and a is a blue
automobile owned by w
(2.8)
Each of the four boxes in (2.8) represents a type of thing, a whole class of things,
and the label on that box is what one should call each example of that class.
Thus
‚åúa man‚åùdoes not represent a single man but the set of men, each example of which
is called ‚Äúa man.‚Äù Similarly, the bottom right box represents an abstract type of thing,
which probably has more than a million examples, but the label on the box indicates the
common name for each such example.
Typographical problems emerge when writing a text box in a line of text, e.g., the
text box a man seems out of place, and the more in-line text boxes there are, the worse
it gets. To remedy this, I denote types that occur in a line of text with corner symbols;
e.g., I write ‚åúa man‚åùinstead of a man .

26
CHAPTER 2. THE CATEGORY OF SETS
2.3.1.1
Types with compound structures
Many types have compound structures, i.e., they are composed of smaller units. Examples
include
a man and
a woman
a food portion f and
a child c such that c
ate all of f
a triple pp, a, jq, where p
is a paper, a is an author
of p, and j is a journal in
which p was published
(2.9)
It is good practice to declare the variables in a compound type, as in the last two cases
of (2.9). In other words, it is preferable to replace the Ô¨Årst box in (2.9) with something
like
a man m and
a woman w
or
a pair pm, wq,
where m is a man
and w is a woman
so that the variables pm, wq are clear.
Rules of good practice 2.3.1.2. A type is presented as a text box. The text in that box
should
(i) begin with the word a or an;
(ii) refer to a distinction made and recognizable by the olog‚Äôs author;
(iii) refer to a distinction for which instances can be documented;
(iv) be the common name that each instance of that distinction can be called; and
(v) declare all variables in a compound structure.
The Ô¨Årst, second, third, and fourth rules ensure that the class of things represented by
each box appears to the author to be a well deÔ¨Åned set, and that the class is appropriately
named. The Ô¨Åfth rule encourages good readability of arrows (see Section 2.3.2).
I do not always follow the rules of good practice throughout this book. I think of
these rules being as followed ‚Äúin the background,‚Äù but I have nicknamed various boxes.
So ‚åúSteve‚åùmay stand as a nickname for ‚åúa thing classiÔ¨Åed as Steve‚åùand ‚åúarginine‚åùas
a nickname for ‚åúa molecule of arginine‚åù. However, one should always be able to rename
each type according to the rules of good practice.

2.3. OLOGS
27
2.3.2
Aspects
An aspect of a thing x is a way of viewing it, a particular way in which x can be regarded
or measured. For example, a woman can be regarded as a person; hence ‚Äúbeing a person‚Äù
is an aspect of a woman. A molecule has a molecular mass (say in daltons), so ‚Äúhaving
a molecular mass‚Äù is an aspect of a molecule. In other words, when it comes to ologs,
the word aspect simply means function. The domain A of the function f : A √ë B is the
thing we are measuring, and the codomain is the set of possible answers or results of the
measurement.
a woman
is
 a person
(2.10)
a molecule
has as molecular mass (Da)  a positive real number
(2.11)
So for the arrow in (2.10), the domain is the set of women (a set with perhaps 3 billion
elements); the codomain is the set of persons (a set with perhaps 6 billion elements). We
can imagine drawing an arrow from each dot in the ‚Äúwoman‚Äù set to a unique dot in the
‚Äúperson‚Äù set, just as in Figure 2.2. No woman points to two diÔ¨Äerent people nor to zero
people‚Äîeach woman is exactly one person‚Äîso the rules for a function are satisÔ¨Åed. Let
us now concentrate brieÔ¨Çy on the arrow in (2.11). The domain is the set of molecules,
the codomain is the set RƒÖ0 of positive real numbers. We can imagine drawing an arrow
from each dot in the ‚Äúmolecule‚Äù set to a single dot in the ‚Äúpositive real number‚Äù set. No
molecule points to two diÔ¨Äerent masses, nor can a molecule have no mass: each molecule
has exactly one mass. Note, however, that two diÔ¨Äerent molecules can point to the same
mass.
2.3.2.1
Invalid aspects
To be valid an aspect must be a functional relationship. Arrows may on their face appear
to be aspects, but on closer inspection they are not functional (and hence not valid as
aspects).
Consider the following two arrows:
a person
has  a child
(2.12*)
a mechanical pencil
uses  a piece of lead
(2.13*)

28
CHAPTER 2. THE CATEGORY OF SETS
A person may have no children or may have more than one child, so the Ô¨Årst arrow is
invalid: it is not a function. Similarly, if one drew an arrow from each mechanical pencil
to each piece of lead it uses, one would not have a function.
Warning 2.3.2.2. The author of an olog has a worldview, some fragment of which is
captured in the olog. When person A examines the olog of person B, person A may or
may not agree with it. For example, person B may have the following olog
a marriage
includes

includes

a man
a woman
,
which associates to each marriage a man and a woman. Person A may take the position
that some marriages involve two men or two women and thus see B‚Äôs olog as wrong.
Such disputes are not ‚Äúproblems‚Äù with either A‚Äôs olog or B‚Äôs olog; they are discrepancies
between worldviews.
Hence, a reader R may see an olog in this book and notice a
discrepancy between R‚Äôs worldview and my own, but this is not a problem with the olog.
Rules are enforced to ensure that an olog is structurally sound, not to ensure that it
‚Äúcorrectly reÔ¨Çects reality,‚Äù since worldviews can diÔ¨Äer.
Consider the aspect ‚åúan object‚åù
has
√ù√ù√ù√ë ‚åúa weight‚åù.
At some point in history, this
would have been considered a valid function.
Now we know that the same object
would have a diÔ¨Äerent weight on the moon than it has on earth.
Thus, as world-
views change, we often need to add more information to an olog.
Even the validity
of ‚åúan object on earth‚åù
has
√ù√ù√ù√ë ‚åúa weight‚åùis questionable, e.g., if I am considered to be
the same object on earth before and after I eat Thanksgiving dinner. However, to build
a model we need to choose a level of granularity and try to stay within it, or the whole
model would evaporate into the nothingness of truth. Any level of granularity is called
a stereotype; e.g., we stereotype objects on earth by saying they each have a weight. A
stereotype is a lie, more politely a conceptual simpliÔ¨Åcation, that is convenient for the
way we want to do business.
Remark 2.3.2.3. In keeping with Warning 2.3.2.2, the arrows in (2.12*) and (2.13*) may
not be wrong but simply reÔ¨Çect that the author has an idiosyncratic worldview or vo-
cabulary. Maybe the author believes that every mechanical pencil uses exactly one piece
of lead. If this is so, then ‚åúa mechanical pencil‚åù
uses
√ù√ù√ù√ë ‚åúa piece of lead‚åùis indeed a valid
aspect. Similarly, suppose the author meant to say that each person was once a child,
or that a person has an inner child. Since every person has one and only one inner child
(according to the author), the map ‚åúa person‚åù
has as inner child
√ù√ù√ù√ù√ù√ù√ù√ù√ù√ù√ù√ù√ë ‚åúa child‚åùis a valid as-

2.3. OLOGS
29
pect. We cannot fault the olog for its author‚Äôs view, but note that we have changed the
name of the label to make the intention more explicit.
2.3.2.4
Reading aspects and paths as English phrases
Each arrow (aspect) X
f√ù√ë Y can be read by Ô¨Årst reading the label on its source box X,
then the label on the arrow f, and Ô¨Ånally the label on its target box Y . For example, the
arrow
a book
has as Ô¨Årst author
 a person
(2.14)
is read ‚Äúa book has as Ô¨Årst author a person.‚Äù
Remark 2.3.2.5. Note that the map in (2.14) is a valid aspect, but a similarly benign-
looking map ‚åúa book‚åù
has as author
√ù√ù√ù√ù√ù√ù√ù√ù√ù√ë ‚åúa person‚åùwould not be valid, because it is not
functional.
When creating an olog, one must be vigilant about this type of mistake
because it is easy to miss, and it can corrupt the olog.
Sometimes the label on an arrow can be shortened or dropped altogether if it is obvious
from context (see Section 2.3.3). Here is a common example from the way I write ologs.
A
a pair px, yq, where
x and y are integers
x

y

B
an integer
B
an integer
(2.15)
Neither arrow is readable by the preceding protocol (e.g., ‚Äúa pair px, yq, where x and y
are integers x an integer‚Äù is not an English sentence), and yet it is clear what each map
means. For example, given p8, 11q in A, arrow x would yield 8 and arrow y would yield
11. The label x can be thought of as a nickname for the full name ‚Äúyields as the value of
x,‚Äù and similarly for y. I do not generally use the full name, so as not to clutter the olog.
One can also read paths through an olog by inserting the word which (or who) after
each intermediate box. For example, olog (2.16) has two paths of length 3 (counting

30
CHAPTER 2. THE CATEGORY OF SETS
arrows in a chain):
a child
is
 a person
has as parents

has as birthday

a pair pw, mq,
where w is a
woman and m
is a man
w
 a woman
a date
includes  a year
(2.16)
The top path is read ‚Äúa child is a person, who has as parents a pair pw, mq, where w is
a woman and m is a man, which yields, as the value of w, a woman.‚Äù The reader should
read and understand the content of the bottom path, which associates to every child a
year.
2.3.2.6
Converting nonfunctional relationships to aspects
There are many relationships that are not functional, and these cannot be considered
aspects. Often the word has indicates a relationship‚Äîsometimes it is functional, as in
‚åúa person‚åù
has
√ù√ù√ù√ë ‚åúa stomach‚åù, and sometimes it is not, as in ‚åúa father‚åù
has
√ù√ù√ù√ë ‚åúa child‚åù.
Clearly, a father may have more than one child. This one is easily Ô¨Åxed by realizing that
the arrow should go the other way: there is a function ‚åúa child‚åù
has
√ù√ù√ù√ë ‚åúa father‚åù.
What about ‚åúa person‚åù
owns
√ù√ù√ù√ù√ë ‚åúa car‚åù. Again, a person may own no cars or more
than one car, but this time a car can be owned by more than one person too. A quick
Ô¨Åx would be to replace it by ‚åúa person‚åù
owns
√ù√ù√ù√ù√ë ‚åúa set of cars‚åù. This is okay, but the
relationship between ‚åúa car‚åùand ‚åúa set of cars‚åùthen becomes an issue to deal with later.
There is another way to indicate such nonfunctional relationships. In this case it would
look like this:
a pair pp, cq, where
p is a person, c is a
car, and p owns c.
p

c

a person
a car

2.3. OLOGS
31
This setup will ensure that everything is properly organized. In general, relationships
can involve more than two types, and in olog form looks like this:
R



A1
A2
¬® ¬® ¬®
An
For example,
R
a sequence pp, a, jq, where
p is a paper, a is an author
of p, and j is a journal in
which p was published
p

a

j

A1
a paper
A2
an author
A3
a journal
Exercise 2.3.2.7.
On page 27, the arrow in (2.12*) was indicated as an invalid aspect:
a person
has  a child
(2.12*)
Create a valid olog that captures the parent-child relationship; your olog should still have
boxes ‚åúa person‚åùand ‚åúa child‚åùbut may have an additional box.
‚ô¶

32
CHAPTER 2. THE CATEGORY OF SETS
Solution 2.3.2.7.
a pair pp, cq, where c is a
child, p is a person, and
p is the parent of c
p

c

a person
a child
‚ô¶
Rules of good practice 2.3.2.8. An aspect is presented as a labeled arrow pointing from a
source box to a target box. The arrow label text should
(i) begin with a verb;
(ii) yield an English sentence, when the source box text followed by the arrow text
followed by the target box text is read;
(iii) refer to a functional relationship: each instance of the source type should give rise
to a speciÔ¨Åc instance of the target type;
(iv) constitute a useful description of that functional relationship.
2.3.3
Facts
In this section I discuss facts, by which I mean path equivalences in an olog. It is the
notion of path equivalences that makes category theory so powerful.
A path in an olog is a head-to-tail sequence of arrows. That is, any path starts at some
box B0, then follows an arrow emanating from B0 (moving in the appropriate direction),
at which point it lands at another box B1, then follows any arrow emanating from B1,
and so on, eventually landing at a box Bn and stopping there. The number of arrows is
the length of the path. So a path of length 1 is just an arrow, and a path of length 0 is
just a box. We call B0 the source and Bn the target of the path.
Given an olog, its author may want to declare that two paths are equivalent. For

2.3. OLOGS
33
example, consider the two paths from A to C in the olog
A
a person
has as parents 
has as mother

B
a pair pw, mq,
where w is a
woman and
m is a man
‚úì
yields as w

C
a woman
(2.17)
We know as English speakers that a woman parent is called a mother, so these two paths
A √ë C should be equivalent. A mathematical way to say this is that the triangle in olog
(2.17) commutes. That is, path equivalences are simply commutative diagrams, as in
Section 2.2. In the preceding example we concisely say ‚Äúa woman parent is equivalent to
a mother.‚Äù We declare this by deÔ¨Åning the diagonal map in (2.17) to be the composition
of the horizontal map and the vertical map.
I generally prefer to indicate a commutative diagram by drawing a check mark, ‚úì,
in the region bounded by the two paths, as in olog (2.17). Sometimes, however, one
cannot do this unambiguously on the two-dimensional page. In such a case I indicate
the commutative diagram (fact) by writing an equation. For example, to say that the
diagram
A
f

h

B
g

C
i
 D
commutes, we could either draw a check mark inside the square or write the equation
Arf, gs ¬ª Arh, is
above it.6 Either way, it means that starting from A, ‚Äúdoing f, then g‚Äù is equivalent to
‚Äúdoing h, then i.‚Äù
6We deÔ¨Åned function composition in Section 2.1.2, but here we are using a diÔ¨Äerent notation. There
we used classical order, and our path equivalence would be written g Àù f ‚Äú i Àù h. As discussed in Remark
2.1.2.11, category theorists and others often prefer the diagrammatic order for writing compositions,
which is f; g ‚Äú h; i. For ologs, we roughly follow the latter because it makes for better English sentences,
and for the same reason, we add the source object to the equation, writing Arf, gs ¬ª Arh, is.

34
CHAPTER 2. THE CATEGORY OF SETS
Here is another example:
a DNA sequence
is transcribed to 
codes for

an RNA sequence
‚úì
is translated to

a protein
Note how this diagram gives us the established terminology for the various ways in which
DNA, RNA, and protein are related in this context.
Exercise 2.3.3.1.
Create an olog for human nuclear biological families that includes the concepts of
person, man, woman, parent, father, mother, and child. Make sure to label all the arrows
and that each arrow indicates a valid aspect in the sense of Section 2.3.2.1. Indicate with
check marks (‚úì) the diagrams that are intended to commute. If the 2-dimensionality of
the page prevents a check mark from being unambiguous, indicate the intended commu-
tativity with an equation.
‚ô¶
Solution 2.3.3.1.
M
a mother
is

is

C
a child
is

has

has

F
a father
is

is

W
a woman
‚úì
is

M1
a man
is

‚úì
P
a person
P 1
a parent
is

Note that neither of the two triangles from child to person commute. To say that they
did commute would be to say that ‚Äúa child and its mother are the same person‚Äù and that
‚Äúa child and its father are the same person.‚Äù
‚ô¶

2.3. OLOGS
35
Example 2.3.3.2 (Noncommuting diagram). In my conception of the world, the following
diagram does not commute:
a person
has as father 
lives in

a man
lives in

a city
(2.18)
The noncommutativity of diagram (2.18) does not imply that no person lives in the same
city as his or her father. Rather it implies that it is not the case that every person lives
in the same city as his or her father.
Exercise 2.3.3.3.
Create an olog about a scientiÔ¨Åc subject, preferably one you think about often. The
olog should have at least Ô¨Åve boxes, Ô¨Åve arrows, and one commutative diagram.
‚ô¶
Solution 2.3.3.3.
a
word
w
in
an
un-
ambiguous
sentence
‚úì
yields, with W 1 and W
as the spaces
of possible meanings of w respectively in
context and out of context

is

a pair pW 1, Wq of
spaces,
where
W 1
is a connected sub-
space of W
is

a word w in a
sentence
‚úì
yields, with W 1 and W
as the spaces
of possible meanings of w respectively in
context and out of context

is

a pair pW 1, Wq of
spaces, where W 1 is
a subspace of W
W

W 1

a word
has as possible meanings
 a space of meanings

36
CHAPTER 2. THE CATEGORY OF SETS
To be clear, the check mark in the lower half of the diagram indicates that the square
including W commutes; the square that includes W 1 does not. The reason is that the
space of possible deÔ¨Ånitions for a word includes the meanings for that word in all contexts.
The space of deÔ¨Ånitions for a word in context is smaller than the space of deÔ¨Ånitions for
a word taken out of context, because out of context the meaning of a word is more
ambiguous.
In my conception, a word has a space rather than simply a set of meanings. For
example, consider the sentence, ‚ÄúHe wore a large hat.‚Äù Here, the word large has a space
of meanings, though I might say that the space is connected in that the meaning of large
is Ô¨Çuid but not ambiguous. On the other hand, in the ambiguous sentence, ‚ÄúKids make
nutritious snacks,‚Äù the word make has two disconnected spaces of meanings: either the
kids assemble snacks or they are themselves considered to be snacks.
‚ô¶
2.3.3.4
A formula for writing facts as English
Every fact consists of two paths, say, P and Q, that are to be declared equivalent. The
paths P and Q will necessarily have the same source, say, s, and target, say, t, but their
lengths may be diÔ¨Äerent, say, m and n respectively.7 We draw these paths as
P :
a0‚Äús
‚Äö
f1
 a1‚Äö
f2  a2‚Äö
f3  ¬® ¬® ¬®
fm¬¥1 am¬¥1
‚Äö
fm  am‚Äút
‚Äö
(2.19)
Q :
b0‚Äús
‚Äö
g1
 b1‚Äö
g2
 b2‚Äö
g3  ¬® ¬® ¬®
gn¬¥1  bn¬¥1
‚Äö
gn  bn‚Äút
‚Äö
Every part ‚Ñìof an olog (i.e., every box and every arrow) has an associated English phrase,
which we write as xx‚Ñìyy. Using a dummy variable x, we can convert a fact into English
too. The following general formula may be a bit diÔ¨Écult to understand (see Example
2.3.3.5). The fact P ¬ª Q from (2.19) can be Englished as follows:
(2.20)
Given x, xxsyy consider the following.
We know that x is xxsyy,
which xxf1yy xxa1yy, which xxf2yy xxa2yy, which . . . xxfm¬¥1yy xxam¬¥1yy, which
xxfmyy xxtyy,
that we call Ppxq.
We also know that x is xxsyy,
which xxg1yy xxb1yy, which xxg2yy xxb2yy, which . . . xxgn¬¥1yy xxbn¬¥1yy, which xxgnyy
xxtyy,
that we call Qpxq.
Fact: Whenever x is xxsyy, we will have Ppxq ‚Äú Qpxq.
7If the source equals the target, s ‚Äú t, then it is possible to have m ‚Äú 0 or n ‚Äú 0, and the ideas that
follow still make sense.

2.3. OLOGS
37
Example 2.3.3.5. Consider the olog
A
a person
has

lives in

B
an address
‚úì
is in

C
a city
(2.21)
To put the fact that diagram (2.21) commutes into English, we Ô¨Årst English the two
paths: F=‚Äúa person has an address which is in a city‚Äù and G=‚Äúa person lives in a city.‚Äù
The source of both is s = ‚Äúa person‚Äù and the target of both is t = ‚Äúa city.‚Äù Write:
Given x, a person, consider the following.
We know that x is a person,
who has an address, which is in a city,
that we call Ppxq.
We also know that x is a person,
who lives in a city
that we call Qpxq.
Fact: Whenever x is a person, we will have Ppxq ‚Äú Qpxq.
More concisely, one reads olog 2.21 as
A person x has an address, which is in a city, and this is the city x lives in.
Exercise 2.3.3.6.
This olog was taken from Spivak [38].
N
a phone number
has

C
an area code
‚úì
corresponds to

OLP
an operational land-
line phone
is assigned

is

P
a physical phone
is currently
located in

R
a region
(2.22)
It says that a landline phone is physically located in the region to which its phone number
is assigned. Translate this fact into English using the formula from (2.20).
‚ô¶

38
CHAPTER 2. THE CATEGORY OF SETS
Solution 2.3.3.6.
Given x, an operational landline phone, consider the following.
We know that x is an operational landline phone,
which is assigned a phone number, which has an area code,
which corresponds to a region
that we call Ppxq.
We also know that x is an operational landline phone,
which is a physical phone, which is currently located in a region
that we call Qpxq.
Fact: Whenever x is an operational landline phone, we will have
Ppxq ‚Äú Qpxq.
‚ô¶
Exercise 2.3.3.7.
In olog (2.22), suppose that the box ‚åúan operational landline phone‚åùis replaced with
the box ‚åúan operational cell phone‚åù. Would the diagram still commute?
‚ô¶
Solution 2.3.3.7.
No, it would not commute. A cell phone is assigned a phone number, which has an
area code, which corresponds to a region. However, the phone as a physical object can
be operational even if it is not currently located in that region.
‚ô¶
2.3.3.8
Images
This section discusses a speciÔ¨Åc kind of fact, generated by any aspect. Recall that every
function has an image (2.3), meaning the subset of elements in the codomain that are
‚Äúhit‚Äù by the function. For example, the function f : Z √ë Z given by fpxq ‚Äú 2 Àö x: Z √ë Z
has as image the set of all even numbers.
Similarly, the set of mothers arises as the image of the ‚Äúhas as mother‚Äù function:
P
a person
has
	
f : P √ëP
has as mother

P
a person
M‚Äúimpfq
a mother
is

‚úì

2.3. OLOGS
39
Exercise 2.3.3.9.
For each of the following types, write a function for which it is the image, or write
‚Äúnot clearly useful as an image type.‚Äù
a. ‚åúa book‚åù
b. ‚åúa material that has been fabricated by a working process of type T‚åù
c. ‚åúa bicycle owner‚åù
d. ‚åúa child‚åù
e. ‚åúa used book‚åù
f. ‚åúa primary residence‚åù
‚ô¶
Solution 2.3.3.9.
Every set X is the image of the identity function idX : X √ë X, but this does not fulÔ¨Åll
the purpose of this exercise, which is to help the reader understand images of functions
and how they are useful in ologs. The following solutions reÔ¨Çect only my aesthetic about
what is useful‚Äîreaders‚Äô answers may be diÔ¨Äerent and yet correct.
a. Not clearly useful as an image type.
b. This is the image of the aspect
a working process
of type T
when executed fabricates a material
c. This is the image of the aspect
a bicycle
is owned by  a person
assuming every bicycle is owned by one person.
d. Not clearly useful as an image type.
e. Not clearly useful as an image type.
f. This is the image of the aspect
a person
has as primary  a residence

40
CHAPTER 2. THE CATEGORY OF SETS
assuming each person has a primary residence.
The point is that the notion of image creates new types out of existing aspects, or func-
tions. This connection puts the function Ô¨Årst and derives the type from it as its image. A
bicycle owner is not a type of person until we have the function that assigns ownership.
‚ô¶

Chapter 3
Fundamental Considerations in
Set
In this chapter we continue to pursue an understanding of sets. We begin by examining
how to combine sets in various ways to get new sets. To that end, products and coproducts
are introduced, and then more complex limits and colimits, with the aim of conveying
a sense of their universal properties. The chapter ends with some additional interesting
constructions in Set.
3.1
Products and coproducts
This section introduces two concepts that are likely to be familiar, although perhaps not
by their category-theoretic names: product and coproduct. Each is an example of a large
class of ideas that exist far beyond the realm of sets (see Section 6.1.1).
3.1.1
Products
DeÔ¨Ånition 3.1.1.1. Let X and Y be sets. The product of X and Y , denoted X ÀÜ Y , is
deÔ¨Åned as the set of ordered pairs px, yq, where x P X and y P Y . Symbolically,
X ÀÜ Y ‚Äú tpx, yq | x P X, y P Y u.
41

42
CHAPTER 3. FUNDAMENTAL CONSIDERATIONS IN SET
There are two natural projection functions, œÄ1 : X ÀÜ Y √ë X and œÄ2 : X ÀÜ Y √ë Y .
X ÀÜ Y
œÄ2

œÄ1

X
Y
Example 3.1.1.2 (Grid of dots). Let X ‚Äú t1, 2, 3, 4, 5, 6u and Y ‚Äú t‚ô£, ‚ô¶, ‚ô•, ‚ô†u. Then we
can draw X ÀÜ Y as a 6 by 4 grid of dots, and the projections as projections
X ÀÜ Y
p1,‚ô£q
‚Äö
p2,‚ô£q
‚Äö
p3,‚ô£q
‚Äö
p4,‚ô£q
‚Äö
p5,‚ô£q
‚Äö
p6,‚ô£q
‚Äö
p1,‚ô¶q
‚Äö
p2,‚ô¶q
‚Äö
p3,‚ô¶q
‚Äö
p4,‚ô¶q
‚Äö
p5,‚ô¶q
‚Äö
p6,‚ô¶q
‚Äö
p1,‚ô•q
‚Äö
p2,‚ô•q
‚Äö
p3,‚ô•q
‚Äö
p4,‚ô•q
‚Äö
p5,‚ô•q
‚Äö
p6,‚ô•q
‚Äö
p1,‚ô†q
‚Äö
p2,‚ô†q
‚Äö
p3,‚ô†q
‚Äö
p4,‚ô†q
‚Äö
p5,‚ô†q
‚Äö
p6,‚ô†q
‚Äö
œÄ2

Y
‚ô£‚Äö
‚ô¶‚Äö
‚ô•‚Äö
‚ô†‚Äö
(3.1)
œÄ1

1‚Äö
2‚Äö
3‚Äö
4‚Äö
5‚Äö
6‚Äö
X
Application 3.1.1.3. A traditional (Mendelian) way to predict the genotype of oÔ¨Äspring
based on the genotype of its parents is by the use of Punnett squares. If F is the set of
possible genotypes for the female parent, and M is the set of possible genotypes of the
male parent, then F ÀÜ M is drawn as a square, called a Punnett square, in which every
combination is drawn.
‚ô¶‚ô¶
Exercise 3.1.1.4.
How many elements does the set ta, b, c, du ÀÜ t1, 2, 3u have?
‚ô¶

3.1. PRODUCTS AND COPRODUCTS
43
Solution 3.1.1.4.
4 ÀÜ 3 ‚Äú 12.
‚ô¶
Application 3.1.1.5. Suppose we are conducting experiments about the mechanical prop-
erties of materials, as in Application 2.1.2.2. For each material sample we will produce
multiple data points in the set ‚åúextension‚åùÀÜ ‚åúforce‚åù‚Äì R ÀÜ R.
‚ô¶‚ô¶
Remark 3.1.1.6. It is possible to take the product of more than two sets as well. For
example, if A, B, and C are sets, then A ÀÜ B ÀÜ C is the set of triples
A ÀÜ B ÀÜ C :‚Äú tpa, b, cq | a P A, b P B, c P Cu.
This kind of generality is useful in understanding multiple dimensions, e.g., what
physicists mean by ten-dimensional space.
It comes under the heading of limits (see
Section 6.1.3).
Example 3.1.1.7. Let R be the set of real numbers. By R2 we mean R ÀÜ R. Similarly, for
any n P N, we deÔ¨Åne Rn to be the product of n copies of R.
According to Penrose [35], Aristotle seems to have conceived of space as something
like S :‚Äú R3 and of time as something like T :‚Äú R. Space-time, had he conceived of it,
would probably have been S ÀÜ T ‚Äì R4. He, of course, did not have access to this kind of
abstraction, which was probably due to Descartes. (The product X ÀÜ Y is often called
Cartesian product, in his honor.)
Exercise 3.1.1.8.
Let Z denote the set of integers, and let `: Z ÀÜ Z √ë Z denote the addition function
and ¬®: Z ÀÜ Z √ë Z denote the multiplication function. Which of the following diagrams
commute?
a.
Z ÀÜ Z ÀÜ Z
pa,b,cq√û√ëpa¬®b,a¬®cq

pa,b,cq√û√ëpa`b,cq

Z ÀÜ Z
px,yq√û√ëx`y

Z ÀÜ Z
px,yq√û√ëxy
 Z
b.
Z
x√û√ëpx,0q 
idZ

Z ÀÜ Z
pa,bq√û√ëa¬®b

Z

44
CHAPTER 3. FUNDAMENTAL CONSIDERATIONS IN SET
c.
Z
x√û√ëpx,1q 
idZ

Z ÀÜ Z
pa,bq√û√ëa¬®b

Z
‚ô¶
Solution 3.1.1.8.
a. This diagram does not commute because a ¬® b ` a ¬® c ‚Ä∞ pa ` bq ¬® c, at least for some
integers a, b, c P Z, e.g., a ‚Äú 0, b ‚Äú 1, c ‚Äú 1.
b. This diagram does not commute because x ¬® 0 ‚Ä∞ x, at least for some integers x P Z.
c. This diagram commutes. For every integer x P Z, we have x ¬® 1 ‚Äú x.
‚ô¶
3.1.1.9
Universal property for products
A universal property is an abstract quality that characterizes a given construction. For
example, the following proposition says that the product construction is characterized as
possessing a certain quality.
Proposition 3.1.1.10 (Universal property for product). Let X and Y be sets. For any
set A and functions f : A √ë X and g: A √ë Y , there exists a unique function A √ë X ÀÜY
such that the following diagram commutes:
X ÀÜ Y
œÄ1

œÄ2

X
Y
A
f

g
 
xf,gy

(3.2)
We say this function is induced by f and g, and we denote it
xf, gy: A √ë X ÀÜ Y,
where
xf, gypaq ‚Äú pfpaq, gpaqq.

3.1. PRODUCTS AND COPRODUCTS
45
That is, we have œÄ1 Àù xf, gy ‚Äú f and œÄ2 Àù xf, gy ‚Äú g, and xf, gy is the only function for
which that is so.
Proof. Suppose given f, g as in the proposition statement. To provide a function ‚Ñì: A √ë
X ÀÜY is equivalent to providing an element ‚Ñìpaq P X ÀÜY for each a P A. We need such a
function ‚Ñì‚Äú xf, gy, for which œÄ1 Àù xf, gy ‚Äú f and œÄ2 Àù xf, gy ‚Äú g. An element of X ÀÜ Y is
an ordered pair px, yq, and we can use xf, gypaq ‚Äú px, yq if and only if x ‚Äú œÄ1px, yq ‚Äú fpaq
and y ‚Äú œÄ2px, yq ‚Äú gpaq. So it is necessary and suÔ¨Écient to deÔ¨Åne
xf, gypaq :‚Äú pfpaq, gpaqq
for all a P A.
‚ñ°
Example 3.1.1.11 (Grid of dots, continued). It is important that the reader sees the
universal property for products as completely intuitive.
Recall that if X and Y are sets, say, of cardinalities |X| ‚Äú m and |Y | ‚Äú n respectively,
then X ÀÜ Y is an m ÀÜ n grid of dots, and it comes with two canonical projections
X
œÄ1
√ê√ù X ÀÜ Y
œÄ2
√ù√ë Y . These allow us to extract from every grid element z P X ÀÜ Y its
column œÄ1pzq P X and its row œÄ2pzq P Y .
Suppose that each person in a classroom picks an element of X and an element of Y .
Thus we have functions f : C √ë X and g: C √ë Y . But is not picking a column and a
row the same thing as picking an element in the grid? The two functions f and g induce
a unique function C √ë X ÀÜ Y . How does this function C √ë X ÀÜ Y compare with the
original functions f and g? The commutative diagram (3.2) sums up the connection.
Example 3.1.1.12. Let R be the set of real numbers, and let 0 P R be the origin. As in
Notation 2.1.2.9, it is represented by a function z : tu √ë R, with zpq ‚Äú 0. Thus we
can draw functions
tu
z

z

R
R
The universal property for products guarantees a function xz, zy: tu √ë R ÀÜ R, which
represents the origin in p0, 0q P R2.
Exercise 3.1.1.13.
For every set A there is some relationship between the following three sets:
HomSetpA, Xq,
HomSetpA, Y q,
and
HomSetpA, X ÀÜ Y q.

46
CHAPTER 3. FUNDAMENTAL CONSIDERATIONS IN SET
What is it?
Hint: This problem is somewhat recursive in that you will use products in your
formula.
‚ô¶
Solution 3.1.1.13.
There is an isomorphism
HomSetpA, X ÀÜ Y q ‚Äì
√ù√ë HomSetpA, Xq ÀÜ HomSetpA, Y q.
In an attempt to make this more concrete, suppose we have a height function from
the set P of people to the set Z of integers and a name function from the set of people
to the set S of strings. That is, we have an element of HomSetpP, Zq and an element of
HomSetpP, Sq. From this we get an element of HomSetpP, Zq ÀÜ HomSetpP, Sq. That is,
the two pieces of information combine into a single piece of information if we pack the
height and the name into a single datum, i.e., an element of Z ÀÜ S.
‚ô¶
Exercise 3.1.1.14.
a. Let X and Y be sets. Construct the swap map s: X ÀÜ Y √ë Y ÀÜ X using only the
universal property for products. If œÄ1 : X ÀÜY √ë X, œÄ2 : X ÀÜY √ë Y , p1 : Y ÀÜX √ë Y ,
and p2 : Y ÀÜ X √ë X are the projection functions, write s in terms of the symbols
œÄ1, œÄ2, p1, p2, Àù, and x , y.
b. Can you prove that s is an isomorphism using only the universal property for products?
‚ô¶
Solution 3.1.1.14.
a.
X ÀÜ Y
œÄ1

œÄ2
!
xœÄ2,œÄ1y

X
Y
Y ÀÜ X
p1
"
p2
#

3.1. PRODUCTS AND COPRODUCTS
47
b. Consider the map xp2, p1y: Y ÀÜX √ë X ÀÜY . Let s: X ÀÜY √ë X ÀÜY be the composite
xp2, p1y Àù xœÄ2, œÄ1y. We have œÄ1 Àù s ‚Äú œÄ1 by the following calculation:
œÄ1 Àù s ‚Äú œÄ1 Àù xp2, p1y Àù xœÄ2, œÄ1y
‚Äú p2 Àù xœÄ2, œÄ1y ‚Äú œÄ1,
and by a similar calculation, œÄ2 Àù s ‚Äú œÄ2. But we also have œÄ1 Àù idXÀÜY ‚Äú œÄ1 and
œÄ2 Àù idXÀÜY ‚Äú œÄ2.
Thus the universal property (Proposition 3.1.1.10) implies that
s ‚Äú idXÀÜY .
By similar reasoning, if t: Y ÀÜ X √ë Y ÀÜ X is the composite xœÄ2, œÄ1y Àù xp2, p1y, we
can show that t ‚Äú idY ÀÜX. By DeÔ¨Ånition 2.1.2.14, the functions s and t constitute an
isomorphism X ÀÜ Y √ë Y ÀÜ X.
‚ô¶
Example 3.1.1.15. Suppose given sets X, X1, Y, Y 1 and functions m: X √ë X1 and n: Y √ë
Y 1. We can use the universal property for products to construct a function s: X ÀÜ Y √ë
X1 ÀÜ Y 1.
The universal property (Proposition 3.1.1.10) says that to get a function from any set
A to X1 ÀÜ Y 1, we need two functions, namely, some f : A √ë X1 and some g: A √ë Y 1.
Here we want to use A :‚Äú X ÀÜ Y .
What we have readily available are the two projections œÄ1 : X ÀÜ Y √ë X and œÄ2 : X ÀÜ
Y √ë Y . But we also have m: X √ë X1 and n: Y √ë Y 1. Composing, we set f :‚Äú m Àù œÄ1
and g :‚Äú n Àù œÄ2.
X1 ÀÜ Y 1
œÄ1
1
$
œÄ1
2
!
X1
Y 1
X
m

Y
n

X ÀÜ Y
œÄ1
%
œÄ2

xf,gy

f
&
g
'
The dotted arrow is often called the product of m: X √ë X1 and n: Y √ë Y 1. Here it
is denoted xf, gy, but f and g were not given variables. Since writing xm Àù œÄ1, n Àù œÄ2y is
clunky notation, we instead denote this function
m ÀÜ n: X ÀÜ Y √ë X1 ÀÜ Y 1.

48
CHAPTER 3. FUNDAMENTAL CONSIDERATIONS IN SET
3.1.1.16
Ologging products
Given two objects c, d in an olog, there is a canonical label xxc ÀÜ dyy for their product
c ÀÜ d, written in terms of the labels xxcyy and xxdyy. Namely,
xxc ÀÜ dyy:=‚Äúa pair px, yq, where x is xxcyy and y is xxdyy.‚Äù
The projections c √ê c ÀÜ d √ë d can be labeled ‚Äúyields, as x,‚Äù and ‚Äúyields, as y,‚Äù respec-
tively.
Suppose that e is another object, and p: e √ë c and q: e √ë d are two arrows. By
the universal property for products (Proposition 3.1.1.10), p and q induce a unique arrow
e √ë c ÀÜ d, making the evident diagrams commute. This arrow can be labeled
‚Äúyields, insofar as it xxpyy xxcyy and xxqyy xxdyy,‚Äù .
Example 3.1.1.17. Every car owner owns at least one car, but there is no obvious function
‚åúa car owner‚åù√ë ‚åúa car‚åùbecause he or she may own more than one. One good choice
would be the car that the person drives most often, which can be called his or her primary
car. Also, given a person and a car, an economist could ask how much utility the person
would get out of the car. From all this we can put together the following olog involving
products:
O
a car owner
is

owns,
as
primary,
!
yields, insofar
as it is a person
and owns, as
primary, a car, 
‚úì
P ÀÜC
a
pair
px, yq,
where
x
is
a
person and y is
a car
yields, as x,
(
yields, as y,

has as associ-
ated utility

V
a dollar value
P
a person
C
a car
The composite map O √ë V tells us the utility a car owner gets out of their primary car.
3.1.2
Coproducts
We can characterize the coproduct of two sets with its own universal property.
DeÔ¨Ånition 3.1.2.1. Let X and Y be sets. The coproduct of X and Y , denoted X \ Y ,
is deÔ¨Åned as the disjoint union of X and Y , i.e., the set for which an element is either an

3.1. PRODUCTS AND COPRODUCTS
49
element of X or an element of Y . If something is an element of both X and Y , then we
include both copies, and distinguish between them, in X \ Y . See Example 3.1.2.2.
There are two natural inclusion functions, i1 : X √ë X \ Y and i2 : Y √ë X \ Y .
X
i1

Y
i2

X \ Y
(3.3)
Example 3.1.2.2. The coproduct of X :‚Äú ta, b, c, du and Y :‚Äú t1, 2, 3u is
X \ Y ‚Äì ta, b, c, d, 1, 2, 3u.
The coproduct of X and itself is
X \ X ‚Äì ta1, b1, c1, d1, a2, b2, c2, d2u.
The names of the elements in X \ Y are not so important. What is important are the
inclusion maps i1, i2 from (3.3), which ensure that we know where each element of X \Y
came from.
Example 3.1.2.3 (Airplane seats).
X
an economy-
class seat in
an airplane
is
)
Y
a Ô¨Årst-class
seat in an
airplane
is

X\Y
a seat in an
airplane
(3.4)
Exercise 3.1.2.4.
Would you say that ‚åúa phone‚åùis the coproduct of ‚åúa cell phone‚åùand ‚åúa landline
phone‚åù?
‚ô¶

50
CHAPTER 3. FUNDAMENTAL CONSIDERATIONS IN SET
Solution 3.1.2.4.
Let‚Äôs make the case that ‚åúa phone‚åùis the coproduct ‚åúa cell phone‚åù\‚åúa landline phone‚åù.
First, there is no overlap between cell phones and landline phones (nothing is both). But
is it true that every phone is either a cell phone or a landline? There used to be some-
thing called car phones, which were mobile in that they worked from any location but
were immobile in the sense that the said location had to be within a given car. So, if at
the time this solution is being read, there are phones that are neither landlines nor cell
phones, then the answer to this question is no. But if every phone is either a cell phone
or a landline, then the answer to this question is yes.
‚ô¶
Example 3.1.2.5 (Disjoint union of dots). Below, X and Y are sets, having six and four
elements respectively, and X \ Y is their coproduct, which has ten elements.
X \ Y
‚ô£‚Äö
1‚Äö
2‚Äö
3‚Äö
4‚Äö
5‚Äö
6‚Äö
‚ô¶‚Äö
‚ô•‚Äö
‚ô†‚Äö
i2

Y
‚ô£‚Äö
‚ô¶‚Äö
‚ô•‚Äö
‚ô†‚Äö
(3.5)
i1

1‚Äö
2‚Äö
3‚Äö
4‚Äö
5‚Äö
6‚Äö
X
3.1.2.6
Universal property for coproducts
Proposition 3.1.2.7 (Universal property for coproduct). Let X and Y be sets. For any
set A and functions f : X √ë A and g: Y √ë A, there exists a unique function X \Y √ë A

3.1. PRODUCTS AND COPRODUCTS
51
such that the following diagram commutes:
A
X
f
 
i1

Y
g

i2

X \ Y
#f
g

We say this function is induced by f and g, and we denote it 1
"
f
g : X \ Y √ë A.
That is, we have
"
f
g Àù i1 ‚Äú f and
"
f
g Àù i2 ‚Äú g, and
"
f
g is the only function for which
that is so.
Proof. Suppose given f, g as in the proposition statement. To provide a function ‚Ñì: X \
Y √ë A is equivalent to providing an element fpmq P A for each m P X \ Y . We need
such a function ‚Ñì‚Äú
"
f
g
such that
"
f
g Àù i1 ‚Äú f and
"
f
g Àù i2 ‚Äú g. But each element
m P X \ Y is either of the form i1x or i2y and cannot be of both forms. So we assign
"
f
g pmq ‚Äú
#
fpxq
if m ‚Äú i1x,
gpyq
if m ‚Äú i2y.
(3.6)
This assignment is necessary and suÔ¨Écient to make all relevant diagrams commute.
‚ñ°
Slogan 3.1.2.8.
Any time behavior is determined by cases, there is a coproduct involved.
1We are using a two-line symbol, which is a bit unusual. A certain function X \ Y √ë A is being
denoted by the symbol
"
f
g , called case notation. The reasoning for this will be clear from the proof,
especially (3.6).

52
CHAPTER 3. FUNDAMENTAL CONSIDERATIONS IN SET
Exercise 3.1.2.9.
Let f : Z √ë N be the function deÔ¨Åned by
fpnq ‚Äú
#
n
if n ƒõ 0,
¬¥n
if n ƒÉ 0.
a. What is the standard name for f?
b. In the terminology of Proposition 3.1.2.7, what are A, X, Y, and X \ Y ?
‚ô¶
Solution 3.1.2.9.
a. The standard name for f is absolute value, also written fpnq ‚Äú |n|.
b. Here A ‚Äú N, X ‚Äú tn P Z | n ƒõ 0u, Y ‚Äú tn P Z | n ƒÉ 0u, so we have a natural
isomorphism X \ Y ‚Äì Z.
‚ô¶
Application 3.1.2.10 (Piecewise deÔ¨Åned curves). In science, curves are often deÔ¨Åned or
considered piecewise. For example, in testing the mechanical properties of a material,
we might be interested in various regions of deformation, such as elastic, plastic, or
post-fracture. These are three intervals on which the material displays diÔ¨Äerent kinds of
properties.
For real numbers a ƒè b P R, let ra, bs :‚Äú tx P R | a ƒè x ƒè bu denote the closed
interval. Given a function ra, bs
f√ù√ë R and a function rc, ds
g√ù√ë R, the universal property
for coproducts implies that they extend uniquely to a function ra, bs \ rc, ds √ë R, which
will appear as a piecewise deÔ¨Åned curve,
"
f
g pxq ‚Äú
#
fpxq
if x P ra, bs,
gpxq
if x P rc, ds.
Often we are given a curve on ra, bs and another on rb, cs, where the two curves agree
at the point b. This situation is described by pushouts, which are mild generalizations of
coproducts (see Section 3.3.2).
‚ô¶‚ô¶
Example 3.1.2.11 (Airplane seats, continued). The universal property for coproducts says
the following. Any time we have a function X √ë A and a function Y √ë A, we get a unique

3.1. PRODUCTS AND COPRODUCTS
53
function X \ Y √ë A. For example, every economy-class seat in an airplane and every
Ô¨Årst-class seat in an airplane is actually in a particular airplane. Every economy-class
seat has a price, as does every Ô¨Årst-class seat.
A
a dollar Ô¨Ågure
X
an economy-
class seat in
an airplane
has as price
*
is

is in
+
X\Y
a seat in an
airplane
D!

D!

‚úì
‚úì
‚úì
‚úì
Y
a Ô¨Årst-class
seat in an
airplane
is

has as price
,
is in

B
an airplane
(3.7)
The universal property for coproducts formalizes the following intuitively obvious fact:
If we know how economy-class seats are priced and we know how Ô¨Årst-class
seats are priced, and if we know that every seat is either economy class or
Ô¨Årst class, then we automatically know how all seats are priced.
To say it another way (and using the other induced map),
If we keep track of which airplane every economy-class seat is in and we
keep track of which airplane every Ô¨Årst-class seat is in, and if we know that
every seat is either economy class or Ô¨Årst class, then we require no additional
tracking for any airplane seat whatsoever.
Exercise 3.1.2.12.
Write the universal property for coproduct, in terms of a relationship between the
following three sets:
HomSetpX, Aq,
HomSetpY, Aq,
and
HomSetpX \ Y, Aq.
‚ô¶
Solution 3.1.2.12.
HomSetpX \ Y, Aq ‚Äì
√ù√ë HomSetpX, Aq ÀÜ HomSetpY, Aq.

54
CHAPTER 3. FUNDAMENTAL CONSIDERATIONS IN SET
To assign an A value to each element of X \ Y , you can delegate responsibility: have
one person assign an A value to each element of X, and have another person assign an
A value to each element of Y . One function is equivalent to two.
‚ô¶
Example 3.1.2.13. In the following olog the types A and B are disjoint, so the coproduct
C ‚Äú A \ B is just the union.
A
a person
is

C‚ÄúA\B
a person or a cat
B
a cat
is

Example 3.1.2.14. In the following olog A and B are not disjoint, so care must be taken
to diÔ¨Äerentiate common elements.
A
an animal
that can Ô¨Çy
labeled ‚ÄúA‚Äù is 
C‚ÄúA\B
an animal that can Ô¨Çy
(labeled ‚ÄúA‚Äù) or an
animal that can swim
(labeled ‚ÄúB‚Äù)
B
an animal that
can swim
labeled ‚ÄúB‚Äù is

Since ducks can both swim and Ô¨Çy, each duck is found twice in C, once labeled ‚ÄúA‚Äù, a
Ô¨Çyer, and once labeled ‚ÄúB‚Äù, a swimmer. The types A and B are kept disjoint in C, which
justiÔ¨Åes the name disjoint union.
Exercise 3.1.2.15.
Following Section 3.1.1.16, devise a naming system for coproducts, the inclusions, and
the universal maps. Try it out by making an olog (involving coproducts) that discusses
the idea that both a .wav Ô¨Åle and an .mp3 Ô¨Åle can be played on a modern computer. Be
careful that your arrows are valid (see Section 2.3.2.1).
‚ô¶
Solution 3.1.2.15.
Given two objects c, d in an olog, there is a canonical label ‚Äúc\d‚Äù for their coproduct
c \ d, written in terms of the labels ‚Äúc‚Äù and ‚Äúd.‚Äù Namely,
xxc \ dyy :‚Äú ‚Äúxxcyy (indicated as being ‚Äúxxcyy‚Äù) or xxdyy (indicated as being ‚Äúxxdyy‚Äù).‚Äù
The inclusions c √ë c \ d √ê d can be labeled ‚Äúafter being tagged ‚Äúc‚Äù is‚Äù and ‚Äúafter being
tagged ‚Äúd‚Äù is‚Äù respectively.

3.2. FINITE LIMITS IN SET
55
For example,
A
an .mp3
Ô¨Åle
after being tagged
‚Äúan .mp3 Ô¨Åle‚Äù is

C‚ÄúA\B
an
.mp3
Ô¨Åle
(indi-
cated as being ‚Äúan
.mp3 Ô¨Åle‚Äù) or a .wav
Ô¨Åle (indicated as be-
ing ‚Äúa .wav Ô¨Åle‚Äù)
B
a .wav
Ô¨Åle
after being tagged
‚Äúa .wav Ô¨Åle‚Äù is

‚ô¶
3.2
Finite limits in Set
This section discusses limits of variously shaped diagrams of sets. This is made more
precise in Section 6.1.3, which discusses arbitrary limits in arbitrary categories.
3.2.1
Pullbacks
DeÔ¨Ånition 3.2.1.1 (Pullback). Suppose given the following diagram of sets and func-
tions:
Y
g

X
f
 Z
(3.8)
Its Ô¨Åber product is the set
X ÀÜZ Y :‚Äú tpx, z, yq | fpxq ‚Äú z ‚Äú gpyqu.
There are obvious projections œÄ1 : X ÀÜZ Y √ë X and œÄ2 : X ÀÜZ Y √ë Y (e.g., œÄ2px, z, yq ‚Äú
y). The following diagram commutes:
X ÀÜZ Y
‚åü
œÄ2

œÄ1

Y
g

X
f
 Z
(3.9)

56
CHAPTER 3. FUNDAMENTAL CONSIDERATIONS IN SET
Given the setup of diagram (3.8), we deÔ¨Åne a pullback of X and Y over Z to be any set
W for which we have an isomorphism W
‚Äì
√ù√ë X ÀÜZ Y . The corner symbol ‚åüin diagram
(3.9) indicates that X ÀÜZ Y is a pullback.
Exercise 3.2.1.2.
Let X, Y, Z be as drawn and f : X √ë Z and g: Y √ë Z the indicated functions.
z1 
Y 
y2 
y1 
Z 
z4 
z2 
z3 
X 
x2 
x1 
x3 
x
z1
z1
z1
z11
z1
z11
z1
x1
z3
x
x2
z2
z2
x
y3 
y4 
4
2
4
What is the Ô¨Åber product of the diagram X
f
√ù√ù√ù√ë Z
g
√ê√ù√ù√ù Y ?
‚ô¶
Solution 3.2.1.2.
It is the Ô¨Åve-element set
X ÀÜZ Y ‚Äú tpx1, z1, y1q, px2, z2, y2q, px2, z2, y4q, px3, z2, y2q, px3, z2, y4qu.
‚ô¶
Exercise 3.2.1.3.
a. Draw a set X with Ô¨Åve elements and a set Y with three elements. Color each element
of X and each element of Y red, blue, or green,2 and do so in a random-looking way.
Considering your coloring of X as a function X √ë C, where C ‚Äú tred, blue, greenu,
and similarly obtaining a function Y √ë C, draw the Ô¨Åber product X ÀÜC Y .
b. The universal property for products guarantees a function X ÀÜC Y √ë X ÀÜ Y , which
will be an injection. This means that the drawing you made of the Ô¨Åber product can
be embedded into the 5 ÀÜ 3 grid. Draw the grid and indicate this subset.
‚ô¶
2You may use shadings rather than coloring, if you prefer.

3.2. FINITE LIMITS IN SET
57
Solution 3.2.1.3.
a. Let X ‚Äú t1, 2, 3, 4, 5u and Y ‚Äú ta, b, cu. The Ô¨Åber product is shown in part (b).
b.
X ÀÜC Y
p1,aq
‚Äö
p2,aq
‚Äö
p4,aq
‚Äö
p5,bq
‚Äö
p1,cq
‚Äö
p2,cq
‚Äö
p4,cq
‚Äö
œÄ2

Y
a‚Äö
b‚Äö
c‚Äö
(3.10)
œÄ1

1‚Äö
2‚Äö
3‚Äö
4‚Äö
5‚Äö
X
Note that inside the set of X ÀÜ Y ‚Äú 15 possible px, yq pairs is the set of pairs that
agree on color‚Äîthis is X ÀÜC Y . The grid X ÀÜ Y is not drawn, but it includes the
drawn dots, X ÀÜC Y ƒé X ÀÜ Y , as well as eight nondrawn dots such as p3, aq, which
‚Äúcouldn‚Äôt agree on a color.‚Äù
‚ô¶
Remark 3.2.1.4. Some may prefer to denote the Ô¨Åber product in (3.8) by f ÀÜZ g rather
than X ÀÜZ Y .
The former is mathematically better notation, but human-readability
is often enhanced by the latter, which is also more common in the literature. We use
whichever is more convenient.
Exercise 3.2.1.5.
Let f : X √ë Z and g: Y √ë Z be functions.

58
CHAPTER 3. FUNDAMENTAL CONSIDERATIONS IN SET
a. Suppose that Y ‚Äú H; what can you say about X ÀÜZ Y ?
b. Suppose now that Y is any set but that Z has exactly one element; what can you say
about X ÀÜZ Y ?
‚ô¶
Solution 3.2.1.5.
a. If Y ‚Äú H, then X ÀÜZ Y ‚Äú H regardless of X, Y, Z, f, and g.
b. We always have that X ÀÜZ Y is the set of all triples px, z, yq, where x P X, y P Y, z P Z
and fpxq ‚Äú z ‚Äú gpyq. If Z has only one element, say, Z ‚Äú tu, then for all x P X
and y P Y , we have fpxq ‚Äú  ‚Äú gpyq. So X ÀÜtu Y ‚Äú tpx, , zq | x P X, y P Y u. But
this set is isomorphic to the set tpx, yq | x P X, y P Y u. In other words, if Z has one
element, then X ÀÜZ Y ‚Äì X ÀÜ Y . One way of seeing this is by looking at Exercise
3.2.1.3 and thinking about what happens when there is only one color.
‚ô¶
Exercise 3.2.1.6.
Let S ‚Äú R3, T ‚Äú R, and think of them as (Aristotelian) space and time, with the
origin in S ÀÜ T given by the center of mass of MIT at the time of its founding. Let
Y ‚Äú S ÀÜ T, and let g1 : Y √ë S be one projection and g2 : Y √ë T the other projection.
Let X ‚Äú tu be a set with one element, and let f1 : X √ë S and f2 : X √ë T be given by
the origin in both cases.
a. What are the Ô¨Åber products W1 and W2:
W1


‚åü
Y
g1

X
f1
 S
W2


‚åü
Y
g2

X
f2
 T
b. Interpret these sets in terms of the center of mass of MIT at the time of its founding.
‚ô¶
Solution 3.2.1.6.
Let ps0, t0q P S ÀÜ T, where s0 P S and t0 P T, be the center of mass of MIT at the
time of its founding.

3.2. FINITE LIMITS IN SET
59
a. By deÔ¨Ånition W1 ‚Äú tp, s, ps, tqq | s ‚Äú s0u and W2 ‚Äú tp, t, ps, tqq | t ‚Äú t0u.
b. We interpret both W1 and W2 as subsets of Y ‚Äú S ÀÜ T. There is an isomorphism
W1 ‚Äú tps, tq | s ‚Äú s0u and W2 ‚Äú tps, tq | t ‚Äú t0u. In other words, we can interpret W1
as the point in space s0 P S throughout all time; this is like the time line for that
point. We can interpret W2 as all of space, as it existed at the time when MIT was
founded.
‚ô¶
3.2.1.7
Using pullbacks to deÔ¨Åne new ideas from old
The Ô¨Åber product of a diagram can serve to deÔ¨Åne a new concept. For example, olog (3.13)
deÔ¨Ånes what it means for a cell phone to have a bad battery, in terms of the length of
time for which it remains charged. Being explicit reduces the chance of misunderstandings
between diÔ¨Äerent groups of people. This can be useful in situations like audits and those
in which one is trying to reuse or understand data gathered by others.
Example 3.2.1.8. Consider the following two ologs. The one on the right is the pullback
of the one on the left.
C
a loyal
customer
is

B
a wealthy
customer
is

D
a customer
A‚ÄúBÀÜDC
a customer
that is wealthy
and loyal
‚åü
is

is

C
a loyal
customer
is

B
a wealthy
customer
is

D
a customer
(3.11)
Check from DeÔ¨Ånition 3.2.1.1 that the label ‚Äúa customer that is wealthy and loyal‚Äù is fair
and straightforward as a label for the Ô¨Åber product A ‚Äú B ÀÜD C, given the labels on
B, C, and D.
Remark 3.2.1.9. Note that in diagram (3.11) the upper left box in the pullback could
have been (noncanonically named) ‚åúa good customer‚åù. If it were taken to be the Ô¨Åber
product, then the author would be eÔ¨Äectively deÔ¨Åning a good customer to be one that is
wealthy and loyal.

60
CHAPTER 3. FUNDAMENTAL CONSIDERATIONS IN SET
Exercise 3.2.1.10.
For each of the following, an author has proposed that the right-hand diagram is a
pullback. Do you think their labels are appropriate or misleading; that is, is the label in
the upper left box of the pullback reasonable given the rest of the olog, or is it suspect
in some way?
a.
C
blue
is

B
a person
has as favorite
color

D
a color
A‚ÄúBÀÜDC
a person whose
favorite color is blue
‚åü
is

has as favorite
color

C
blue
is

B
a person
has as favorite
color

D
a color
b.
C
a woman
is

B
a dog
has as owner

D
a person
A‚ÄúBÀÜDC
a dog whose owner
is a woman
‚åü
is

has as owner

C
a woman
is

B
a dog
has as owner

D
a person
c.
C
a piece of
furniture
has

B
a space in
our house
has

D
a width
A‚ÄúBÀÜDC
a good Ô¨Åt
‚åü
s

f

C
a piece of
furniture
has

B
a space in
our house
has

D
a width
‚ô¶

3.2. FINITE LIMITS IN SET
61
Solution 3.2.1.10.
a. This is appropriate.
b. This is appropriate.
c. This is misleading. If a piece of furniture has precisely the same width as a space in
our house, it is not a good Ô¨Åt‚Äîit is terribly frustrating but not a Ô¨Åt.
‚ô¶
Exercise 3.2.1.11.
Consider your olog from Exercise 2.3.3.1. Are any of the commutative squares in it
actually pullback squares?
‚ô¶
Solution 3.2.1.11.
Yes, both commutative squares are pullbacks. That is, a mother is a parent who is a
woman, and a father is a parent who is a man.
‚ô¶
DeÔ¨Ånition 3.2.1.12 (Preimage). Let f : X √ë Y be a function and y P Y an element.
The preimage of y under f, denoted f ¬¥1pyq, is the subset f ¬¥1pyq :‚Äú tx P X | fpxq ‚Äú yu.
If Y 1 ƒé Y is any subset, the preimage of Y 1 under f, denoted f ¬¥1pY 1q, is the subset
f ¬¥1pY 1q ‚Äú tx P X | fpxq P Y 1u.
Exercise 3.2.1.13.
Let f : X √ë Y be a function and y P Y an element. Draw a pullback diagram in
which the Ô¨Åber product is isomorphic to the preimage f ¬¥1pyq.
‚ô¶
Solution 3.2.1.13.
It is often useful to think of an element y P Y as a function y: tu √ë Y , as in
Notation 2.1.2.9. Then the following diagram is a pullback:
f ¬¥1pyq


‚åü
X
f

tu
y
 Y
‚ô¶

62
CHAPTER 3. FUNDAMENTAL CONSIDERATIONS IN SET
Exercise 3.2.1.14.
Consider the function f : N √ë N, where fpnq ‚Äú n ` 3. Let A ‚Äú ti P N | i ƒõ 7u, and
let g: A √ë N be the inclusion, e.g., gp17q ‚Äú 17. What is the pullback of the following
diagram?
A
g

N
f
 N
‚ô¶
Solution 3.2.1.14.
The pullback is isomorphic to the set tpn, iq P NÀÜN | n`3 ‚Äú i ƒõ 7u ‚Äì tn P N | n ƒõ 4u.
‚ô¶
Proposition 3.2.1.15 (Universal property for pullback). Suppose given the diagram of
sets and functions as below:
Y
u

X
t
 Z
For any set A and the following commutative solid-arrow diagram (i.e., functions f : A √ë
X and g: A √ë Y such that t Àù f ‚Äú u Àù g), there is a unique function A √ë X ÀÜZ Y such
that the diagram commutes:
X ÀÜZ Y
œÄ1
-
œÄ2
.
A
‚úì
xf,gyZ

f
$
g
	
X
t
	
Y
u
$
Z
(3.12)

3.2. FINITE LIMITS IN SET
63
Exercise 3.2.1.16.
a. Create an olog whose underlying shape is a commutative square. Now add the Ô¨Åber
product so that the shape is the same as that of diagram (3.12).
b. Use your result to devise English labels to the object X ÀÜZ Y , to the projections œÄ1, œÄ2,
and to the dotted map A
xf,gyZ
√ù√ù√ù√ù√ë X ÀÜZ Y , such that these labels are as canonical as
possible.
‚ô¶
Solution 3.2.1.16.
a.
A
a person whose best
friend‚Äôs favorite color
is blue
has as best friend

has as best friend
+
has as best friend‚Äôs favorite color
+
XÀÜZY
a person whose
favorite color is blue
‚åü
is

has as favorite color

Y
blue
is

X
a person
has as favorite color

Z
a color
b. The answer to part (a) is not as general as possible, so we proceed in two steps. First
we will give a good guess for the answer to part (a), then we will give the general
answer.
What makes this example particularly nice is that the function u: Y √ë Z is labeled
‚Äúis‚Äù, suggesting that Y is a subset of Z. In this case, the map œÄ1 is labeled the same as
u (namely, ‚Äúis‚Äù), the map œÄ2 is labeled the same as t, and the map xf, gy: A √ë X ÀÜZ Y
is labeled the same as f. If xxXyy, xxY yy, xxZyy, xxtyy, and xxuyy are the labels for X, Y, Z, t,
and u respectively, then the object X ÀÜZ Y is labeled ‚ÄúxxXyy, which xxtyyxxY yy.‚Äù For the
part (a) example, it would be ‚åúa person who has as favorite color blue‚åù. See Example
3.4.5.10.
But, in general, we cannot expect either t or u to be an ‚Äúis.‚Äù In general, X ÀÜZ Y should
be labeled ‚Äúa pair px, zq, where x is xxXyy, y is xxY yy, and xxxtyyxxZyy that is the same

64
CHAPTER 3. FUNDAMENTAL CONSIDERATIONS IN SET
as xxyyyxxuyy.‚Äù The maps œÄ1 and œÄ2 should simply be labeled ‚Äúyields, as x‚Äù and ‚Äúyields,
as y.‚Äù The map xf, gyZ should be labeled ‚Äúyields, insofar as it xxfyyxxXyy and xxgyyxxY yy
and these agree as xxXyyxxtyyxxZyy and xxY yyxxuyyxxZyy.‚Äù
‚ô¶
3.2.1.17
Pasting diagrams for pullback
Consider the following diagram, which includes a left-hand square, a right-hand square,
and a big rectangle:
A1
f 1

i

‚åü
B1
g1

j

‚åü
C1
k

A
f
 B
g
 C
The right-hand square has a corner symbol indicating that B1 ‚Äì B ÀÜC C1 is a pullback.
But the corner symbol in the leftmost corner is ambiguous; it might be indicating that
the left-hand square is a pullback, or it might be indicating that the big rectangle is a
pullback. It turns out not to be ambiguous because the left-hand square is a pullback if
and only if the big rectangle is. This is the content of the following proposition.
Proposition 3.2.1.18. Consider the diagram:
B1
g1

j

‚åü
C1
k

A
f
 B
g
 C
where B1 ‚Äì B ÀÜC C1 is a pullback. Then there is an isomorphism A ÀÜB B1 ‚Äì A ÀÜC C1.
In other words, there is an isomorphism
A ÀÜB pB ÀÜC C1q ‚Äì A ÀÜC C1.
Proof. We Ô¨Årst provide a map œÜ: AÀÜBpBÀÜCC1q √ë AÀÜCC1. An element of AÀÜBpBÀÜCC1q
is of the form pa, b, pb, c, c1qq such that fpaq ‚Äú b, gpbq ‚Äú c and kpc1q ‚Äú c.
But this
implies that g Àù fpaq ‚Äú c ‚Äú kpc1q so we put œÜpa, b, pb, c, c1qq :‚Äú pa, c, c1q P A ÀÜC C1. Now
we provide a proposed inverse, œà: A ÀÜC C1 √ë A ÀÜB pB ÀÜC C1q. Given pa, c, c1q with
g Àù fpaq ‚Äú c ‚Äú kpc1q, let b ‚Äú fpaq and note that pb, c, c1q is an element of B ÀÜC C1. So we
can deÔ¨Åne œàpa, c, c1q ‚Äú pa, b, pb, c, c1qq. It is easy to see that œÜ and œà are inverse.
‚ñ°

3.2. FINITE LIMITS IN SET
65
Proposition 3.2.1.18 can be useful in authoring ologs. For example, the type ‚åúa cell
phone that has a bad battery‚åùis vague, but we can lay out precisely what it means using
pullbacks:
A‚ÄìBÀÜDC
a cell phone that
has a bad battery
‚åü


C‚ÄìDÀÜF E
a bad battery


‚åü
E‚ÄìF ÀÜHG
less than
1 hour


‚åü
G
between
0 and 1

B
a cell phone
has

D
a battery
remains
charged
for

F
a duration
of time
in hours
yields 
H
a range of
numbers
(3.13)
The category-theoretic fact described here says that since A ‚Äì B ÀÜD C and C ‚Äì
D ÀÜF E, it follows that A ‚Äì B ÀÜF E. That is, we can deduce the deÔ¨Ånition ‚Äúa cell phone
that has a bad battery is deÔ¨Åned as a cell phone that has a battery which remains charged
for less than one hour.‚Äù
Exercise 3.2.1.19.
a. Create an olog that deÔ¨Ånes two people to be ‚Äúof approximately the same height‚Äù if
and only if their height diÔ¨Äerence is less than half an inch, using a pullback. Your olog
can include the box ‚åúa real number x such that ¬¥.5 ƒÉ x ƒÉ .5‚åù.
b. In the same olog, use pullbacks to make a box for those people whose height is ap-
proximately the same as a person named ‚ÄúMary Quite Contrary.‚Äù
‚ô¶

66
CHAPTER 3. FUNDAMENTAL CONSIDERATIONS IN SET
Solution 3.2.1.19.
Parts (a) and (b) are answered in the same olog (arrow labels are abbreviated).
V ÀÜP SH
a person p whose
height is approx-
imately the same
as that of Mary
Quite Contrary

(p,MQC)
‚åü
SH:‚ÄúP P ÀÜRS
a pair of persons
of approximately
the same height
is

heights

‚åü
P P :‚ÄúP ÀÜP
a pair pp, qq
of persons
‚åü
heights 
p

q

RR:‚ÄúRÀÜR
a pair px, yq of
real numbers
x

y

x¬¥y

RRÀÜRS
a pair px, yq of
real numbers
with ¬¥.5 ƒÉ
x ¬¥ y ƒÉ .5
is

x ¬¥ y

‚åû
V
Mary Quite Con-
trary (MQM)
is

P
a person
height

R
a real number
S
a real number
r with ¬¥.5 ƒÉ
r ƒÉ .5
is

‚ô¶
Exercise 3.2.1.20.
Consider the following diagrams. In the left-hand one, both squares commute.
Y 1

Y
/

X1
 Z1
X

0
Z
/
W 1


‚åü
Y 1

W


‚åü
Y
/

X1
 Z1
X

0
Z
/
Let W ‚Äú X ÀÜZ Y and W 1 ‚Äú X1 ÀÜZ1 Y 1 be Ô¨Åber products, and form the right-hand
diagram. Use the universal property for Ô¨Åber products to construct a map W √ë W 1 such
that all squares commute.
‚ô¶

3.2. FINITE LIMITS IN SET
67
Solution 3.2.1.20.
We redraw the right-hand diagram, with arrows labeled and a new dotted arrow:
W 1
a1

b1

‚åü
Y 1
c1

W
a

b

‚åü
0
Y
g
/
c

X1
d1
 Z1
X
d

e
0
Z
f
/
The commutativity of the right, back, and bottom squares can be written equationally
as
c1 Àù g Àù a ‚Äú f Àù c Àù a ‚Äú f Àù d Àù b ‚Äú d1 Àù e Àù b.
Therefore, the universal property for pullbacks (3.2.1.15) allows us to form the desired
map W √ë W 1 as xg Àù a, e Àù byZ1
‚ô¶
3.2.2
Spans, experiments, and matrices
DeÔ¨Ånition 3.2.2.1. Given sets A and B, a span on A and B is a set R together with
functions f : R √ë A and g: R √ë B.
R
g

f

B
A
Application 3.2.2.2. Think of A and B as observables and R as a set of experiments
performed on these two variables.
For example, let‚Äôs rename variables and say that T is the set of possible temperatures
of a gas in a Ô¨Åxed container and that P is the set of possible pressures of the gas, so
we have the span T
f√ê√ù E
g√ù√ë P. We perform 1,000 experiments in which we change and
record the temperature, and we simultaneously record the pressure. The results might

68
CHAPTER 3. FUNDAMENTAL CONSIDERATIONS IN SET
look like this:
Experiment E
ID
Temperature
Pressure
1
100
72
2
100
73
3
100
72
4
200
140
5
200
138
6
200
141
...
...
...
‚ô¶‚ô¶
DeÔ¨Ånition 3.2.2.3. Let A, B, and C be sets, and let A
f√ê√ù R
g√ù√ë B and B
f 1
√ê√ù R1
g1
√ù√ë C
be spans. Their composite span is given by the Ô¨Åber product R ÀÜB R1 as in this diagram:
R ÀÜB R1
‚åü


R1


C
R


B
A
Application 3.2.2.4. Let‚Äôs look back at the lab‚Äôs experiment in Application 3.2.2.2, which
resulted in a span T
f√ê√ù E
g√ù√ë P. Suppose we notice that something looks a little wrong.
The pressure should be linear with the temperature but it does not appear to be. We
hypothesize that the volume of the container is increasing under pressure. We look up
this container online and see that experiments have been done to measure the volume as
the interior pressure changes. That data gives us a span P
f 1
√ê√ù E1
g1
√ù√ë V .
The composite of our lab‚Äôs span with the online data span yields a span T √ê E2 √ë V ,
where E2 :‚Äú E ÀÜP E1. What information does this span give us? In explaining it, one
might say, ‚Äúwhenever an experiment e in our lab yielded the same pressure as the online
experiment e1 recorded, we called that a data point e2. Every data point has an associated
temperature (from our lab) and an associated volume (from the online experiment). This
is the best we can do.‚Äù

3.2. FINITE LIMITS IN SET
69
The information we get this way might be seen by some as unscientiÔ¨Åc, but it certainly
is the kind of information people use in business and in everyday life calculation‚Äîwe get
data from multiple sources and put it together. Moreover, it is scientiÔ¨Åc in the sense that
it is reproducible. The way we obtained our T-V data is completely transparent.
‚ô¶‚ô¶
We can relate spans to matrices of natural numbers, and see a natural categoriÔ¨Åcation
of matrix addition and matrix multiplication. If the spans come from experiments, as
in Applications 3.2.2.2 and 3.2.2.4, the matrices will look like huge but sparse matrices.
Let‚Äôs go through that.
Let A and B be sets, and let A √ê R √ë B be a span. By the universal property for
products, we have a unique map R
p√ù√ë A ÀÜ B.
We make a matrix of natural numbers out of this data as follows. The set of rows is A,
the set of columns is B. For elements a P A and b P B, the pa, bq entry is the cardinality
of its preimage, |p¬¥1pa, bq|, i.e., the number of elements in R that are sent by p to pa, bq.
Suppose we are given two pA, Bq spans, i.e., A √ê R √ë B and A √ê R1 √ë B; we might
think of these has having the same dimensions, i.e., they are both |A|ÀÜ|B| matrices. We
can take the disjoint union R \ R1, and by the universal property for coproducts we have
a unique span A √ê R \ R1 √ë B making the requisite diagram commute.3 The matrix
corresponding to this new span will be the sum of the matrices corresponding to the two
previous spans out of which it was made.
Given a span A √ê R √ë B and a span B √ê S √ë C, the composite span can be formed
as in DeÔ¨Ånition 3.2.2.3. It will correspond to the usual multiplication of an |A|ÀÜ|B| matrix
by a |B| ÀÜ |C| matrix, resulting in a |A| ÀÜ |C| matrix.
3The following diagram commutes:
R

!

A
R \ R1

 B
R1
"
#


70
CHAPTER 3. FUNDAMENTAL CONSIDERATIONS IN SET
Exercise 3.2.2.5.
Let A ‚Äú t1, 2u and B ‚Äú t1, 2, 3u, and consider the span A
f√ê√ù R
g√ù√ë B given by the
table
R
ID
f : A
g : B
1
1
2
2
1
2
3
1
3
4
2
1
5
2
2
6
2
3
7
2
3
8
2
3
So R ‚Äú 8.
a. What is the matrix corresponding to this span?
b. If R1 ƒé AÀÜB is a subset, with corresponding span A
f 1
√ê√ù R1
g1
√ù√ë B given by projections,
what can you say about the numbers in the corresponding matrix?
‚ô¶
Solution 3.2.2.5.
a. The matrix is
ÀÜ
0
2
1
1
1
3
Àô
It is not a coincidence that the sum of the entries is 8, the number of elements in R.
b. Every entry in the matrix would be either 0 or 1.
‚ô¶
Construction 3.2.2.6. Given a span A
f√ê√ù R
g√ù√ë B, one can draw a bipartite graph with
each element of A drawn as a dot on the left, each element of B drawn as a dot on the
right, and each element r P R drawn as an arrow connecting vertex fprq on the left to
vertex gprq on the right.

3.2. FINITE LIMITS IN SET
71
Exercise 3.2.2.7.
a. Draw the bipartite graph (as in Construction 3.2.2.6) corresponding to the span T
f√ê√ù
E
g√ù√ë P in Application 3.2.2.2 (assuming the ellipses are vacuous, i.e., assuming that
|E| ‚Äú 6).
b. Now make up your own span P
f 1
√ê√ù E1
g1
√ù√ë V (with |E1| ƒõ 2), and write it out in
database form as in Application 3.2.2.2 and in bipartite graph form.
c. Draw the composite span T √ê E ÀÜP E1 √ë V as a bipartite graph.
d. Describe in words how the composite span graph (for T √ê E ÀÜP E1 √ë V ) relates to
the graphs of its factors (T √ê E √ë P and P √ê E1 √ë V ).
‚ô¶
Solution 3.2.2.7.
a. The six rows in that table correspond to the following six lines:
Temperature
Pressure
...
...
90‚Äö
72‚Äö
95‚Äö
73‚Äö
100
‚Äö
1
2
74‚Äö
...
...
190
‚Äö
138
‚Äö
195
‚Äö
139
‚Äö
200
‚Äö
1

3
140
‚Äö
205
‚Äö
141
‚Äö
210
‚Äö
142
‚Äö
...
...

72
CHAPTER 3. FUNDAMENTAL CONSIDERATIONS IN SET
b.
Experiment E1
ID
Pressure
Volume
1
72
14
2
140
14
3
72
13
4
74
14
Pressure
Volume
...
...
72‚Äö
4
3
12‚Äö
73‚Äö
13‚Äö
74‚Äö
 14‚Äö
...
...
138
‚Äö
40‚Äö
139
‚Äö
41‚Äö
140
‚Äö
5
42‚Äö
...
...
c. Putting these two together, we get
Temperature
Pressure
Volume
...
...
...
90‚Äö
72‚Äö

3
12‚Äö
95‚Äö
73‚Äö
13‚Äö
100
‚Äö
6
2
74‚Äö
 14‚Äö
...
...
...
190
‚Äö
138
‚Äö
40‚Äö
195
‚Äö
139
‚Äö
41‚Äö
200
‚Äö
6

3
140
‚Äö
*
42‚Äö
205
‚Äö
141
‚Äö
43‚Äö
210
‚Äö
142
‚Äö
44‚Äö
...
...
...

3.2. FINITE LIMITS IN SET
73
The composite span is
Temperature
Volume
...
...
90‚Äö
12‚Äö
95‚Äö
13‚Äö
100
‚Äö
72
6 14‚Äö
...
...
200
‚Äö
*
41‚Äö
205
‚Äö
42‚Äö
...
...
d. A bipartite graph is a set of connectors; it connects dots on the left to dots on the
right. Given two composable spans, we have a set of connectors from dots on the left
to dots in the middle, and a set of connectors from dots in the middle to dots on the
right. We can then count each path from a left-column dot to a right-column dot as
a connector and so draw an arrow; this is the graph of the composite span.
‚ô¶
3.2.3
Equalizers and terminal objects
DeÔ¨Ånition 3.2.3.1. Suppose given two parallel arrows
X
f

g
 Y.
(3.14)
The equalizer of f and g is the set
Eqpf, gq :‚Äú tx P X | fpxq ‚Äú gpxqu
which is a subset of X. Writing p: Eqpf, gq √ë X for the inclusion, we have a commutative
diagram
Eqpf, gq
p
 X
f

g
 Y
with f Àù p ‚Äú g Àù p.

74
CHAPTER 3. FUNDAMENTAL CONSIDERATIONS IN SET
Example 3.2.3.2. Suppose one has designed an experiment to test a theoretical prediction.
The question is, When does the theory match the experiment? The answer is given by
the equalizer of the following diagram:
an input
should, according to theory, yield 
according to experiment yields  an output
The equalizer is the set of all inputs for which the theory and the experiment yield the
same output.
Exercise 3.2.3.3.
Create an olog that uses equalizers in a reasonably interesting way. Alternatively, use
an equalizer to specify those published authors who have published exactly one paper.
Hint: Find a function from authors to papers; then Ô¨Ånd another.
‚ô¶
Solution 3.2.3.3.
Let A be the set of published authors, let P be the set of published papers, let
F : A √ë P be the function sending each author to the Ô¨Årst paper she ever published, and
let L: A √ë P send an author to the last paper she published. Then the equalizer E ƒé A
of F and L is the set of authors for whom the Ô¨Årst paper and last paper are the same. ‚ô¶
Exercise 3.2.3.4.
Find a universal property enjoyed by the equalizer of two arrows f : X √ë Y and
g: X √ë Y , and present it in the style of Propositions 3.1.1.10, 3.1.2.7, and 3.2.1.15.
‚ô¶
Solution 3.2.3.4.
The equalizer of f and g is a set Eqpf, gq together with a function p: Eqpf, gq √ë X,
such that f Àù p ‚Äú g Àù p:
Eqpf, gq
p
 X
f

g
 Y.
The universal property is that for any other set E and function q: E √ë X for which
f Àù q ‚Äú g Àù q, there exists a unique function e: E √ë Eqpf, gq such that p Àù e ‚Äú q.
‚ô¶
Exercise 3.2.3.5.
a. A terminal set is a set S such that for every set X, there exists a unique function
X √ë S. Find a terminal set.

3.3. FINITE COLIMITS IN SET
75
b. Do you think that the notion terminal set belongs here in Section 3.2, i.e., in the same
world as products, pullbacks, and equalizers? Why? Another way to ask this is, If
products, pullbacks, and equalizers are all limits, then what do limits have in common?
‚ô¶
Solution 3.2.3.5.
a. Let S ‚Äú tu. Then S is a terminal set. So is S ‚Äú t43u. This was the content of
Exercise 2.1.2.13, part (a).
b. The notion of a terminal set does Ô¨Åt well into Section 3.2 because it has a similar kind
of universal property. Namely, for any other set S1 that might Ô¨Åll the position of S,
there is a unique map S1 √ë S. See Section 6.1.3.
‚ô¶
3.3
Finite colimits in Set
This section parallels Section 3.2. I introduce several types of Ô¨Ånite colimits to give the
reader some intuition about them without formally deÔ¨Åning colimits yet.
3.3.1
Background: equivalence relations
DeÔ¨Ånition 3.3.1.1 (Equivalence relations and equivalence classes). Let X be a set, and
consider the product X ÀÜ X, as in DeÔ¨Ånition 3.1.1.1. An equivalence relation on X is a
subset R ƒé X ÀÜ X satisfying the following properties for all x, y, z P X:
ReÔ¨Çexivity: px, xq P R;
Symmetry: px, yq P R if and only if py, xq P R;
Transitivity: If px, yq P R and py, zq P R, then px, zq P R.
If R is an equivalence relation, we often write x ‚ÄûR y, or simply x ‚Äû y, to mean px, yq P R.
For convenience we may refer to the equivalence relation by the symbol ‚Äû, saying that ‚Äû
is an equivalence relation on X.
An equivalence class of ‚Äû is a subset A ƒé X such that
‚Ä¢ A is nonempty, A ‚Ä∞ H;
‚Ä¢ if x P A, then y P A if and only if x ‚Äû y.

76
CHAPTER 3. FUNDAMENTAL CONSIDERATIONS IN SET
Suppose that ‚Äû is an equivalence relation on X.
The quotient of X by ‚Äû, denoted
X{ ‚Äû, is the set of equivalence classes of ‚Äû.
By deÔ¨Ånition, for any element x P X,
there is exactly one equivalence class A such that x P A. Thus we can deÔ¨Åne a function
Q: X √ë X{‚Äû, called the quotient function, sending each element x P X to the equivalence
class containing it. Note that for any y P X{‚Äû, there is some x P X with Qpxq ‚Äú y; we
call x a representative of the equivalence class y.
Example 3.3.1.2. Let Z denote the set of integers. DeÔ¨Åne a relation R ƒé Z ÀÜ Z by
R ‚Äú tpx, yq | Dn P Z such that x ` 7n ‚Äú yu.
Then R is an equivalence relation because x ` 7 Àö 0 ‚Äú x (reÔ¨Çexivity); x ` 7 Àö n ‚Äú y if and
only if y ` 7 Àö p¬¥nq ‚Äú x (symmetry); and x ` 7n ‚Äú y and y ` 7m ‚Äú z together imply that
x ` 7pm ` nq ‚Äú z (transitivity).
An example equivalence class A ƒé Z for this relation is A ‚Äú t. . . , ¬¥12, ¬¥5, 2, 9, . . .u.
Exercise 3.3.1.3.
Let X be the set of people on earth. DeÔ¨Åne a binary relation R ƒé X ÀÜ X on X as
follows. For a pair px, yq of people, put px, yq P R if x cares what happens to y. Justify
your answers to the following questions:
a. Is this relation reÔ¨Çexive?
b. Is it symmetric?
c. Is it transitive?
d. What if ‚Äúcares what happens to‚Äù is replaced with ‚Äúhas shaken hands with‚Äù. Is this
relation reÔ¨Çexive, symmetric, transitive?
‚ô¶
Solution 3.3.1.3.
a. Yes; everyone cares what happens to themselves.
b. No; x may care what happens to y without y caring what happens to x.
c. No; I care about you, and you care about John, but I do not give a Ô¨Åg what happens
to John‚ÄîI do not even know the guy.
d. Shaking hands is symmetric but not reÔ¨Çexive and not transitive.
‚ô¶

3.3. FINITE COLIMITS IN SET
77
Example 3.3.1.4 (Partitions). An equivalence relation on a set X can be thought of as a
way of partitioning X. A partition of X consists of a set I, called the set of parts, and
for every element i P I, the selection of a subset Xi ƒé X such that two properties hold:
‚Ä¢ Every element x P X is in some part (i.e., for all x P X, there exists i P I such that
x P Xi).
‚Ä¢ No element can be found in two diÔ¨Äerent parts (i.e., if x P Xi and x P Xj, then
i ‚Äú j).
Given a partition of X, we deÔ¨Åne an equivalence relation ‚Äû on X by putting x ‚Äû x1
if x and x1 are in the same part (i.e., if there exists i P I such that x, x1 P Xi). The parts
become the equivalence classes of this relation. Conversely, given an equivalence relation,
one makes a partition on X by taking I to be the set of equivalence classes and, for each
i P I, letting Xi be the elements in that equivalence class.
Exercise 3.3.1.5.
Let X and B be sets, and let f : X √ë B be a function. DeÔ¨Åne a subset Rf ƒé X ÀÜ X
by
Rf ‚Äú tpx, yq | fpxq ‚Äú fpyqu.
a. Let f : R √ë R be given by the cosine function, fpxq ‚Äú cospxq, and let Rf ƒé R ÀÜ R be
the relation as deÔ¨Åned. Find x, y P R such that x ‚Ä∞ y, but px, yq P Rf.
b. Is Rf an equivalence relation, for any f?
c. Are all equivalence relations on X obtainable in this way (as Rf for some function
having domain X)?
d. Does this viewpoint on equivalence classes relate to that of Example 3.3.1.4?
‚ô¶
Solution 3.3.1.5.
a. Let x ‚Äú 0.7, and let y ‚Äú 2 Àö œÄ ` 0.7, where œÄ ¬´ 3.14159 denotes the ratio of a circle‚Äôs
circumference to its diameter.
b. Yes; reÔ¨Çexive because fpxq ‚Äú fpxq; symmetric because if fpxq ‚Äú fpyq, then fpyq ‚Äú
fpxq; transitive because if fpxq ‚Äú fpyq and fpyq ‚Äú fpzq, then fpxq ‚Äú fpzq.
c. Let B ‚Äú X{‚Äû be the quotient, and let f : X √ë B be the quotient function, sending
every element in X to its equivalence class. By deÔ¨Ånition, two elements x, y P X are
equivalent if and only if they are in the same equivalence class, fpxq ‚Äú fpyq.

78
CHAPTER 3. FUNDAMENTAL CONSIDERATIONS IN SET
d. Yes; the Ô¨Åbers of f form a partition. That is, we can take B to be the set of parts, and
for every b P B, deÔ¨Åne the subset Xb ƒé X to be the Ô¨Åber Xb ‚Äú f ¬¥1pbq. Then every
element of X is in some part (Ô¨Åber), and no element of X is in two diÔ¨Äerent Ô¨Åbers.
‚ô¶
Exercise 3.3.1.6.
Take a set I of sets. That is, suppose I is a set and that for each element i P I, you
are given a set Xi. For every two elements i, j P I, say that i ‚Äû j if Xi and Xj are
isomorphic. Is this relation an equivalence relation on I?
‚ô¶
Solution 3.3.1.6.
Yes; ‚Äû is an equivalence relation on I. This is precisely the content of Proposition
2.1.2.18.
‚ô¶
Any relation can be enlarged to an equivalence relation with minimal alteration.
Proposition 3.3.1.7 (Generating equivalence relations). Let X be a set and R ƒé X ÀÜX
any subset. There exists a relation S ƒé X ÀÜ X such that
‚Ä¢ S is an equivalence relation;
‚Ä¢ R ƒé S;
‚Ä¢ for any equivalence relation S1 such that R ƒé S1, we have S ƒé S1.
The relation S1 is called the equivalence relation generated by R.
Proof. Let LR be the set of all equivalence relations on X that contain R. In other words,
each element ‚ÑìP LR is an equivalence relation, so we have R ƒé ‚Ñìƒé X ÀÜ X. The set
LR is nonempty because X ÀÜ X ƒé X ÀÜ X is an equivalence relation containing R. Let
S denote the set of pairs px1, x2q P X ÀÜ X that appear in every element of LR, that is,
S ‚Äú ≈û
‚ÑìPLR ‚Ñì. Note that R ƒé S by deÔ¨Ånition. We need only show that S is an equivalence
relation.
Clearly, S is reÔ¨Çexive, because each ‚ÑìP LR is. If px, yq P S, then px, yq P ‚Ñìfor all
‚ÑìP LR. But since each ‚Ñìis an equivalence relation, py, xq P ‚Ñìtoo, so py, xq P S. This
shows that S is symmetric. The proof that it is transitive is similar: if px, yq P S and
py, zq P S, then they are both in each ‚Ñì, which puts px, zq in each ‚Ñì, which puts it in S.
‚ñ°

3.3. FINITE COLIMITS IN SET
79
Exercise 3.3.1.8.
Consider the set R of real numbers. Draw the coordinate plane R ÀÜ R, and give it
coordinates x and y. A binary relation on R is a subset S ƒé RÀÜR, which can be graphed
as a set of points in the px, yq plane.
a. Draw the relation tpx, yq | y ‚Äú x2u.
b. Draw the relation tpx, yq | y ƒõ x2u.
c. Let S0 be the equivalence relation on R generated (in the sense of Proposition 3.3.1.7)
by the empty set. Draw S0 as a subset of the plane.
d. Consider the equivalence relation S1 generated by tp1, 2q, p1, 3qu. Draw S1 in the plane.
Highlight the equivalence class containing p1, 2q.
e. The reÔ¨Çexivity property and the symmetry property (from DeÔ¨Ånition 3.3.1.1) have
pleasing visualizations in R ÀÜ R; what are they?
f. Can you think of a heuristic for visualizing the transitivity property?
‚ô¶
Solution 3.3.1.8.
a.
‚àí4
‚àí3
‚àí2
‚àí1
0
1
2
3
4
‚àí5
0
5
10
15
20

80
CHAPTER 3. FUNDAMENTAL CONSIDERATIONS IN SET
b.
‚àí4
‚àí3
‚àí2
‚àí1
0
1
2
3
4
‚àí5
0
5
10
15
20
c.
‚àí4
‚àí3
‚àí2
‚àí1
0
1
2
3
4
‚àí5
‚àí4
‚àí3
‚àí2
‚àí1
0
1
2
3
4
5

3.3. FINITE COLIMITS IN SET
81
d.
‚àí4
‚àí3
‚àí2
‚àí1
0
1
2
3
4
‚àí5
‚àí4
‚àí3
‚àí2
‚àí1
0
1
2
3
4
5
e. A relation R is reÔ¨Çexive if its graph in the px, yq plane contains the line y ‚Äú x. The
relation is symmetric if its graph is symmetric about the line y ‚Äú x.
f. I cannot think of a good one.
‚ô¶
Exercise 3.3.1.9.
Let X be a set, and consider the empty relation R ‚Äú H ƒé X ÀÜ X.
a. What is the equivalence relation ‚Äû generated by R (called the trivial equivalence
relation on X)?
b. Is the quotient function X √ë X{‚Äû always an isomorphism?
‚ô¶
Solution 3.3.1.9.
a. It is the smallest reÔ¨Çexive relation R :‚Äú tpx, xq | x P Xu.
b. Yes. We have x ‚Äû y if and only if x ‚Äú y, so each equivalence class contains precisely
one element.
‚ô¶
Exercise 3.3.1.10.
Consider the binary relation R ‚Äú tpn, n ` 1q | n P Zu ƒé Z ÀÜ Z.

82
CHAPTER 3. FUNDAMENTAL CONSIDERATIONS IN SET
a. What is the equivalence relation ‚Äû generated by R?
b. How many equivalence classes are there?
‚ô¶
Solution 3.3.1.10.
a. For every two elements m, n P Z, we have m ‚Äû n. Why? Think about what happens
if m and n are spaced k apart, i.e., |m ¬¥ n| ‚Äú k. Then if k ‚Äú 0, we have m ‚Äû n
by reÔ¨Çexivity; if k ‚Äú 1, we have m ‚Äû n by deÔ¨Ånition and symmetry. We can get the
k ‚Äú 2 case by transitivity. But then we get the k ‚Äú 3 case by another transitivity, and
continuing in this way, we Ô¨Ånd that m ‚Äû n regardless of the distance k.
b. There is one equivalence class.
‚ô¶
Exercise 3.3.1.11.
Suppose N is a network (system of nodes and edges). Let X be the nodes of the
network, and let R ƒé X ÀÜ X denote the relation such that px, yq P R iÔ¨Äthere exists an
edge connecting x to y.4
a. What is the equivalence relation ‚Äû generated by R?
b. What is the quotient X{‚Äû?
‚ô¶
Solution 3.3.1.11.
a. Node x is equivalent to node y if and only if one can get from x to y by moving along
some Ô¨Ånite number of edges (including no edges if x ‚Äú y). In other words, if nodes
are street addresses in a city, and each edge is like a street, then two addresses are
equivalent if a pedestrian can get from one to the other.
b. It is called the set of ‚Äúconnected components‚Äù of the network. Think of a connected
component as an island within the network. A pedestrian can get from everywhere on
the island to everywhere else on the island but cannot get oÔ¨Äthe island.
‚ô¶
4The meaning of iÔ¨Äis ‚Äúif and only if.‚Äù In this case we are saying that the pair px, yq is in R if and
only if there exists an arrow connecting x and y.

3.3. FINITE COLIMITS IN SET
83
Remark 3.3.1.12. Let X be a set and R ƒé X ÀÜ X a relation. The proof of Proposition
3.3.1.7 has the beneÔ¨Åt of working even if |X| ƒõ 8, but it has the cost that it is not very
intuitive nor useful in practice when X is Ô¨Ånite. The intuitive way to think about the
idea of equivalence relation generated by R is as follows:
1. First add to R what is demanded by reÔ¨Çexivity, R1 :‚Äú R Y tpx, xq | x P Xu.
2. To the result, add what is demanded by symmetry, R2 :‚Äú R1Ytpx, yq | py, xq P R1u.
3. Finally, to the result, add what is demanded by transitivity,
S ‚Äú R2 Y tpx, zq | px, yq P R2, and py, zq P R2u.
Then S is an equivalence relation, the smallest one containing R.
3.3.2
Pushouts
Equivalence relations are used to deÔ¨Åne pushouts.
DeÔ¨Ånition 3.3.2.1 (Pushout). Suppose given the following diagram of sets and func-
tions:
W
f

g

X
Y
(3.15)
Its Ô¨Åber sum, denoted X \W Y , is deÔ¨Åned as the quotient of X \W \Y by the equivalence
relation ‚Äû generated by w ‚Äû fpwq and w ‚Äû gpwq for all w P W.
X \W Y :‚Äú pX \ W \ Y q{‚Äû,
where @w P W, w ‚Äû fpwq, and w ‚Äû gpwq.
There are obvious functions i1 : X √ë X \W Y and i2 : Y √ë X \W Y , called inclusions.5
The following diagram commutes:
W
g

f

Y
i2

X
i1
 X \W Y
‚åú
(3.16)
5Note that the term inclusion is not too good because it seems to suggest that i1 and i2 are injective
(see DeÔ¨Ånition 3.4.5.1) and this is not always the case. The reason we use inclusion terminology is to be
consistent with the terminology of coproducts. The functions i1 and i2 are sometimes called coprojections.

84
CHAPTER 3. FUNDAMENTAL CONSIDERATIONS IN SET
Given the setup of diagram (3.15), we deÔ¨Åne a pushout of X and Y over W to be any set
Z for which we have an isomorphism X \W Y
‚Äì
√ù√ë Z. The corner symbol ‚åúin diagram
(3.16) indicates that X \W Y is a pushout.
Example 3.3.2.2. Let X ‚Äú tx P R | 0 ƒè x ƒè 1u be the set of numbers between 0 and
1, inclusive, and let Y ‚Äú ty P R | 1 ƒè y ƒè 2u be the set of numbers between 1 and
2, inclusive. We can form X \ Y , but it has two copies of 1. This is weird, so we use
pushouts; let W ‚Äú t1u. Then the pushout X
f√ê√ù W
g√ù√ë Y , where f and g are the inclusions
(1 √û√ë 1), is X \W Y ‚Äì tz P R | 0 ƒè z ƒè 2u, as desired.
t1u
g

f

r1, 2s

r0, 1s
 r0, 2s
‚åú
Example 3.3.2.3 (Pushout). In ologs (3.17) and (3.18) right-hand diagram is a pushout
of the left-hand diagram. The new object, D, is the union of B and C, but instances of
A are equated to their B and C aspects.
A
a cell in the
shoulder
is

is

C
a cell in
the arm
B
a cell in the
torso
A
a cell in the
shoulder
is

is

C
a cell in
the arm

B
a cell in the
torso

D‚ÄúB\AC
a cell in the
torso or arm
‚åú
(3.17)
In diagram (3.17), the two arrows in the left-hand olog are inclusions: its author considers
every cell in the shoulder to be both part of the arm and part of the torso. The pushout
is then the union. In olog (3.17), the shoulder is seen as part of the arm and part of the
torso. When taking the union of these two parts, we do not want to double-count cells
in the shoulder (as would be done in the coproduct B \ C; see Example 3.1.2.14). Thus
we create a new type A for cells in the shoulder, which are considered the same whether
viewed as cells in the arm or cells in the torso. In general, if one wishes to take two things
and glue them together, with A as the glue and B and C as the two things to be glued,
the result is the pushout B \A C. (A nice image of this can be seen in the setting of
topological spaces; see Example 6.1.3.39.)

3.3. FINITE COLIMITS IN SET
85
A
a college
mathematics
course
yields
is 
C
the
phrase
‚Äútoo hard‚Äù
B
a college
course
A
a college
mathematics
course
yields 
is

C
the
phrase
‚Äútoo hard‚Äù

B
a college
course

D ‚Äú B\A C
a college course,
where every
mathematics
course is
equivalent to
the phrase ‚Äútoo
hard‚Äù
‚åú
(3.18)
In olog (3.18), if every mathematics course is simply ‚Äútoo hard,‚Äù then when reading
oÔ¨Äa list of courses, each math course may either be read aloud or simply be read as
‚Äútoo hard.‚Äù To form D we begin by taking the union of B and C, and then we consider
everything in A to be the same whether one looks at it as a course or as the phrase ‚Äútoo
hard.‚Äù The math courses are all blurred together as one thing. Thus we see that the
power to equate diÔ¨Äerent things can be exercised with pushouts.
Exercise 3.3.2.4.
Let W, X, Y be as drawn and f : W √ë X and g: W √ë Y the indicated functions.
w1 
Y 
y2 
y1 
W 
w4 
w2 
w3 
X 
x2 
x1 
x3 
w1
x1
w2
w
x2
w3
w3
w
x3
w
x3
x
4
w4
w
2
3

86
CHAPTER 3. FUNDAMENTAL CONSIDERATIONS IN SET
The pushout of the diagram X
f
√ê√ù√ù√ù W
g
√ù√ù√ù√ë Y is a set P. Write the cardinality |P| of
P (see DeÔ¨Ånition 2.1.2.23).
‚ô¶
Solution 3.3.2.4.
We have x1 ‚Äû w1 ‚Äû y1 ‚Äû w3 ‚Äû x3 ‚Äû w4 ‚Äû y2 ‚Äû w2 ‚Äû x2. Since everything is
equivalent to everything else, |P| ‚Äú 1.
‚ô¶
Exercise 3.3.2.5.
Suppose that W ‚Äú H; what can you say about X \W Z?
‚ô¶
Solution 3.3.2.5.
If W ‚Äú H, then X \ W \ Y ‚Äú X \ Y and the equivalence relation ‚Äû is trivial, so
X \W Z ‚Äì X \ Z is just the coproduct.
‚ô¶
Exercise 3.3.2.6.
Let W :‚Äú N ‚Äú t0, 1, 2, . . .u denote the set of natural numbers, let X ‚Äú Z denote
the set of integers, and let Y ‚Äú tu denote a one-element set. DeÔ¨Åne f : W √ë X by
fpwq ‚Äú ¬¥pw`1q, and deÔ¨Åne g: W √ë Y to be the unique map. Describe the set X \W Y .
‚ô¶
Solution 3.3.2.6.
We start with X \ W \ Y and write
Z‚ÄúX‚Äù \ N‚ÄúW ‚Äù \ tu‚ÄúY ‚Äù,
where the subscripts indicate where things come from. Every element of N‚ÄúW ‚Äù is made
equivalent to , so they are all equivalent to each other, forming a giant equivalence
class. Each n P N‚ÄúW ‚Äù is also equivalent to ¬¥pn ` 1q P Z‚ÄúX‚Äù, so every negative number
in Z‚ÄúW ‚Äù is also in this giant equivalent class. But the rest of the elements in Z‚ÄúX‚Äù, the
non-negative numbers, are left alone‚Äîthey are not forced to be equivalent to anything.
So in the end, the pushout X \W Y is the set tu\N, where tu represents the negative
integers and N represents the non-negative integers in Z‚ÄúX‚Äù
‚ô¶
Exercise 3.3.2.7.
Let i: R ƒé X ÀÜ X be an equivalence relation (see Example 2.1.2.4 for notation).
Composing with the projections œÄ1, œÄ2 : X ÀÜ X √ë X, we have two maps, œÄ1 Àù i, : R √ë X
and œÄ2 Àù i: R √ë X.

3.3. FINITE COLIMITS IN SET
87
a. Consider the pushout X \R X of the diagram
X
œÄ1Àùi
√ê√ù√ù√ù R
œÄ2Àùi
√ù√ù√ù√ë X.
How should one think about X >R X? That is, before we deÔ¨Åned pushouts, we went
through some work to deÔ¨Åne something we can now call X \R X‚Äîwhat was it?
b. If i: R ƒé X ÀÜ X is not assumed to be an equivalence relation, we can still deÔ¨Åne
this pushout. Is there a relationship between the pushout X
œÄ1Àùi
√ê√ù√ù√ù R œÄ2Àùi
√ù√ù√ù√ë X and the
equivalence relation generated by R ƒé X ÀÜ X?
‚ô¶
Solution 3.3.2.7.
a. X \R X is isomorphic to the quotient X{R.
b. Yes, X \R X is isomorphic to the quotient X{‚Äû, where ‚Äû is the equivalence relation
generated by R.
‚ô¶
Proposition 3.3.2.8 (Universal property for pushout). Suppose given the following di-
agram of sets and functions:
W
u

t

Y
X
The pushout, X \W Y together with the inclusions i1 and i2, satisÔ¨Åes the following prop-
erty. For any set A and commutative solid arrow diagram (i.e., functions f : X √ë A and

88
CHAPTER 3. FUNDAMENTAL CONSIDERATIONS IN SET
g: Y √ë A such that f Àù t ‚Äú g Àù u),
W
u
	
t
$
X
i1
)
f
	
Y
i2

g
$
A
X \W Y
W
#f
g

(3.19)
there exists a unique arrow W
"
f
g : X \W Y √ë A making everything commute,
f ‚Äú W
"
f
g Àù i1
and
g ‚Äú W
"
f
g Àù i2.
3.3.3
Other Ô¨Ånite colimits
DeÔ¨Ånition 3.3.3.1 (Coequalizer). Suppose given two parallel arrows
X
f

g
 Y.
(3.20)
The coequalizer of f and g is the commutative diagram
X
f

g
 Y
q
 Coeqpf, gq ,
where we deÔ¨Åne
Coeqpf, gq :‚Äú Y {‚Äû,
where
fpxq ‚Äû gpxq for all x P X,
and q is the quotient function q: Y √ë Y {‚Äû.
Exercise 3.3.3.2.
Let X ‚Äú R be the set of real numbers. What is the coequalizer of the two maps
X √ë X given by x √û√ë x and x √û√ë px ` 1q respectively?
‚ô¶

3.3. FINITE COLIMITS IN SET
89
Solution 3.3.3.2.
Thus ¬¥1 ‚Äû 0 ‚Äû 1 ‚Äû 2 ‚Äû ¬® ¬® ¬® and 3.14 ‚Äû 4.14 ‚Äû 5.14, and so on. Everything is
equivalent to itself plus 1. It is like coiling the real number line round and round into
a helix of period 1, and making everything equivalent to whatever is directly above and
below it. The resulting quotient is topologically a circle. Another, more concrete way
to write this coequalizer (but which might be called topologically distasteful) is as the
half-open interval r0, 1q,
Coeq
Àú
R
x√û√ëx`1

x√û√ëx
 R
¬∏
‚Äì tx P R | 0 ƒè x ƒÉ 1u.
‚ô¶
Exercise 3.3.3.3.
Find a universal property enjoyed by the coequalizer of two arrows.
‚ô¶
Solution 3.3.3.3.
The coequalizer of f and g is a set Coeqpf, gq together with a function q: Y √ë
Eqpf, gq, such that q Àù f ‚Äú q Àù g:
X
f

g
 Y
q
 Coeqpf, gq.
The universal property is that for any other set C and function p: Y √ë C for which
p Àù f ‚Äú p Àù g, there exists a unique function c: Coeqpf, gq √ë C such that c Àù q ‚Äú p.
‚ô¶
Exercise 3.3.3.4.
An initial set is a set S such that for every set A, there exists a unique function
S √ë A.
a. Find an initial set.
b. Do you think that the notion initial set belongs here in Section 3.3, i.e., in the same
world as coproducts, pushouts, and coequalizers? Why? Another way to ask this is,
If coproducts, pushouts, and coequalizers are all colimits, what do colimits have in
common?
‚ô¶

90
CHAPTER 3. FUNDAMENTAL CONSIDERATIONS IN SET
Solution 3.3.3.4.
a. Let S ‚Äú H. Then S is the initial set. This was the content of Exercise 2.1.2.13 part
(b).
b. The notion of an initial set does Ô¨Åt well into Section 3.3 because it has a similar kind
of universal property. Namely, for any other set S1 that might Ô¨Åll the position of S,
there is a unique map S √ë S1. See Section 6.1.3.
‚ô¶
3.4
Other notions in Set
This section discusses some additional notions in the category Set.
3.4.1
Retractions
DeÔ¨Ånition 3.4.1.1. Suppose given a function f : X √ë Y and a function g: Y √ë X such
that g Àùf ‚Äú idX. In this case we call f a retract section and we call g a retract projection.
Exercise 3.4.1.2.
Create an olog that includes sets X and Y and functions f : X √ë Y and g: Y √ë X
such that g Àù f ‚Äú idX, but such that f Àù g ‚Ä∞ idY ; that is, such that f is a retract section
but not an isomorphism.
‚ô¶
Solution 3.4.1.2.
X
a mother
has as Ô¨Årst-born

Y
a child
has

Every mother is the mother of her Ô¨Årst-born child, but not every child is the Ô¨Årst-born
child of its mother.
‚ô¶
3.4.2
Currying
Currying is the idea that when a function takes many inputs, we can input them one at
a time or all at once. For example, consider the function that takes a material M and

3.4. OTHER NOTIONS IN SET
91
an extension E and returns the force transmitted through material M when it is pulled
to extension E. This is a function e: ‚åúa material‚åùÀÜ ‚åúan extension‚åù√ë ‚åúa force‚åù. This
function takes two inputs at once, but it is convenient to curry the second input. Recall
that HomSetp‚åúan extension‚åù, ‚åúa force‚åùq is the set of theoretical force-extension curves.
Currying transforms e into a function
e1 : ‚åúa material‚åù√ë HomSetp‚åúan extension‚åù, ‚åúa force‚åùq.
This is a more convenient way to package the same information: each material M has a
force-extension curve e1pMq. This will be made precise in Proposition 3.4.2.3.
Notation 3.4.2.1. Let A and B be sets. We sometimes denote by BA the set of functions
from A to B,
BA :‚Äú HomSetpA, Bq.
(3.21)
Exercise 3.4.2.2.
For a Ô¨Ånite set A, let |A| P N denote the cardinality of (number of elements in) A.
If A and B are both Ô¨Ånite (including the possibility that one or both are empty), is it
always true that |BA| ‚Äú |B||A|?
‚ô¶
Solution 3.4.2.2.
If both A and B are empty, the answer to this question may be controversial; otherwise
it is true that |BA| ‚Äú |B||A|. Back to the controversy, some people say that 00 is unde-
Ô¨Åned, probably because of what happens with limits in calculus (limx√ë0 x0 ‚Äú 1, whereas
limy√ë0 0y ‚Äú 0). But if we think of the natural numbers as isomorphism classes of Ô¨Ånite
sets, then for 0 ‚Äú |H| it is certainly best to think of 00 ‚Äú 1 because HomSetpH, Hq ‚Äú 1.
Taking the convention that 00 ‚Äú 1 in N, the answer to this question becomes an unqual-
iÔ¨Åed yes.
‚ô¶
Proposition 3.4.2.3 (Currying). Let A denote a set.
For any sets X, Y there is a
bijection
œÜ: HomSetpX ÀÜ A, Y q ‚Äì
√ù√ë HomSetpX, Y Aq.
(3.22)
Proof. Suppose given f : X ÀÜ A √ë Y . DeÔ¨Åne œÜpfq: X √ë Y A as follows: for any x P X,
let œÜpfqpxq: A √ë Y be deÔ¨Åned as follows: for any a P A, let œÜpfqpxqpaq :‚Äú fpx, aq.
We now construct the inverse, œà: HomSetpX, Y Aq √ë HomSetpX ÀÜ A, Y q. Suppose
given g: X √ë Y A. DeÔ¨Åne œàpgq: X ÀÜ A √ë Y as follows: for any pair px, aq P X ÀÜ A let
œàpgqpx, aq :‚Äú gpxqpaq.

92
CHAPTER 3. FUNDAMENTAL CONSIDERATIONS IN SET
Then for any f P HomSetpX ÀÜ A, Y q, we have œà Àù œÜpfqpx, aq ‚Äú œÜpfqpxqpaq ‚Äú fpx, aq,
and for any g P HomSetpX, Y Aq, we have œÜ Àù œàpgqpxqpaq ‚Äú œàpgqpx, aq ‚Äú gpxqpaq. Thus we
see that œÜ is an isomorphism as desired.
‚ñ°
Exercise 3.4.2.4.
Let X ‚Äú t1, 2u, A ‚Äú ta, bu, and Y ‚Äú tx, yu.
a. Write three distinct elements of L :‚Äú HomSetpX ÀÜ A, Y q.
b. Write all the elements of M :‚Äú HomSetpA, Y q.
c. For each of the three elements ‚ÑìP L you chose in part (a), write the corresponding
function œÜp‚Ñìq: X √ë M guaranteed by Proposition 3.4.2.3.
‚ô¶
Solution 3.4.2.4.
a. We write each of our choices ‚Ñì1, ‚Ñì2, ‚Ñì3 P L in a tabular format:
‚Ñì1
1
2
a
x
x
b
x
y
‚Ñì2
1
2
a
y
x
b
x
y
‚Ñì3
1
2
a
y
x
b
y
x
Here, for example, ‚Ñì1p1, aq ‚Äú x and ‚Ñì1p2, bq ‚Äú y.
b. We write each of m1, m2, m3, m4 P M in tabular format:
m1
a
x
b
x
m2
a
x
b
y
m3
a
y
b
x
m4
a
y
b
y
c. We write each of œÜp‚Ñì1q, œÜp‚Ñì2q, œÜp‚Ñì3q in a tabular format:
1
2
œÜp‚Ñì1q
m1
m2
1
2
œÜp‚Ñì2q
m3
m2
1
2
œÜp‚Ñì3q
m4
m1
‚ô¶

3.4. OTHER NOTIONS IN SET
93
Exercise 3.4.2.5.
Let A and B be sets. We deÔ¨Åned BA :‚Äú HomSetpA, Bq, so we can write the identity
function as idBA : HomSetpA, Bq √ë BA.
Proposition 3.4.2.3, make the substitutions
X ‚Äú HomSetpA, Bq, Y ‚Äú B, and A ‚Äú A. Consider the function
œÜ¬¥1 : HomSetpHomSetpA, Bq, BAq √ë HomSetpHomSetpA, Bq ÀÜ A, Bq
obtained as the inverse of (3.22).
We have a canonical element idBA in the domain
of œÜ¬¥1.
We can apply the function œÜ¬¥1 and obtain an element ev ‚Äú œÜ¬¥1pidBAq P
HomSetpHomSetpA, Bq ÀÜ A, Bq, which is itself a function,
ev: HomSetpA, Bq ÀÜ A √ë B.
(3.23)
a. Describe the function ev in terms of how it operates on elements in its domain.
b. Why might one be tempted to denote this function ev?
‚ô¶
Solution 3.4.2.5.
a. An element in HomSetpA, Bq ÀÜ A is a pair pf, aq, where f : A √ë B is a function and
a P A is an element. Applying ev to pf, aq returns fpaq, an element of B as desired.
b. One might be tempted because they are the Ô¨Årst two letters of the word evaluate‚Äîwe
evaluate the function f on the input a.
‚ô¶
If n P N is a natural number, recall from (2.4) that there is a set n ‚Äú t1, 2, . . . , nu. If
A is a set, we often make the abbreviation
An :‚Äú An.
(3.24)
Exercise 3.4.2.6.
Example 3.1.1.7 said that R2 is an abbreviation for R ÀÜ R, but (3.24) says that R2 is
an abbreviation for R2 ‚Äú HomSetp2, Rq. Use Exercise 2.1.2.20, Exercise 3.1.2.12, and the
fact that 1+1=2, to prove that these are isomorphic, R2 ‚Äì R ÀÜ R.
(The answer to Exercise 2.1.2.20 was A ‚Äú tu; i.e., HomSetptu, Xq ‚Äì X for
all X.
The answer to Exercise 3.1.2.12 was HomSetpX \ Y, Aq
‚Äì
√ù√ë HomSetpX, Aq ÀÜ
HomSetpY, Aq.)
‚ô¶

94
CHAPTER 3. FUNDAMENTAL CONSIDERATIONS IN SET
Solution 3.4.2.6.
We have tu ‚Äì 1, which is a more convenient notation. We have
R2 ‚Äì R1\1 ‚Äì R1 ÀÜ R1 ‚Äì R ÀÜ R.
We obtain these three isomorphisms using 1`1 ‚Äú 2, then Exercise 3.1.2.12, then Exercise
2.1.2.20.
‚ô¶
3.4.3
Arithmetic of sets
Proposition 3.4.3.1 summarizes some properties of products, coproducts, and exponen-
tials, and shows them all in a familiar light, namely, that of elementary school arithmetic.
In fact, one can think of the natural numbers as literally being the isomorphism classes
of Ô¨Ånite sets‚Äîthat is what they are used for in counting.
Consider the standard procedure for counting the elements of a set S, say, cows in a
Ô¨Åeld. One points to an element in S and simultaneously says ‚Äúone‚Äù, points to another
element in S and simultaneously says ‚Äútwo‚Äù, and so on until Ô¨Ånished. By pointing at
a cow as you speak a number, you are drawing an imaginary line between the number
and the cow. In other words, this procedure amounts to nothing more than creating an
isomorphism (one-to-one mapping) between S and some set t1, 2, 3, . . . , nu.
Again, the natural numbers are the isomorphism classes of Ô¨Ånite sets. Their behavior,
i.e., the arithmetic of natural numbers, reÔ¨Çects the behavior of sets. For example, the fact
that multiplication distributes over addition is a fact about grids of dots, as in Example
3.1.1.2. The following proposition lays out such arithmetic properties of sets.
This proposition denotes the coproduct of two sets A and B by the notation A ` B
rather than A \ B. It is a reasonable notation in general, and one that is often used.
Proposition 3.4.3.1. The following isomorphisms exist for any sets A, B, and C (except
for one caveat; see Exercise 3.4.3.2).
‚Ä¢ A ` 0 ‚Äì A
‚Ä¢ A ` B ‚Äì B ` A
‚Ä¢ pA ` Bq ` C ‚Äì A ` pB ` Cq
‚Ä¢ A ÀÜ 0 ‚Äì 0
‚Ä¢ A ÀÜ 1 ‚Äì A
‚Ä¢ A ÀÜ B ‚Äì B ÀÜ A

3.4. OTHER NOTIONS IN SET
95
‚Ä¢ pA ÀÜ Bq ÀÜ C ‚Äì A ÀÜ pB ÀÜ Cq
‚Ä¢ A ÀÜ pB ` Cq ‚Äì pA ÀÜ Bq ` pA ÀÜ Cq
‚Ä¢ A0 ‚Äì 1
‚Ä¢ A1 ‚Äì A
‚Ä¢ 0A ‚Äì 0
‚Ä¢ 1A ‚Äì 1
‚Ä¢ AB`C ‚Äì AB ÀÜ AC
‚Ä¢ pABqC ‚Äì ABÀÜC
‚Ä¢ pA ÀÜ BqC ‚Äì AC ÀÜ BC
Exercise 3.4.3.2.
Everything in Proposition 3.4.3.1 is true except in one case, namely, that of
00.
In this case we get conÔ¨Çicting answers, because for any set A, including A ‚Äú H ‚Äú 0, we
have claimed both that A0 ‚Äì 1 and that 0A ‚Äì 0.
What is the correct answer for 00, based on the deÔ¨Ånitions of 0 and 1, given in (2.4),
and of AB, given in (3.21)?
‚ô¶
Solution 3.4.3.2.
HomSetpH, Hq has one element, so 00 ‚Äì 1.
‚ô¶
Exercise 3.4.3.3.
It is also true of natural numbers that if a, b P N and ab ‚Äú 0, then either a ‚Äú 0 or
b ‚Äú 0. Is the analogous statement true of all sets?
‚ô¶
Solution 3.4.3.3.
Yes; if A and B are sets and A ÀÜ B ‚Äì H, then either A ‚Äú H or B ‚Äú H.
‚ô¶
Proposition 3.4.3.1 is in some sense about isomorphisms. It says that understanding
isomorphisms of Ô¨Ånite sets reduces to understanding natural numbers. But note that
there is much more going on in Set than isomorphisms; in particular, there are functions
that are not invertible.

96
CHAPTER 3. FUNDAMENTAL CONSIDERATIONS IN SET
In grade school you probably never saw anything that looked like this:
53 ÀÜ 3 √ù√ë 5
And yet in Exercise 3.4.2.5 we found a function ev: BA ÀÜ A √ë B that exists for any
sets A, B. This function ev is not an isomorphism, so it somehow does not show up as
an equation of natural numbers. But it still has important meaning.6 In terms of mere
number, it looks like we are being told of an important function 575 √ë 5, which is bizarre.
The issue here is precisely the one confronted in Exercise 2.1.2.19.
Exercise 3.4.3.4.
Explain why there is a canonical function 53 ÀÜ 3 √ù√ë 5, but not a canonical function
575 √ë 5.
‚ô¶
Solution 3.4.3.4.
This is a more sophisticated version of Exercise 2.1.2.19: knowing that there exists an
isomorphism between two sets is far inferior to having an isomorphism between them. So
while it is true that 53 ÀÜ 3 is isomorphic to 575, we do not have an isomorphism between
them; there is no canonical one. If one chooses an arbitrary isomorphism f : 575 ‚Äì
√ù√ë 53ÀÜ3,
it would indeed compose with the evaluation function to give a function
575
f√ù√ë 53 ÀÜ 3 ev
√ù√ë 5,
but the function will be as arbitrary as the choice of isomorphism.
‚ô¶
Slogan 3.4.3.5.
It is true that a set is isomorphic to any other set with the same number of
elements, but do not be fooled into thinking that the study of sets reduces
to the study of numbers.
Functions that are not isomorphisms cannot be
captured within the framework of numbers.
3.4.4
Subobjects and characteristic functions
DeÔ¨Ånition 3.4.4.1. For any set B, deÔ¨Åne the power-set of B, denoted PpBq, to be the
set of subsets of B.
6Roughly, the existence of ev : 53 ÀÜ 3 √ù√ë 5 says that given a dot in a 5 ÀÜ 5 ÀÜ 5 grid of dots, and given
one of the three axes, one can tell the coordinate of that dot along that axis.

3.4. OTHER NOTIONS IN SET
97
Exercise 3.4.4.2.
a. How many elements does PpHq have?
b. How many elements does Pptuq have?
c. How many elements does Ppt1, 2, 3, 4, 5, 6uq have?
d. Why it be named ‚Äúpower-set‚Äù?
‚ô¶
Solution 3.4.4.2.
a. |PpHq| ‚Äú 1.
b. |Pptuq| ‚Äú 2.
c. |Ppt1, 2, 3, 4, 5, 6uq| ‚Äú 64.
d. For any Ô¨Ånite set X, we Ô¨Ånd that |PpXq| ‚Äú 2|X|, i.e., 2 to the power |X|.
‚ô¶
3.4.4.3
Simplicial complexes
DeÔ¨Ånition 3.4.4.4. Let V be a set, let PpV q be its power-set.
Since each element
x P PpV q is a subset x ƒé U, we can make sense of the expression x ƒé x1 for x, x1 P PpV q.
A subset X ƒé PpV q is called downward-closed if for every u P X and every u1 ƒé u, we
have u1 P X. We say that X contains all atoms if for every v P V , the singleton set tvu
is an element of X.
A simplicial complex is a pair pV, Xq, where V is a set and X ƒé PpV q is a downward-
closed subset that contains all atoms. The elements of X are called simplices (singular:
simplex). Any subset u ƒé V has a cardinality |u|, so we have a function X √ë N sending
each simplex to its cardinality. The set of simplices with cardinality n ` 1 is denoted Xn,
and each element x P Xn is called an n-simplex.7 Since X contains all atoms (subsets
of cardinality 1), we have an isomorphism X0 ‚Äì V , and we may also call the 0-simplices
vertices. We sometimes call the 1-simplices edges.8
Since X0 ‚Äì V , a simplicial complex pV, Xq may simply be denoted X.
7It seems anomalous that the set of subsets with cardinality 2 is denoted X1, and so on. But this is
standard convention because it Ô¨Åts with the standard notion of dimension: each element of X1 corresponds
to a two-dimensional shape, and more generally, each element of Xn is n-dimensional.
8The reason I write X0 ‚Äì V rather than X0 ‚Äú V is that X0 is the set of one-element subsets of V .
So if V ‚Äú ta, b, cu, then X0 ‚Äú ttau, tbu, tcuu. This is really just pedantry.

98
CHAPTER 3. FUNDAMENTAL CONSIDERATIONS IN SET
Example 3.4.4.5. Let n P N be a natural number, and let V ‚Äú n ` 1. DeÔ¨Åne the n-simplex,
denoted Œîn, to be the simplicial complex PpV q ƒé PpV q, i.e., the whole power-set, which
indeed is downward-closed and contains all atoms.
We can draw a simplicial complex X by Ô¨Årst putting all the vertices on the page as
dots. Then for every x P X1, we see that x ‚Äú tv, v1u consists of two vertices, and we draw
an edge connecting v and v1. For every y P X2 we see that y ‚Äú tw, w1, w2u consists of
three vertices, and we draw a (Ô¨Ålled-in) triangle connecting them. All three edges will be
drawn too, because X is assumed to be downward-closed.
The 0-simplex Œî0, the 1-simplex Œî1, the 2-simplex Œî2, and the 3-simplex Œî3 are
drawn here:
0 
3 
1 
2 
0 
1 
2 
0 
1 
0 
The n-simplices for various n P N are not the only simplicial complexes. In general,
a simplicial complex is a union, or gluing together of simplices in a prescribed manner.
For example, consider the simplicial complex X with vertices X0 ‚Äú t1, 2, 3, 4u, edges
X1 ‚Äú tt1, 2u, t2, 3u, t2, 4uu, and no higher simplices X2 ‚Äú X3 ‚Äú ¬® ¬® ¬® ‚Äú H. We might draw
X as follows:
1‚Äö
2‚Äö
3‚Äö
‚Äö
4

3.4. OTHER NOTIONS IN SET
99
Exercise 3.4.4.6.
Let X be the following simplicial complex, so that X0 ‚Äú tA, B, . . . , Mu.
A 
B 
D 
C 
E 
F 
G 
H 
I 
J 
K 
L 
M 
L
A
M
D
In this case X1 consists of elements like tA, Bu and tD, Ku, but not tD, Ju.
Write X2, X3, and X4. Hint: The drawing of X is supposed to indicate that X3
should have one element.
‚ô¶
Solution 3.4.4.6.
X2 is the set of triangles, X3 is the set of tetrahedra, and X4 is the set of 4-simplices:
X2 ‚ÄúttA, B, Cu, tC, I, Ju, tE, F, Gu, tF, G, Hu, tF, G, Iu, tF, H, Iu, tG, H, Iu,
tI, J, Ku, tK, L, Muu.
X3 ‚ÄúttF, G, H, Iuu.
X4 ‚ÄúH.
‚ô¶

100
CHAPTER 3. FUNDAMENTAL CONSIDERATIONS IN SET
Exercise 3.4.4.7.
The 2-simplex Œî2 is drawn as a Ô¨Ålled-in triangle with vertices V ‚Äú t1, 2, 3u. There is
a simplicial complex, often denoted BŒî2, that would be drawn as an empty triangle with
the same set of vertices.
a. Draw Œî2 and BŒî2 side by side and make clear the diÔ¨Äerence.
b. Write X ‚Äú BŒî2 as a simplicial complex. In other words, what are the elements of the
sets X0, X1, X2, X3, . . .?
‚ô¶
Solution 3.4.4.7.
a.
0 
1 
2 
0 
1 
2 
Œî2 
‚àÇŒî2 
b. There are three 0-simplices, X0 ‚Äú t1, 2, 3u, and there are three 1-simplices, X1 ‚Äú
tt0, 1u, t1, 2u, t0, 2uu. There are no simplices of dimension 2 or more, so for n ƒõ 2, we
have Xn ‚Äú H.
‚ô¶
3.4.4.8
Subobject classiÔ¨Åer
Given a subset A ƒé X, we can decide for every element of X whether it is in A or not.
This is a true/false question for X.
DeÔ¨Ånition 3.4.4.9. We deÔ¨Åne the subobject classiÔ¨Åer for Set, denoted Œ©, to be the set
Œ© :‚Äú tTrue, Falseu, together with the function tu √ë Œ© sending the unique element to
True.

3.4. OTHER NOTIONS IN SET
101
Proposition 3.4.4.10. Let X be a set. There is an isomorphism
œÜ: HomSetpX, Œ©q ‚Äì
√ù√ë PpXq.
Proof. Given a function f : X √ë Œ©, let œÜpfq ‚Äú tx P X | fpxq ‚Äú Trueu ƒé X. We now
construct a function œà: PpXq √ë HomSetpX, Œ©q to serve as the inverse of œÜ. Given a
subset A ƒé X, we deÔ¨Åne
œàpAq: X √ë Œ©
by
œàpiqpxq ‚Äú
#
True
if x P A,
False
if x R A.
(3.25)
One checks easily that œÜ and œà are mutually inverse.
‚ñ°
Slogan 3.4.4.11.
A function X to Œ© ‚Äú tTrue, Falseu is like a roll call. We are interested in
the subset that calls out True.
DeÔ¨Ånition 3.4.4.12 (Characteristic function). Given a subset A ƒé X, we deÔ¨Åne its
characteristic function of A in X to be the function œàpAq: X √ë Œ©, from (3.25).
Let X be any set, and let PpXq be its power-set. By Proposition 3.4.4.10 there is a
bijection between PpXq and Œ©X. Since Œ© has cardinality 2, the cardinality of PpXq is
2|X|, which explains the correct answer to Exercise 3.4.4.2.
Exercise 3.4.4.13.
Let f : X √ë Œ© denote the characteristic function of some subset A ƒé X, and deÔ¨Åne
A1 ‚Äú X ¬¥ A to be its complement, i.e., A1 ‚Äú tx P X | x R Au.
a. What is the characteristic function of A1 ƒé X?
b. Can you phrase it in terms of f and some function Œ© √ë Œ©?
‚ô¶
Solution 3.4.4.13.
We solve both parts of this question at once. Let c: Œ© √ë Œ© be the function sending
True to False and sending False to True. Then the characteristic function of A1 ƒé X
is the composite
X
f√ù√ë Œ© c√ù√ë Œ©.
‚ô¶

102
CHAPTER 3. FUNDAMENTAL CONSIDERATIONS IN SET
3.4.5
Surjections, injections
The classical deÔ¨Ånition of injections and surjections, given in DeÔ¨Ånition 3.4.5.1 involves
elements. But a more robust notion involves functions; it is given in Proposition 3.4.5.8.
DeÔ¨Ånition 3.4.5.1. Let f : X √ë Y be a function.
‚Ä¢ We say that f is injective if for all x, x1 P X with fpxq ‚Äú fpx1q, we have x ‚Äú x1.
‚Ä¢ We say that f is surjective if for all y P Y , there exists some x P X such that
fpxq ‚Äú y.
‚Ä¢ We say that f is bijective if it is both injective and surjective.
We sometimes denote an injective function X √£√ë Y , a surjective function X ‚Ü†Y ,
and a bijective function X
‚Äì
√ù√ë Y (see Proposition 3.4.5.4).
Exercise 3.4.5.2.
a. Is the function f : Z √ë N, given by fpnq ‚Äú n2, injective, surjective, or neither?
b. Is the function g: N √ë N, given by gpnq ‚Äú n2, injective, surjective, or neither?
c. Is the function h: Z √ë N, given by hpnq ‚Äú |n| (the absolute value), injective, surjective,
or neither?
d. Is the function i: Z √ë Z, given by ipnq ‚Äú ¬¥n, injective, surjective, or neither?
‚ô¶
Solution 3.4.5.2.
a. It is neither. Because fp¬¥1q ‚Äú fp1q, it cannot be injective. Because no integer n P Z
satisÔ¨Åes fpnq ‚Ä∞ 2, it cannot be surjective.
b. It is injective but not surjective.
c. It is surjective but not injective.
d. It is bijective (i.e., both injective and surjective).
‚ô¶
Exercise 3.4.5.3.
Let f : X √ë Y and g: Y √ë Z be functions.

3.4. OTHER NOTIONS IN SET
103
a. Show that if f and g are injections, then so is g Àù f.
b. Show that if f and g are both surjections, then so is g Àù f.
c. Show that if g Àù f is an injection, then so is f.
d. Show that if g Àù f is a surjection, then so is g.
‚ô¶
Solution 3.4.5.3.
a. Let x, x1 P X and suppose that g Àù fpxq ‚Äú g Àù fpx1q. Then gpfpxqq ‚Äú gpfpx1qq, so the
injectivity of g implies that fpxq ‚Äú fpx1q; the injectivity of f implies that x ‚Äú x1.
b. Let z P Z be an element. The surjectivity of g implies that there is some y P Y with
gpyq ‚Äú z; the surjectivity of f implies that there is some x P X with fpxq ‚Äú y.
c. Let x, x1 P X and suppose that fpxq ‚Äú fpx1q. Because g is a function, g Àù fpxq ‚Äú
g Àù fpx1q, and now the injectivity of g Àù f implies that x ‚Äú x1.
d. Let z P Z be an element. The surjectivity of g Àù f implies that there is some x P X
with g Àù fpxq ‚Äú z. But then we have found y :‚Äú fpxq P Y with gpyq ‚Äú z.
‚ô¶
Proposition 3.4.5.4. A function f : X √ë Y is bijective if and only if it is an isomor-
phism.
Proof. Suppose that f is bijective; we deÔ¨Åne an inverse g: Y √ë X. For each y P Y ,
the preimage f ¬¥1pyq ƒé X is a set with exactly one element. Indeed, it has at least one
element because f is surjective, and it has at most one element because f is injective.
DeÔ¨Åne gpyq to be the unique element of f ¬¥1pyq. It is easy to see that f and g are mutually
inverse.
Note that for every set X, the identity function idX : X √ë X is bijective. Suppose
now that f is an isomorphism, and let g be its inverse. The composition g Àù f ‚Äú idX is
injective, and the composition f Àù g ‚Äú idY is surjective, so f is injective and surjective by
Exercise 3.4.5.3.
‚ñ°
Proposition 3.4.5.5. Let m, n P N be natural numbers. Then m ƒè n if and only if there
exists an injection m √£√ë n.
Sketch of proof. If m ƒè n, then there is an inclusion t1, 2, . . . , mu √ë t1, 2, . . . , nu. Sup-
pose now that we are given an injection f : m √ë n; we assume that m ƒÖ n and derive a

104
CHAPTER 3. FUNDAMENTAL CONSIDERATIONS IN SET
contradiction. If m ƒÖ n, then n ` 1 ƒè m, and we have already shown that there exists
an injection g: n ` 1 √£√ë m. Composing, we have an injection h :‚Äú g Àù f : n ` 1 √£√ë n by
Exercise 3.4.5.3. One can show by induction on n that this is impossible.
‚ñ°
Corollary 3.4.5.6. Let m, n P N be natural numbers. Then m ‚Äú n if and only if there
exists an isomorphism f : m ‚Äì
√ù√ë n.
Proof. If m ‚Äú n, then the identity idm : m √ë n is an isomorphism.
On the other hand, if we have an isomorphism f : m ‚Äì
√ù√ë n, then both it and its inverse
are injective by Proposition 3.4.5.4. Thus m ƒè n and n ƒè m by Proposition 3.4.5.5,
which implies m ‚Äú n.
‚ñ°
DeÔ¨Ånition 3.4.5.7 (Monomorphisms, epimorphisms). Let f : X √ë Y be a function.
We say that f is a monomorphism if for all sets A and pairs of functions g, g1 : A √ë X,
A
g

g1
0X
f
 Y,
if f Àù g ‚Äú f Àù g1, then g ‚Äú g1.
We say that f is an epimorphism if for all sets B and pairs of functions h, h1 : Y √ë B,
X
f
 Y
h
!
h1
" B,
if h Àù f ‚Äú h1 Àù f, then h ‚Äú h1.
Proposition 3.4.5.8. Let f : X √ë Y be a function. Then f is injective if and only if it
is a monomorphism; f is surjective if and only if it is an epimorphism.
Proof. We use notation as in DeÔ¨Ånition 3.4.5.7.
If f is a monomorphism, it is clearly injective by putting A ‚Äú tu. Suppose that f
is injective, and let g, g1 : A √ë X be functions such that f Àù g ‚Äú f Àù g1, but suppose for
contradiction that g ‚Ä∞ g1. Then there is some element a P A such gpaq ‚Ä∞ g1paq P X. But
by injectivity fpgpaqq ‚Ä∞ fpg1paqq, contradicting the fact that f Àù g ‚Äú f Àù g1.
Suppose that f : X √ë Y is an epimorphism, and choose some y0 P Y (noting that if
Y is empty, then the claim is vacuously true). Let B ‚Äú Œ©, and let h: Y √ë Œ© denote the

3.4. OTHER NOTIONS IN SET
105
characteristic function of the subset ty0u ƒé Y , and let h1 : Y √ë Œ© denote the characteristic
function of H ƒé Y . Note that hpyq ‚Äú h1pyq for all y ‚Ä∞ y0. Then since f is an epimorphism
and h ‚Ä∞ h1, we must have h Àù f ‚Ä∞ h1 Àù f, so there exists x P X with hpfpxqq ‚Ä∞ h1pfpxqq,
which implies that fpxq ‚Äú y0. This proves that f is surjective.
Finally, suppose that f is surjective, and let h, h1 : Y √ë B be functions with h Àù f ‚Äú
h1 Àù f. For any y P Y , there exists some x P X with fpxq ‚Äú y, so hpyq ‚Äú hpfpxqq ‚Äú
h1pfpxqq ‚Äú h1pyq. This proves that f is an epimorphism.
‚ñ°
Proposition 3.4.5.9. Let g: A √ë Y be a monomorphism.
Then for any function
f : X √ë Y , the left-hand map g1 : X ÀÜY A √ë X in the diagram
X ÀÜY A
f 1

g1

‚åü
A
g

X
f
 Y
is a monomorphism.
Proof. To show that g1 is a monomorphism, we take an arbitrary set B and two maps
m, n: B √ë X ÀÜY A such that g1 Àù m ‚Äú g1 Àù n, denoting that function p :‚Äú g1 Àù m: B √ë X.
Now let q ‚Äú f 1 Àù m and r ‚Äú f 1 Àù n. The diagram looks like this:
B
p

n

m

r
8
q
8
X ÀÜY A
f 1

g1

A
g

X
f
 Y
We have that
g Àù q ‚Äú g Àù f 1 Àù m ‚Äú f Àù g1 Àù m ‚Äú f Àù p ‚Äú f Àù g1 Àù n ‚Äú g Àù f 1 Àù n ‚Äú g Àù r
But we assumed that g is a monomorphism, so this implies that q ‚Äú r. By the universal
property for pullbacks, Proposition 3.2.1.15, we have m ‚Äú n ‚Äú xq, pyY : B √ë X ÀÜY A.
‚ñ°

106
CHAPTER 3. FUNDAMENTAL CONSIDERATIONS IN SET
Example 3.4.5.10. Suppose an olog has a Ô¨Åber product square
X ÀÜY A
‚åü
f 1

g1

A
g

X
f
 Y
such that g is intended to be a monomorphism and f is any map.9 In this case, there are
labeling systems for f 1, g1, and X ÀÜY A. Namely,
‚Ä¢ ‚Äúis‚Äù is an appropriate label for g and g1;
‚Ä¢ the label for f is an appropriate label for f 1;
‚Ä¢ xxX ÀÜY Ayy := ‚ÄúxxXyy, which xxfyy xxAyy‚Äù is an appropriate label for X ÀÜY A.
To give an explicit example,
XÀÜY A
a rib which is
made by a cow
is made by

is

A
a cow
is

X
a rib
is made by

Y
an animal
Corollary 3.4.5.11. Let i: A √ë X be a monomorphism, and let True: tu √ë Œ© be the
subobject classiÔ¨Åer (see DeÔ¨Ånition 3.4.4.9). Then there is a Ô¨Åber product square of the
form
A
f 1 
i

‚åü
tu
T rue

X
f
 Œ©
(3.26)
Proof. Let X1 ƒé X denote the image of i, and let f : X √ë Œ© denote the characteristic
function of X1 ƒé X, given by Proposition 3.4.4.10. Then it is easy to check that diagram
(3.26) is a pullback.
‚ñ°
9Of course, this diagram is symmetrical, so the same ideas hold if f is a monomorphism and g is any
map.

3.4. OTHER NOTIONS IN SET
107
Exercise 3.4.5.12.
Consider the subobject classiÔ¨Åer Œ© ‚Äú tTrue, Falseu, the singleton tu, and the map
tu T rue
√ù√ù√ù√ë Œ© from DeÔ¨Ånition 3.4.4.9. In diagram (3.26), in the spirit of Example 3.4.5.10,
devise a label for Œ©, a label for tu, and a label for True. Given a subobject A ƒé X,
both labeled, devise a label for f, a label for i, and a label for f 1 such that the English
smoothly Ô¨Åts the mathematics.
‚ô¶
Solution 3.4.5.12.
Let‚Äôs take the label for Œ© to be the question mark, xxŒ©yy ‚Äú ‚åú?‚åù, the label for tu to
be blank xxtuyy ‚Äú ‚åú‚åù, and the label for True to be ‚Äúis.‚Äù Given any subobject A ƒé X,
we deÔ¨Åne xxfyy ‚Äú ‚Äúis xxAyy‚Äù. The rules from Example 3.4.5.10 imply that xxiyy ‚Äú‚Äúis‚Äù and
xxf 1yy ‚Äú xxfyy. This all looks very abstract, so here is an example:
A
a cow
is a cow

is

tu
is

X
an animal
is a cow

Œ©
?
Note that the unique map to the terminal object from any other object, e.g., ‚åúa cow‚åù,
now reads ‚Äúa cow is a cow.‚Äù The characteristic function for cows as a subset of any other
type is now ‚Äúis a cow?‚Äù The rules of Example 3.4.5.10 tell us that ‚åúa cow‚åùshould be
semantically equivalent to ‚åúan animal which is a cow‚åù, which it is.
‚ô¶
Exercise 3.4.5.13.
Show, in analogy to Proposition 3.4.5.9, that pushouts preserve epimorphisms.
‚ô¶
Solution 3.4.5.13.
We want to prove the following:
Let g: Y √ë A be an epimorphism. Then for any function f : Y √ë X, the
right-hand map g1 : X √ë A \Y X in the diagram

108
CHAPTER 3. FUNDAMENTAL CONSIDERATIONS IN SET
Y
f

g

X
g1

A
f 1  A \Y X
‚åú
is an epimorphism.
Proof. To show that g1 is an epimorphism, we take an arbitrary set B and two maps
m, n: A \Y X √ë B such that m Àù g1 ‚Äú n Àù g1, denoting that function p :‚Äú m Àù g1 : A √ë B.
Now let q ‚Äú m Àù g1 and r ‚Äú n Àù g1. The diagram looks like this:
Y
f

g

X
g1

p

A
f 1

q
8
r
8
A \Y X
m

n

B
We have that
q Àù g ‚Äú m Àù f 1 Àù g ‚Äú m Àù g1 Àù f ‚Äú p Àù f ‚Äú n Àù g1 Àù f ‚Äú n Àù f 1 Àù g ‚Äú r Àù g.
But we assumed that g is an epimorphism, so this implies that q ‚Äú r. By the universal
property for pushouts, Proposition 3.3.2.8, we have m ‚Äú n ‚Äú Y
!q
p .
‚ñ°
‚ô¶
3.4.6
Multisets, relative sets, and set-indexed sets
In this section we prepare to consider categories other than Set by looking at some
categories related to Set.

3.4. OTHER NOTIONS IN SET
109
3.4.6.1
Multisets
Consider the set X of words in a given document.
If WCpXq is the word count of
the document, we do not generally have WCpXq ‚Äú |X|. The reason is that a set cannot
contain the same element more than once, so words like the might be undercounted in |X|.
A multiset X consists of a set of names, NX, and each name is assigned a multiplicity, i.e.,
a positive Ô¨Ånite number of times it is to be counted. For example, the multiset X ‚Äú(The,
man, just, ate, and, ate, and, ate) has names NX ‚Äú tThe, man, just, ate, andu, and these
names have multiplicity 1, 1, 1, 3, 2 respectively.
But if X and Y are multisets, what is the appropriate type of mapping from X to Y ?
Since every set can be cast as a multiset (in which each element has multiplicity 1), let‚Äôs
restrict ourselves to notions of mapping that agree with the usual one on sets. That is,
if multisets X and Y happen to be ordinary sets, then our mappings X √ë Y should just
be functions.
In order to deÔ¨Åne what I believe is the appropriate notion of mapping of multisets,
it is useful to take a step back from this deÔ¨Ånition. The role of the natural numbers in
multisets is to count the number of occurrences of each element. The point perhaps is
not the number, but the set of occurrences it counts. Each occurrence has a name, so we
have a function from occurrences to names. The fact that every name has multiplicity
at least 1 means that this function is surjective. So I suggest the following deÔ¨Ånition of
multisets and mappings.
DeÔ¨Ånition 3.4.6.2. A multiset is a sequence X :‚Äú pOc, N, œÄq, where Oc and N are sets
and œÄ: Oc √ë N is a surjective function. We refer to Oc as the set of occurrences in X,
to N as the set of names in X, and to œÄ as the naming function for X. Given a name
x P N, let œÄ¬¥1pxq ƒé Oc be the preimage; the number of elements in œÄ¬¥1pxq is called the
multiplicity of x.
Suppose that X ‚Äú pOc, N, œÄq and X1 ‚Äú pOc1, N 1, œÄ1q are multisets. A mapping from
X to Y , denoted f : X √ë Y , consists of a pair pf1, f0q such that f1 : Oc √ë Oc1 and
f0 : N √ë N 1 are functions and such that the following diagram commutes:
Oc
f1 
œÄ

Oc1
œÄ1

N
f0
 N 1
(3.27)
Exercise 3.4.6.3.
Suppose that a pseudo-multiset is deÔ¨Åned to be almost the same as a multiset, except
that œÄ is not required to be surjective.

110
CHAPTER 3. FUNDAMENTAL CONSIDERATIONS IN SET
a. Write a pseudo-multiset that is not a multiset.
b. Describe the diÔ¨Äerence between the two notions (multiset vs.
pseudo-multiset) in
terms of multiplicities.
‚ô¶
Solution 3.4.6.3.
a. X ‚Äú pH, tu, !q, where !: H √ë tu is the unique function.

3.4. OTHER NOTIONS IN SET
111
b. In a multiset the multiplicity of each element must be an integer n ƒõ 1, whereas in a
pseudo-multiset the multiplicity of an element may be 0.
‚ô¶
Exercise 3.4.6.4.
Consider the multisets X ‚Äú pa, a, b, cq and Y ‚Äú pd, d, e, e, eq.
a. Write each of them in the form pOc, N, œÄq, as in DeÔ¨Ånition 3.4.6.2.
b. In terms of the same deÔ¨Ånition, how many mappings X √ë Y are there?
c. If we were to remove the restriction that diagram (3.27) must commute, how many
mappings X √ë Y would there be?
‚ô¶
Solution 3.4.6.4.
a. We use the sequence notation from (2.5) for functions out of n:
OcX ‚Äú 4,
NX ‚Äú pa, b, cq,
œÄX ‚Äú pa, a, b, cq
OcY ‚Äú 5,
NY ‚Äú pd, eq,
œÄY ‚Äú pd, d, e, e, eq
b. Computations are diÔ¨Écult to follow and explain. So the following will likely only make
sense to those who have worked on the problem.
A map X √ë Y is obtained by choosing a function f : NX √ë NY from X names to Y
names and then, for each X name x P NX, choosing a function from the Ô¨Åber œÄ¬¥1
X pxq
over x to the Ô¨Åber œÄ¬¥1
Y pfpxqq over fpxq. There are eight maps NX √ë NY :
1
2
3
4
5
6
7
8
a
d
d
d
d
e
e
e
e
b
d
d
e
e
d
d
e
e
c
d
e
d
e
d
e
d
e
For each such map f and for each x P ta, b, cu, we count how many maps from the Ô¨Åber
over x to the Ô¨Åber over fpxq. The sizes of the various Ô¨Åbers are 1,2, and 3, because
these are the multiplicities of a, b, c, d, e. So we have the following array:
1
2
3
4
5
6
7
8
a
22
22
22
22
32
32
32
32
b
21
21
31
31
21
21
31
31
c
21
31
21
31
21
31
21
31

112
CHAPTER 3. FUNDAMENTAL CONSIDERATIONS IN SET
The result now comes by multiplying the entries in each column and adding:
16 ` 24 ` 24 ` 36 ` 36 ` 54 ` 54 ` 81 ‚Äú 325.
c. There would be 54 Àö 23 ‚Äú 5000.
‚ô¶
3.4.6.5
Relative sets
Continuing with ideas from multisets, let‚Äôs suppose that we have a Ô¨Åxed set N of names
that we want to keep once and for all. Whenever someone discusses a set, each of its
elements must have a name in N. And whenever someone discusses a mapping, it must
preserve the naming. For example, if N is the set of English words, then every document
consists of a set t1, 2, 3, . . . , nu mapping to N (e.g., 1 √û√ë Continuing, 2 √û√ë with, 3 √û√ë
ideas, . . .). A mapping from document A to document B would send each word found
somewhere in A to the same word found somewhere in B. This notion is deÔ¨Åned in the
following deÔ¨Ånition.
DeÔ¨Ånition 3.4.6.6 (Relative set). Let N be a set. A relative set over N, or simply a
set over N, is a pair pE, œÄq such that E is a set and œÄ: E √ë N is a function. A mapping
of relative sets over N, denoted f : pE, œÄq √ë pE1, œÄ1q, is a function f : E √ë E1 such that
the following triangle commutes, i.e., œÄ ‚Äú œÄ1 Àù f:
E
f

œÄ

E1
œÄ1
9
N
‚úì
Exercise 3.4.6.7.
Given sets X, Y, Z and functions f : X √ë Y and g: Y √ë Z, we can compose them
to get a function X √ë Z.
If N is a set, if pX, pq, pY, qq, and pZ, rq are relative sets
over N, and if f : pX, pq √ë pY, qq and g: pY, qq √ë pZ, rq are mappings of relative sets,
is there a reasonable notion of composition such that we get a mapping of relative sets
pX, pq √ë pZ, rq? Hint: Draw diagrams.
‚ô¶

3.4. OTHER NOTIONS IN SET
113
Solution 3.4.6.7.
Yes. We are given two commutative triangles, p ‚Äú q Àù f and q ‚Äú r Àù g:
X
f

p
)
Y
g

q

Z
r

N
The composite function g Àùf : X √ë Z works as a mapping of relative sets over N because
p ‚Äú q Àù f ‚Äú r Àù pg Àù fq, as required.
‚ô¶
Exercise 3.4.6.8.
a. Let tu denote a set with one element. What is the diÔ¨Äerence between sets relative
to N :‚Äú tu and simply sets?
b. Describe the sets relative to H. How many are there?
‚ô¶
Solution 3.4.6.8.
a. There is no real diÔ¨Äerence, because a relative set over tu is given by specifying a set
X and a function X √ë tu, which is no more information than simply specifying the
set X.
b. A set relative to H is a set X and a function X √ë H. But the only set for which
there exists such a function is X ‚Äú H. So there is only one set relative to H.
‚ô¶
3.4.6.9
Indexed sets
Let A be a set. Suppose we want to assign to each element a P A a set Sa. This is called
an A-indexed set. In category theory we are always interested in the legal mappings
between two diÔ¨Äerent objects of the same sort of structure, so we need a notion of A-
indexed mappings.
Example 3.4.6.10. Let C be a set of classrooms. For each c P C, let Pc denote the set of
people in classroom c, and let Sc denote the set of seats (chairs) in classroom c. Then P

114
CHAPTER 3. FUNDAMENTAL CONSIDERATIONS IN SET
and S are C-indexed sets. The appropriate kind of mapping between them respects the
indices. That is, a mapping of C-indexed sets P √ë S should, for each classroom c P C,
be a function Pc √ë Sc.10
DeÔ¨Ånition 3.4.6.11. Let A be a set. An A-indexed set is a collection of sets Sa, one
for each element a P A; for now we denote this pSaqaPA. Each element a P A is called
an index. If pS1
aqaPA is another A-indexed set, an A-indexed function from pSaqaPA to
pS1
aqaPA, denoted
pfaqaPA : pSaqaPA √ë pS1
aqaPA,
is a collection of functions fa : Sa √ë S1
a, one for each element a P A.
Exercise 3.4.6.12.
Let tu denote a one-element set. What are tu-indexed sets and tu-indexed func-
tions?
‚ô¶
Solution 3.4.6.12.
A tu-indexed set is just a collection of exactly one set. So there is no real diÔ¨Äerence
between tu-indexed sets and simply sets, nor is there a diÔ¨Äerence between tu-indexed
functions and simply functions.
‚ô¶
Exercise 3.4.6.13.
There is a strong relationship between A-indexed sets and relative sets over A. What
is it?
‚ô¶
Solution 3.4.6.13.
These two notions are equivalent. Given an A-indexed set pSaqaPA, we can turn it
into a relative set as follows. Consider S :‚Äú ≈°
aPA Sa, the disjoint union of all sets in
the collection. The obvious function S √ë A, given by sending each element to the index
from which it came, is a relative set. Going the other way, given a relative set E
œÄ√ù√ë N,
we create an N-indexed set pPnqnPN, putting Pn :‚Äú œÄ¬¥1pnq.
‚ô¶
10If we wanted to allow people from any classroom to choose a chair from just any classroom, category
theory would tell us to reconsider P and S as sets, forgetting their C-indices. See Section 7.1.4.6.

Chapter 4
Categories and Functors,
Without Admitting It
In this chapter we begin to use our understanding of sets to examine more interesting
mathematical worlds, each of which organizes understanding of a certain kind of domain.
For example, monoids organize thoughts about agents acting on objects.
Groups are
monoids except restricted to only allow agents to act in reversible ways. We then study
graphs, which are systems of nodes and arrows that can capture ideas like information
Ô¨Çow through a network or model connections between building blocks in a material. We
discuss orders, which can be used to study taxonomies or hierarchies. Finally we take a
mathematical look at databases, which actually subsume everything else in the chapter.
Databases are connection patterns for structuring information.
Everything studied in this chapter is an example of a category (see Chapter 5). So is
Set, the category of sets studied in Chapters 2 and 3. One way to think of a category
is as a bunch of objects and a connection pattern between them. The category Set has
individual sets as objects, with functions serving as the connections between them. But
there is a certain self-similarity here‚Äîeach set, thought of as a bag of dots, can itself be
viewed as a category: the objects inside it are just disconnected. Each set is a category,
but there is also a category of sets. In this way, sets have an interior view and an exterior
view, as do all the categories in this chapter. Each monoid is a category, but there is also
a category of monoids.
However, the word category is not used much in this chapter. It seems preferable
to let the ideas arise as interesting structures in their own right before explaining how
everything Ô¨Åts into a single framework.
115

116
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
4.1
Monoids
A common way to interpret phenomena around us is to say that agents are acting on
objects. For example, the user of a computer drawing program acts on the canvas in
certain prescribed ways. Choices of actions from an available list can be performed in
sequence to transform one image into another. As another example, one might investigate
the notion that time acts on the position of hands on a clock in a prescribed way. A Ô¨Årst
rule for actions is captured in the following slogan.
Slogan 4.1.0.14.
The performance of a sequence of several actions is itself the performance of
an action‚Äîa more complex action, but an action nonetheless.
Mathematical objects called monoids and groups are tasked with encoding the agent‚Äôs
perspective, i.e., what the agent can do, and what happens when she does a sequence
of actions in succession. A monoid can be construed as a set of actions together with a
formula that encodes how a sequence of actions is itself considered an action. A group is
the same as a monoid except that every action is required to be reversible.
4.1.1
DeÔ¨Ånition and examples
DeÔ¨Ånition 4.1.1.1 (Monoid). A monoid is a sequence pM, e, ‚Äπq, where M is a set, e P M
is an element, and ‚Äπ: M ÀÜ M √ë M is a function, such that the following monoid laws
hold for all m, n, p P M:
‚Ä¢ m ‚Äπ e ‚Äú m.
‚Ä¢ e ‚Äπ m ‚Äú m.
‚Ä¢ pm ‚Äπ nq ‚Äπ p ‚Äú m ‚Äπ pn ‚Äπ pq.
We refer to e as the unit element and to ‚Äπ as the multiplication formula for the monoid.1
We call the Ô¨Årst two rules unit laws and the third rule the associativity law for monoids.
Remark 4.1.1.2. To be pedantic, the conditions from DeÔ¨Ånition 4.1.1.1 should be stated
‚Ä¢ ‚Äπpm, eq ‚Äú m.
‚Ä¢ ‚Äπpe, mq ‚Äú m.
1Although the function ‚Äπ: M ÀÜ M √ë M is called the multiplication formula, it may have nothing to
do with multiplication. It is just a formula for taking two inputs and returning an output.

4.1. MONOIDS
117
‚Ä¢ ‚Äπp‚Äπpm, nq, pq ‚Äú ‚Äπpm, p‚Äπpn, pqq.
The way they are written in DeÔ¨Ånition 4.1.1.1 is called inÔ¨Åx notation,. Given a function
‚Äπ: A ÀÜ B √ë C, we may write a ‚Äπ b rather than ‚Äπpa, bq.
Example 4.1.1.3 (Additive monoid of natural numbers). Let M ‚Äú N be the set of natural
numbers. Let e ‚Äú 0, and let ‚Äπ: M ÀÜ M √ë M denote addition, so that ‚Äπp4, 18q ‚Äú 4 ‚Äπ 18 ‚Äú
22. Then the equations m ‚Äπ 0 ‚Äú m and 0 ‚Äπ m ‚Äú m hold, and pm ‚Äπ nq ‚Äπ p ‚Äú m ‚Äπ pn ‚Äπ pq
because, as we learned in grade school, addition is associative. By assigning e and ‚Äπ in
this way, we have given N the structure of a monoid. We usually denote it pN, 0, `q.
Remark 4.1.1.4. Sometimes we are working with a monoid pM, e, ‚Äπq, and the unit e and
multiplication ‚Äπ are somehow clear from context. In this case we might refer to the set
M as though it were the whole monoid. For example, if we were discussing the monoid
from Example 4.1.1.3, we might refer to it as N. The danger comes because sets may
have multiple monoid structures (see Exercise 4.1.1.6).
Example 4.1.1.5 (Nonmonoid). If M is a set, we might call a function f : M ÀÜM √ë M an
operation on M. For example, if M ‚Äú N is the set of natural numbers, we can consider
the operation f : N ÀÜ N √ë N called exponentiation e.g., fp2, 5q ‚Äú 2 Àö 2 Àö 2 Àö 2 Àö 2 ‚Äú 32 and
fp7, 2q ‚Äú 49. This is indeed an operation, but it is not the multiplication formula for any
monoid. First, there is no possible unit. Trying the obvious choice of e ‚Äú 1, we see that
a1 ‚Äú a (good), but that 1a ‚Äú 1 (bad: we need it to be a). Second, this operation is not
associative because in general apbcq ‚Ä∞ pabqc. For example, 2p12q ‚Äú 2, but p21q2 ‚Äú 4.
One might also attempt to consider an operation f : M ÀÜ M √ë M that upon closer
inspection is not even an operation. For example, if M ‚Äú Z, then exponentiation is not
even an operation. Indeed, fp2, ¬¥1q ‚Äú 2¬¥1 ‚Äú 1
2, and this is not an integer. To have a
function f : M ÀÜ M √ë M, it is required that every element of the domain‚Äîin this case
every pair of integers‚Äîhave an output under f. So there is no exponentiation function
on Z.
Exercise 4.1.1.6.
Let M ‚Äú N be the set of natural numbers. Taking e ‚Äú 1 as the unit, devise a formula
for ‚Äπ that gives N the structure of a monoid.
‚ô¶
Solution 4.1.1.6.
Let ‚Äπ denote the usual multiplication of natural numbers, e.g., 5 ‚Äπ 7 ‚Äú 35. Then for
any m, n, p P N, we have 1 ‚Äπ m ‚Äú m ‚Äπ 1 ‚Äú m and pm ‚Äπ nq ‚Äπ p ‚Äú m ‚Äπ pn ‚Äπ pq, as required. ‚ô¶

118
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
Exercise 4.1.1.7.
Find an operation on the set M ‚Äú t1, 2, 3, 4u, i.e., a legitimate function f : M ÀÜ M √ë
M, such that f cannot be the multiplication formula for a monoid on M. That is, either
it is not associative or no element of M can serve as a unit.
‚ô¶
Solution 4.1.1.7.
Here is an example: fpm, nq ‚Äú 4 for all m, n P M. This fails to be a multiplication
formula because no element of M can serve as a unit.
Here are multiplication formulas that have a unit (namely, 4) but that have been
prevented from being associative.
‚Äπ
1
2
3
4
1
?
2
2
1
2
?
?
3
2
3
?
?
?
3
4
1
2
3
4
Here 1 ‚Äπ 3 ‚Äú 2, and so on. Each question mark (?) can be Ô¨Ålled with any element of
M, and the result will fail to be a multiplication formula because the following argument
shows that it cannot be associative:
p1 ‚Äπ 2q ‚Äπ 3 ‚Äú 2 ‚Äπ 3 ‚Äú 3 ‚Ä∞ 2 ‚Äú 1 ‚Äπ 3 ‚Äú 1 ‚Äπ p2 ‚Äπ 3q.
‚ô¶
Exercise 4.1.1.8.
In both Example 4.1.1.3 and Exercise 4.1.1.6, the monoids pM, e, ‚Äπq satisÔ¨Åed an ad-
ditional rule called commutativity, namely, m ‚Äπ n ‚Äú n ‚Äπ m for every m, n P M. There is
a monoid pM, e, ‚Äπq in linear algebra that is not commutative; if you have background in
linear algebra, what monoid pM, e, ‚Äπq might I be referring to?
‚ô¶
Solution 4.1.1.8.
Matrix multiplication is not commutative. Let M be the set of 2 ÀÜ 2 matrices, let
e P M be the identity matrix, and let ‚Äπ be matrix multiplication. It is not commutative:
ÀÜ
1
1
0
0
Àô ÀÜ
1
0
1
0
Àô
‚Ä∞
ÀÜ
1
0
1
0
Àô ÀÜ
1
1
0
0
Àô
.
‚ô¶

4.1. MONOIDS
119
Exercise 4.1.1.9.
Recall the notion of commutativity for monoids from Exercise 4.1.1.8.
a. What is the smallest set M that you can give the structure of a noncommutative
monoid?
b. What is the smallest set M that you can give the structure of a monoid?
‚ô¶
Solution 4.1.1.9.
a. Take M ‚Äú t1, 2, 3u with unit 1 and multiplication given as follows:
‚Äπ
1
2
3
1
1
2
3
2
2
2
3
3
3
2
3
Then 2 ‚Äπ 3 ‚Äú 3 ‚Ä∞ 2 ‚Äú 3 ‚Äπ 2, so it is not commutative.
One can check that it is
associative. There are two monoid structures on any set with two elements, and they
are both commutative.
b. The set M ‚Äú tu has a unique possibility for unit and for multiplication formula, and
these give it the structure of a monoid.
‚ô¶
Example 4.1.1.10 (Trivial monoid). There is a monoid with only one element, M ‚Äú
pteu, e, ‚Äπq, where ‚Äπ: teu ÀÜ teu √ë teu is the unique function. We call this monoid the
trivial monoid and sometimes denote it 1.
Example 4.1.1.11. Suppose that pM, e, ‚Äπq is a monoid. Given elements m1, m2, m3, m4,
there are Ô¨Åve diÔ¨Äerent ways to parenthesize the product m1 ‚Äπ m2 ‚Äπ m3 ‚Äπ m4, and the
associativity law for monoids will show them all to be the same. We have
ppm1 ‚Äπ m2q ‚Äπ m3q ‚Äπ m4 ‚Äú pm1 ‚Äπ m2q ‚Äπ pm3 ‚Äπ m4q
‚Äú pm1 ‚Äπ pm2 ‚Äπ m3qq ‚Äπ m4
‚Äú m1 ‚Äπ pm2 ‚Äπ pm3 ‚Äπ m4qq
‚Äú m1 ‚Äπ ppm2 ‚Äπ m3q ‚Äπ m4q.
In fact, the product of any list of monoid elements is the same, regardless of paren-
thesization. Therefore, we can unambiguously write m1 ‚Äπ m2 ‚Äπ m3 ‚Äπ m4 ‚Äπ m5 rather than
any given parenthesization of it. A substantial generalization of this is known as the
coherence theorem and can be found in Mac Lane [29].

120
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
4.1.1.12
Free monoids and Ô¨Ånitely presented monoids
DeÔ¨Ånition 4.1.1.13. Let X be a set. A list in X is a pair pn, fq, where n P N is a natural
number (called the length of the list) and f : n √ë X is a function, where n ‚Äú t1, 2, . . . , nu.
We may denote such a list
pn, fq ‚Äú rfp1q, fp2q, . . . , fpnqs.
The set of lists in X is denoted ListpXq.
The empty list is the unique list in which n ‚Äú 0; we may denote it r s. Given an
element x P X, the singleton list on x is the list rxs. Given a list L ‚Äú pn, fq and a number
i P N with i ƒè n, the ith entry of L is the element fpiq P X.
Given two lists L ‚Äú pn, fq and L1 ‚Äú pn1, f 1q, deÔ¨Åne the concatenation of L and L1,
denoted L ``L1, to be the list pn ` n1, f ``f 1q, where f ``f 1 : n ` n1 √ë X is given on
1 ƒè i ƒè n ` n1 by
pf ``f 1qpiq :‚Äú
#
fpiq
if 1 ƒè i ƒè n,
f 1pi ¬¥ nq
if n ` 1 ƒè i ƒè n ` n1.
Example 4.1.1.14. Let X ‚Äú ta, b, c, . . . , zu. The following are elements of ListpXq:
ra, b, cs, rps, rp, a, a, a, ps, r s, . . . .
The concatenation of ra, b, cs and rp, a, a, a, ps is ra, b, c, p, a, a, a, ps. The concatenation of
any list ‚Ñìwith r s is just ‚Ñì.
DeÔ¨Ånition 4.1.1.15. Let X be a set. The free monoid generated by X is the sequence
FX :‚Äú pListpXq, r s, ``q, where ListpXq is the set of lists of elements in X, r s P ListpXq
is the empty list, and `` is the operation of list concatenation. We refer to X as the set
of generators for the monoid FX.
Exercise 4.1.1.16.
Let tu denote a one-element set.
a. What is the free monoid generated by the set tu?
b. What is the free monoid generated by H?
‚ô¶

4.1. MONOIDS
121
Solution 4.1.1.16.
a. The set Listptuq of lists in which every entry is  can be identiÔ¨Åed with the set N of
natural numbers, because such a list has a length but no additional information. The
empty list corresponds to 0 P N, and concatenation of lists corresponds to addition of
natural numbers. So the free monoid F on one generator is pN, 0, `q, as in Example
4.1.1.3.
b. An element of ListpHq is a pair pn, fq, where n P N and f : n √ë H. But the only
time there is a function X √ë H is when X ‚Äú H, so we must have n ‚Äú 0. That is,
ListpHq consists of one element, the empty list r s, which serves as the identity. Thus
the free monoid FH on an empty set of generators is the trivial monoid 1 (see Example
4.1.1.10).
‚ô¶
An equivalence relation that interacts well with the multiplication formula of a monoid
is called a congruence on that monoid.
DeÔ¨Ånition 4.1.1.17. Let M :‚Äú pM, e, ‚Äπq be a monoid.
A congruence on M is an
equivalence relation ‚Äû on M, such that for any m, m1 P M and any n, n1 P M, if m ‚Äû m1
and n ‚Äû n1, then m ‚Äπ n ‚Äû m1 ‚Äû n1.
Proposition 4.1.1.18. Suppose that M :‚Äú pM, e, ‚Äπq is a monoid. Then the following
facts hold:
1. Given any relation R ƒé M ÀÜ M, there is a smallest congruence S containing R.
We call S the congruence generated by R.
2. If R ‚Äú H and ‚Äû is the congruence it generates, then there is an isomorphism
M
‚Äì
√ù√ë pM{‚Äûq.
3. Suppose that ‚Äû is a congruence on M. Then there is a monoid structure M{‚Äû on
the quotient set M{‚Äû, compatible with M.
Proof.
1. Let LR be the set of all congruences on M that contain R. Using reasoning
similar to that used in the proof of Proposition 3.3.1.7, one sees that LR is nonempty
and that its intersection, S ‚Äú ≈û
‚ÑìPLR ‚Ñì, serves.
2. If R ‚Äú H, then the minimal reÔ¨Çexive relation tpm, mq | m P Mu ƒé M ÀÜ M is the
congruence generated by M. We have an isomorphism M
‚Äì
√ù√ë M{ ‚Äû by Exercise
3.3.1.9.

122
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
3. Let Q: M √ë M{‚Äû be the quotient function (as in DeÔ¨Ånition 3.3.1.1); note that
it is surjective. We Ô¨Årst want to give a monoid structure on M{‚Äû, i.e., we need
a unit element e1 and a multiplication formula ‚Äπ1. Let e1 ‚Äú Qpeq. Suppose given
p, q P M{‚Äû and respectively let m, n P M be a pair of representatives, so Qpmq ‚Äú p
and Qpnq ‚Äú q. DeÔ¨Åne p‚Äπ1q :‚Äú Qpm‚Äπnq. If we chose a diÔ¨Äerent pair of representatives
Qpm1q ‚Äú p and Qpn1q ‚Äú q, then we would have m ‚Äû m1 and n ‚Äû n1 so pm ‚Äπ nq ‚Äû
pm1 ‚Äπ n1q, which implies Qpm ‚Äπ nq ‚Äú Qpm1 ‚Äπ n1q; hence the composition formula is
well deÔ¨Åned. It is easy to check that M{‚Äû:‚Äú pM{‚Äû, e1, ‚Äπ1q is a monoid. It follows
that Q: M √ë M{‚Äû extends to a monoid homomorphism Q: M √ë M{‚Äû, as in
DeÔ¨Ånition (4.1.4.1), which makes precise the compatibility claim.
‚ñ°
DeÔ¨Ånition 4.1.1.19 (Presented monoid). Let G be a Ô¨Ånite set, and let R ƒé ListpGq ÀÜ
ListpGq be a relation.
The monoid presented by generators G and relations R is the
monoid M ‚Äú pM, e, ‚Äπq, deÔ¨Åned as follows. Begin with the free monoid FG ‚Äú pListpGq, r s, ``q
generated by G. Let ‚Äû denote the congruence on FG generated by R, as in Proposition
4.1.1.18, and deÔ¨Åne M :‚Äú FG{‚Äû.
Each element r P R is of the form r ‚Äú p‚Ñì, ‚Ñì1q for lists ‚Ñì, ‚Ñì1 P ListpGq. For historical
reasons we call the each of the resulting expressions ‚Ñì‚Äû ‚Ñì1 a relation in R.
Slogan 4.1.1.20.
A presented monoid is a set of buttons you can press and some facts about
when diÔ¨Äerent button sequences have the same results.
Remark 4.1.1.21. Every free monoid is a presented monoid, because we can just take the
set of relations to be empty.
Example 4.1.1.22. Let G ‚Äú ta, b, c, du. Think of these as buttons that can be pressed.
The free monoid FG ‚Äú pListpGq, r s, ``q is the set of all ways of pressing buttons, e.g.,
pressing a, then a, then c, then c, then d corresponds to the list ra, a, c, c, ds. The idea
of presented monoids is that we can assert that pressing ra, a, cs always gives the same
result as pressing rd, ds and that pressing rc, a, c, as is the same thing as doing nothing.
In this case, the relation R ƒé ListpGq ÀÜ ListpGq would be
R
ra, a, cs
rd, ds
ra, c, a, cs
r s
As in Proposition 4.1.1.18, the relation R generates a congruence ‚Äû on ListpGq, and
this can be complex.
For example, would you guess that rb, c, b, d, d, a, c, a, a, c, ds ‚Äû

4.1. MONOIDS
123
rb, c, b, a, d, d, ds? Here is the calculation in M ‚Äú ListpGq{‚Äû :
rb, c, b, d, d, a, c, a, a, c, ds ‚Äú rb, c, bs ‚Äπ rd, ds ‚Äπ ra, c, a, a, c, ds
‚Äú rb, c, b, as ‚Äπ ra, c, a, cs ‚Äπ ra, a, c, ds
‚Äú rb, c, b, a, a, a, c, ds
‚Äú rb, c, b, as ‚Äπ ra, a, cs ‚Äπ rds
‚Äú rb, c, b, a, d, d, ds.
Exercise 4.1.1.23.
Let K :‚Äú tBS, a, b, c, . . . , zu, a set having 27 elements. Suppose one thinks of BS P K
as the backspace key and the elements a, b, . . . z P K as the letter keys on a keyboard.
Then the free monoid ListpKq is not quite appropriate for modeling the keyboard because
we want, e.g., ra, b, d, BSs ‚Äú ra, bs.
a. Choose a set of relations for which the monoid presented by generators K and the
chosen relations is appropriate to this application.
b. Under your relations, how does the singleton list rBSs compare with the empty list
r s? Is that suitable?
‚ô¶
Solution 4.1.1.23.
a. We need a relation R ƒé ListpKq ÀÜ ListpKq. Let
R ‚Äú tprx, BSs, r sq | x P ListpKq, x ‚Ä∞ BSu.
The idea is that, for every non-backspace key x ‚Ä∞ BS, if we press x, then BS, we get
the same result as doing nothing. That is, rx, BSs ‚Äû r s.
b. Note that we have rBSs ‚Ä∞ r s, which might seem strange because one normally thinks
of pressing the backspace key on an empty string as yielding the empty string. But
this is required because if we were to have rBSs ‚Äú? r s, then we would have r s ‚Äú
rx1, BSs ‚Äú rx1s ‚Äπ rBSs ‚Äú? rx1s, which would kill everything, i.e., make the presented
monoid trivial.
‚ô¶

124
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
4.1.1.24
Cyclic monoids
DeÔ¨Ånition 4.1.1.25. A monoid is called cyclic if it has a presentation involving only
one generator.
Example 4.1.1.26. Let Q be a symbol; we look at some cyclic monoids generated by tQu.
With no relations the monoid would be the free monoid on one generator and would have
underlying set tr s, rQs, rQ, Qs, rQ, Q, Qs, . . .u, with unit element r s and multiplication
given by concatenation (e.g., rQ, Q, Qs ``rQ, Qs ‚Äú rQ, Q, Q, Q, Qs). This is just N, the
additive monoid of natural numbers.
With the really strong relation rQs ‚Äû r s we would get the trivial monoid, as in
Example 4.1.1.10.
Another possibility is given in the Ô¨Årst part of Example 4.1.2.3, where the relation
Q12 ‚Äû r s is used, where Q12 is shorthand for rQ, Q, Q, Q, Q, Q, Q, Q, Q, Q, Q, Qs. This
monoid has 12 elements.
Example 4.1.1.27. Consider the cyclic monoid with generator Q and relation Q7 ‚Äú Q4.
This monoid has seven elements,
tQ0, Q1, Q2, Q3, Q4, Q5, Q6u,
where Q0 ‚Äú e and Q1 ‚Äú Q. As an example of the multiplication formula, we have:
Q6 ‚Äπ Q5 ‚Äú Q7 Àö Q4 ‚Äú Q4 Àö Q4 ‚Äú Q7 Àö Q ‚Äú Q5.
One might depict the cyclic monoid with relation Q7 ‚Äú Q4 as follows:
e‚Äö
 Q‚Äö
 Q2
‚Äö
 Q3
‚Äö
 Q4
‚Äö
:
Q6
‚Äö
;
Q5
‚Äö

To see the mathematical source of this intuitive depiction, see Example 7.2.1.19.
Exercise 4.1.1.28.
Classify all the cyclic monoids up to isomorphism. That is, construct a naming system
such that every cyclic monoid can be given a name in your system, no two nonisomorphic
cyclic monoids have the same name, and no name exists in the system unless it refers to
a cyclic monoid.
Hint: One might see a pattern in which the three monoids in Example 4.1.1.26 cor-
respond respectively to 8, 1, and 12, and think that Cyclic monoids can be classiÔ¨Åed by
(i.e., systematically named by elements of) the set N \ t8u. That idea is on the right
track, but it is not complete.
‚ô¶

4.1. MONOIDS
125
Solution 4.1.1.28.
Cyclic monoids are either Ô¨Ånite or inÔ¨Ånite. The free monoid on one generator, pN, 0, `q
is the only inÔ¨Ånite cyclic monoid, because once one makes a relation Qm ‚Äû Qn on ListpQq
for some n ƒÖ m, it is ensured that there are only Ô¨Ånitely many elements (in fact, n-many).
Finite cyclic monoids can be drawn as backward œÉ‚Äôs (i.e., as
œÉ
‚Äôs), with varying loop lengths
and total lengths. The Ô¨Ånite cyclic monoids can be classiÔ¨Åed by the set
FCM :‚Äú tpn, kq P N ÀÜ N | 1 ƒè k ƒè nu.
For each pn, kq P FCM, there is a cyclic monoid with n elements and a loop of length k.
For example, we can draw p8, 6q and p5, 1q respectively as
0‚Äö
 1‚Äö
 2‚Äö
 3‚Äö
8
7‚Äö
<
4‚Äö
=
6‚Äö
>
5‚Äö

0‚Äö
 1‚Äö
 2‚Äö
 3‚Äö
 4‚Äö'
How do these pictures correspond to monoids? The nodes represent elements, so p8, 6q
has eight elements. The unit element is the leftmost node (the only one with no arrow
pointing to it). Each node is labeled by the length of the shortest path from the unit (so
0 is the unit). To multiply m ‚Äπ n, we see where the path of length m ` n, starting at 0,
ends up. So in the cyclic monoid of type p8, 6q, we have 4 ` 4 ‚Äú 2, whereas in p5, 1q, we
have 4 ` 4 ‚Äú 4.
‚ô¶
4.1.2
Monoid actions
DeÔ¨Ånition 4.1.2.1 (Monoid action). Let pM, e, ‚Äπq be a monoid, and let S be a set. An
action of pM, e, ‚Äπq on S, or simply an action of M on S, or an M action on S, is a
function
√º : M ÀÜ S √ë S
such that the following monoid action laws hold for all m, n P M and all s P S:
‚Ä¢ e √º s ‚Äú s
‚Ä¢ m √º pn √º sq ‚Äú pm ‚Äπ nq √º s.2
2 DeÔ¨Ånition 4.1.2.1 actually deÔ¨Ånes a left action of pM, e, ‚Äπq on S. A right action is like a left action

126
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
Remark 4.1.2.2. To be pedantic (and because it is sometimes useful), we may decide not
to use inÔ¨Åx notation. That is, we may rewrite √º as Œ±: M ÀÜ S √ë S and restate the
conditions from DeÔ¨Ånition 4.1.2.1 as
‚Ä¢ Œ±pe, sq ‚Äú s;
‚Ä¢ Œ±pm, Œ±pn, sqq ‚Äú Œ±pm ‚Äπ n, sq.
Example 4.1.2.3. Let S ‚Äú t0, 1, 2, . . . , 11u, and let N ‚Äú pN, 0, `q be the additive monoid
of natural numbers (see Example 4.1.1.3). We deÔ¨Åne a function √º: NÀÜS √ë S by taking
a pair pn, sq to the remainder that appears when n ` s is divided by 12. For example,
4 √º 2 ‚Äú 6 and 8 √º 9 ‚Äú 5. This function has the structure of a monoid action because
the monoid laws from DeÔ¨Ånition 4.1.2.1 hold.
Similarly, let T denote the set of points on a circle, elements of which are denoted by
a real number in the interval r0, 12q, i.e.,
T ‚Äú tx P R | 0 ƒè x ƒÉ 12u,
and let R ‚Äú pR, 0, `q denote the additive monoid of real numbers. Then there is an action
R ÀÜ T √ë T, similar to the preceding one (see Exercise 4.1.2.4).
One can think of this as an action of the monoid of time on the clock. Here T is the
set of positions at which the hour hand may be pointing. Given any number r P R, we
can go around the clock by r many hours and get a new hour-hand position. For example,
7.25 √º 8.5 ‚Äú 3.75, meaning that 7.25 hours after 8:30 is 3:45.
Exercise 4.1.2.4.
Warning: This exercise is abstract.
a. Realize the set T :‚Äú r0, 12q ƒé R as a coequalizer of some pair of arrows R √ë R.
b. For any x P R, realize the mapping x`: T √ë T, implied by Example 4.1.2.3, using the
universal property for coequalizers.
c. Prove that it is an action.
‚ô¶
except the order of operations is somehow reversed. We focus on left actions is in this text, but right
actions are brieÔ¨Çy deÔ¨Åned here for completeness. The only diÔ¨Äerence is in the second condition. Using
the same notation, we replace it by the condition that for all m, n P M and all s P S, we have
m √º pn √º sq ‚Äú pn ‚Äπ mq √º s.

4.1. MONOIDS
127
Solution 4.1.2.4.
a. Let f : R √ë R be given by fpxq ‚Äú x ` 12. Then idR and f are a pair of arrows R √ë R,
and their coequalizer is T.
b. Let x P R be a real number. We want a function x`: T √ë T, but we begin with a
function (by the same name) x`: R √ë R, given by adding x to any real number. The
following solid-arrow diagram commutes because 12 ` x ‚Äú x ` 12 for any x P R:
R
idR 
f

x`

R

x`

T

R
idR 
f
 R
 T
By the universal property for coequalizers, there is a unique dotted arrow T √ë T
making the diagram commute, and this is x`: T √ë T. It represents the action ‚Äúadd
x P R hours to clock position t P T.‚Äù
c. Clearly, if x ‚Äú 0, then the x` function is idR, and it follows from the universal property
that 0` ‚Äú idT . We see that x ` py ` tq ‚Äú px ` yq ` t using the commutative diagram
R
idR 
f

x`

R

x`

T
x`

R
idR 
f

y`

R

y`

T
y`

R
idR 
f
 R
 T
The universal property for coequalizers implies the result.
‚ô¶
Exercise 4.1.2.5.
Let B denote the set of buttons (or positions) of a video game controller (other than,
say, ‚Äústart‚Äù and ‚Äúselect‚Äù), and consider the free monoid ListpBq on B.
a. What would it mean for ListpBq to act on the set of states of some (single-player)
video game? Imagine a video game G1 that uses the controller, but for which ListpBq

128
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
would not be said to act on the states of G1. Now imagine a simple game G for which
ListpBq would be said to act. Describe the games G and G1.
b. Can you think of a state s of G, and two distinct elements ‚Ñì, ‚Ñì1 P ListpBq such that
‚Ñì√º s ‚Äú ‚Ñì1 √º s?
c. In video game parlance, what would you call a monoid element b P B such that for
every state s P G, one has b √º s ‚Äú s?
d. In video game parlance, what would you call a state s P S such that for every sequence
of buttons ‚ÑìP ListpBq, one has ‚Ñì√º s ‚Äú s?
e. DeÔ¨Åne RƒÖ0 to be the set of positive real numbers, and consider the free monoid M :‚Äú
ListpRƒÖ0 ÀÜ Bq. An element of this monoid can be interpreted as a list in which each
entry is a button b P B being pressed after a wait time t P RƒÖ0. Can you Ô¨Ånd a game
that uses the controller but for which M does not act?
‚ô¶
Solution 4.1.2.5.
a. Suppose B ‚Äú tup, rightu.
Then B acts on the set of states of a game if pressing
either up or right will act the same way every time on a given state, sending you to a
new state, and if when you do nothing with the controller, the state stays exactly the
same. Pressing buttons very quickly would end up with the same result as pressing
them slowly.
Most games one can think of are not going to be modeled by such an action. But
a simple game for which the controller would be said to act is just a game where a
character can walk around an arena, as though with time stopped. If the arena in G1
had the feel of time progressing, the state of the game would change even when the
controller was not pushed (and hence G1 would not be modeled by an action of this
monoid).
But for example, there was an old ‚ÄúStreetÔ¨Åghter‚Äù game, in which one was sometimes
tasked with destroying a car by kicking it and punching it. If the speed at which one
pressed the buttons had no eÔ¨Äect, this would constitute an action. Let‚Äôs call this G,
with B ‚Äú tpunch, kicku.
b. Yes, when the car is completely destroyed, then whether you punch it or kick it, the
result is the same.
c. I would call it ‚Äúa useless button.‚Äù
d. I would call it ‚Äúgame over.‚Äù

4.1. MONOIDS
129
e. This is an excellent model. A state is now an unfolding situation in which the agent
is not acting. The whole future-history of his last action is identiÔ¨Åed as a single state.
He acts on that state by waiting a certain amount of time and then pressing a button,
hence ‚Äúchanging the future.‚Äù
To my thinking, for any single-player video game in existence with controller B, the
monoid ListpRƒÖ0 ÀÜ Bq can be made to act in accordance with the actual game play.
(Even the Wii or Kinect should only be taking as data a Ô¨Ånite number of samples
within one continuous movement.)
‚ô¶
Application 4.1.2.6. Let f : R √ë R be a diÔ¨Äerentiable function of which we want to Ô¨Ånd
roots (points x P R such that fpxq ‚Äú 0). Let x0 P R be a starting point. For any n P N,
we can apply Newton‚Äôs method to xn to get
xn`1 ‚Äú xn ¬¥ fpxnq
f 1pxnq.
This is a monoid (namely, N, the free monoid on one generator) acting on a set (namely,
R).
However, Newton‚Äôs method can get into trouble. For example, at a critical point it
causes division by zero, and sometimes it can oscillate or overshoot. In these cases we
want to perturb a bit to the left or right. To have these actions available to us, we would
add ‚Äúperturb‚Äù elements to our monoid. Now we have more available actions at any point,
but at the cost of using a more complicated monoid.
When publishing an experimental Ô¨Ånding, there may be some deep methodological
questions that are not considered suitably important to mention. For example, one may
not publish the kind of solution-Ô¨Ånding method (e.g., Newton‚Äôs method or Runge-Kutta)
that was used, or the set of available actions, e.g., what kinds of perturbation were used
by the researcher. However, these may actually inÔ¨Çuence the reproducibility of results.
By using a language such as that of monoid actions, we can align our data model with
our unspoken assumptions about how functions are analyzed.
‚ô¶‚ô¶
Remark 4.1.2.7. A monoid is useful for understanding how an agent acts on the set of
states of an object, but there is only one context for action‚Äîat any point, all actions are
available. In reality, it is often the case that contexts can change and diÔ¨Äerent actions
are available at diÔ¨Äerent times. For example, on a computer the commands available
in one application have no meaning in another. This points us to categories, which are
generalizations of monoids (see Chapter 5).

130
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
4.1.2.8
Monoid actions as ologs
If monoids are understood in terms of how they act on sets, then it is reasonable to think
of them in terms of ologs. In fact, the ologs associated to monoids are precisely those
ologs that have exactly one type (and possibly many arrows and commutative diagrams).
Example 4.1.2.9. This example shows how to associate an olog to a monoid action. Con-
sider the monoid M generated by the set tu, d, ru, standing for ‚Äúup, down, right,‚Äù and
subject to the relations
ru, ds ‚Äû r s,
rd, us ‚Äû r s,
ru, rs ‚Äú rr, us,
and
rd, rs ‚Äú rr, ds.
We might imagine that M acts on the set of positions for a character in an old video game.
In that case the olog corresponding to this action should look something like Figure 4.1.
a character 
position 
haracter 
iti
when moved up  
results in 
a c
p
when moved  
down results in 
when moved right 
results in 
Given x, a character position, consider the following. We know that x is a 
character position, which when moved up results in a character position, which 
when moved down results in a character position that we‚Äôll call P(x). We also 
know that x is a character position that we‚Äôll call Q(x). Fact: whenever x is a 
character position we will have P(x)=Q(x). Summary: [up, down] = [ ] 
 
Given x, a character position, consider the following. We know that x is a 
character position, which when moved down results in a character position, 
which when moved up results in a character position that we‚Äôll call P(x). We also 
know that x is a character position that we‚Äôll call Q(x). Fact: whenever x is a 
character position we will have P(x)=Q(x). Summary: [down, up] = [ ] 
 
Given x, a character position, consider the following. We know that x is a 
character position, which when moved up results in a character position, which 
when moved right results in a character position that we‚Äôll call P(x). We also 
know that x is a character position, which when moved right results in a 
character position, which when moved up results in a character position that 
we‚Äôll call Q(x). Fact: whenever x is a character position we will have P(x)=Q(x). 
Summary: [up, right] = [right, up] 
 
Given x, a character position, consider the following. We know that x is a 
character position, which when moved down results in a character position, 
which when moved right results in a character position that we‚Äôll call P(x). We 
also know that x is a character position, which when moved right results in a 
character position, which when moved down results in a character position that 
we‚Äôll call Q(x). Fact: whenever x is a character position we will have P(x)=Q(x). 
Summary: [down, right] = [right, down] 
Figure 4.1
4.1.2.10
Finite state machines
According to Wikipedia, a deterministic Ô¨Ånite state machine is a quintuple pŒ£, S, s0, Œ¥, Fq,
where
1. Œ£ is a Ô¨Ånite nonempty set of symbols, called the input alphabet;
2. S is a Ô¨Ånite, nonempty set, called the state set;

4.1. MONOIDS
131
3. Œ¥: Œ£ ÀÜ S √ë S is a function, called the state-transition function;
4. s0 P S is an element, called the initial state;
5. F ƒé S is a subset, called the set of Ô¨Ånal states.
Here we focus on the state transition function Œ¥, by which the alphabet Œ£ acts on the
set S of states (see Figure 4.2).
State 0 
State 1 
State 2 
ate 
S ate 1
te 2
0
e 2
te
Stat
Stat
tat
a 
a 
a 
b 
b 
b 
Figure 4.2 A Ô¨Ånite state machine with alphabet Œ£ ‚Äú ta, bu and state set S ‚Äú
tState 0, State 1, State 2u.
The following proposition expresses the notion of Ô¨Ånite state automata in terms of
free monoids and their actions on Ô¨Ånite sets.
Proposition 4.1.2.11. Let Œ£, S be Ô¨Ånite nonempty sets. Giving a function Œ¥: Œ£ÀÜS √ë S
is equivalent to giving an action of the free monoid ListpŒ£q on S.
Proof. The proof is sketched here, leaving two details for Exercise 4.1.2.13. By DeÔ¨Ånition
4.1.2.1, we know that function œµ: ListpŒ£q ÀÜ S √ë S constitutes an action of the monoid
ListpŒ£q on the set S if and only if, for all s P S, we have œµpr s, sq ‚Äú s, and for any two
elements m, m1 P ListpŒ£q, we have œµpm, œµpm1, sqq ‚Äú œµpm ``m1, sq, where m ``m1 is the
concatenation of lists. Let
A :‚Äú tœµ: ListpŒ£q ÀÜ S √ë S | œµ constitutes an actionu.
We need to prove that there is an isomorphism of sets
œÜ: A ‚Äì
√ù√ë HomSetpŒ£ ÀÜ S, Sq.

132
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
Given an element œµ: ListpŒ£q ÀÜ S √ë S in A, deÔ¨Åne œÜpœµq on an element pœÉ, sq P Œ£ ÀÜ S
by œÜpœµqpœÉ, sq :‚Äú œµprœÉs, sq, where rœÉs is the one-element list. We now deÔ¨Åne
œà: HomSetpŒ£ ÀÜ S, Sq √ë A.
Given an element f P HomSetpŒ£ ÀÜ S, Sq, deÔ¨Åne œàpfq: ListpŒ£q ÀÜ S √ë S on a pair pL, sq P
ListpŒ£qÀÜS, where L ‚Äú r‚Ñì1, . . . , ‚Ñìns as follows. By induction, if n ‚Äú 0, put œàpfqpL, sq ‚Äú s;
if n ƒõ 1, let BL ‚Äú r‚Ñì1, . . . , ‚Ñìn¬¥1s and put œàpfqpL, sq ‚Äú œàpfqpBL, fp‚Ñìn, sqq.
One checks easily that œàpfq satisÔ¨Åes these two rules, making it an action of ListpŒ£q
on S. It is also easy to check that œÜ and œà are mutually inverse, completing the proof.
(See Exercise 4.1.2.13).
‚ñ°
The idea of this section is summed up as follows:
Slogan 4.1.2.12.
A Ô¨Ånite state machine is an action of a free monoid on a Ô¨Ånite set.
Exercise 4.1.2.13.
Consider the functions œÜ and œà as deÔ¨Åned in the proof of Proposition 4.1.2.11.
a. Show that for any f : Œ£ ÀÜ S √ë S, the map œàpfq: ListpŒ£q ÀÜ S √ë S constitutes an
action.
b. Show that œÜ and œà are mutually inverse functions (i.e., œÜ Àù œà ‚Äú idHompŒ£ÀÜS,Sq and
œà Àù œÜ ‚Äú idA).
‚ô¶
Solution 4.1.2.13.
a. Let s P S be an arbitrary element. By the base of the induction, œàpfqpr s, sq ‚Äú s, so
œàpfq satisÔ¨Åes the unit law. Now let L1, L2 P ListpŒ£q be two lists with L ‚Äú L1 ``L2
their concatenation. We need to show that œàpfqpL1, œàpfqpL2, sqq ‚Äú œàpfqpL, sq. We
do this by induction on the length of L2. If |L2| ‚Äú 0, then L ‚Äú L1 and we have that
œàpfqpL1, œàpfqpL2, sqq ‚Äú œàpfqpL1, sq ‚Äú œàpfqpL, sq.
Now suppose the result is true for all lists of length |L2| ¬¥ 1 ƒõ 0. We have BL ‚Äú
L1 ``BL2, where B removes the last entry of a nonempty list. If ‚Ñìis the last entry of
L and L2, then we have
œàpfqpL1, œàpfqpL2, sqq ‚Äú œàpfqpL1, œàpfqpBL2, fp‚Ñì, sqqq ‚Äú œàpfqpBL, fp‚Ñì, sqq
‚Äú œàpfqpL, sq.

4.1. MONOIDS
133
b. We Ô¨Årst show that for f P HompŒ£ ÀÜ S, Sq, we have œÜ Àù œàpfq ‚Äú f. To do so, we choose
pœÉ, sq P Œ£ ÀÜ S, and the formulas for œÜ and œà from the proof of Proposition 4.1.2.11
give
œÜpœàpfqqpœÉ, sq ‚Äú œàpfqprœÉs, sq ‚Äú fpœÉ, sq.
We next show that for œµ P A, we have œà Àù œÜpœµq ‚Äú œµ. To do so, we choose pL, sq P
ListpŒ£q ÀÜ S and show that œàpœÜpœµqqpL, sq ‚Äú œµpL, sq. We do this by induction on the
length n ‚Äú |L| of L. If n ‚Äú 0, then œàpœÜpœµqqpr s, sq ‚Äú s ‚Äú œµpr s, sq. We may now assume
that n ƒõ 1 and that the result holds for BL. Let ‚Ñìbe the last entry of L. We use the
formulas for œÜ and œà, and the fact that œµ is an action, to get the following derivation:
œàpœÜpœµqqpL, sq ‚Äú œàpœÜpœµqqpBL, œÜpœµqp‚Ñì, sqq ‚Äú œàpœÜpœµqqpBL, œµpr‚Ñìs, sqq
‚Äú œµpBL, œµpr‚Ñìs, sqq
‚Äú œµpBL ``r‚Ñìs, sq ‚Äú œµpL, sq.
‚ô¶
4.1.3
Monoid action tables
Let M be a monoid generated by the set G ‚Äú tg1, . . . , gmu, and with some relations,
and suppose that Œ±: M ÀÜ S √ë S is an action of M on a set S ‚Äú ts1, . . . , snu. We can
represent the action Œ± using an action table whose columns are the generators g P G and
whose rows are the elements of S. In each cell prow, colq, where row P S and col P G, we
put the element Œ±pcol, rowq P S.
Example 4.1.3.1 (Action table). If Œ£ and S are the sets from Figure 4.2, the displayed
action of ListpŒ£q on S would be given by action table (4.1)
Action from Fig. 4.2
ID
a
b
State 0
State 1
State 2
State 1
State 2
State 1
State 2
State 0
State 0
(4.1)
Example 4.1.3.2 (Multiplication action table). Every monoid pM, e, ‚Äπq acts on itself by
its multiplication formula, ‚Äπ: M ÀÜ M √ë M. If G is a generating set for M, we can
write the elements of G as the columns and the elements of M as rows, and call this
a multiplication table.
For example, let pN, 1, Àöq denote the multiplicative monoid of
natural numbers. The multiplication table is the usual multiplication table from grade

134
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
school:
Multiplication of natural numbers
N
0
1
2
3
4
5
¬® ¬® ¬®
0
0
0
0
0
0
0
¬® ¬® ¬®
1
0
1
2
3
4
5
¬® ¬® ¬®
2
0
2
4
6
8
10
¬® ¬® ¬®
3
0
3
6
9
12
15
¬® ¬® ¬®
4
0
4
8
12
16
20
¬® ¬® ¬®
...
...
...
...
...
...
...
...
21
0
21
42
63
84
105
¬® ¬® ¬®
...
...
...
...
...
...
...
...
(4.2)
Try to understand what is meant by this: ‚ÄúApplying column 2 and then column 2 returns
the same thing as applying column 4.‚Äù
Table (4.2) implicitly takes every element of N as a generator (since there is a column
for every natural number). In fact, there is a smallest generating set for the monoid
pN, 1, Àöq, so that every element of the monoid is a product of some combination of these
generators, namely, the primes and 0.
Multiplication of natural numbers
N
0
2
3
5
7
11
¬® ¬® ¬®
0
0
0
0
0
0
0
¬® ¬® ¬®
1
0
2
3
5
7
11
¬® ¬® ¬®
2
0
4
6
10
14
22
¬® ¬® ¬®
3
0
6
9
15
21
33
¬® ¬® ¬®
4
0
8
12
20
28
44
¬® ¬® ¬®
...
...
...
...
...
...
...
...
21
0
42
63
105
147
231
¬® ¬® ¬®
...
...
...
...
...
...
...
...
Exercise 4.1.3.3.
Let N be the additive monoid of natural numbers, let S ‚Äú t0, 1, 2, . . . , 11u, and let
Clock: NÀÜS √ë S be the clock action given in Example 4.1.2.3. Using a small generating
set for the monoid, write the corresponding action table.
‚ô¶

4.1. MONOIDS
135
Solution 4.1.3.3.
Since pN, 0, `q is the free monoid on one generator, we only need one column for the
table. We denote it `1 because this is a descriptive name for the action in Example
4.1.2.3. The action table is
Clock
S
`1
0
1
1
2
2
3
3
4
4
5
5
6
6
7
7
8
8
9
9
10
10
11
11
0
‚ô¶
4.1.4
Monoid homomorphisms
A monoid pM, e, ‚Äπq involves a set, a unit element, and a multiplication formula. For two
monoids to be comparable, their sets, unit elements, and multiplication formulas should
be appropriately comparable. For example, the additive monoids N and Z should be
comparable because N ƒé Z is a subset, the unit elements in both cases are the same
e ‚Äú 0, and the multiplication formulas are both integer addition.
DeÔ¨Ånition 4.1.4.1. Let M :‚Äú pM, e, ‚Äπq and M1 :‚Äú pM 1, e1, ‚Äπ1q be monoids. A monoid
homomorphism f from M to M1, denoted f : M √ë M1, is a function f : M √ë M 1
satisfying two conditions:
‚Ä¢ fpeq ‚Äú e1.
‚Ä¢ fpm1 ‚Äπ m2q ‚Äú fpm1q ‚Äπ1 fpm2q, for all m1, m2 P M.
The set of monoid homomorphisms from M to M1 is denoted HomMonpM, M1q.
Example 4.1.4.2 (From N to Z). As stated, the inclusion map i: N √ë Z induces a monoid
homomorphism pN, 0, `q √ë pZ, 0, `q because ip0q ‚Äú 0 and ipn1 ` n2q ‚Äú ipn1q ` ipn2q.

136
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
Let i5 : N √ë Z denote the function i5pnq ‚Äú 5 Àö n, so i5p4q ‚Äú 20. This is also a monoid
homomorphism because i5p0q ‚Äú 5Àö0 ‚Äú 0 and i5pn1`n2q ‚Äú 5Àöpn1`n2q ‚Äú 5Àön1`5Àön2 ‚Äú
i5pn1q ` i5pn2q.
Application 4.1.4.3. Let R ‚Äú ta, c, g, uu, and let T ‚Äú R3, the set of triplets in R. Let
R ‚Äú ListpRq be the free monoid on R, and let T ‚Äú ListpTq denote the free monoid on T.
There is a monoid homomorphism F : T √ë R given by sending t ‚Äú pr1, r2, r3q to the list
rr1, r2, r3s.3
If A is the set of amino acids and A ‚Äú ListpAq is the free monoid on A, the process
of translation gives a monoid homomorphism G: T √ë A, turning a list of RNA triplets
into a polypeptide. But how do we go from a list of RNA nucleotides to a polypeptide,
i.e., from R to A? It seems that there is no good way to do this mathematically. So what
is going wrong?
The answer is that there should not be a monoid homomorphism R √ë A because not
all sequences of nucleotides produce a polypeptide; for example, if the sequence has only
two elements, it does not code for a polypeptide. There are several possible remedies to
this problem. One is to take the image of F : T √ë R, which is a submonoid R1 ƒé R. It is
not hard to see that there is a monoid homomorphism F 1 : R1 √ë T , and we can compose
it with G to get the desired monoid homomorphism G Àù F 1 : R1 √ë A. 4
‚ô¶‚ô¶
Example 4.1.4.4. Given any monoid M ‚Äú pM, e, ‚Äπq, there is a unique monoid homomor-
phism from M to the trivial monoid 1 (see Example 4.1.1.10). There is also a unique
homomorphism 1 √ë M because a monoid homomorphism must send the unit to the unit.
These facts together means that between any two monoids M and M1 we can always
construct a homomorphism
M
!
√ù√ù√ù√ë 1
!
√ù√ù√ù√ë M1,
called the trivial homomorphism M √ë M1. It sends everything in M to e P M 1. A
homomorphism M √ë M1 that is not trivial is called a nontrivial homomorphism.
Proposition 4.1.4.5. Let M ‚Äú pZ, 0, `q and M1 ‚Äú pN, 0, `q. The only monoid homo-
morphism f : M √ë M1 is trivial, i.e., it sends every element m P Z to 0 P N.
Proof. Let f : M √ë M1 be a monoid homomorphism, and let n ‚Äú fp1q and n1 ‚Äú fp¬¥1q
in N. Then we know that since 0 ‚Äú 1`p¬¥1q in Z, we must have 0 ‚Äú fp0q ‚Äú fp1`p¬¥1qq ‚Äú
fp1q`fp¬¥1q ‚Äú n`n1 P N. But if n ƒõ 1, then this is impossible, so n ‚Äú 0. Similarly, n1 ‚Äú 0.
Any element m P Z can be written as m ‚Äú 1 ` 1 ` ¬® ¬® ¬® ` 1 or as m ‚Äú ¬¥1 ` ¬¥1 ` ¬® ¬® ¬® ` ¬¥1,
3More
precisely,
the
monoid
homomorphism
F
sends
a
list
rt1, t2, . . . , tns
to
the
list
rr1,1, r1,2, r1,3, r2,1, r2,2, r2,3, . . . , rn,1, rn,2, rn,3s, where for each 0 ƒè i ƒè n, we have ti ‚Äú pri,1, ri,2, ri,3q.
4Adding stop-codons to the mix, we can handle more of R, e.g., sequences that do not have a multiple-
of-three many nucleotides.

4.1. MONOIDS
137
and it is easy to see that fp1q ` fp1q ` ¬® ¬® ¬® ` fp1q ‚Äú 0 ‚Äú fp¬¥1q ` fp¬¥1q ` ¬® ¬® ¬® ` fp¬¥1q.
Therefore, fpmq ‚Äú 0 for all m P Z.
‚ñ°
Exercise 4.1.4.6.
For any m P Z, let im : N √ë Z be the function impnq ‚Äú m Àö n, so i6p7q ‚Äú ¬¥42.
All such functions are monoid homomorphisms pN, 0, `q √ë pZ, 0, `q. Do any monoid
homomorphisms pN, 0, `q √ë pZ, 0, `q not come in this way? For example, what about
using n √û√ë p5n ¬¥ 1q or n √û√ë n2 or some other function?
‚ô¶
Solution 4.1.4.6.
All monoid homomorphisms pN, 0, `q √ë pZ, 0, `q come in this way.
To see this,
let f : pN, 0, `q √ë pZ, 0, `q be a monoid homomorphism.
Then fp1q ‚Äú m for some
m P Z. But then the multiplication law for monoid homomorphisms says we must have
fp1 ` 1q ‚Äú m ` m and fp1 ` 1 ` 1q ‚Äú m ` m ` m, and so on.
The function n √û√ë n2 is not a monoid homomorphism because it does not respect
multiplication: pm ` nq2 ‚Ä∞ m2 ` n2.
The function n √û√ë p5n ¬¥ 1q is not a monoid
homomorphism because it respects neither the unit nor the multiplication.
‚ô¶
Exercise 4.1.4.7.
Let M :‚Äú pN, 0, `q be the additive monoid of natural numbers, let N ‚Äú pRƒõ0, 0, `q
be the additive monoid of nonnegative real numbers, and let P :‚Äú pRƒÖ0, 1, Àöq be the
multiplicitive monoid of positive real numbers. Can you think of any nontrivial monoid
homomorphisms (Example 4.1.4.4) of the following sorts:
a. f : M √ë N?
b. g: M √ë P?
c. h: N √ë P?
d. i: N √ë M?
e. j : P √ë N?
‚ô¶
Solution 4.1.4.7.
a. The scalar multiplication function fpnq ‚Äú 17.5 Àö n works.
b. The exponentiation function gpnq ‚Äú 3.5n works.

138
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
c. The exponentiation function hpxq ‚Äú 3.65x works.
d. No, there are none. Suppose i: N √ë M is a candidate. For i to be nontrivial, there
must be some x P RƒÖ0 with ipxq ‚Äú n ‚Ä∞ 0. Then ip x
2q would have to be n
2 , which is
forced to be a natural number, and then we have n
4 P N and n
8 P N, and so on. There
is no such n P N.
e. The base 10 logarithm function jpxq ‚Äú log10pxq works.
‚ô¶
4.1.4.8
Homomorphisms from free monoids
Recall that pN, 0, `q is the free monoid on one generator. It turns out that for any other
monoid M ‚Äú pM, e, ‚Äπq, the set of monoid homomorphisms N √ë M is in bijection with
the set M. This is a special case (in which G is a set with one element) of the following
proposition.
Proposition 4.1.4.9. Let G be a set, let FpGq :‚Äú pListpGq, r s, ``q be the free monoid
on G, and let M :‚Äú pM, e, ‚Äπq be any monoid. There is a natural bijection
HomMonpFpGq, Mq ‚Äì
√ù√ë HomSetpG, Mq.
Proof. We provide a function œÜ: HomMonpFpGq, Mq √ë HomSetpG, Mq and a function
œà: HomSetpG, Mq √ë HomMonpFpGq, Mq and show that they are mutually inverse. Let
us Ô¨Årst construct œÜ. Given a monoid homomorphism f : FpGq √ë M, we need to provide
œÜpfq: G √ë M. Given any g P G, we deÔ¨Åne œÜpfqpgq :‚Äú fprgsq.
Now let us construct œà. Given p: G √ë M, we need to provide œàppq: ListpGq √ë M
such that œàppq is a monoid homomorphism. For a list L ‚Äú rg1, . . . , gns P ListpGq, deÔ¨Åne
œàppqpLq :‚Äú ppg1q ‚Äπ ¬® ¬® ¬® ‚Äπ ppgnq P M. In particular, œàppqpr sq ‚Äú e. It is not hard to see that
this is a monoid homomorphism. Also, œÜ Àù œàppq ‚Äú p for all p P HomSetpG, Mq. We show
that œà Àù œÜpfq ‚Äú f for all f P HomMonpFpGq, Mq. Choose L ‚Äú rg1, . . . , gns P ListpGq.
Then
œàpœÜfqpLq ‚Äú pœÜfqpg1q ‚Äπ ¬® ¬® ¬® ‚Äπ pœÜfqpgnq ‚Äú frg1s ‚Äπ ¬® ¬® ¬® ‚Äπ frgns ‚Äú fprg1, . . . , gnsq ‚Äú fpLq.
‚ñ°
Exercise 4.1.4.10.
Let G ‚Äú ta, bu, let M :‚Äú pM, e, ‚Äπq be any monoid, and let f : G √ë M be given by
fpaq ‚Äú m and fpbq ‚Äú n, where m, n P M. If œà: HomSetpG, Mq √ë HomMonpFpGq, Mq is
the function constructed in the proof of Proposition 4.1.4.9 and L ‚Äú ra, a, b, a, bs, what is
œàpfqpLq ?
‚ô¶

4.1. MONOIDS
139
Solution 4.1.4.10.
We have œàpfqpra, a, b, a, bsq ‚Äú rm, m, n, m, ns.
‚ô¶
4.1.4.11
Restriction of scalars
A monoid homomorphism f : M √ë M 1 (see DeÔ¨Ånition 4.1.4.1) ensures that the elements
of M have a reasonable interpretation in M 1; they act the same way over in M 1 as they
did in M. If we have such a homomorphism f and we have an action Œ±: M 1 ÀÜ S √ë S of
M 1 on a set S, then we have a method for allowing M to act on S as well. Namely, we
take an element of M, send it to M 1, and use that to act on S. In terms of functions, we
deÔ¨Åne ŒîfpŒ±q to be the composite:
M ÀÜ S
fÀÜidS 
Œîf pŒ±q
?
M 1 ÀÜ S
Œ±
 S
After Proposition 4.1.4.12 we will know that ŒîfpŒ±q: M ÀÜ S √ë S is indeed a monoid
action, and we say that it is given by restriction of scalars along f.
Proposition 4.1.4.12. Let M :‚Äú pM, e, ‚Äπq and M1 :‚Äú pM 1, e1, ‚Äπ1q be monoids, f : M √ë
M1 a monoid homomorphism, S a set, and suppose that Œ±: M 1 ÀÜ S √ë S is an action of
M1 on S. Then ŒîfpŒ±q: M ÀÜ S √ë S, as deÔ¨Åned, is a monoid action as well.
Proof. Refer to Remark 4.1.2.2, We assume Œ± is a monoid action and want to show that
ŒîfpŒ±q is too. We have ŒîfpŒ±qpe, sq ‚Äú Œ±pfpeq, sq ‚Äú Œ±pe1, sq ‚Äú s. We also have
ŒîfpŒ±qpm, ŒîfpŒ±qpn, sqq ‚Äú Œ±pfpmq, Œ±pfpnq, sqq ‚Äú Œ±pfpmq ‚Äπ1 fpnq, sq
‚Äú Œ±pfpm ‚Äπ nq, sq
‚Äú ŒîfpŒ±qpm ‚Äπ n, sq.
Then the unit law and the multiplication law hold.
‚ñ°
Example 4.1.4.13. Let N and Z denote the additive monoids of natural numbers and
integers respectively, and let i: N √ë Z be the inclusion, which Example 4.1.4.2 showed
is a monoid homomorphism.
There is an action Œ±: Z ÀÜ R √ë R of the monoid Z on
the set R of real numbers, given by Œ±pn, xq ‚Äú n ` x. Clearly, this action works just
as well if we restrict the scalars to N ƒé Z, and allow only adding natural numbers to
real numbers. This is the action ŒîiŒ±: N ÀÜ R √ë R, because for pn, xq P N ÀÜ R, we have
ŒîiŒ±pn, xq ‚Äú Œ±pipnq, xq ‚Äú Œ±pn, xq ‚Äú n ` x, just as expected.

140
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
Example 4.1.4.14. Suppose that V is a complex vector space. In particular, this means
that the monoid C of complex numbers (under multiplication) acts on the elements of
V . The elements of C are called scalars in this context. If i: R √ë C is the inclusion of
the real line inside C, then i is a monoid homomorphism. Restriction of scalars in the
preceding sense turns V into a real vector space, so the name ‚Äúrestriction of scalars‚Äù is
apt.
Exercise 4.1.4.15.
Let N be the free monoid on one generator, and let Œ£ ‚Äú ta, bu. Consider the map
of monoids f : N √ë ListpŒ£q given by sending 1 √û√ë ra, b, b, bs.
Consider the state set
S ‚Äú tState 0, State 1, State 2u. The monoid action Œ±: ListpŒ£qÀÜS √ë S given in Example
4.1.3.1 can be transformed by restriction of scalars along f to an action ŒîfpŒ±q of N on
S. Write its action table.
‚ô¶
Solution 4.1.4.15.
Recall the action Œ± of Œ£ on S given in Example 4.1.3.1 (or see left-hand side of (4.3)).
The action ŒîfpŒ±q allows every natural number n P N to act on S by ‚Äúdoing ra, b, b, bs
again and again n times.‚Äù Since N is generated by 1, it suÔ¨Éces to record what happens
when we do it once, i.e., follow a, then b, then b, then b (see right-hand side of (4.3)).
Action Œ± from Ex. 4.1.3.1
ID
a
b
State 0
State 1
State 2
State 1
State 2
State 1
State 2
State 0
State 0
Action ŒîfpŒ±q
ID
1
State 0
State 1
State 1
State 0
State 2
State 2
(4.3)
‚ô¶
4.2
Groups
Groups are monoids with the property that every element has an inverse. If we think
of these structures in terms of how they act on sets, the diÔ¨Äerence between groups and
monoids is that the action of every group element can be undone. One way of thinking
about groups is in terms of symmetries. For example, the rotations and reÔ¨Çections of a
square form a group because they can be undone.
Another way to think of the diÔ¨Äerence between monoids and groups is in terms of
time. Monoids are likely useful in thinking about diÔ¨Äusion, in which time plays a role
and things cannot be undone. Groups are more likely useful in thinking about mechanics,
where actions are time-reversible.

4.2. GROUPS
141
4.2.1
DeÔ¨Ånition and examples
DeÔ¨Ånition 4.2.1.1. Let pM, e, ‚Äπq be a monoid. An element m P M is said to have an
inverse if there exists an m1 P M such that mm1 ‚Äú e and m1m ‚Äú e. A group is a monoid
pM, e, ‚Äπq in which every element m P M has an inverse.
Proposition 4.2.1.2. Suppose that M :‚Äú pM, e, ‚Äπq is a monoid, and let m P M be an
element. Then m has at most one inverse.5
Proof. Suppose that both m1 and m2 are inverses of m; we want to show that m1 ‚Äú m2.
This follows by the associative law for monoids:
m1 ‚Äú m1pmm2q ‚Äú pm1mqm2 ‚Äú m2.
‚ñ°
Example 4.2.1.3. The additive monoid pN, 0, `q is not a group because none of its elements
are invertible, except for 0. However, the monoid of integers pZ, 0, `q is a group. The
monoid of clock positions from Example 4.1.1.26 is also a group. For example, the inverse
of Q5 is Q7 because Q5 ‚Äπ Q7 ‚Äú e ‚Äú Q7 ‚Äπ Q5.
Example 4.2.1.4. Consider a square centered at the origin in R2. It has rotational and
mirror symmetries. There are eight of these, denoted
te, œÅ, œÅ2, œÅ3, œÜ, œÜœÅ, œÜœÅ2, œÜœÅ3u,
where œÅ stands for 90Àù counterclockwise rotation and œÜ stands for horizontal Ô¨Çip (across
the vertical axis). So relations include œÅ4 ‚Äú e, œÜ2 ‚Äú e, and œÅ3œÜ ‚Äú œÜœÅ. This group is called
the dihedral group of order eight.
Example 4.2.1.5. The set of 3 ÀÜ 3 matrices can be given the structure of a monoid, where
the unit element is the 3ÀÜ3 identity matrix, the multiplication formula is given by matrix
multiplication. It is a monoid but not a group because not all matrices are invertible.
The subset of invertible matrices does form a group, called the general linear group
of degree 3 and denoted GL3. Inside of GL3 is the orthogonal group, denoted O3, of
matrices M such that M ¬¥1 ‚Äú M J. These matrices correspond to symmetries of the
two-dimensional sphere centered at the origin in R2.
Another interesting group is the Euclidean group Ep3q, which consists of all isometries
of R3, i.e., all functions R3 √ë R3 that preserve distances.
Application 4.2.1.6. In crystallography one is often concerned with the symmetries that
arise in the arrangement A of atoms in a molecule. To think about symmetries in terms of
5If M is a group, then every element m has one and only one inverse.

142
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
groups, we Ô¨Årst deÔ¨Åne an atom arrangement to be a Ô¨Ånite subset i: A ƒé R3. A symmetry
in this case is an isometry of R3 (see Example 4.2.1.5), say, f : R3 √ë R3, such that there
exists a dotted arrow making the following diagram commute:
A

i 
A
i
R3
f
 R3
That is, it is an isometry of R3 such that each atom of A is sent to a position currently
occupied by an atom of A. It is not hard to show that the set of such isometries forms a
group, called the space group of the crystal.
‚ô¶‚ô¶
Exercise 4.2.1.7.
Let X be a Ô¨Ånite set.
A permutation of X is an isomorphism f : X
‚Äì
√ù√ë X.
Let
IsopXq :‚Äú tf : X √ë X | f is an isomorphismu be the set of permutations of X. Here is a
picture of an element in IsopSq, where S ‚Äú ts1, s2, s3, s4u:
S 
s1 
s4 
s2 
s3 
S 
s1 
s4 
s2 
s3 
a. Devise a unit and a multiplication formula, such that the set IsopXq of permutations
of X forms a monoid.
b. Is the monoid IsopXq always in fact a group?
‚ô¶

4.2. GROUPS
143
Solution 4.2.1.7.
a. We can take the unit to be the identity function idS : S
‚Äì
√ù√ë S and the multiplication
formula to be a composition of isomorphisms f ‚Äπg ‚Äú f Àùg. Clearly, idS Àùf ‚Äú f ÀùidS ‚Äú f
and pf Àù gq Àù h ‚Äú f Àù pg Àù hq, so this formula satisÔ¨Åes the unit and multiplication laws.
In other words, we have put a monoid structure on the set IsopSq.
b. Yes, IsopXq is a group because every element of f P IsopSq is invertible. Namely, the
fact that f is an isomorphism means that there is some f ¬¥1 P IsopSq with f Àù f ¬¥1 ‚Äú
f ¬¥1 Àù f ‚Äú idS.
‚ô¶
Exercise 4.2.1.8.
In Exercise 4.1.1.28 you classiÔ¨Åed the cyclic monoids. Which of them are groups?
‚ô¶
Solution 4.2.1.8.
The inÔ¨Ånite cyclic monoid pN, 0, `q is not a group.
The Ô¨Ånite cyclic monoids are
classiÔ¨Åed by the set tpn, kq P N ÀÜ N | 1 ƒè k ƒè nu. Among these, the groups are precisely
those with n ‚Äú k, i.e., the o‚Äôs among the œÉ‚Äôs
‚ô¶
DeÔ¨Ånition 4.2.1.9 (Group action). Let pG, e, ‚Äπq be a group and S a set. An action of
G on S is a function √º: G ÀÜ S √ë S such that for all s P S and g, g1 P G, we have
‚Ä¢ e √º s ‚Äú s;
‚Ä¢ g √º pg1 √º sq ‚Äú pg ‚Äπ g1q √º s.
In other words, considering G as a monoid, it is an action in the sense of DeÔ¨Ånition
4.1.2.1.
Example 4.2.1.10. When a group acts on a set, it has the character of symmetry. For
example, consider the group whose elements are angles Œ∏. This group may be denoted
Up1q and is often formalized as the unit circle in C, i.e., the set of complex numbers
z ‚Äú a ` bi such that |z| ‚Äú a2 ` b2 ‚Äú 1. The set of such points is given the structure of a
group pUp1q, 1 ` 0i, ‚Äπq by deÔ¨Åning the unit element to be 1 ` 0i and the group law to be
complex multiplication. But for those unfamiliar with complex numbers, this is simply
angle addition, where we understand that 360Àù ‚Äú 0Àù. If Œ∏1 ‚Äú 190Àù and Œ∏2 ‚Äú 278Àù, then
Œ∏1 ‚Äπ Œ∏2 ‚Äú 468Àù ‚Äú 108Àù. In the language of complex numbers, z ‚Äú eiŒ∏.
The group Up1q acts on any set that we can picture as having rotational symmetry
about a Ô¨Åxed axis, such as the earth around the north-south axis. We will deÔ¨Åne S ‚Äú

144
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
tpx, y, zq P R3 | x2 ` y2 ` z2 ‚Äú 1u to be the unit sphere in R3, and seek to understand the
rotational action of Up1q on S.
We Ô¨Årst show that Up1q acts on R3 by Œ∏ √º px, y, zq ‚Äú px cos Œ∏ ` y sin Œ∏, ¬¥x sin Œ∏ `
y cos Œ∏, zq, or with matrix notation as
Œ∏ √º px, y, zq :‚Äú px, y, zq
¬®
Àù
cospŒ∏q
¬¥ sinpŒ∏q
0
sinpŒ∏q
cospŒ∏q
0
0
0
1
Àõ
‚Äö.
Trigonometric identities ensure that this is indeed an action.
In terms of action tables, we would need inÔ¨Ånitely many rows and columns to express
this action. Here is a sample:
Action of Up1q on R3
R3
Œ∏ ‚Äú 45Àù
Œ∏ ‚Äú 90Àù
Œ∏ ‚Äú 100Àù
¬® ¬® ¬®
p0, 0, 0q
p0, 0, 0q
p0, 0, 0q
p0, 0, 0q
¬® ¬® ¬®
p1, 0, 0q
p0.71, 0.71, 0q
p0, 1, 0q
p¬¥0.17, 0.98, 0q
¬® ¬® ¬®
p0, 1, ¬¥4.2q
p¬¥0.71, 0.71, ¬¥4.2q
p¬¥1, 0, ¬¥4.2q
p¬¥0.98, ¬¥0.17, ¬¥4.2q
¬® ¬® ¬®
p3, 4, 2q
p4.95, 0.71, 2q
p¬¥4, 3, 2q
p3.42, ¬¥3.65, 2q
¬® ¬® ¬®
...
...
...
...
...
Since S ƒé R3 consists of all vectors of length 1, we need to check that the action
preserves length, i.e., that if px, y, zq P S, then Œ∏ √º px, y, zq P S. In this way we will have
conÔ¨Årmed that Up1q indeed acts on S. The calculation begins by assuming x2`y2`z2 ‚Äú 1,
and one uses trigonometric identities to see that
px cos Œ∏ ` y sin Œ∏q2 ` p¬¥x sin Œ∏ ` y cos Œ∏q2 ` z2 ‚Äú x2 ` y2 ` z2 ‚Äú 1.
Exercise 4.2.1.11.
Let X be a set and consider the group IsopXq of permutations of X (see Exercise
4.2.1.7). Find a canonical action of IsoX on X.
‚ô¶
Solution 4.2.1.11.
The elements of IsopXq are isomorphisms f : X
‚Äì
√ù√ë X. To get an action √º: IsopXq ÀÜ
X √ë X, we need, for every pair pf, xq, an element of X. The obvious choice is fpxq P X.6
Let‚Äôs check that this really gives an action. For any f, g P IsopXq and any x P X we indeed
have idXpxq ‚Äú x and we indeed have fpgpxqq ‚Äú pf Àù gqpxq, so our choice works.
‚ô¶
6It is worth noting the connection with ev : HomSetpX, Xq ÀÜ X √ë X from (3.23).

4.2. GROUPS
145
DeÔ¨Ånition 4.2.1.12. Let G be a group acting on a set X. For any point x P X, the
orbit of x, denoted Gx, is the set
Gx :‚Äú tx1 P X | Dg P G such that gx ‚Äú x1u.
Application 4.2.1.13. Let S be the surface of the earth, understood as a sphere, and let
G ‚Äú Up1q be the group of angles acting on S by rotation as in Example 4.2.1.10. The
orbit of any point p ‚Äú px, y, zq P S is the set of points on the same latitude line as p.
One may also consider a small band around the earth, i.e., the set A ‚Äú tpx, y, zq | 1.0 ƒè
x2 `y2 `z2 ƒè 1.05u. The action of Up1q √º S extends to an action Up1q √º A. The orbits
are latitude-lines-at-altitude. A simplifying assumption in climatology may be given by
assuming that Up1q acts on all currents in the atmosphere in an appropriate sense. Thus,
instead of considering movement within the whole space A, we only allow movement that
behaves the same way throughout each orbit of the group action.
‚ô¶‚ô¶
Exercise 4.2.1.14.
a. Consider the Up1q action on the sphere S given in Example 4.2.1.10. Describe the set
of orbits of this action.
b. What are the orbits of the canonical action of the permutation group Isot1,2,3u on the
set t1, 2, 3u? (See Exercise 4.2.1.11.)
‚ô¶
Solution 4.2.1.14.
a. The orbits are the lines of latitude.
b. There is only one orbit: the whole set t1, 2, 3u.
‚ô¶
Exercise 4.2.1.15.
Let pG, e, ‚Äπq be a group and X a set on which G acts. Is ‚Äúbeing in the same orbit‚Äù an
equivalence relation on X?
‚ô¶
Solution 4.2.1.15.
Yes. Everything is in the same orbit as itself (because e ¬® x ‚Äú x); if x is in the same
orbit as y, then y is in the same orbit as x (because if g ¬® x ‚Äú y, then g¬¥1 ¬® y ‚Äú x); and
if x is in the same orbit as y, and y is in the same orbit as z, then x is in the same orbit
as z (because if g ¬® x ‚Äú y and h ¬® y ‚Äú z, then ph ‚Äπ gq ¬® x ‚Äú z).
‚ô¶

146
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
DeÔ¨Ånition 4.2.1.16. Let G and G1 be groups. A group homomorphism f : G √ë G1 is
deÔ¨Åned to be a monoid homomorphism G √ë G1, where G and G1 are being regarded as
monoids in accordance with DeÔ¨Ånition 4.2.1.1.
4.3
Graphs
Unless otherwise speciÔ¨Åed, whenever I speak of graphs in this book, I do not mean curves
in the plane, such as parabolas, or pictures of functions generally, but rather systems of
vertices and arrows.
Graphs are taken to be directed, meaning that every arrow points from a vertex to
a vertex; rather than merely connecting vertices, arrows have direction. If a and b are
vertices, there can be many arrows from a to b, or none at all. There can be arrows from
a to itself. Here is the formal deÔ¨Ånition in terms of sets and functions.
4.3.1
DeÔ¨Ånition and examples
DeÔ¨Ånition 4.3.1.1. A graph G consists of a sequence G :‚Äú pV, A, src, tgtq, where
‚Ä¢ V is a set, called the set of vertices of G (singular: vertex);
‚Ä¢ A is a set, called the set of arrows of G;
‚Ä¢ src: A √ë V is a function, called the source function for G;
‚Ä¢ tgt: A √ë V is a function, called the target function for G.
Given an arrow a P A we refer to srcpaq as the source vertex of a and to tgtpaq as the
target vertex of a.
To draw a graph, Ô¨Årst draw a dot for every element of V . Then for every element
a P A, draw an arrow connecting dot srcpaq to dot tgtpaq.
Example 4.3.1.2 (Graph). Here is a picture of a graph G ‚Äú pV, A, src, tgtq:
G :‚Äú
‚Äöv
f
 ‚Äöw
h
0
g
!
‚Äöx
‚Äöy
i
@
j
!
‚Äöz
k

(4.4)

4.3. GRAPHS
147
We have V ‚Äú tv, w, x, y, zu and A ‚Äú tf, g, h, i, j, ku. The source and target functions
src, tgt: A √ë V are expressed in the following table (left-hand side):
A
src
tgt
f
v
w
g
w
x
h
w
x
i
y
y
j
y
z
k
z
y
V
v
w
x
y
z
In fact, all the data of the graph G is captured in these two tables‚Äîtogether they tell us
the sets A and V and the functions src and tgt.
Example 4.3.1.3. Every olog has an underlying graph, in the sense of DeÔ¨Ånition 4.3.1.1.
An olog has additional information, namely, information about which pairs of paths are
declared equivalent as well as text that has certain English-readability rules.
Exercise 4.3.1.4.
a. Draw the graph corresponding to the following tables:
A
src
tgt
f
v
w
g
v
w
h
v
w
i
x
w
j
z
w
k
z
z
V
u
v
w
x
y
z
b. Write two tables like the ones in part (a) corresponding to the following graph:
a‚Äö
1
 b‚Äö
2

3
) c‚Äö
4
A
5
 d‚Äö
e‚Äö
f‚Äö
6

7
 g‚Äö
8
 
‚ô¶

148
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
Solution 4.3.1.4.
a.
u‚Äö
x‚Äö
i
y‚Äö
v‚Äö
f

g

h

w‚Äö
z‚Äö
j

k
%
b.
A
src
tgt
1
a
b
2
b
c
3
b
c
4
c
b
5
c
d
6
f
e
7
f
g
8
g
d
V
a
b
c
d
e
f
g
‚ô¶
Exercise 4.3.1.5.
a. Let A ‚Äú t1, 2, 3, 4, 5u and B ‚Äú ta, b, cu. Draw them, and choose an arbitrary function
f : A √ë B and draw it.
b. Let A \ B be the coproduct of A and B (DeÔ¨Ånition 3.1.2.1), and let A i1
√ù√ë A \ B
i2
√ê√ù
B be the two inclusions.
Consider the two functions src, tgt: A √ë A \ B, where
src ‚Äú i1 and tgt is the composition A
f√ù√ë B
i2
√ù√ë A \ B. Draw the associated graph
G :‚Äú pA \ B, A, src, tgtq.
‚ô¶

4.3. GRAPHS
149
Solution 4.3.1.5.
a. Here is a picture of f : A √ë B:
1‚Äö
4
2‚Äö
 a‚Äö
3‚Äö
4
b‚Äö
4‚Äö
1
c‚Äö
5‚Äö
1
b. The graph G is drawn exactly as the one in part (a). The typical way we draw functions
is by drawing nodes and arrows, i.e., a graph. This exercise has shown a formal way
to obtain that graph given the function f.
‚ô¶
Exercise 4.3.1.6.
a. Let V be a set. Suppose we just draw the elements of V as vertices and have no arrows
between them. Is this a graph?
b. Given V , is there any other canonical or somehow automatic nonrandom procedure
for generating a graph with those vertices?
‚ô¶
Solution 4.3.1.6.
a. Yes. With arrows A ‚Äú H, there is a unique function !: A √ë V , so we have pV, H, !, !q.
This is called the discrete graph on vertices V .
b. Yes. Choose as arrows A ‚Äú V ÀÜ V , and let src: A √ë V and tgt: A √ë V be the
projections. This gives the indiscrete graph IndpV q :‚Äú pV, V ÀÜV, œÄ1, œÄ2q on vertices V .
An indiscrete graph is one in which each vertex is connected (backward and forward)
to every other vertex and also points to itself.
Another would be pV, V, idV , idV q, which puts a loop at every vertex and has no other
arrows.
‚ô¶

150
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
Example 4.3.1.7. Recall from Construction 3.2.2.6 the notion of a bipartite graph, deÔ¨Åned
to be a span (i.e., pair of functions; see DeÔ¨Ånition 3.2.2.1) A
f√ê√ù R
g√ù√ë B. Now that we
have a formal deÔ¨Ånition of a graph, we might hope that the notion of bipartite graphs
Ô¨Åts in as a particular sort of graph, and it does. Let V ‚Äú A \ B, and let i: A √ë V and
j : B √ë V be the inclusions. Let src ‚Äú i Àù f : R √ë V , and let tgt ‚Äú j Àù g: R √ë V be the
composites:
A
i
)
‚úì
R
src

tgt

f

g

V
B
j
/
‚úì
Then pV, R, src, tgtq is a graph that would be drawn exactly as speciÔ¨Åed the drawing of
spans in Construction 3.2.2.6.
Example 4.3.1.8. Let n P N be a natural number. The chain graph of length n, denoted
rns, is the following graph:
0‚Äö
 1‚Äö
 ¬® ¬® ¬®
 n‚Äö
In general, rns has n arrows and n ` 1 vertices. In particular, when n ‚Äú 0, we have that
r0s is the graph consisting of a single vertex and no arrows.
Example 4.3.1.9. Let G ‚Äú pV, A, src, tgtq be a graph, Suppose that we want to spread it
out over discrete time, so that each arrow does not occur within a given time slice but
instead over a quantum unit of time.
Let rNs ‚Äú pN, N, n √û√ë n, n √û√ë n ` 1q be the graph depicted:
0‚Äö
0
 1‚Äö
1
 2‚Äö
2
 ¬® ¬® ¬®
The discussion of limits in a category (see Chapter 6) clariÔ¨Åes that products can be taken
in the category of graphs (see Example 6.1.1.5), so rNs ÀÜ G will make sense. For now, we
construct it by hand.
Let TpGq ‚Äú pV ÀÜ N, A ÀÜ N, src1, tgt1q be a new graph, where for a P A and n P N, we
have src1pa, nq :‚Äú psrcpaq, nq and tgt1pa, nq ‚Äú ptgtpaq, n ` 1q.

4.3. GRAPHS
151
Let G be the following graph:
a‚Äö
f
B
g 
b‚Äö
Then TpGq will be the graph
a0‚Äö
f0

g0
C
a1‚Äö
f1

g1
C
a2‚Äö
f2

g2
C
¬® ¬® ¬®
b0‚Äö
b1‚Äö
b2‚Äö
¬® ¬® ¬®
The f arrows still take a‚Äôs to a‚Äôs, and the g arrows still take a‚Äôs to b‚Äôs, but they always
march forward in time.
Exercise 4.3.1.10.
Let G be the following graph:
a‚Äö
w
+
x

b‚Äö
y
,
z
%
Draw the graph TpGq deÔ¨Åned in Example 4.3.1.9, using ellipses (¬® ¬® ¬® ) if necessary.
‚ô¶
Solution 4.3.1.10.
a0‚Äö
x0

w0
C
a1‚Äö
x1

w1
C
a2‚Äö
x2

w2

¬® ¬® ¬®
b0‚Äö
z0

y0
D
b1‚Äö
z1

y1
D
b2‚Äö
z2

y2

¬® ¬® ¬®
‚ô¶

152
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
Exercise 4.3.1.11.
Consider the following inÔ¨Ånite graph G ‚Äú pV, A, src, tgtq:
...
...
...
p0, 2q


p1, 2q


p2, 2q


¬® ¬® ¬®
p0, 1q


p1, 1q


p2, 1q


¬® ¬® ¬®
p0, 0q


p1, 0q


p2, 0q


¬® ¬® ¬®
a. Write the sets A and V .
b. What are the source and target functions A √ë V ?
‚ô¶
Solution 4.3.1.11.
a. Let V ‚Äú N ÀÜ N and A ‚Äú N ÀÜ N ÀÜ tright, upu.
b. For all m, n P N, the source function src: A √ë V is given by
srcpm, n, rightq ‚Äú srcpm, n, upq ‚Äú pm, nq.
The target function tgt: A √ë V is given by
tgtpm, n, rightq ‚Äú pm ` 1, nq
and
tgtpm, n, upq ‚Äú pm, n ` 1q.
‚ô¶
Exercise 4.3.1.12.
A graph is a pair of functions A √ë V .
This sets up the notion of equalizer and
coequalizer (see DeÔ¨Ånitions 3.2.3.1 and 3.3.3.1).
a. What feature of a graph G is captured by the equalizer of its source and target func-
tions?

4.3. GRAPHS
153
b. What feature of a graph G is captured by the coequalizer of its source and target
functions?
‚ô¶
Solution 4.3.1.12.
a. The equalizer of src, tgt is the set of loops in G, i.e., arrows pointing from a vertex to
itself.
b. The coequalizer of srs, tgt is the set of connected components in G.
See Exercise
3.3.1.11.
‚ô¶
4.3.2
Paths in a graph
One usually has some idea of what a path in a graph is, especially if one is is told that a
path must always follow the direction of arrows. The following deÔ¨Ånition makes this idea
precise. In particular, one can have paths of any Ô¨Ånite length n P N, even length 0 or 1.
Also, we want to be able to talk about the source vertex and target vertex of a path as
well as about concatenation of paths.
DeÔ¨Ånition 4.3.2.1. Let G ‚Äú pV, A, src, tgtq be a graph. A path of length n in G, denoted
p P Pathpnq
G , is a head-to-tail sequence
p ‚Äú pv0
a1
√ù√ë v1
a2
√ù√ë v2
a3
√ù√ë ¬® ¬® ¬® an
√ù√ù√ë vnq
(4.5)
of arrows in G, denoted v0ra1, a2, . . . , ans. A path is a list of arrows, so we use a variant of
list notation, but the extra subscript at the beginning, which indicates the source vertex,
reminds us that this list is actually a path. We have canonical isomorphisms Pathp1q
G ‚Äì A
and Pathp0q
G ‚Äì V : a path of length 1 is an arrow, and a path of length 0 is a vertex. We
refer to the length 0 path vr s on vertex v as the trivial path on v.
We denote by PathG the set of paths (of any length) in G, i.e.,
PathG :‚Äú
ƒü
nPN
Pathpnq
G .
Every path p P PathG has a source vertex and a target vertex, and we may denote these
src, tgt: PathG √ë V . If p is a path with srcppq ‚Äú v and tgtppq ‚Äú w, we may denote it
p: v √ë w. Given two vertices v, w P V , we write PathGpv, wq to denote the set of all
paths p: v √ë w.

154
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
There is a concatenation operation on paths. Given a path p: v √ë w and q: w √ë x,
we deÔ¨Åne the concatenation, denoted p ``q: v √ë x, using concatenation of lists (see
DeÔ¨Ånition 4.1.1.13).
That is, if p ‚Äú
vra1, a2, . . . , ams and q ‚Äú
wrb1, b2, . . . , bns, then
p ``q ‚Äú vra1, . . . , am, b1, . . . , bns. In particular, if p ‚Äú vrs is the trivial path on vertex v
(resp. if r ‚Äú wr] is the trivial path on vertex w), then for any path q: v √ë w, we have
p ``q ‚Äú q (resp. q ``r ‚Äú q).
Example 4.3.2.2. Let G ‚Äú pV, A, src, tgtq be a graph, and suppose v P V is a vertex. If
p: v √ë v is a path of length |p| P N with srcppq ‚Äú tgtppq ‚Äú v, we call it a loop of length |p|.
For n P N, we write pn : v √ë v to denote the n-fold concatenation pn :‚Äú p``p`` ¬® ¬® ¬®``p
(where p is written n times).
Example 4.3.2.3. In diagram (4.4), page 146, we see a graph G. In it, there are no paths
from v to y, one path (namely, vrfs) from v to w, two paths (namely, vrf, gs and vrf, hs)
from v to x, and inÔ¨Ånitely many paths
tyrisq1 ``yrj, ksr1 `` ¬® ¬® ¬® ``yrisqn ``yrj, ksrn | n, q1, r1, . . . , qn, rn P Nu
from y to y. There are other paths as well in G, including the Ô¨Åve trivial paths.
Exercise 4.3.2.4.
How many paths are there in the following graph?
1‚Äö
f
 2‚Äö
g
 3‚Äö
‚ô¶
Solution 4.3.2.4.
There are six: the length 0 paths 1rs, 2rs, and 3rs; the length 1 paths 1rfs and 2rgs;
and the length 2 path 1rf, gs.
‚ô¶
Exercise 4.3.2.5.
Let G be a graph, and consider the set PathG of paths in G. Suppose someone claimed
that there is a monoid structure on the set PathG, where the multiplication formula is
given by concatenation of paths. Are they correct? Why, or why not?
‚ô¶
Solution 4.3.2.5.
No, they are not correct, unless G has only one vertex. If G has exactly one vertex,
then every path starts and ends there, so we can multiply paths by concatenating them,
and we can take the trivial path as the unit of the monoid. But if G has no vertices,

4.3. GRAPHS
155
then PathG has no elements, so it is not a monoid (it is missing a unit). And if G has
at least two vertices a ‚Ä∞ b, then the trivial paths at a and b are elements of PathG, but
they cannot be concatenated, so the purported multiplication formula is not deÔ¨Åned.
‚ô¶
4.3.3
Graph homomorphisms
A graph pV, A, src, tgtq involves two sets and two functions. For two graphs to be com-
parable, their two sets and their two functions should be appropriately comparable.
DeÔ¨Ånition 4.3.3.1. Let G ‚Äú pV, A, src, tgtq and G1 ‚Äú pV 1, A1, src1, tgt1q be graphs. A
graph homomorphism f from G to G1, denoted f : G √ë G1, consists of two functions
f0 : V √ë V 1 and f1 : A √ë A1 such that the diagrams in (4.6) commute:
A
f1

src

A1
src1

V
f0
 V 1
A
f1

tgt

A1
tgt1

V
f0
 V 1
(4.6)
Remark 4.3.3.2. The conditions (4.6) may look abstruse at Ô¨Årst, but they encode a very
important idea, roughly stated ‚Äúarrows are bound to their endpoints.‚Äù Under a map of
graphs G √ë G1, one cannot Ô¨Çippantly send an arrow of G any old arrow of G1: it must
still connect the vertices it connected before. Following is an example of a mapping that
does not respect this condition: a connects 1 and 2 before but not after:
1‚Äö
a
 2‚Äö
1√û√ë11,2√û√ë21,a√û√ëa1

11
‚Äö
21
‚Äö
a1
 31
‚Äö
The commutativity of the diagrams in (4.6) is exactly what is needed to ensure that
arrows are handled in the expected way by a proposed graph homomorphism.
Example 4.3.3.3 (Graph homomorphism). Let G ‚Äú pV, A, src, tgtq and G1 ‚Äú pV 1, A1, src1, tgt1q
be the graphs drawn in (4.7):
G
1‚Äö
a

d

c

2‚Äö
b
 3‚Äö
4‚Äö
5‚Äö
e
 6‚Äö
1 √û√ë 11, 2 √û√ë 21,
3 √û√ë 11, 4 √û√ë 41,
5 √û√ë 51, 6 √û√ë 51

G1
11
‚Äö
w

y 
21
‚Äö
x

41
‚Äö
51
‚Äö
z

(4.7)

156
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
The colors indicate the choice of function f0 : V √ë V 1. Given that choice, condition (4.6)
imposes in this case that there is a unique choice of graph homomorphism f : G √ë G1. In
other words, where arrows are sent is completely determined by where vertices are sent,
in this particular case.
Exercise 4.3.3.4.
a. Where are a, b, c, d, e sent under f1 : A √ë A1 in diagram (4.7)?
b. Choose an element x P A, and check that it behaves as speciÔ¨Åed by diagram (4.6).
‚ô¶
Solution 4.3.3.4.
a. We have:
f1paq ‚Äú w,
f1pbq ‚Äú x,
f1pcq ‚Äú y,
f1pdq ‚Äú y,
f1peq ‚Äú z.
b. In equation form, diagram (4.6) says that we need to check for any x P A ‚Äú ta, b, c, d, eu
that
src1 Àù f1pxq ‚Äú f0 Àù srcpxq
and
tgt1 Àù f1pxq ‚Äú f0 Àù tgtpxq.
We check these two criteria for x ‚Äú a:
src1pf1paqq ‚Äú src1pwq ‚Äú 11 ‚Äú f0p1q ‚Äú f0psrcpaqq.
tgt1pf1paqq ‚Äú tgt1pwq ‚Äú 21 ‚Äú f0p2q ‚Äú f0ptgtpaqq.
‚ô¶
Exercise 4.3.3.5.
Let G be a graph, let n P N be a natural number, and let rns be the chain graph of
length n, as in Example 4.3.1.8. Is a path of length n in G the same thing as a graph
homomorphism rns √ë G, or are there subtle diÔ¨Äerences? More precisely, is there always
an isomorphism between the set of graph homomorphisms rns √ë G and the set Pathpnq
G
of length n paths in G?
‚ô¶

4.3. GRAPHS
157
Solution 4.3.3.5.
Yes, a path of length n in G is the same thing as a graph homomorphism rns √ë G.
The discussion of categories in Chapter 5 makes clear how to write this fact formally as
an isomorphism:
HomGrphprns, Gq ‚Äì Pathpnq
G .
‚ô¶
Exercise 4.3.3.6.
Given a homomorphism of graphs f : G √ë G1, there is an induced function between
their sets of paths, Pathpfq: PathpGq √ë PathpG1q.
a. Explain how this works.
b. Is it the case that for every n P N, the function Pathpfq carries PathpnqpGq to
PathpnqpG1q, or can path lengths change in this process?
c. Suppose that f0 and f1 are injective (meaning no two distinct vertices in G are sent
to the same vertex (resp. for arrows) under f). Does this imply that Pathpfq is also
injective (meaning no two distinct paths are sent to the same path under f)?
d. Suppose that f0 and f1 are surjective (meaning every vertex in G1 and every arrow in
G1 is in the image of f). Does this imply that Pathpfq is also surjective? Hint: At
least one of the answers to parts (b)‚Äì(d) is no.
‚ô¶
Solution 4.3.3.6.
a. Given a path p in G, we apply f to it, node by node and arrow by arrow, to get a
path in G1. A high-level way to think about this, given Exercise 4.3.3.5, is as follows.
A path in G is a graph homomorphism p: rns √ë G, for some chain graph rns of length
n P N. Composing, f Àù p: rns √ë G1 is a path of length n in G1.
b. Yes, it is the case that Pathpfq carries PathpnqpGq to PathpnqpG1q.
c. Yes, it would be injective.
d. No; it is possible for f0 and f1 to be surjective while Pathpfq is not surjective. Here is

158
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
an example. Consider the following graph homomorphism pa √û√ë a2; b, b1 √û√ë b2; c √û√ë c1q:
G
a‚Äö

b‚Äö
b1
‚Äö

c1
‚Äö
f

G1
a2
‚Äö

b2
‚Äö

c2
‚Äö
This homomorphism is surjective on vertices and arrows, but a new path of length 2
emerges.
‚ô¶
Exercise 4.3.3.7.
Given a graph pV, A, src, tgtq, let xsrc, tgty: A √ë V ÀÜ V be the function guaranteed
by the universal property for products. One might hope to summarize condition (4.6) for
graph homomorphisms by the commutativity of the single square
A
f1

xsrc,tgty

A1
xsrc1,tgt1y

V ÀÜ V
f0ÀÜf0
 V 1 ÀÜ V 1
(4.8)
Is the commutativity of the diagram in (4.8) indeed equivalent to the commutativity of
the diagrams in (4.6)?
‚ô¶
Solution 4.3.3.7.
Yes. This follows from the universal property for products, Proposition 3.1.1.10.
‚ô¶
4.3.3.8
Binary relations and graphs
DeÔ¨Ånition 4.3.3.9. Let X be a set. A binary relation on X is a subset R ƒé X ÀÜ X.

4.3. GRAPHS
159
If X ‚Äú N is the set of integers, then the usual ƒè deÔ¨Ånes a binary relation on X: given
pm, nq P N ÀÜ N, we put pm, nq P R iÔ¨Äm ƒè n. As a table it might be written as in the
left-hand table in (4.9):
m ƒè n
m
n
0
0
0
1
1
1
0
2
1
2
2
2
0
3
...
...
n ‚Äú 5m
m
n
0
0
1
5
2
10
3
15
4
20
5
25
6
30
...
...
|n ¬¥ m| ƒè 1
m
n
0
0
0
1
1
0
1
1
1
2
2
1
2
2
...
...
(4.9)
The middle table is the relation tpm, nq P N ÀÜ N | n ‚Äú 5mu ƒé N ÀÜ N, and the right-hand
table is the relation tpm, nq P N ÀÜ N | |n ¬¥ m| ƒè 1u ƒé N ÀÜ N.
Exercise 4.3.3.10.
A relation on R is a subset of R ÀÜ R, and one can indicate such a subset of the plane
by shading. Choose an error bound œµ ƒÖ 0, and draw the relation one might refer to as
œµ-approximation. To say it another way, draw the relation ‚Äúx is within œµ of y.‚Äù
‚ô¶
Solution 4.3.3.10.
‚àí4
‚àí3
‚àí2
‚àí1
0
1
2
3
4
‚àí5
‚àí4
‚àí3
‚àí2
‚àí1
0
1
2
3
4
5
‚ô¶

160
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
Exercise 4.3.3.11.
Recall that (4.9) uses tables to express relations; it may help to use the terminology
of tables in answering some of the following questions.
a. If R ƒé S ÀÜ S is a binary relation, Ô¨Ånd a natural way to make a graph GR from it,
having vertices S.
b. What is the set A of arrows in GR?
c. What are the source and target functions src, tgt: A √ë S in GR?
d. Consider the seven number rows in the left-hand table in (4.9), ignoring the elipses.
Draw the corresponding graph.
e. Do the same for the right-hand table in (4.9).
‚ô¶
Solution 4.3.3.11.
a. We have two projections œÄ1, œÄ2 : S ÀÜ S √ë S, and we have an inclusion i: R ƒé S ÀÜ S.
Thus we have a graph
R
œÄ1Àùi 
œÄ2Àùi  S
The idea is that for each row in the table, we draw an arrow from the Ô¨Årst column‚Äôs
value to the second column‚Äôs value.
b. It is R, which one could call ‚Äúthe number of rows in the table.‚Äù
c. These are œÄ1 Àù i and œÄ2 Àù i, which one could call ‚Äúthe Ô¨Årst and second columns in the
table.‚Äù In other words, GR :‚Äú pS, R, œÄ1 Àù i, œÄ2 Àù iq.
d. The seven solid arrows in the following graph correspond to the seven displayed rows
in the left-hand table, and we include 3 more dashed arrows to complete the picture

4.3. GRAPHS
161
(they still satisfy the ƒè relation).
Sample of Gmƒèn
0‚Äö




1‚Äö



2‚ÄöE
 3‚ÄöF
e. Seven rows, seven arrows:
Sample of G|n¬¥m|ƒè1
0‚Äö
B
 1‚Äö
B


2‚Äö
B

‚ô¶
Exercise 4.3.3.12.
a. If pV, A, src, tgtq is a graph, Ô¨Ånd a natural way to make a binary relation R ƒé V ÀÜ V
from it.
b. For the left-hand graph G in (4.7), and write out the corresponding binary relation in
table form.
‚ô¶
Solution 4.3.3.12.
a. Since we have functions src, tgt: A √ë V , the universal property for products gives us
a function xsrc, tgty: A √ë V ÀÜ V. This is not a binary relation yet because it may not
be injective. So let R ƒé V ÀÜ V be the image of xsrc, tgty; now we have the desired
binary relation.

162
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
b.
1
2
1
4
2
3
5
6
‚ô¶
Exercise 4.3.3.13.
a. Given a binary relation R ƒé S ÀÜ S, you know from Exercise 4.3.3.11 how to construct
a graph out of it, and from Exercise 4.3.3.12 how to make a new binary relation out of
that, making a roundtrip. How does the resulting relation compare with the original?
b. Given a graph G ‚Äú pV, A, src, tgtq, you know from Exercise 4.3.3.12 how to make a
new binary relation out of it, and from Exercise 4.3.3.11 how to construct a new graph
out of that, making the other roundtrip. How does the resulting graph compare with
the original?
‚ô¶
Solution 4.3.3.13.
a. It is the same.
b. It is diÔ¨Äerent. The new graph G1 never has two arrows in the same direction. That is,
in the original graph G, we might have two diÔ¨Äerent arrows v1 √ë v2, but this cannot
happen in the new graph. So the old graph and the new graph have the same number
of vertices, and there exists an arrow from v1 √ë v2 in G if and only if there exists an
arrow v1 √ë v2 in G1; but multiple arrows from one vertex to another in G are merged
into a single arrow in G1.
‚ô¶
4.4
Orders
People usually think of certain sets as though they come with a canonical order. For
example, one might think the natural numbers come with the ordering by which 3 ƒÉ 5,
or that the letters in the alphabet come with the order by which b ƒÉ e. But in fact we put
orders on sets, and some orders are simply more commonly used. For instance, one could

4.4. ORDERS
163
order the letters in the alphabet by frequency of use, in which case e would come before
b. Given diÔ¨Äerent purposes, we can put diÔ¨Äerent orders on the same set. For example,
in Example 4.4.3.2 we give a diÔ¨Äerent ordering on the natural numbers that is useful in
elementary number theory.
In science, we might order the set of materials in two diÔ¨Äerent ways. In the Ô¨Årst, we
could consider material A to be less than material B if A is an ingredient or part of B,
so water would be less than concrete. But we could also order materials based on how
electrically conductive they are, whereby concrete would be less than water. This section
is about diÔ¨Äerent kinds of orders.
4.4.1
DeÔ¨Ånitions of preorder, partial order, linear order
DeÔ¨Ånition 4.4.1.1. Let S be a set and R ƒé S ÀÜ S a binary relation on S; if ps, s1q P R,
we write s ƒè s1. Then we say that R is a preorder if, for all s, s1, s2 P S, we have
ReÔ¨Çexivity: s ƒè s, and
Transitivity: if s ƒè s1 and s1 ƒè s2, then s ƒè s2.
We say that R is a partial order if it is a preorder and, in addition, for all s, s1 P S, we
have
Antisymmetry: If s ƒè s1 and s1 ƒè s, then s ‚Äú s1.
We say that R is a linear order if it is a partial order and, in addition, for all s, s1 P S,
we have
Comparability: Either s ƒè s1 or s1 ƒè s.
We denote such a preorder (or partial order or linear order) by pS, ƒèq.
Exercise 4.4.1.2.
a. The relation in the left-hand table in (4.9) is a preorder. Is it a linear order?
b. Show that neither the middle table nor the right-hand table in (4.9) is even a preorder.
‚ô¶
Solution 4.4.1.2.
a. Yes.

164
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
b. If ƒè denotes the middle relation n ‚Äú 5m, we have neither reÔ¨Çexivity (1 ƒô 1) nor
transitivity (25 ‚Äú 5 Àö 1 and 5 ‚Äú 5 Àö 1, but 25 ‚Ä∞ 5 Àö 1). If ƒè denotes the right-hand
relation |n ¬¥ m| ƒè 1, we do have reÔ¨Çexivity but not transitivity.
‚ô¶
Example 4.4.1.3 (Partial order not linear order). The following is an olog for playing
cards:
a diamond
is
	
a heart
is
G
a club
is
!
a spade
is
$
a red
card
is
H
a black
card
is
I
a 4 of di-
amonds
is

is

a card
a black
queen
is

is
#
a 4
is

a num-
bered
card
is
J
a face
card
is

a queen
is

(4.10)
We can put a binary relation on the set of boxes here by saying A ƒè B if there is a path
A √ë B. One can see immediately that this is a preorder because length 0 paths give
reÔ¨Çexivity, and concatenation of paths gives transitivity. To see that it is a partial order
we only note that there are no loops of any length. But this partial order is not a linear
order because there is no path (in either direction) between, e.g., ‚åúa 4 of diamonds‚åùand
‚åúa black queen‚åù, so it violates the comparability condition.
Remark 4.4.1.4. Note that olog (4.10) in Example 4.4.1.3 is a good olog in the sense that
given any collection of cards (e.g., choose 45 cards at random from each of seven decks
and throw them in a pile), they can be classiÔ¨Åed according to it. In other words, each box
in the olog will refer to some subset of the pile, and every arrow will refer to a function
between these sets. For example, the arrow ‚åúa heart‚åù
is
√ù√ù√ë ‚åúa red card‚åùis a function from
the set of hearts in the pile to the set of red cards in the pile.
Example 4.4.1.5 (Preorder, not partial order). Every equivalence relation is a preorder,
but rarely are they partial orders. For example, if S ‚Äú t1, 2u and we put R ‚Äú S ÀÜS, then
this is an equivalence relation. It is a preorder but not a partial order (because 1 ƒè 2
and 2 ƒè 1, but 1 ‚Ä∞ 2, so antisymmetry fails).

4.4. ORDERS
165
Application 4.4.1.6. Classically, we think of time as linearly ordered. A model is pR, ƒèq,
the usual linear order on the set of real numbers. But according to the theory of relativity,
there is not actually a single order to the events in the universe. DiÔ¨Äerent observers
correctly observe diÔ¨Äerent orders on the set of events.
‚ô¶‚ô¶
Example 4.4.1.7 (Finite linear orders). Let n P N be a natural number. DeÔ¨Åne a linear
order rns ‚Äú pt0, 1, 2, . . . , nu, ƒèq in the standard way. Pictorially,
rns :‚Äú
0‚Äö
ƒè
 1‚Äö
ƒè
 2‚Äö
ƒè  ¬® ¬® ¬®
ƒè
 n‚Äö
Every Ô¨Ånite linear order, i.e., linear order on a Ô¨Ånite set, is of the preceding form.
That is, though the labels might change, the picture would be the same. This can be
made precise when morphisms of orders are deÔ¨Åned (see DeÔ¨Ånition 4.4.4.1)
Exercise 4.4.1.8.
Let S ‚Äú t1, 2, 3u.
a. Find a preorder R ƒé S ÀÜ S such that the set R is as small as possible. Is it a partial
order? Is it a linear order?
b. Find a preorder R1 ƒé S ÀÜ S such that the set R1 is as large as possible. Is it a partial
order? Is it a linear order?
‚ô¶
Solution 4.4.1.8.
Write R and R1 as tables:
R
1
1
2
2
3
3
R1
1
1
1
2
1
3
2
1
2
2
2
3
3
1
3
2
3
3

166
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
a. R is a partial order but not a linear order because 1 ƒô 2 and 2 ƒô 1.
b. R1 is not a partial order because 1 ƒè 2 and 2 ƒè 1, so it cannot be a linear order.
‚ô¶
Exercise 4.4.1.9.
a. List all the preorder relations possible on the set t1, 2u.
b. For any n P N, how many linear orders exist on the set t1, 2, 3, . . . , nu?
c. Does your formula work when n ‚Äú 0?
‚ô¶
Solution 4.4.1.9.
a.
R1
1
1
2
2
R2
1
1
1
2
2
2
R3
1
1
2
1
2
2
R4
1
1
1
2
2
1
2
2
b. The factorial n! ‚Äú 1 Àö 2 Àö ¬® ¬® ¬® Àö n.
c. Yes, there is one way to order the empty set, namely, H ƒé H ÀÜ H, and 0! ‚Äú 1.
‚ô¶
Remark 4.4.1.10. We can draw any preorder pS, ƒèq as a graph with vertices S and with
an arrow a √ë b if a ƒè b. These are precisely the graphs with the following two properties
for any vertices a, b P S:
1. There is at most one arrow a √ë b.
2. If there is a path from a to b, then there is an arrow a √ë b.
If pS, ƒèq is a partial order, then the associated graph has an additional no-loops property:
3. If n P N is an integer with n ƒõ 2, then there are no paths of length n that start
at a and end at a.

4.4. ORDERS
167
If pS, ƒèq is a linear order then there is an additional comparability property:
4. For any two vertices a, b, there is an arrow a √ë b or an arrow b √ë a.
Given a graph G, we can create a binary relation ƒè on its set S of vertices as follows.
Put a ƒè b if there is a path in G from a to b. This relation will be reÔ¨Çexive and transitive,
so it is a preorder. If the graph satisÔ¨Åes property 3, then the preorder will be a partial
order, and if the graph also satisÔ¨Åes property 4, then the partial order will be a linear
order. Thus graphs give us a nice way to visualize orders.
Slogan 4.4.1.11.
A graph generates a preorder: v ƒè w if there is a path v √ë w.
Exercise 4.4.1.12.
Let G ‚Äú pV, A, src, tgtq be the following graph:
a‚Äö
 b‚Äö
) c‚Äö
A
 d‚Äö
e‚Äö
f‚Äö

 g‚Äö
 
In the corresponding preorder, which of the following are true?
a. a ƒè b.
b. a ƒè d.
c. c ƒè b.
d. b ‚Äú c.
e. e ƒè f.
f. f ƒè d.
‚ô¶
Solution 4.4.1.12.
a. True.

168
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
b. True.
c. True.
d. False (though this would be true in the corresponding partial order, which has not
been discussed).
e. False.
f. True.
‚ô¶
Exercise 4.4.1.13.
a. Let S ‚Äú t1, 2u. The set PpSq of subsets of S form a partial order. Draw the associated
graph.
b. Repeat this for Q ‚Äú H, R ‚Äú t1u, and T ‚Äú t1, 2, 3u. That is, draw the partial orders
on PpQq, PpRq, and PpTq.
c. Do you see n-dimensional cubes?
‚ô¶
Solution 4.4.1.13.
a.
Ppt1, 2uq
H‚Äö



t1u
‚Äö

t2u
‚Äö
 t1,2u
‚Äö

4.4. ORDERS
169
b.
PpHq
H‚Äö
Ppt1uq
H‚Äö
 t1u
‚Äö
Ppt1, 2, 3uq
H‚Äö



t1u
‚Äö


t3u
‚Äö


t1,3u
‚Äö

t2u
‚Äö


t1,2u
‚Äö

t2,3u
‚Äö
 t1,2,3u
‚Äö
c. Yes. The graph associated to Ppnq looks like an n-dimensional cube.
‚ô¶
DeÔ¨Ånition 4.4.1.14. Let pS, ƒèq be a preorder. A clique is a subset S1 ƒé S such that for
each a, b P S1, one has a ƒè b.
Exercise 4.4.1.15.
True or false: A partial order is a preorder that has no cliques? (If false, is there a
nearby true statement?)
‚ô¶
Solution 4.4.1.15.
False. Every element is always in its own clique, so if X is a partial order with at
least one element, then it has a clique. But a nearby statement is true. Let‚Äôs deÔ¨Åne a
nontrivial clique to be a clique consisting of two or more elements.
Slogan.
A partial order is a preorder that has no nontrivial cliques.
‚ô¶
Just as every relation generates an equivalence relation (see Proposition 3.3.1.7), every
relation also generates a preorder.
Example 4.4.1.16. Let X be a set and R ƒé X ÀÜ X a relation. For elements x, y P X, we
say there is an R-path from x to y if there exists a natural number n P N and elements
x0, x1, . . . , xn P X such that

170
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
1. x ‚Äú x0;
2. xn ‚Äú y;
3. for all i P N, if 0 ƒè i ƒè n ¬¥ 1, then pxi, xi`1q P R.
Let R denote the relation where px, yq P R if there exists an R-path from x to y. We call
R the preorder generated by R. and note some facts about R:
Containment. If px, yq P R, then px, yq P R. That is, R ƒé R.
ReÔ¨Çexivity. For all x P X, we have px, xq P R.
Transitivity. For all x, y, z P X, if px, yq P R and py, zq P R, then px, zq P R.
Let‚Äôs write x ƒè y if px, yq P R. To check the containment claim, use n ‚Äú 1 so x0 ‚Äú x
and xn ‚Äú y. To check the reÔ¨Çexivity claim, use n ‚Äú 0 so x ‚Äú x0 ‚Äú y and condition 3 is
vacuously satisÔ¨Åed. To check transitivitiy, suppose given R-paths x ‚Äú x0 ƒè x1 ƒè . . . ƒè
xn ‚Äú y and y ‚Äú y0 ƒè y1 ƒè . . . ƒè yp ‚Äú z; then x ‚Äú x0 ƒè x1 ƒè . . . ƒè xn ƒè y1 ƒè . . . ƒè yp ‚Äú z
will be an R-path from x to z.
We can turn any relation into a preorder in a canonical way. Here is a concrete case
of this idea.
Let X ‚Äú ta, b, c, du and suppose given the relation tpa, bq, pb, cq, pb, dq, pd, cq, pc, cqu.
This is neither reÔ¨Çexive nor transitive, so it is not a preorder. To make it a preorder
we follow the preceding prescription. Starting with R-paths of length n ‚Äú 0, we put
tpa, aq, pb, bq, pc, cq, pd, dqu into R.
The R-paths of length 1 add the original elements,
tpa, bq, pb, cq, pb, dq, pd, cq, pc, cqu. Redundancy (e.g., pc, cq) is permissible, but from now on
in this example we write only the new elements. The R-paths of length 2 add tpa, cq, pa, dqu
to R. One can check that R-paths of length 3 and above do not add anything new to R,
so we are done. The relation
R ‚Äú tpa, aq, pb, bq, pc, cq, pd, dq, pa, bq, pb, cq, pb, dq, pd, cq, pa, cq, pa, dqu
is reÔ¨Çexive and transitive, hence a preorder.
Exercise 4.4.1.17.
Let X ‚Äú ta, b, c, d, e, fu, and let R ‚Äú tpa, bq, pb, cq, pb, dq, pd, eq, pf, aqu.
a. What is the preorder R generated by R?
b. Is it a partial order?
‚ô¶

4.4. ORDERS
171
Solution 4.4.1.17.
Start by drawing the associated graph, which helps with visualization.
f‚Äö
 a‚Äö
 b‚Äö


c‚Äö
d‚Äö
 e‚Äö
a. This is not a preorder right out of the box, because we need to include all the paths,
of which there are 19. You can see the original R as the length 1 paths, a bit down
the table:
R
a
a
b
b
c
c
d
d
e
e
f
f
a
b
b
c
b
d
d
e
f
a
a
c
a
d
b
e
f
b
a
e
f
c
f
d
f
e
b. Yes, it is. There are no nontrivial cliques.
‚ô¶
Exercise 4.4.1.18.
Let X be the set of people, and let R ƒé X ÀÜ X be the relation with px, yq P R if x is
the child of y. Describe the preorder generated by R in layperson‚Äôs terms.
‚ô¶
Solution 4.4.1.18.
It is the descendant preorder: x ƒè y if x is a descendant of y.
But be careful;
everybody is considered to be a descendant of themselves in this preorder.
‚ô¶
4.4.2
Meets and joins
Let X be any set. Recall from DeÔ¨Ånition 3.4.4.9 that the power-set of X, denoted PpXq, is
the set of subsets of X. There is a natural order on PpXq given by the subset relationship,

172
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
as exempliÔ¨Åed in Exercise 4.4.1.13. Given two elements a, b P PpXq, we can consider them
as subsets of X and take their intersection as an element of PpXq, denoted a X b. We can
also consider them as subsets of X and take their union as an element of PpXq, denoted
a Y b. The intersection and union operations are generalized in the following deÔ¨Ånition.
DeÔ¨Ånition 4.4.2.1. Let pS, ƒèq be a preorder, and let s, t P S be elements. A meet of s
and t is an element w P S satisfying the following universal property:
‚Ä¢ w ƒè s and w ƒè t,
‚Ä¢ for any x P S, if x ƒè s and x ƒè t, then x ƒè w.
If w is a meet of s and t, we write w ‚Äì s ^ t.
A join of s and t is an element w P S satisfying the following universal property:
‚Ä¢ s ƒè w and t ƒè w,
‚Ä¢ for any x P S, if s ƒè x and t ƒè x, then w ƒè x.
If w is a join of s and t, we write w ‚Äì s _ t.
That is, the meet of s and t is the biggest thing that is smaller than both, i.e., a
greatest lower bound, and the join of s and t is the smallest thing that is bigger than
both, i.e., a least upper bound. Note that the meet of s and t might be s or t itself.
It may happen that s and t have more than one meet (or more than one join). However,
any two meets of s and t must be in the same clique, by the universal property (and the
same for joins).
Exercise 4.4.2.2.
Consider the partial order from Example 4.4.1.3.
a. What is the join of ‚åúa diamond‚åùand ‚åúa heart‚åù?
b. What is the meet of ‚åúa black card‚åùand ‚åúa queen‚åù?
c. What is the meet of ‚åúa diamond‚åùand ‚åúa card‚åù?
‚ô¶
Solution 4.4.2.2.
a. ‚åúa diamond‚åù_ ‚åúa heart‚åù‚Äú ‚åúa red card‚åù.
b. ‚åúa black card‚åù^ ‚åúa queen‚åù‚Äú ‚åúa black queen‚åù.

4.4. ORDERS
173
c. ‚åúa diamond‚åù^ ‚åúa card‚åù‚Äú ‚åúa diamond‚åù.
‚ô¶
Not every two elements in a preorder need have a meet, nor need they have a join.
Exercise 4.4.2.3.
a. If possible, Ô¨Ånd two elements in the partial order from Example 4.4.1.3 that do not
have a meet.7
b. If possible, Ô¨Ånd two elements that do not have a join (in that preorder).
‚ô¶
Solution 4.4.2.3.
a. There is no meet for ‚åúa heart‚åùand ‚åúa club‚åù; no card is both.
b. Every two elements have a join here. But note that some of these joins are ‚Äúwrong‚Äù
because the olog is not complete. For example, we have ‚åúa 4‚åù_‚åúa queen‚åù‚Äú ‚åúa card‚åù,
whereas the correct answer would be ‚åúa card that is either a 4 or a queen‚åù.
‚ô¶
Exercise 4.4.2.4.
As mentioned, the power-set S :‚Äú PpXq of any set X naturally has the structure of a
partial order. Its elements s P S correspond to subsets s ƒé X, and we put s ƒè t if and
only if s ƒé t as subsets of X. The meet of two elements is their intersection as subsets of
X, s ^ t ‚Äú s X t, and the join of two elements is their union as subsets of X, s _ t ‚Äú s Y t.
a. Is it possible to put a monoid structure on the set S in which the multiplication formula
is given by meets? If so, what would the unit element be?
b. Is it possible to put a monoid structure on the set S in which the multiplication formula
is given by joins? If so, what would the unit element be?
‚ô¶
7Use the displayed preorder, not any kind of completion of what is written there.

174
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
Solution 4.4.2.4.
a. Yes, this will work. The unit element is the subset X ƒé X, because for any s P PpXq,
we have X ^ s ‚Äú X X s ‚Äú s. So the monoid is pPpXq, X, Xq.
b. Yes, this will work. The unit element is the subset H ƒé X, because for any s P PpXq,
we have H _ s ‚Äú H Y s ‚Äú s. So the monoid is pPpXq, H, Yq.
‚ô¶
Example 4.4.2.5 (Trees). A tree, i.e., a system of nodes and branches, all of which emanate
from a single node called the root, is a partial order but generally not a linear order. A
tree pT, ƒèq can either be oriented toward the root (so the root is the largest element of
the partial order) or away from the root (so the root is the smallest element); let‚Äôs only
consider the former.
A tree is pictured as a graph in (4.11). The root is labeled e.
a‚Äö

b‚Äö

c‚Äö

d‚Äö

e‚Äö
f‚Äö
#
g‚Äö
#
h‚Äö

i‚Äö
#
(4.11)
In a tree every pair of elements s, t P T has a join s^t (their closest mutual ancestor).
On the other hand, if s and t have a join c ‚Äú s _ t, then either c ‚Äú s or c ‚Äú t.
Exercise 4.4.2.6.
Consider the tree drawn in (4.11).
a. What is the join i _ h?
b. What is the join h _ b?
c. What is the meet b ^ a?
d. What is the meet b ^ g?
‚ô¶

4.4. ORDERS
175
Solution 4.4.2.6.
a. i _ h ‚Äú g.
b. h _ b ‚Äú e.
c. b ^ a ‚Äú a.
d. b ^ g does not exist.
‚ô¶
4.4.3
Opposite order
DeÔ¨Ånition 4.4.3.1. Let S :‚Äú pS, ƒèq be a preorder. The opposite preorder, denoted Sop,
is the preorder pS, ƒèopq having the same set of elements but where s ƒèop s1 iÔ¨Äs1 ƒè s.
Example 4.4.3.2. Consider the preorder N :‚Äú pN, dividesq, where a divides b if ‚Äúa goes
into b evenly,‚Äù i.e., if there exists n P N such that a Àö n ‚Äú b. So 5 divides 35, and so on.
Then N op is the set of natural numbers but where m ƒè n iÔ¨Äm is a multiple of n. So
6 ƒè 2 and 6 ƒè 3, but 6 ƒô 4.
Exercise 4.4.3.3.
Suppose that S :‚Äú pS, ƒèq is a preorder.
a. If S is a partial order, is Sop also a partial order?
b. If S is a linear order, is Sop a linear order?
‚ô¶
Solution 4.4.3.3.
a. Yes. If S has no nontrivial cliques, neither will Sop.
b. Yes. If every two elements in S are comparable, so are every two elements in Sop.
‚ô¶
Exercise 4.4.3.4.
Suppose that S :‚Äú pS, ƒèq is a preorder and that s1, s2 P S have join s1 _ s2 ‚Äú t in S.
The preorder Sop has the same elements as S. Is t the join of s1 and s2 in Sop, or is it
their meet, or is it not necessarily their meet or their join?
‚ô¶

176
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
Solution 4.4.3.4.
It is their meet.
‚ô¶
4.4.4
Morphism of orders
An order pS, ƒèq, be it a preorder, a partial order, or a linear order, involves a set and a
binary relation. For two orders to be comparable, their sets and their relations should be
appropriately comparable.
DeÔ¨Ånition 4.4.4.1. Let S :‚Äú pS, ƒèq and S1 :‚Äú pS1, ƒè1q be preorders (resp. partial orders
or linear orders). A morphism of preorders (resp. partial orders or linear orders) f from
S to S1, denoted f : S √ë S1, is a function f : S √ë S1 such that, for every pair of elements
s1, s2 P S, if s1 ƒè s2, then fps1q ƒè1 fps2q.
Example 4.4.4.2. Let X and Y be sets, and let f : X √ë Y be a function. Then for every
subset X1 ƒé X, its image fpX1q ƒé Y is a subset (see Exercise 2.1.2.8). Thus we have a
function F : PpXq √ë PpY q, given by taking images. This is a morphism of partial orders
pPpXq, ƒéq √ë pPpY q, ƒéq. Indeed, if a ƒé b in PpXq, then fpaq ƒé fpbq in PpY q.
Application 4.4.4.3. It is often said that a team is only as strong as its weakest member.
Is this true for materials? The hypothesis that a material is only as strong as its weakest
constituent can be understood as follows.
Recall from the beginning of Section 4.4 (page 162) that we can put several diÔ¨Äerent
orders on the set M of materials. One example is the order given by constituency (m ƒèC
m1 if m is an ingredient or constituent of m1).
Another order is given by strength:
m ƒèS m1 if m1 is stronger than m (in some Ô¨Åxed setting).
Is it true that if material m is a constituent of material m1, then the strength of m1 is
less than or equal to the strength of m? Mathematically the question would be, Is there
a morphism of preorders pM, ƒèCq √ù√ë pM, ƒèSqop?
‚ô¶‚ô¶
Exercise 4.4.4.4.
Let X and Y be sets, and let f : X √ë Y be a function. Then for every subset Y 1 ƒé Y ,
its preimage f ¬¥1pY 1q ƒé X is a subset (see DeÔ¨Ånition 3.2.1.12). Thus we have a function
F : PpY q √ë PpXq, given by taking preimages. Is it a morphism of partial orders?
‚ô¶
Solution 4.4.4.4.
Let‚Äôs Ô¨Årst ground the discussion with an olog
X
a person
lives in

Y
a country

4.4. ORDERS
177
Now given any set of countries Y 1 ƒé Y , we can consider the set f ¬¥1pY 1q of persons living
in (any one of) those countries‚Äîthat is the preimage. This question is asking whether,
if Mary chooses a set of countries M ƒé Y and John chooses all those and a few more
M ƒé J, does the set of persons living in John‚Äôs countries include the set of persons living in
Mary‚Äôs countries, f ¬¥1pMq ƒé f ¬¥1pJq? Well, clearly, yes. So F ‚Äú f ¬¥1p¬¥q: PpY q √ë PpXq
is a morphism of partial orders.
‚ô¶
Example 4.4.4.5. Let S be a set. The smallest preorder structure that can be put on S is
to say a ƒè b iÔ¨Äa ‚Äú b. This is indeed reÔ¨Çexive and transitive, and it is called the discrete
preorder on S.
The largest preorder structure that can be put on S is to say a ƒè b for all a, b P S.
This again is reÔ¨Çexive and transitive, and it is called the indiscrete preorder on S.
Exercise 4.4.4.6.
Let S be a set, and let pT, ƒèT q be a preorder. Let ƒèD be the discrete preorder on S.
a. A morphism of preorders pS, ƒèDq √ë pT, ƒèT q is a function S √ë T satisfying certain
properties (see DeÔ¨Ånition 4.4.4.1). Which functions S √ë T arise in this way?
b. Given a morphism of preorders pT, ƒèT q √ë pS, ƒèDq, we get a function T √ë S. In terms
of ƒèT , which functions T √ë S arise in this way?
‚ô¶
Solution 4.4.4.6.
a. All of them. Any function S √ë T will respect the discrete preorder.
b. We get exactly those functions f : T √ë S with the following property for all t1, t2 P T:
if t1 ƒèT t2, then fpt1q ‚Äú fpt2q.
‚ô¶
Exercise 4.4.4.7.
Let S be a set, and let pT, ƒèT q be a preorder. Let ƒèI be the indiscrete preorder on
S, as in Example 4.4.4.5.
a. Given a morphism of preorders pS, ƒèIq √ë pT, ƒèT q, we get a function S √ë T. In terms
of ƒèT , which functions S √ë T arise in this way?
b. Given a morphism of preorders pT, ƒèT q √ë pS, ƒèIq, we get a function T √ë S. In terms
of ƒèT , which functions T √ë S arise in this way?
‚ô¶

178
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
Solution 4.4.4.7.
a. We get exactly those functions f : S √ë T with the following property: there exists a
clique T 1 ƒé T such that fpSq ƒé T 1.
b. All of them.
‚ô¶
4.4.5
Other applications
4.4.5.1
Biological classiÔ¨Åcation
Biological classiÔ¨Åcation is a method for dividing the set of organisms into distinct classes,
called taxa. In fact, it turns out that such a classiÔ¨Åcation, say, a phylogenetic tree, can
be understood as a partial order C on the set of taxa.
The typical ranking of these
taxa, including kingdom, phylum, and so on, can be understood as morphism of orders
f : C √ë rns, for some n P N.
For example, we may have a tree (see Example 4.4.2.5) that looks like this:
Archaea
‚Äö

Pyrodicticum
‚Äö

Spirochetes
‚Äö
I
Life
‚Äö
Bacteria
‚Äö

Aquifex
‚Äö

Fungi
‚Äö
I
Eukaryota
‚Äö
A
Animals
‚Äö

¬® ¬® ¬®

HomoSapien
‚Äö

We also have a linear order that looks like this:
Life
‚Äö
Domain
‚Äö

Kingdom
‚Äö

Phylum
‚Äö

¬® ¬® ¬®

Genus
‚Äö

Species
‚Äö

and the ranking system that puts Eukaryota at Domain and Homo Sapien at Species is
an order-preserving function from the dots upstairs to the dots downstairs; that is, it is
a morphism of preorders.

4.4. ORDERS
179
Exercise 4.4.5.2.
Since the phylogenetic tree is a tree, it has all joins.
a. Determine the join of dogs and humans.
b. If we did not require the phylogenetic partial order to be a tree, what would it mean
if two taxa (nodes in the phylogenetic partial order), say, a and b, had meet c with
c ‚Ä∞ a and c ‚Ä∞ b?
‚ô¶
Solution 4.4.5.2.
a. Dogs and humans join in the class ‚Äúmammal.‚Äù
b. The requirements a ^ b ‚Ä∞ a and a ^ b ‚Ä∞ b mean that neither a ƒè b nor b ƒè a. So this
strange situation would mean that taxon c was classiÔ¨Åed as a subtaxon of both taxon
a and taxon b, and that it was the largest such subtaxon.
‚ô¶
Exercise 4.4.5.3.
a. In your favorite scientiÔ¨Åc subject, are there any interesting classiÔ¨Åcation systems that
are actually orders?
b. Choose one such system; what would meets mean in that setting?
‚ô¶
Solution 4.4.5.3.
a. In geography, perhaps we can classify political regions by whether they are neighbor-
hood associations, cities/counties, states/provinces, countries, or world.
b. The join of two political regions would be the smallest region containing both, e.g.,
Chicago _ North Carolina = USA.
‚ô¶

180
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
4.4.5.4
Security
Security, say of sensitive information, is based on two things: a security clearance and
need to know.
Security clearance might consist of levels like conÔ¨Ådential, secret, top
secret. But maybe we can throw in ‚ÄúPresident‚Äôs eyes only‚Äù and some others too, like
‚Äúanyone.‚Äù
Exercise 4.4.5.5.
Does it appear that security clearance is a preorder, a partial order, or a linear order?
‚ô¶
Solution 4.4.5.5.
It looks like a linear order.
‚ô¶
‚ÄúNeed to know‚Äù is another classiÔ¨Åcation of people. For each bit of information, we
do not necessarily want everyone to know about it, even everyone with the speciÔ¨Åed
clearance. It is only disseminated to those who need to know.
Exercise 4.4.5.6.
Let P be the set of all people, and let I be the set of all pieces of information known
by the government. For each subset I ƒé I, let KpIq ƒé P be the set of people who need
to know every piece of information in I. Let S ‚Äú tKpIq | I ƒé Iu be the set of all ‚Äúneed
to know‚Äù groups, with the subset relation denoted ƒè.
a. Is pS, ƒèq a preorder? If not, Ô¨Ånd a nearby preorder.
b. If I1 ƒé I2, do we always have KpI1q ƒè KpI2q or KpI2q ƒè KpI1q or possibly neither?
c. Should the preorder pS, ƒèq have all meets?
d. Should pS, ƒèq have all joins?
‚ô¶
Solution 4.4.5.6.
a. Yes, pS, ƒèq is a preorder.
b. If Alice needs to know every piece of information in I1, and I1 ƒé I2, this does not mean
she needs to know everything in I2; it is the other way around. So KpI2q ƒè KpI1q.
Another way to see this is, if I1 ƒé I2, then ‚Äúneed to know I2‚Äù is a higher kind of
clearance, so fewer people have it.

4.4. ORDERS
181
c. If you need to know everything in I1 and everything in I2, then you need to know
everything in I1 Y I2. And, of course, if you need to know everything in I1 Y I2, then
you need to know everything in I1 and everything in I2. So KpI1YI2q ‚Äú KpI1q^KpI2q.
Yes, pS, ƒèq has all meets.
d. Take the people who need to know I1 and the people who need to know I2, and put
them all in a room. Is there necessarily some set of information I3 that this group,
and only this group, needs to know? This does not seem necessary. So I would say
‚Äòno.
‚ô¶
4.4.5.7
Spaces and geography
Consider closed curves that can be drawn in the plane R2, e.g., circles, ellipses, and kidney-
bean shaped curves. The interiors of these closed curves (not including the boundary
itself) are called basic open sets in R2. The good thing about such an interior U is that
any point p P U is not on the boundary, so no matter how close p is to the boundary of
U, there will always be a tiny basic open set surrounding p and completely contained in
U. In fact, the union of any collection of basic open sets still has this property. That is,
an open set in R2 is any subset U ƒé R2 that can be formed as the union of a collection
of basic open sets.
Example 4.4.5.8. Let U ‚Äú tpx, yq P R2 | x ƒÖ 0u.
To see that U is open, deÔ¨Åne the
following sets: for any a, b P R, let Spa, bq be the square parallel to the axes, with side
length 1, where the upper left corner is pa, bq. Note that Spa, bq is a closed curve, so if
we let S1pa, bq be the interior of Spa, bq, then each S1pa, bq is a basic open set. Now U is
the union of S1pa, bq over the collection of all a ƒÖ 0 and all b,
U ‚Äú
ƒè
a, b P R,
a ƒÖ 0
S1pa, bq,
so U is open.
Example 4.4.5.9. The idea of open sets extends to spaces beyond R2. For example, on
the earth one could deÔ¨Åne a basic open set to be the interior of any region one can draw
a closed curve around (with a metaphorical pen), and deÔ¨Åne open sets to be unions of
these basic open sets.
Exercise 4.4.5.10.
Let pS, ƒéq be the partial order of open subsets on earth as deÔ¨Åned in Example 4.4.5.9.

182
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
a. If ƒè is the subset relation, is pS, ƒèq a partial order or just a preorder, or neither?
b. Does it have meets?
c. Does it have joins?
‚ô¶
Solution 4.4.5.10.
a. It is a partial order.
b. It has meets (given by intersections).
c. It has joins (given by unions).
‚ô¶
Exercise 4.4.5.11.
Let S be the set of open subsets of earth as deÔ¨Åned in Example 4.4.5.9. For each
open subset of earth, suppose we know the range of recorded temperature throughout s
(i.e., the low and high throughout the region). Thus to each element s P S we assign an
interval Tpsq :‚Äú tx P R | a ƒè x ƒè bu. The set V of intervals of R can be partially ordered
by the subset relation.
a. Does the assignment T : S √ë V amount to a morphism of orders?
b. If so, does it preserve meets or joins? Hint: It does not preserve both.
‚ô¶
Solution 4.4.5.11.
a. Suppose s is a subregion of s1, e.g., New Mexico as a subregion of North America.
This question is asking whether the range of temperatures recorded throughout New
Mexico is a subset of the range of temperatures recorded throughout North America,
which, of course, it is.
b. The question on meets is, If we take two regions s and s1 and intersect them, is the
temperature range on s X s1 equal to the intersection Tpsq X Tps1q?
Clearly, if a
temperature t is recorded somewhere in s X s1, then it is recorded somewhere in s and
somewhere in s1, so Tps X s1q ƒé Tpsq X Tps1q. But is it true that if a temperature is
recorded somewhere in s and somewhere in s1, then it must be recorded somewhere in
s X s1? No, that is false. So T does not preserve meets.

4.4. ORDERS
183
The question on joins is, If we take the union of two regions s and s1, is the temperature
range on sYs1 equal to the union TpsqYTps1q? If a temperature is recorded somewhere
in s Y s1, then it is either recorded somewhere in s or somewhere in s1 (or both), so
Tps Y s1q ƒé Tpsq Y Tps1q. And if a temperature is recorded somewhere in s, then it is
recorded somewhere in s Y s1, so Tpsq ƒé Tps Y s1q. Similarly, Tps1q ƒé Tps Y s1q, so in
fact T does preserve joins: Tps Y s1q ‚Äú Tpsq Y Tps1q.
‚ô¶
Exercise 4.4.5.12.
a. Can you think of a space relevant to an area of science for which it makes sense to
assign an interval of real numbers to each open set, analogously to Exercise 4.4.5.11?
For example, for a sample of some material under stress, perhaps the strain on each
open set is somehow an interval?
b. Check that your assignment, which you might denote as in Exercise 4.4.5.11 by T : S √ë
V , is a morphism of orders.
c. How does it act with respect to meets and/or joins?
‚ô¶
Solution 4.4.5.12.
a. Consider the roads in the United States, and let S denote the open sets within this
space; its elements are the various regions of roads. With V again the set of intervals in
R, we could take the function T : S √ë V to be the weight range permissible throughout
a given region of roadway.
Note that this is qualitatively diÔ¨Äerent than Exercise
4.4.5.11 in that Tpsq is not about weights that are permissible somewhere within s, it
is about weights that are permissible everywhere within s.
b. This assignment T is not a morphism of orders, but it is a morphism of orders T : Sop √ë
V . The reason is that if s ƒé s1, then a weight permissible throughout s may not be
permissible throughout the whole of s1, but the reverse is true.
c. A weight permissible throughout sYs1 is permissible throughout s and throughout s1,
so we have Tps Y s1q ‚Äú Tpsq X Tps1q. That is, T sends joins in S (which are meets in
Sop) to meets in V .
‚ô¶

184
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
4.5
Databases: schemas and instances
So far this chapter has discussed classical objects from mathematics. The present section
is about databases, which are classical objects from computer science. These are truly
‚Äúcategories and functors, without admitting it‚Äù (see Theorem 5.4.2.3).
4.5.1
What are databases?
Data, in particular, the set of observations made during experiment, plays a primary role
in science of any kind. To be useful, data must be organized, often in a row-and-column
display called a table. Columns existing in diÔ¨Äerent tables can refer to the same data.
A database is a collection of tables, each table T of which consists of a set of columns
and a set of rows. We roughly explain the role of tables, columns, and rows as follows. The
existence of table T suggests the existence of a Ô¨Åxed methodology for observing objects
or events of a certain type. Each column c in T prescribes a single kind or method of
observation, so that the datum inhabiting any cell in column c refers to an observation of
that kind. Each row r in T has a Ô¨Åxed sourcing event or object, which can be observed
using the methods prescribed by the columns. The cell pr, cq refers to the observation of
kind c made on event r. All of the rows in T should refer to uniquely identiÔ¨Åable objects
or events of a single type, and the name of the table T should refer to that type.
Example 4.5.1.1. When graphene is strained (lengthened by a factor of x ƒõ 1), it becomes
stressed (carries a force in the direction of the lengthening). The following is a madeup
set of data:
Graphene Sample
ID
Source
Stress
Strain
A118-1
C Smkt
0
0
A118-2
C Smkt
0.02
20
A118-3
C Smkt
0.05
40
A118-4
AC
0.04
37
A118-5
AC
0.1
80
A118-6
C Plat
0.1
82
Supplier
ID
Full Name
Phone
C Smkt
Carbon Supermarket
(541) 781-6611
AC
Advanced Chemical
(410) 693-0818
C Plat
Carbon Platform
(510) 719-2857
McD
McDonard‚Äôs Burgers
(617) 244-4400
APP
Acme Pen and Paper
(617) 823-5603
(4.12)
In the table in (4.12) titled ‚ÄúGraphene Sample,‚Äù the rows refer to graphene samples,
and the table is so named. Each graphene sample can be observed according to the source
supplier from which it came, the strain that it was subjected to, and the stress that it
carried. These observations are the columns. In the right-hand table the rows refer to
suppliers of various things, and the table is so named. Each supplier can be observed
according to its full name and its phone number; these are the columns.

4.5. DATABASES: SCHEMAS AND INSTANCES
185
In the left-hand table it appears either that each graphene sample was used only once,
or that the person recording the data did not keep track of which samples were reused.
If such details become important later, the lab may want to change the layout of the left-
hand table by adding an appropriate column. This can be accomplished using morphisms
of schemas (see Section 5.4.1).
4.5.1.2
Primary keys, foreign keys, and data columns
There is a bit more structure in the tables in (4.12) than Ô¨Årst meets the eye. Each table
has a primary ID column, on the left, as well as some data columns and some foreign
key columns. The primary key column is tasked with uniquely identifying diÔ¨Äerent rows.
Each data column houses elementary data of a certain sort. Perhaps most interesting from
a structural point of view are the foreign key columns, because they link one table to
another, creating a connection pattern between tables. Each foreign key column houses
data that needs to be further unpacked. It thus refers us to another foreign table, in
particular, to the primary ID column of that table. In (4.12) the Source column is a
foreign key to the Supplier table.
Here is another example, taken from Spivak [39].
Example 4.5.1.3. Consider the bookkeeping necessary to run a department store. We
keep track of a set of employees and a set of departments. For each employee e, we keep
track of
E.1 the Ô¨Årst name of e, which is a FirstNameString,
E.2 the last name of e, which is a LastNameString,
E.3 the manager of e, which is an Employee,
E.4 the department that e works in, which is a Department.
For each department d, we keep track of
D.1 the name of d, which is a DepartmentNameString,
D.2 the secretary of d, which is an Employee.
We can suppose that E.1, E.2, and D.1 are data columns (referring to names of various
sorts), and E.3, E.4, and D.2 are foreign key columns (referring to managers, secretaries,
etc.).

186
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
The tables in (4.13) show how such a database might look at a particular moment in
time.
Employee
ID
Ô¨Årst
last
manager
worksIn
101
David
Hilbert
103
q10
102
Bertrand
Russell
102
x02
103
Emmy
Noether
103
q10
Department
ID
name
secretary
q10
Sales
101
x02
Production
102
(4.13)
4.5.1.4
Business rules
Looking at the tables in (4.13), one may notice a few patterns. First, every employee works
in the same department as his or her manager. Second, every department‚Äôs secretary
works in that department. Perhaps the business counts on these rules for the way it
structures itself. In that case the database should enforce those rules, i.e., it should check
that whenever the data is updated, it conforms to the rules:
Rule 1 For every employee e, the manager of e works in the same department
that e works in.
Rule 2 For every department d, the secretary of d works in department d.
(4.14)
Together, the statements E.1, E.2, E.3, E.4, D.1, and D.2 from Example 4.5.1.3 and
Rule 1 and Rule 2 constitute the schema of the database. This is formalized in Section
4.5.2.
4.5.1.5
Data columns as foreign keys
To make everything consistent, we could even say that data columns are speciÔ¨Åc kinds of
foreign keys. That is, each data column constitutes a foreign key to some non-branching
leaf table, which has no additional data.
Example 4.5.1.6. Consider again Example 4.5.1.3. Note that Ô¨Årst names and last names
have a particular type, which we all but ignored. We could cease to ignore them by
adding three tables, as follows:

4.5. DATABASES: SCHEMAS AND INSTANCES
187
FirstNameString
ID
Alan
Alice
Bertrand
Carl
David
Emmy
...
LastNameString
ID
Arden
Hilbert
Jones
Noether
Russell
...
DepartmentNameString
ID
Marketing
Production
Sales
...
(4.15)
In combination, (4.13) and (4.15) form a collection of Ô¨Åve tables, each with the prop-
erty that every column is either a primary key or a foreign key.
The notion of data
column is now subsumed under the notion of foreign key column. Each column is either
a primary key (one per table, labeled ID) or a foreign key column (everything else).
4.5.2
Schemas
Pictures here, roughly graphs, should capture the conceptual layout to which the data
conforms, without being concerned (yet) with the individual pieces of data that may
populate the tables in this instant. We proceed at Ô¨Årst by example; the precise deÔ¨Ånition
of schema is given in DeÔ¨Ånition 4.5.2.7.
Example 4.5.2.1. In Examples 4.5.1.3 and 4.5.1.6, the conceptual layout for a department
store was given, and some example tables were shown. We were instructed to keep track
of employees, departments, and six types of data (E.1, E.2, E.3, E.4, D.1, and D.2), and

188
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
to follow two rules (Rule 1, Rule 2). All of this is summarized in the following picture:
C:‚Äú Schema for tables (4.13) and (4.15) conforming to (4.14)
Employee manager worksIn ¬ª Employee worksIn
Department secretary worksIn ¬ª Department
Employee
‚Äö
worksIn

manager

Ô¨Årst

last

Department
‚Äö
secretary

name

FirstNameString
‚Äö
LastNameString
‚Äö
DepartmentNameString
‚Äö
(4.16)
The Ô¨Åve tables from (4.13) and (4.15) are seen as Ô¨Åve vertices; this is also the number of
primary ID columns. The six foreign key columns from (4.13) and (4.15) are seen as six
arrows; each points from a table to a foreign table. The two rules from (4.14) are seen
as declarations at the top of (4.16). These path equivalence declarations are explained in
DeÔ¨Ånition 4.5.2.3.
Exercise 4.5.2.2.
Create a schema (consisting of dots and arrows) describing the conceptual layout of
information presented in Example 4.5.1.1.
‚ô¶
Solution 4.5.2.2.
GrapheneSample
‚Äö
source

Stress

Strain

Supplier
‚Äö
Full Name
$
Phone

StressInt
‚Äö
StrainInt
‚Äö
NameString
‚Äö
PhoneNum
‚Äö
‚ô¶
In order to deÔ¨Åne schemas, we must Ô¨Årst deÔ¨Åne the notion of congruence for an
arbitrary graph G. Roughly a congruence is an equivalence relation that indicates how
diÔ¨Äerent paths in G are related (see Section 4.3.2). A notion of congruence for monoids

4.5. DATABASES: SCHEMAS AND INSTANCES
189
was given in DeÔ¨Ånition 4.1.1.17, and the current notion is a generalization of that. A
congruence (in addition to being reÔ¨Çexive, symmetric, and transitive) has two sorts of
additional properties: congruent paths must have the same source and target, and the
composition of congruent paths with other congruent paths must yield congruent paths.
Formally we have DeÔ¨Ånition 4.5.2.3.
DeÔ¨Ånition 4.5.2.3. Let G ‚Äú pV, A, src, tgtq be a graph, and let PathG denote the set
of paths in G (see DeÔ¨Ånition 4.3.2.1). A path equivalence declaration (or PED) is an
expression of the form p ¬ª q, where p, q P PathG have the same source and target,
srcppq ‚Äú srcpqq and tgtppq ‚Äú tgtpqq.
A congruence on G is a relation ¬ª on PathG that has the following properties:
1. The relation ¬ª is an equivalence relation.
2. If p ¬ª q, then srcppq ‚Äú srcpqq.
3. If p ¬ª q, then tgtppq ‚Äú tgtpqq.
4. Suppose given paths p, p1 : a √ë b and q, q1 : b √ë c. If p ¬ª p1 and q ¬ª q1, then
pp ``qq ¬ª pp1 ``q1q.
Remark 4.5.2.4. Any set of path equivalence declarations (PEDs) generates a congruence.
The proof of this is analogous to that of Proposition 4.1.1.18.
We tend to elide the
diÔ¨Äerence between a congruence and a set of PEDs that generates it.
The basic idea for generating a congruence from a set R of PEDs is to proceed as
follows. First Ô¨Ånd the equivalence relation generated by R. Then every time there are
paths p, p1 : a √ë b and q, q1 : b √ë c with p ¬ª p1 and q ¬ª q1,
‚Äö
 ¬® ¬® ¬®
 ‚Äö
:
‚Äö
 ¬® ¬® ¬®
 ‚Äö
:
a‚Äö
¬ª
;
:
p
+
p1
*
b‚Äö
¬ª
;
:
q
+
q1
*
c‚Äö
‚Äö
 ¬® ¬® ¬®
 ‚Äö
;
‚Äö
 ¬® ¬® ¬®
 ‚Äö
;
add to R the relation pp ``qq ¬ª pp1 ``q1q.

190
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
Exercise 4.5.2.5.
Suppose given the following graph G, with the PED brw, xs ¬ª bry, zs:
c‚Äö
x
	
a‚Äö
v
 b‚Äö
w

y
!
e‚Äö
d‚Äö
z
"
In the congruence generated by that PED, is it the case that arv, w, xs ¬ª arv, y, zs?
‚ô¶
Solution 4.5.2.5.
Yes. Since a congruence is an equivalence relation on PathspGq, it is in particular,
reÔ¨Çexive, so we have arvs ¬ª arvs. Thus we have
arv, w, xs ‚Äú arvs ``brw, xs ¬ª arvs ``bry, zs ‚Äú arv, y, zs.
‚ô¶
Exercise 4.5.2.6.
Consider the graph shown in (4.16) and the two declarations shown at the top. They
generate a congruence.
a. Is it true that the following PED is an element of this congruence?
Employee manager manager worksIn
?¬ª Employee worksIn
b. What about this one?
Employee worksIn secretary
?¬ª Employee
c. What about this one?
Department secretary manager worksIn name
?¬ª Department name
‚ô¶

4.5. DATABASES: SCHEMAS AND INSTANCES
191
Solution 4.5.2.6.
a. Yes; every employee, even the manager of an employee, works in the same department
as her manager.
Employee manager manager worksIn ¬ª Employee manager worksIn
¬ª Employee worksIn
b. No; this does not follow. An employee is not necessarily the secretary of the department
he works in.
c. Yes; here is the derivation:
Department secretary manager worksIn name
¬ª Department secretary worksIn name
¬ª Department name.
‚ô¶
DeÔ¨Ånition 4.5.2.7. A database schema (or simply schema) C consists of a pair C :‚Äú
pG, ¬ªq, where G is a graph and ¬ª is a congruence on G.
Example 4.5.2.8. Pictured in (4.16) is a graph with two PEDs; these generate a congru-
ence, as discussed in Remark 4.5.2.4. Thus this constitutes a database schema.
A schema can be converted into a system of tables, each with a primary key and some
number of foreign keys referring to other tables, as discussed in Section 4.5.1. DeÔ¨Ånition
4.5.2.7 gives a precise conceptual understanding of what a schema is, and the following
rules describe how to convert it into a table layout.
Rules of good practice 4.5.2.9. Converting a schema C ‚Äú pG, ¬ªq into a table layout should
be done as follows:
(i) There should be a table for every vertex in G, and if the vertex is named, the table
should have that name.
(ii) Each table should have a leftmost column called ID, set apart from the other columns
by a double vertical line.
(iii) To each arrow a in G having source vertex s :‚Äú srcpaq and target vertex t :‚Äú tgtpaq,
there should be a foreign key column a in table s, referring to table t; if the arrow
a is named, column a should have that name.

192
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
Example 4.5.2.10 (Discrete dynamical system). Consider the schema
Loop :‚Äú
s‚Äö
f
K
(4.17)
in which the congruence is trivial (i.e., generated by the empty set of PEDs.) This schema
is quite interesting. It encodes a set s and a function f : s √ë s. Such a thing is called a
discrete dynamical system. One imagines s as the set of states, and for any state x P s,
the function f encodes a notion of next state fpxq P s. For example,
s
ID
f
A
B
B
C
C
C
D
B
E
C
F
G
G
H
H
G
... pictured ...
A‚Äö
 B‚Äö
 C‚Äö L
D‚Äö
"
E‚Äö
"
F‚Äö
 G‚Äö
 H‚Äö
M
(4.18)
Application 4.5.2.11. Imagine a deterministic quantum-time universe in which there are
discrete time steps. We model it as a discrete dynamical system, i.e., a table of the form
(4.18). For every possible state of the universe we include a row in the table. The state
in the next instant is recorded in the second column.8
‚ô¶‚ô¶
Example 4.5.2.12 (Finite hierarchy). The schema Loop can also be used to encode hier-
archies, such as the manager relation from Examples 4.5.1.3 and 4.5.2.1,
E‚Äö
mgr
N
One problem with this, however, is if a schema has even one loop, then it can have in-
Ô¨Ånitely many paths (corresponding, e.g., to an employee‚Äôs manager‚Äôs manager‚Äôs manager‚Äôs
. . . manager).
8If we want nondeterminism, i.e., a probabilistic distribution as the next state, we can use monads.
See Section 7.3.4.2.

4.5. DATABASES: SCHEMAS AND INSTANCES
193
Sometimes we know that in a given company that process eventually terminates, a
famous example being that at Ben and Jerry‚Äôs ice cream company, there were only seven
levels. In that case we know that an employee‚Äôs eighth-level manager is equal to his or
her seventh-level manager. This can be encoded by the PED
Ermgr, mgr, mgr, mgr, mgr, mgr, mgr, mgrs ¬ª Ermgr, mgr, mgr, mgr, mgr, mgr, mgrs
or more concisely, Ermgrs8 ‚Äú Ermgrs7.
Exercise 4.5.2.13.
There is a nontrivial PED on Loop that holds for the data in Example 4.5.2.10.
a. What is it?
b. How many equivalence classes of paths in Loop are there after you impose that relation?
‚ô¶
Solution 4.5.2.13.
a. f 4 ‚Äú f 2 (or to be pedantic, srf, f, f, fs ¬ª srf, fs).
b. There are four: srs, srfs, srf, fs, and srf, f, fs. Any longer path is equivalent to one of
these.
‚ô¶
Exercise 4.5.2.14.
Let P be a chess-playing program, playing against itself. Given any position (where
a position includes the history of the game so far), P will make a move.
a. Is this an example of a discrete dynamical system?
b. How do the rules for ending the game in a win or draw play out in this model? (Look
up online how chess games end if you do not know.)
‚ô¶
Solution 4.5.2.14.
a. Yes, as long as the program is deterministic (i.e., it plays the same move every time it
is in the same position).

194
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
b. We need to make positions called ‚Äúwhite win,‚Äù ‚Äúblack win,‚Äù and ‚Äúdraw.‚Äù The only
move from the position ‚Äúwhite win‚Äù results in ‚Äúwhite win,‚Äù and similarly for ‚Äúblack
win‚Äù and for ‚Äúdraw.‚Äù
‚ô¶
4.5.2.15
Ologging schemas
It should be clear that a database schema is nothing but an olog in disguise. The diÔ¨Äerence
is basically the readability requirements for ologs. There is an important new addition
in this section, namely, that schemas and ologs can be Ô¨Ålled in with data. Conversely, we
have seen that databases are not any harder to understand than ologs are.
Example 4.5.2.16. Consider the olog
a moon
orbits
√ù√ù√ù√ù√ë a planet
(4.19)
We can document some instances of this relationship using the following table:
orbits
a moon
a planet
The Moon
Earth
Phobos
Mars
Deimos
Mars
Ganymede
Jupiter
Titan
Saturn
(4.20)
Clearly, this table of instances can be updated as more moons are discovered by the
olog‚Äôs owner (be it by telescope, conversation, or research).
Exercise 4.5.2.17.
In fact, Example 4.5.2.16 did not follow rules 4.5.2.9. Strictly following those rules,
copy over the data from (4.20) into tables that are in accordance with schema (4.19). ‚ô¶

4.5. DATABASES: SCHEMAS AND INSTANCES
195
Solution 4.5.2.17.
a moon
ID
orbits
The Moon
Earth
Phobos
Mars
Deimos
Mars
Ganymede
Jupiter
Titan
Saturn
a planet
ID
Earth
Mars
Jupiter
Saturn
‚ô¶
Exercise 4.5.2.18.
a. Write a schema (olog) in terms of the boxes ‚åúa thing I own‚åùand ‚åúa place‚åùand one
arrow that might help a person remember where she decided to put random things.
b. What is a good label for the arrow?
c. Fill in some rows of the corresponding set of tables for your own case.
‚ô¶
Solution 4.5.2.18.
a.
a thing I own
belongs in
 a place
b. I think ‚Äúbelongs in‚Äù is Ô¨Åne.
c.
a thing I own
ID
belongs in
passport
Ô¨Åle cabinet
spare keys
middle desk drawer
gloves
front closet
big umbrella
front closet
a place
ID
Ô¨Åle cabinet
middle desk drawer
front closet
‚ô¶

196
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
Exercise 4.5.2.19.
Consider the olog
C
a child
has as father

F
a father
has as youngest
O
has as tallest
P
a. What path equivalence declarations would be appropriate for this olog? You can use
y: F √ë C, t: F √ë C, and f : C √ë F for ‚Äúyoungest,‚Äù ‚Äútallest,‚Äù and ‚Äúfather,‚Äù if you
prefer.
b. How many PEDs are in the congruence?
‚ô¶
Solution 4.5.2.19.
a. There are two: F.t.f ¬ª F and F.y.f ¬ª F, meaning ‚Äúa father F‚Äôs tallest child has as
father F‚Äù and ‚Äúa father F‚Äôs youngest child has as father F.‚Äù
b. There are inÔ¨Ånitely many PEDs in this congruence, including F rt, f, ts ¬ª F rts and
F rt, f, ys ¬ª F rys. But the congruence is generated by only two PEDs, those in part
(a).
‚ô¶
4.5.3
Instances
Given a database schema pG, ¬ªq, an instance of it is just a bunch of tables whose data
conform to the speciÔ¨Åed layout. These can be seen throughout the previous section, most
explicitly in the relationship between schema (4.16) and tables (4.13) and (4.15), and
between schema (4.17) and table (4.18). Following is the mathematical deÔ¨Ånition.
DeÔ¨Ånition 4.5.3.1. Let C ‚Äú pG, ¬ªq, where G ‚Äú pV, A, src, tgtq.
An instance on C,
denoted pPK, FKq: C √ë Set, is deÔ¨Åned as follows: One announces some constituents
(A. primary ID part, B. foreign key part) and shows that they conform to a law (1.
preservation of congruence). SpeciÔ¨Åcally, one announces
A. a function PK: V √ë Set, i.e., to each vertex v P V one provides a set PKpvq;9
9The elements of PKpvq are listed as the rows of table v, or more precisely, as the leftmost cells of
these rows.

4.5. DATABASES: SCHEMAS AND INSTANCES
197
B. for every arrow a P A with v ‚Äú srcpaq and w ‚Äú tgtpaq, a function FKpaq: PKpvq √ë
PKpwq.10
One must then show that the following law holds for any vertices v, w and paths p ‚Äú
vra1, a2, . . . , ams and q ‚Äú vra1
1, a1
2, . . . , a1
ns from v to w:
1. If p ¬ª q, then for all x P PKpvq, we have
FKpamq Àù ¬® ¬® ¬® Àù FKpa2q Àù FKpa1qpxq ‚Äú FKpa1
nq Àù ¬® ¬® ¬® Àù FKpa1
2q Àù FKpa1
1qpxq
in PKpwq.
Exercise 4.5.3.2.
Consider the olog in (4.21):11
C :‚Äú
a self-email
is
 an email
is sent by7
is sent to
6
a person
A self-email is an email which is sent by the same
person it is sent to.
(4.21)
It can be considered a schema of which the following is an instance:
a self-email
ID
is
SEm1207
Em1207
SEm1210
Em1210
SEm1211
Em1211
an email
ID
is sent by
is sent to
Em1206
Bob
Sue
Em1207
Carl
Carl
Em1208
Sue
Martha
Em1209
Chris
Bob
Em1210
Chris
Chris
Em1211
Julia
Julia
Em1212
Martha
Chris
a person
ID
Bob
Carl
Chris
Julia
Martha
Sue
(4.22)
10The arrow a corresponds to a column, and to each row r P PKpvq the pr, aq cell contains the datum
FKpaqprq.
11The text at the bottom of the box in (4.21) is a summary of a fact, i.e., a path equivalence in the olog.
Under the formal rules of Englishing a fact (see (2.20)), it would read as follows. Given x, a self-email,
consider the following. We know that x is a self-email, which is an email, which is sent by a person who
we call Ppxq. We also know that x is a self-email, which is an email, which is sent to a person who we
call Qpxq. Fact: Whenever x is a self-email, we have Ppxq ‚Äú Qpxq.

198
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
a. What is the set PKp‚åúan email‚åùq?
b. What is the set PKp‚åúa person‚åùq?
c. What is the function FKp
is sent by
√ù√ù√ù√ù√ù√ù√ù√ë q: PKp‚åúan email‚åùq √ë PKp‚åúa person‚åùq?
d. Interpret the sentences at the bottom of C as the Englishing of a simple path equiva-
lence declaration (PED).
e. Is your PED satisÔ¨Åed by the instance (4.22); that is, does law 1. from DeÔ¨Ånition 4.5.3.1
hold?
‚ô¶
Solution 4.5.3.2.
a. PKp‚åúan email‚åùq ‚Äú tEm1206,Em1207,Em1208,Em1209,Em1210,Em1211,Em1212u.
b. PKp‚åúa person‚åùq ‚Äú tBob, Carl, Chris, Julia, Martha, Sueu.
c. It is the Ô¨Årst two columns in the an email table in (4.22). For example, we have
FKp
is sent by
√ù√ù√ù√ù√ù√ù√ù√ë q(Em1206) = Bob and FKp
is sent by
√ù√ù√ù√ù√ù√ù√ù√ë q(Em1207) = Carl.
d. There are two paths from ‚åúa self-email‚åùto ‚åúa person‚åù(namely, the sender and receiver
of the email that the self-email is). We declare them equivalent.
e. Yes. One can check that the emails Em1207, Em1210, and Em1211 have the same
sender as receiver (Carl, Chris, and Julia respectively).
‚ô¶
Example 4.5.3.3 (Monoid action table). In Example 4.1.2.9 we saw how a monoid M
could be captured as an olog with only one object. As a database schema, this means
there is only one table. Every generator of M would be a column of the table. The notion
of database instance for such a schema (see DeÔ¨Ånition 4.5.3.1) matches perfectly with the
notion of action table from Section 4.1.3. Note that a monoid can act on itself, in which
case this action table is the monoid‚Äôs multiplication table, as in Example 4.1.3.2, but it
can also act on any other set, as in Example 4.1.3.1. If M acts on a set S, then the set
of rows in the action table will be S.
Exercise 4.5.3.4.
Draw (as a graph) a schema for which table (4.1), page 133, looks like an instance. ‚ô¶

4.5. DATABASES: SCHEMAS AND INSTANCES
199
Solution 4.5.3.4.
All three columns have the same type of data, so we can guess that there is only one
box in the ologs, i.e., one vertex in the graph.
S‚Äö
a
%
b

One connection we can make is that (4.1) has something to do with an action, i.e., it
corresponds to a function Œ£ ÀÜ S √ë S. Currying, we have a function Œ£ √ë HompS, Sq.
Indeed, we see Œ£ ‚Äú ta, bu in the preceding picture as the maps from S to itself.
‚ô¶
Exercise 4.5.3.5.
Suppose that M is a monoid and some instance of it is written in table form, e.g., as
in table (4.1). It is possible that M is a group. What evidence in an instance table for
M might suggest that M is a group?
‚ô¶
Solution 4.5.3.5.
If there are no repeats in any column of the action table, it suggests that M might
be a group. Why? First note that each column of the action table corresponds to an
element of M. Suppose M ‚Äú pM, e, ‚Äπq is a group. Then for any element m P M, there
is some m¬¥1 such that m ‚Äπ m¬¥1 ‚Äú m¬¥1 ‚Äπ m ‚Äú e. But then on foreign keys (i.e., in the
columns of the table), we have
FKpmq Àù FKpm¬¥1q ‚Äú FKpm¬¥1q Àù FKpmq ‚Äú id.
In other words, FKpmq is a bijection. If we assume the table is Ô¨Ånite, this is tantamount
to saying that there are no repeats in column m.
‚ô¶
4.5.3.6
Paths through a database
Let C :‚Äú pG, ¬ªq be a schema, and let pPK, FKq: C √ë Set be an instance on C. Then
for every arrow a: v √ë w in G we get a function FKpaq: PKpvq √ë PKpwq. Functions
can be composed, so in fact for every path through G we get a function. Namely, if
p ‚Äú v0ra1, a2, . . . , ans is a path from v0 to vn, then the instance provides a function
FKppq :‚Äú FKpanq Àù ¬® ¬® ¬® FKpa2q Àù FKpa1q: PKpv0q √ë PKpvnq,
which Ô¨Årst made an appearance as part of Law 1 in DeÔ¨Ånition 4.5.3.1.

200
CHAPTER 4. CATEGORIES AND FUNCTORS, WITHOUT ADMITTING IT
Example 4.5.3.7. Consider the department store schema from Example 4.5.2.1.
More
speciÔ¨Åcally consider the path EmployeerworksIn, secretary, lasts in (4.16), which points from
Employee to LastNameString. The instance lets us interpret this path as a function from
the set of employees to the set of last names; this could be a useful function to have in
real-life oÔ¨Éce settings. The instance from (4.13) would yield the following function:
Employee
ID
Secr. name
101
Hilbert
102
Russell
103
Hilbert
Exercise 4.5.3.8.
Consider the path p :‚Äú srf, fs on the Loop schema in (4.17). Using the instance from
(4.18), where PKpsq ‚Äú tA, B, C, D, E, F, G, Hu, interpret p as a function PKpsq √ë PKpsq,
and write this as a two-column table, as in Example 4.5.3.7.
‚ô¶
Solution 4.5.3.8.
The instance from (4.18) on the left is shown for convenience; the solution to the
exercise is on the right.
s
ID
f
A
B
B
C
C
C
D
B
E
C
F
G
G
H
H
G
s
ID
p ‚Äú f Àù f
A
C
B
C
C
C
D
C
E
C
F
H
G
G
H
H
‚ô¶
Exercise 4.5.3.9.
Given an instance pPK, FKq on a schema C, and given a trivial path p (i.e., p has
length 0; it starts at some vertex but does not go anywhere), what function does p yield
as FKppq?
‚ô¶

4.5. DATABASES: SCHEMAS AND INSTANCES
201
Solution 4.5.3.9.
Let c be the domain (and codomain) of the trivial path p. Then FKppq: PKpcq √ë
PKpcq is the identity function, idPKpcq.
‚ô¶


Chapter 5
Basic Category Theory
‚Äú...We know only a very few‚Äîand, therefore, very precious‚Äîschemes whose unifying pow-
ers cross many realms.‚Äù‚ÄîMarvin Minsky.1
Categories, or an equivalent notion, have already been introduced as ologs, or equiva-
lently, as database schemas. One can think of a category as a graph (as in Section 4.3) in
which certain paths have been declared congruent. (Ologs demand an extra requirement
that everything be readable in natural language, and this cannot be part of the mathe-
matical deÔ¨Ånition of category.) The formal deÔ¨Ånition of category is given in DeÔ¨Ånition
5.1.1.1, but it will not appear obvious that it is equivalent to the graph + congruence
notion of schema, found in DeÔ¨Ånition 4.5.2.7. Once we know how diÔ¨Äerent categories
can be compared using functors (DeÔ¨Ånition 5.1.2.1), and how diÔ¨Äerent schemas can be
compared using schema mappings (DeÔ¨Ånition 5.4.1.2), we prove that the two notions are
indeed equivalent (Theorem 5.4.2.3).
5.1
Categories and functors
This section gives the standard deÔ¨Ånition of categories and functors. These, together
with natural transformations (Section 5.3), form the backbone of category theory. It also
gives several examples.
1In Society of Mind [32].
203

204
CHAPTER 5. BASIC CATEGORY THEORY
5.1.1
Categories
In everyday speech we think of a category as a kind of thing. A category consists of a
collection of things, all of which are related in some way. In mathematics a category can
also be construed as a collection of things and a type of relationship between pairs of
such things. For this kind of thing-relationship duo to count as a category, we need to
check two rules, which have the following Ô¨Çavor: every thing must be related to itself by
simply being itself, and if one thing is related to another and the second is related to a
third, then the Ô¨Årst is related to the third. In a category the things are called objects and
the relationships are called morphisms.
So far we have discussed things of various sorts, e.g., sets, monoids, graphs. In each
case we discussed how such things should be appropriately compared as homomorphisms.
In each case the things stand as the objects and the appropriate comparisons stand as
the morphisms in the category. Here is the deÔ¨Ånition.
DeÔ¨Ånition 5.1.1.1. A category C is deÔ¨Åned as follows: One announces some constituents
(A. objects, B. morphisms, C. identities, D. compositions) and shows that they conform
to some laws (1. identity law, 2. associativity law). SpeciÔ¨Åcally, one announces
A. a collection ObpCq, elements of which are called objects;
B. for every pair x, y P ObpCq, a set HomCpx, yq P Set; it is called the hom-set from
x to y; its elements are called morphisms from x to y;2
C. for every object x P ObpCq, a speciÔ¨Åed morphism, denoted idx P HomCpx, xq, and
called the identity morphism on x;
D. for every three objects x, y, z P ObpCq, a function
Àù: HomCpy, zq ÀÜ HomCpx, yq √ë HomCpx, zq,
called the composition formula.
Given objects x, y P ObpCq, we can denote a morphism f P HomCpx, yq by f : x √ë y; we
say that x is the domain of f and that y is the codomain of f. Given also g: y √ë z,
the composition formula is written using inÔ¨Åx notation, so g Àù f : x √ë z means Àùpg, fq P
HomCpx, zq.
One must then show that the following category laws hold:
1. For every x, y P ObpCq and every morphism f : x √ë y, we have
f Àù idx ‚Äú f
and
idy Àù f ‚Äú f.
2The reason for the notation Hom and the word hom-set is that morphisms are often called homo-
morphisms, e.g., in group theory.

5.1. CATEGORIES AND FUNCTORS
205
2. If w, x, y, z P ObpCq are any objects, and f : w √ë x,
g: x √ë y,
and h: y √ë z
are any morphisms, then the two ways to compose yield the same element in
HomCpw, zq:
ph Àù gq Àù f ‚Äú h Àù pg Àù fq P HomCpw, zq.
Remark 5.1.1.2. There is perhaps much that is unfamiliar about DeÔ¨Ånition 5.1.1.1, but
there is also one thing that is strange about it. The objects ObpCq of C are said to be a
collection rather than a set. This is because we sometimes want to talk about the category
of all sets, in which every possible set is an object, and if we try to say that the collection
of sets is itself a set, we run into Russell‚Äôs paradox. Modeling this was a sticking point in
the foundations of category theory, but it was eventually Ô¨Åxed by Grothendieck‚Äôs notion
of expanding universes. Roughly, the idea is to choose some huge set Œ∫ (with certain
properties making it a universe), to work entirely inside of it when possible, and to call
anything in that world Œ∫-small (or just small if Œ∫ is clear from context). When we need
to look at Œ∫ itself, we choose an even bigger universe Œ∫1 and work entirely within it.
A category in which the collection ObpCq is a set (or a small set) is called a small
category. From here on I do not take note of the diÔ¨Äerence; I refer to ObpCq as a set. I
do not think this will do any harm to scientists using category theory, at least not in the
beginning phases of their learning.
Example 5.1.1.3 (The category Set of sets). Chapters 2 and 3 were about the category
of sets, denoted Set. The objects are the sets and the morphisms are the functions; and
the current notation HomSetpX, Y q was used to refer to the set of functions X √ë Y . The
composition formula Àù is given by function composition, and for every set X, the identity
function idX : X √ë X serves as the identity morphism for X P ObpSetq. The two laws
clearly hold, so Set is indeed a category.
Example 5.1.1.4 (The category Fin of Ô¨Ånite sets). Inside the category Set is a subcategory
Fin ƒé Set, called the category of Ô¨Ånite sets. Whereas an object S P ObpSetq is a set
that can have arbitrary cardinality, Fin is deÔ¨Åned such that ObpFinq includes all (and
only) those sets S having Ô¨Ånitely many elements, i.e., |S| ‚Äú n for some natural number
n P N. Every object of Fin is an object of Set, but not vice versa.
Although Fin and Set have diÔ¨Äerent collections of objects, their notions of morphism
are in some sense the same. For any two Ô¨Ånite sets S, S1 P ObpFinq, we can also think of
S, S1 P ObpSetq, and we have
HomFinpS, S1q ‚Äú HomSetpS, S1q.
That is, a morphism in Fin between Ô¨Ånite sets S and S1 is simply a function f : S √ë S1.
Example 5.1.1.5 (The category Mon of monoids). Monoids were deÔ¨Åned in DeÔ¨Ånition
4.1.1.1, and monoid homomorphisms in DeÔ¨Ånition 4.1.4.1. Every monoid M :‚Äú pM, e, ‚ÄπMq

206
CHAPTER 5. BASIC CATEGORY THEORY
has an identity homomorphism idM : M √ë M, given by the identity function idM : M √ë
M. To compose two monoid homomorphisms f : M √ë M1 and g: M1 √ë M2, we com-
pose their underlying functions f : M √ë M 1 and g: M 1 √ë M 2, and check that the result
g Àù f is a monoid homomorphism. Indeed,
g Àù fpeq ‚Äú gpe1q ‚Äú e2,
g Àù fpm1 ‚ÄπM m2q ‚Äú gpfpm1q ‚ÄπM1 fpm2qq ‚Äú g Àù fpm1q ‚ÄπM 2 g Àù fpm2q.
It is clear that the two category laws (unit and associativity) hold, because monoid mor-
phisms are special kinds of functions, and functions compose unitally and associatively.
So Mon is a category.
Remark 5.1.1.6. The following will be informal, but it can be formalized. Let‚Äôs deÔ¨Åne a
questionable category to be the speciÔ¨Åcation of A, B, C, D from DeÔ¨Ånition 5.1.1.1, without
enforcing either of the category laws (1, 2). Suppose that Q is a questionable category
and C is a category. If Q sits somehow inside of C, in the precise sense that
A. there is a function U : ObpQq √ë ObpCq,
B. for all a, b P ObpQq, we have an injection U : HomQpa, bq √£√ë HomCpUpaq, Upbqq,
C. for all a P ObpQq, both Q and C have the same version of the identity on a, i.e.,
Upidaq ‚Äú idUpaq,
D. for all f : a √ë b and g: b √ë c in Q, both Q and C have the same version of
composition g Àù f, i.e., Upg Àù fq ‚Äú Upgq Àù Upfq,
then Q is a category (no longer questionable).
This fact was used in Example 5.1.1.5 for Mon ƒé Set.
Exercise 5.1.1.7.
Suppose we set out to deÔ¨Åne a category Grp, having groups as objects and group ho-
momorphisms as morphisms (see DeÔ¨Ånition 4.2.1.16). Show that the rest of the conditions
for Grp to be a category are satisÔ¨Åed.
‚ô¶
Solution 5.1.1.7.
Groups were deÔ¨Åned in DeÔ¨Ånition 4.2.1.1 and group homomorphisms in DeÔ¨Ånition
4.2.1.16.
Every group G :‚Äú pG, e, ‚ÄπGq has an identity homomorphism idG : G √ë G,
given by the identity function idG : G √ë G. To compose two group homomorphisms
f : M √ë M1 and g: M1 √ë M2, we compose their underlying functions f : M √ë M 1 and
g: M 1 √ë M 2, and check that the result g Àù f is a group homomorphism. Because group
homomorphisms are just monoid homomorphisms, we can apply Remark 5.1.1.6, so Grp
is indeed a category.
‚ô¶

5.1. CATEGORIES AND FUNCTORS
207
Exercise 5.1.1.8.
Suppose we set out to deÔ¨Åne a category PrO, having preorders as objects and preorder
homomorphisms as morphisms (see DeÔ¨Ånition 4.4.4.1). Show (to the level of detail of
Example 5.1.1.5) that the rest of the conditions for PrO to be a category are satisÔ¨Åed. ‚ô¶
Solution 5.1.1.8.
Preorders were deÔ¨Åned in DeÔ¨Ånition 4.4.1.1 and morphisms of preorders in DeÔ¨Ånition
4.4.4.1. Let P :‚Äú pS, Rq denote a preorder with underlying set S and relation R ƒé S ÀÜ S.
There is an identity morphism idP : P √ë P, given by the identity function idS : S √ë S.
To compose two preorder morphisms f : P √ë P1 and g: P1 √ë P2, we compose their
underlying functions f : S √ë S1 and g: S1 √ë S2, and check that the result g Àù f is a
preorder morphism. For x ƒè y in S, we have fpxq ƒè fpyq, so gpfpxqq ƒè gpfpyqq, proving
that g Àù f : S √ë S1 preserves the order. So we have the composition formula. The fact
that this composition formula satisÔ¨Åes the category laws follows from Remark 5.1.1.6.
Thus PrO is a category.
‚ô¶
Example 5.1.1.9 (Noncategory 1). What is not a category? Two things can go wrong:
either one fails to specify all the relevant constituents (A, B, C, D from DeÔ¨Ånition 5.1.1.1),
or the constituents do not obey the category laws (1, 2).
Let G be the following graph:
G ‚Äú
a‚Äö
f
 b‚Äö
g
 c‚Äö
Suppose we try to deÔ¨Åne a category G by faithfully recording vertices as objects and
arrows as morphisms. Will that be a category?
Following that scheme, we put ObpGq ‚Äú ta, b, cu. For all nine pairs of objects we need
a hom-set. Since the only things we are calling morphisms are the arrows of G, we put
HomGpa, aq ‚Äú H
HomGpa, bq ‚Äú tfu
HomGpa, cq ‚Äú H
HomGpb, aq ‚Äú H
HomGpb, bq ‚Äú H
HomGpb, cq ‚Äú tgu
HomGpc, aq ‚Äú H
HomGpc, bq ‚Äú H
HomGpc, cq ‚Äú H
(5.1*)
If we say we are done, the listener should object that we have given neither identities (C)
nor a composition formula (D), and these are necessary constituents. Now we are at a
loss: it is impossible to give identities under this scheme, because, e.g., HomGpa, aq ‚Äú H.
So what we have for G is not a category.
Suppose we Ô¨Åx that problem, adding an element to each of the diagonals so that
HomGpa, aq ‚Äú tidau,
HomGpb, bq ‚Äú tidbu,
and
HomGpc, cq ‚Äú tidcu.

208
CHAPTER 5. BASIC CATEGORY THEORY
But the listener still demands a composition formula. In particular, we need a function
HomGpb, cq ÀÜ HomGpa, bq √ë HomGpa, cq,
but the domain is nonempty (it is tpf, gqu) and the codomain HomGpa, cq ‚Äú H is empty;
there is no such function. In other words, to satisfy the listener we need to add a composite
for the arrows f and g.
So again we must make a change, adding an element to make HomGpa, cq ‚Äú thu. We
can now say g Àù f ‚Äú h. Finally, this does the trick and we have a category with the
following morphisms:
HomGpa, aq ‚Äú tidau
HomGpa, bq ‚Äú tfu
HomGpa, cq ‚Äú thu
HomGpb, aq ‚Äú H
HomGpb, bq ‚Äú tidbu
HomGpb, cq ‚Äú tgu
HomGpc, aq ‚Äú H
HomGpc, bq ‚Äú H
HomGpc, cq ‚Äú tidcu
A computer could check this quickly, as can someone with good intuition for categories;
for everyone else, it may be a painstaking process involving determining whether there
is a unique composition formula for each of the 27 pairs of hom-sets and whether the
associative law holds in the 81 necessary cases. Luckily this computation is sparse (lots
of H‚Äôs).
If all the morphisms are drawn as arrows, the graph becomes:
G ‚Äú
a‚Äö
ida

f

h
5
b‚Äö
idb
N
g
 c‚Äö
idc
%
Example 5.1.1.10 (Noncategory 2). In this example, we make a faux category F with one
object and many morphisms. The problem here is the composition formula.
DeÔ¨Åne F to have one object ObpFq ‚Äú tu, and HomFp, q ‚Äú N. DeÔ¨Åne id ‚Äú 1 P
N. DeÔ¨Åne the composition formula Àù: N ÀÜ N √ë N by the usual exponentiation function
for natural numbers, m Àù n ‚Äú mn. This is a perfectly cromulent function, but it does not
work right as a composition formula. Indeed, for the identity law to hold, we would need
m1 ‚Äú m ‚Äú 1m, and one side of this is false. For the associativity law to hold, we would
need pmnqp ‚Äú mpnpq, but this is also not the case.
To Ô¨Åx this problem we must completely revamp the composition formula. It would
work to use multiplication, m Àù n ‚Äú m Àö n. Then the identity law would read 1 Àö m ‚Äú
m ‚Äú m Àö 1, and that holds; and the associativity law would read pm Àö nq Àö p ‚Äú m Àö pn Àö pq,
and that holds.

5.1. CATEGORIES AND FUNCTORS
209
Example 5.1.1.11 (The category of preorders with joins). Suppose we are only interested
in preorders pX, ƒèq for which every pair of elements has a join. We saw in Exercise 4.4.2.3
that not all preorders have this property. However, we can create a category C in which
every object does have this property. To begin, let‚Äôs put
C :‚Äú tpX, ƒèq P ObpPrOq | pX, ƒèq has all joinsu
for the set of objects. What about morphisms?
One option would be to put in no morphisms (other than identities) and to just
consider this collection of objects as having no structure other than a set. In other words,
we can take C to be the discrete category on the preceding set ObpCq ‚Äú C.
Another option, say, C1 with objects ObpC1q :‚Äú C, would be to put in exactly the same
morphisms as in PrO: for any objects a, b P C, we consider a and b as ordinary preorders
and put HomC1pa, bq :‚Äú HomPrOpa, bq. The resulting category C1 of preorders with joins
is called the full subcategory of PrO spanned by the preorders with joins.3
A third option, say, C2 with objects ObpC2q :‚Äú C, would stand out to a category
theorist. That is, the conscientious modeler takes the choice about how we deÔ¨Åne objects
as a clue to how we should deÔ¨Åne morphisms.
Slogan 5.1.1.12.
If you like joins so much, why don‚Äôt you marry them?
Morphisms are often billed as preserving all the structure we care about, so it is worth
asking whether we want to enforce that constraint on morphisms.
That is, suppose
f : pX, ƒèXq √ë pY, ƒèY q is a morphism of preorders. We might want to condition the
decision of whether to include f as a morphism in C2 on whether, for any join w ‚Äú x _ x1
in X, it is the case that fpwq ‚Äú fpxq _ fpx1q in Y .
Concisely, we could deÔ¨Åne the
morphisms in C2 by
HomCpa, bq :‚Äú tf P HomPrOpa, bq | f preserves joinsu.
One can check easily that the identity morphisms preserve joins and that compositions of
join-preserving morphisms are join-preserving, so this version of homomorphisms makes
C2 a well deÔ¨Åned category.
These options are by no means comprehensive, and none of these options is better
than any other. Which category to use is decided by whatever Ô¨Åts the situation being
modeled.
3Full subcategory will be deÔ¨Åned in DeÔ¨Ånition 6.2.3.1.

210
CHAPTER 5. BASIC CATEGORY THEORY
Example 5.1.1.13 (Category FLin of Ô¨Ånite linear orders). We have a category PrO of
preorders, and some of its objects are Ô¨Ånite linear orders. Let FLin be the full subcategory
of PrO spanned by the linear orders. That is, following DeÔ¨Ånition 4.4.4.1, given linear
orders X, Y P ObpFLinq, every morphism of preorders X √ë Y counts as a morphism in
FLin:
HomFLinpX, Y q ‚Äú HomPrOpX, Y q.
Exercise 5.1.1.14.
Let FLin be the category of Ô¨Ånite linear orders, deÔ¨Åned in Example 5.1.1.13. For
n P N, let rns be the linear order deÔ¨Åned in Example 4.4.1.7. What are the cardinalities
of the following sets?
a. HomFLinpr0s, r3sq
b. HomFLinpr3s, r0sq
c. HomFLinpr2s, r3sq
d. HomFLinpr1s, rnsq
e. (Challenge) HomFLinprms, rnsq
It turns out that the category FLin of linear orders is suÔ¨Éciently rich that much
of algebraic topology (the study of arbitrary spaces, such as Mobius strips and seven-
dimensional spheres) can be understood in its terms. See Example 6.2.1.7.
‚ô¶
Solution 5.1.1.14.
a. |HomFLinpr0s, r3sq| ‚Äú 4.
b. |HomFLinpr3s, r0sq| ‚Äú 1.
c. |HomFLinpr2s, r3sq| ‚Äú 20. Finding a morphism r2s √ë r3s of linear orders is the same
thing as writing a nondecreasing sequence of three numbers between 0 and 3:
0
0
0
0
0
1
0
0
2
0
0
3
0
1
1
0
1
2
0
1
3
0
2
2
0
2
3
0
3
3
1
1
1
1
1
2
1
1
3
1
2
2
1
2
3
1
3
3
2
2
2
2
2
3
2
3
3
3
3
3

5.1. CATEGORIES AND FUNCTORS
211
d. |HomFLinpr1s, rnsq| ‚Äú pn`1qpn`2q
2
, which may be reminiscent of triangle numbers. Per-
haps the following arrangement of morphisms r1s √ë rns (for ƒè n ƒè 3) will help:
p3, 3q
p2, 2q
p3, 2q
p1, 1q
p2, 1q
p3, 1q
p0, 0q
p1, 0q
p2, 0q
p3, 0q
e. These are generalized triangle numbers:
|HomFLinprms, rnsq| ‚Äú pn ` 1qpn ` 2q ¬® ¬® ¬® pn ` m ` 1q
pm ` 1q!
‚Äú
ÀÜ
n ` m ` 1
n
Àô
.
In the following table, each row is the running sum of the row above. For convenience,
let r¬¥1s denote the empty linear order. Then is a table for |HomFLinprms, rnsq| would
be:
m
n
r¬¥1s
r0s
r1s
r2s
r3s
r¬¥1s
1
0
0
0
0
r0s
1
1
1
1
1
r1s
1
2
3
4
5
r2s
1
3
6
10
15
r3s
1
4
10
20
35
r4s
1
5
15
35
70
‚ô¶
Example 5.1.1.15 (Category of graphs). Graphs were deÔ¨Åned in DeÔ¨Ånition 4.3.1.1 and
graph homomorphisms in DeÔ¨Ånition 4.3.3.1. To see that these are suÔ¨Écient to form a
category is considered routine to a seasoned category theorist, so let‚Äôs see why.
Since a morphism from G ‚Äú pV, A, src, tgtq to G1 ‚Äú pV 1, A1, src1, tgt1q involves two
functions f0 : V √ë V 1 and f1 : A √ë A1, the identity and composition formulas simply
arise from the identity and composition formulas for sets. Associativity follow similarly.
The only thing that needs to be checked is that the composition of two such morphisms,
each satisfying (4.6), will itself satisfy (4.6). For completeness, we check that now.
Suppose that f ‚Äú pf0, f1q: G √ë G1 and g ‚Äú pg0, g1q: G1 √ë G2 are graph homomor-

212
CHAPTER 5. BASIC CATEGORY THEORY
phisms, where G2 ‚Äú pV 2, A2, src2, tgt2q. Then in each diagram in (5.2)
A
f1

src

A1
g1

src1

A2
src2

V
f0
 V 1
g0
 V 2
A
f1

tgt

A1
tgt1

g1
 A2
tgt2

V
f0
 V 1
g0
 V 2
(5.2)
the left-hand square commutes because f is a graph homomorphism and the right-hand
square commutes because g is a graph homomorphism. Thus the whole rectangle com-
mutes, meaning that g Àù f is a graph homomorphism, as desired.
We denote the category of graphs and graph homomorphisms Grph.
Remark 5.1.1.16. When one is struggling to understand basic deÔ¨Ånitions, notation, and
style, a phase that naturally occurs when learning new mathematics (or any new lan-
guage), the preceding example will probably appear long and tiring. I would say the
reader has mastered the basics when the example seems straightforward. Around this
time, I hope the reader will get a sense of the remarkable organizational potential of the
categorical way of thinking.
Exercise 5.1.1.17.
Let F be a vector Ô¨Åeld deÔ¨Åned on all of R2. Recall that for two points x, x1 P R2,
any curve C with endpoints x and x1, and any parameterization r: ra, bs √ë C, the line
integral
≈ü
C Fprq¬®dr returns a real number. It does not depend on r, except its orientation
(direction). Therefore, if we think of C has having an orientation, say, going from x to
x1, then
≈ü
C F is a well deÔ¨Åned real number. If C goes from x to x1, let‚Äôs write C : x √ë x1.
DeÔ¨Åne an equivalence relation ‚Äû on the set of oriented curves in R2 by saying C ‚Äû C1 if
‚Ä¢ C and C1 start at the same point;
‚Ä¢ C and C1 end at the same point;
‚Ä¢
≈ü
C F ‚Äú
≈ü
C1 F.
Suppose we try to make a category CF as follows. Put ObpCF q ‚Äú R2, and for every
pair of points x, x1 P R2, let HomCF px, x1q ‚Äú tC : x √ë x1u{ ‚Äû, where C : x √ë x1 is an
oriented curve and ‚Äû means ‚Äúsame line integral,‚Äù as explained.
Is there an identity morphism and a composition formula that will make CF into a
category?
‚ô¶

5.1. CATEGORIES AND FUNCTORS
213
Solution 5.1.1.17.
Yes. For every object x P R2, the constant curve at x serves as the identity on x. If
C : x √ë y and C1 : y √ë z are curves, their composition is given by joining them to get a
curve x √ë z.
‚ô¶
5.1.1.18
Isomorphisms
In any category we have a notion of isomorphism between objects.
DeÔ¨Ånition 5.1.1.19. Let C be a category, and let X, Y P ObpCq be objects. An isomor-
phism f from X to Y is a morphism f : X √ë Y in C such that there exists a morphism
g: Y √ë X in C with
g Àù f ‚Äú idX
and
f Àù g ‚Äú idY .
In this case we say that the morphism f is invertible and that g is the inverse of f. We
may also say that the objects X and Y are isomorphic.
Example 5.1.1.20. If C ‚Äú Set is the category of sets, then DeÔ¨Ånition 5.1.1.19 coincides
precisely with the one given in DeÔ¨Ånition 2.1.2.14.
Exercise 5.1.1.21.
Let C be a category, and let c P ObpCq be an object. Show that idc is an isomorphism.
‚ô¶
Solution 5.1.1.21.
We have a morphism idc : c √ë c. To show it is an isomorphism we just need to Ô¨Ånd a
morphism f : c √ë c such that f Àù idc ‚Äú idc and idc Àù f ‚Äú idc. Taking f ‚Äú idc works.
‚ô¶
Exercise 5.1.1.22.
Let C be a category, and let f : X √ë Y be a morphism. Suppose that both g: Y √ë X
and g1 : Y √ë X are inverses of f. Show that they are the same morphism, g ‚Äú g1.
‚ô¶
Solution 5.1.1.22.
By deÔ¨Ånition, we have g Àù f ‚Äú idX and f Àù g1 ‚Äú idY . We apply some category laws to
g Àù f Àù g1 to obtain the result:
g ‚Äú g Àù idY ‚Äú g Àù pf Àù g1q ‚Äú pg Àù fq Àù g1 ‚Äú idX Àù g1 ‚Äú g1.
‚ô¶

214
CHAPTER 5. BASIC CATEGORY THEORY
Exercise 5.1.1.23.
Suppose that G ‚Äú pV, A, src, tgtq and G1 ‚Äú pV 1, A1, src1, tgt1q are graphs and that
f ‚Äú pf0, f1q: G √ë G1 is a graph homomorphism (as in DeÔ¨Ånition 4.3.3.1).
a. If f is an isomorphism in Grph, does this imply that f0 : V √ë V 1 and f1 : A √ë A1 are
isomorphisms in Set?
b. If so, why; if not, show a counterexample (where f is an isomorphism but either f0 or
f1 is not).
‚ô¶
Solution 5.1.1.23.
a. Yes.
b. If f is an isomorphism in Grph, then there is a graph homomorphism g: G1 √ë G such
that g Àù f ‚Äú idG and f Àù g ‚Äú idG1. So we have the following diagrams:
A
f1

src

tgt

A1
g1

 
A
 
V
f0
 V 1
g0
 V
A1
g1

src1

tgt1

A
f1

 
A1
 
V 1
g0
 V
f0
 V 1
Because f and g are mutually inverse, their composite is assumed to be the identity
morphism idG : G √ë G, which by deÔ¨Ånition means that g1Àùf1 ‚Äú idA and g0Àùf0 ‚Äú idV .
Similarly, the other composite f Àùg is identity on G1 so f1Àùg1 ‚Äú idA1 and f0Àùg0 ‚Äú idV 1.
All together, these facts imply that f1 and g1 are mutually inverse functions, i.e.,
isomorphisms, and so are f0 and g0.
‚ô¶
Exercise 5.1.1.24.
Suppose that G ‚Äú pV, A, src, tgtq and G1 ‚Äú pV 1, A1, src1, tgt1q are graphs and that
f ‚Äú pf0, f1q: G √ë G1 is a graph homomorphism (as in DeÔ¨Ånition 4.3.3.1).
a. If f0 : V √ë V 1 and f1 : A √ë A1 are isomorphisms in Set, does this imply that f is an
isomorphism in Grph?
b. If so, why; if not, show a counterexample (where f0 and f1 are isomorphisms but f is
not).
‚ô¶

5.1. CATEGORIES AND FUNCTORS
215
Solution 5.1.1.24.
a. Yes.
b. Let g1 : A1 √ë A be the inverse of f1, and let g0 : V 1 √ë V be the inverse of f0. We only
need to check that pg0, g1q is an honest graph homomorphism, i.e., that the diagrams
A1
g1

src1

?
A
src

V 1
g0
 V
A1
g1

tgt1

?
A
tgt

V 1
g0
 V
commute. We use the following facts:
‚Ä¢ g0 Àù f0 ‚Äú idV .
‚Ä¢ g1 Àù f1 ‚Äú idA.
‚Ä¢ src1 Àù f1 ‚Äú f0 Àù src.
‚Ä¢ tgt1 Àù f1 ‚Äú f0 Àù tgt.
Now we write out the proof that the two diagrams above commute:
src Àù g1 ‚Äú g0 Àù f0 Àù src Àù g1 ‚Äú g0 Àù src1 Àù f1 Àù g1 ‚Äú g0 Àù src1;
tgt Àù g1 ‚Äú g0 Àù f0 Àù tgt Àù g1 ‚Äú g0 Àù tgt1 Àù f1 Àù g1 ‚Äú g0 Àù tgt1.
‚ô¶
Proposition 5.1.1.25. Let C be a category, and let ‚Äì be the relation on ObpCq given by
saying X ‚Äì Y iÔ¨ÄX and Y are isomorphic. Then ‚Äì is an equivalence relation.
Proof. The proof of Proposition 2.1.2.18 can be mimicked in this more general setting.
‚ñ°
5.1.1.26
Another viewpoint on categories
Here is an alternative deÔ¨Ånition of category, using the work done in Chapter 2.
Exercise 5.1.1.27.
Suppose we begin our deÔ¨Ånition of category as follows.
A category C consists of a sequence pObpCq, HomC, dom, cod, ids, compq, where

216
CHAPTER 5. BASIC CATEGORY THEORY
‚Ä¢ ObpCq is a set;4
‚Ä¢ HomC is a set, and dom, cod: HomC √ë ObpCq are functions;
‚Ä¢ ids: ObpCq √ë HomC is a function;
‚Ä¢ comp is a function as depicted in the commutative diagram (5.3)
HomC
cod
H
dom

HomC ÀÜObpCq HomC
‚úì
‚úì
comp
M


‚åü
HomC
cod 
dom

ObpCq
HomC
cod

dom

ObpCq
ObpCq
(5.3)
a. Add to diagram (5.3) to express the fact that for any x P ObpCq, the morphism idx
points from x to x.
b. Express the condition that composing a morphism f with an appropriate identity
morphism yields f.
‚ô¶
Solution 5.1.1.27.
a. This is expressed by the equations: dom Àù ids ‚Äú idObpCq and cod Àù ids ‚Äú idObpCq. One
could express this with the diagram:
HomC ÀÜObpCq HomC


‚åü
HomC
dom

HomC
cod
 ObpCq
ids
>
ids
Q
4See Remark 5.1.1.2.

5.1. CATEGORIES AND FUNCTORS
217
b. We have idHomC : HomC √ë HomC and ids Àù cod: HomC √ë HomC, and these commute
over ObpCq, meaning that for any morphism f : A √ë B, its codomain is the domain
of idB. Thus a unique map
xidHomC, ids Àù codyObpCq : HomC √ë HomC ÀÜObpCq HomC
is induced (see Proposition 3.2.1.15). Similarly there is a function
xididsÀùdomHomC, ObpCqy: HomC √ë HomC ÀÜObpCq HomC.
When we compose either of these morphisms with comp, we are taking the composition
of a morphism and the identity (either on the domain or the codomain). Thus, the
fact that composing any morphism with an identity morphism returns that morphism
is expressed by asserting two path equivalences,
HomCrxidHomC, ids Àù cody, comps ¬ª HomCr s,
HomCrxids Àù dom, idHomCy, comps ¬ª HomCr s,
in the following diagram:
HomC ÀÜObpCq HomC
comp
 HomC
xidsÀùdom,idHomC y
Q
xidHomC ,idsÀùcody
(
‚ô¶
Example 5.1.1.28 (Partial olog for a category). Diagram (5.4) is an olog that captures

218
CHAPTER 5. BASIC CATEGORY THEORY
some of the essential structures of a category:
a morphism
in C
has as codomain
H
has as domain
8
a pair pg, fq
of composable
morphisms
‚úì
‚úì
has as composition
%
yields
as g

yields as f

‚åü
a morphism
in C
has as
codomain

has as domain

an object of C
a morphism
in C
has as
codomain

has as domain

an object of C
an object of C
(5.4)
Missing from (5.4) is the notion of identity morphism (as an arrow from ‚åúan object
of C‚åùto ‚åúa morphism in C‚åù) and the associated path equivalences, as well as the identity
and associativity laws. All of these can be added to the olog, at the expense of some
clutter.
Remark 5.1.1.29. Perhaps it is already clear that category theory is very interconnected.
It may feel like everything relates to everything, and this feeling may intensify as you
go on. However, the relationships between diÔ¨Äerent notions are rigorously deÔ¨Åned, not
random. Moreover, almost everything presented in this book can be formalized in a proof
system like Coq (the most obvious exceptions being things like the readability requirement
of ologs and the modeling of scientiÔ¨Åc applications).
Whenever you feel cognitive vertigo, use the interplay between examples and formal
deÔ¨Ånitions to solidify your understanding.
Go through each example, making sure it
conforms to the deÔ¨Ånitions or theorems it purports to exemplify.
5.1.2
Functors
A category C ‚Äú pObpCq, HomC, dom, cod, ids, compq, involves a set of objects, a set of
morphisms, a notion of domains and codomains, a notion of identity morphisms, and

5.1. CATEGORIES AND FUNCTORS
219
a composition formula. For two categories to be comparable, these various components
should be appropriately comparable.
DeÔ¨Ånition 5.1.2.1. Let C and C1 be categories. A functor F from C to C1, denoted
F : C √ë C1, is deÔ¨Åned as follows: One announces some constituents (A. on-objects part,
B. on-morphisms part) and shows that they conform to some laws (1. preservation of
identities, 2. preservation of composition). SpeciÔ¨Åcally, one announces
A. a function ObpFq: ObpCq √ë ObpC1q, sometimes denoted simply F : ObpCq √ë
ObpC1q;
B. for every pair of objects c, d P ObpCq, a function
HomF pc, dq: HomCpc, dq √ë HomC1pFpcq, Fpdqq,
sometimes denoted simply F : HomCpc, dq √ë HomC1pFpcq, Fpdqq.
One must then show that the following functor laws hold:
1. Identities are preserved by F, that is, for any object c P ObpCq, we have Fpidcq ‚Äú
idF pcq.
2. Composition is preserved by F, that is, for any objects b, c, d P ObpCq and mor-
phisms g: b √ë c and h: c √ë d, we have Fph Àù gq ‚Äú Fphq Àù Fpgq.
Example 5.1.2.2 (Monoids have underlying sets). Recall from DeÔ¨Ånition 4.1.1.1 that if
M ‚Äú pM, e, ‚Äπq is a monoid, then M is a set. And recall from DeÔ¨Ånition 4.1.4.1 that if
f : M √ë M1 is a monoid homomorphism, then f : M √ë M 1 is a function. Thus we can
deÔ¨Åne a functor
U : Mon √ë Set
The on-objects part of U sends every monoid to its underlying set, UpMq ‚Äú M, and
sends every monoid homomorphism to its underlying function Upfq ‚Äú f. It is easy to
check that the functor laws hold, so U is indeed a functor.
Given two monoids M ‚Äú pM, e, ‚Äπq and M1 ‚Äú pM 1, e1, ‚Äπ1q, there may be many func-
tions from M to M 1 that do not arise from monoid homomorphisms. In other words,
U : HomMonpM, M1q √ë HomSetpM, M 1q may not be surjective.
It is often useful to
speak of such functions. For example, one could assign to every command in one video
game V a command in another video game V 1, but this may not work in accordance with
the monoid laws when performing a sequence of commands. By being able to speak of
M as a set or of M as a monoid, and understanding the relationship U between them,
we can be clear about where we stand at all times in the discussion.

220
CHAPTER 5. BASIC CATEGORY THEORY
Example 5.1.2.3 (Groups have underlying monoids). Recall that a group is just a monoid
pM, e, ‚Äπq with the extra property that every element m P M has an inverse m1 ‚Äπ m ‚Äú e ‚Äú
m ‚Äπ m1. Thus to every group we can assign its underlying monoid. Similarly, a group
homomorphism is just a monoid homomorphism of its underlying monoids. This means
that there is a functor
U : Grp √ë Mon
that sends every group or group homomorphism to its underlying monoid or monoid
homomorphism. Identity and composition are preserved.
Application 5.1.2.4. Suppose you are a scientist working with symmetries.
But then
suppose that the symmetry breaks somewhere, or you add some extra observable that is
not reversible under the symmetry. You want to seamlessly relax the requirement that
every action be reversible without changing anything else. You want to know how you
can proceed, or what is allowed. The answer is to simply pass from the category of groups
(or group actions) to the category of monoids (or monoid actions).
We can also reverse this change of perspective. Recall that Example 4.1.2.9 discussed
a monoid M controlling the actions of a video game character. The character position
(P) could be moved up (u), moved down (d), or moved right (r). The path equivalences
P.u.d ‚Äú P and P.d.u ‚Äú P imply that these two actions are mutually inverse, whereas
moving right has no inverse. This, plus equivalences P.r.u ‚Äú P.u.r and P.r.d ‚Äú P.d.r,
deÔ¨Åned a monoid M.
Inside M is a submonoid G, which includes just upward and downward movement. It
has one object, just like M, i.e., ObpMq ‚Äú tPu ‚Äú ObpGq. But it has fewer morphisms. In
fact, there is a monoid isomorphism G ‚Äì Z because we can assign to any movement in G
the number of ups, e.g., P ru, u, u, u, us is assigned the integer 5, P rd, d, ds is assigned the
integer ¬¥3, and P rd, u, u, d, d, us is assigned the integer 0 P Z. But Z is a group, because
every integer has an inverse.
The upshot is that we can use functors to compare groups and monoids.
‚ô¶‚ô¶
Slogan 5.1.2.5.
Out of all our available actions, some are reversible.
Example 5.1.2.6. Recall that we have a category Set of sets and a category Fin of Ô¨Ånite
sets. We said that Fin was a subcategory of Set. In fact, we can think of this subcategory
relationship in terms of functors, just as we thought of the subset relationship in terms of
functions in Example 2.1.2.4. Recall that if we have a subset S ƒé S1, then every element
s P S is an element of S1, so we make a function f : S √ë S1 such that fpsq ‚Äú s P S1.

5.1. CATEGORIES AND FUNCTORS
221
To give a functor i: Fin √ë Set, we have to announce how it works on objects and how
it works on morphisms. We begin by announcing a function i: ObpFinq √ë ObpSetq. By
analogy with the preceding, we have a subset ObpFinq ƒé ObpSetq. Hence every element
s P ObpFinq is an element of ObpSetq, so we put ipsq ‚Äú s. We also have to announce,
for each pair of objects s, s1 P ObpFinq, a function
i: HomFinps, s1q √ë HomSetps, s1q.
But again, that is easy because we know by deÔ¨Ånition (see Example 5.1.1.4) that these
two sets are equal, HomFinps, s1q ‚Äú HomSetps, s1q. Hence we can simply take i to be
the identity function on morphisms. It is evident that identities and compositions are
preserved by i. Therefore, we have deÔ¨Åned a functor i.
Remark 5.1.2.7. Recall that any group is just a monoid, except that it has an extra
property: every element has an inverse. Thus one can start with a group, ‚Äúforget‚Äù the
fact that it is a group and remember only that it is a monoid. Doing this is functorial‚Äî
Example 5.1.2.3 discussed it as a functor U : Grp √ë Mon. We say that U is a forgetful
functor. There is also a forgetful functor Mon √ë Set and so Grp √ë Set.
Slogan 5.1.2.8.
You can use a smartphone as a paperweight.
Colloquially, people often say things like, ‚ÄúCarol wears many hats‚Äù to mean that Carol
acts in diÔ¨Äerent roles, even though substantively she is somehow the same. The hat Carol
currently wears is the analogous to the category, or context of interaction, that she is
currently in.
Exercise 5.1.2.9.
A partial order is just a preorder with a special property. A linear order is just a
partial order with a special property.
a. Is there a useful functor FLin √ë PrO?
b. Is there a useful functor PrO √ë FLin?
‚ô¶
Solution 5.1.2.9.
a. Yes, there is a forgetful functor FLin √ë PrO. This functor takes a Ô¨Ånite linear order
pX, ƒèq and returns the preorder pX, ƒèq. It takes a morphism f : pX, ƒèq √ë pX1, ƒè1q of

222
CHAPTER 5. BASIC CATEGORY THEORY
Ô¨Ånite linear orders and returns the preorder morphism f : pX, ƒèq √ë pX1, ƒè1q. That is,
it does nothing except allow us to place a Ô¨Ånite linear order within a larger category.
This is valuable if one wants to compare the linear order to other preorders (as opposed
to only comparing it to other Ô¨Ånite linear orders). It is like the situation in which a
math graduate student X P Math goes to a university-wide graduate social event
AtParty: Math √ù√ë Univ.
She is the same person at the party as she is when hanging out in the math department,
and perhaps her interactions with a fellow math person Y P Math will be the same as
they always are,
HomUnivpAtPartypXq, AtPartypY qq ‚Äú HomMathpX, Y q,
but she can also try her hand at interacting with a person H P Univ, say, from
humanities, as well:
HomUnivpAtPartypXq, Hq ‚Äú??
This interaction cannot be discussed in the context of the Math category because H
is not in Math, so for X to interact with H we have to forget that X is in the Math
category using the functor AtParty.
b. No, not that I can think of. However, that is not to say that there are not any functors
PrO √ë FLin. For example, there is a functor cr6s that sends every preorder X to
the linear order r6s, and sends every preorder morphism to idr6s. But that is pretty
arbitrary, and I would not consider it useful. As far as I know, there is no useful
functor that extracts a linear order from a preorder, let alone to extract a Ô¨Ånite linear
order.
‚ô¶
Proposition 5.1.2.10 (Preorders to graphs). Let PrO be the category of preorders and
Grph be the category of graphs. There is a functor P : PrO √ë Grph such that for any
preorder X ‚Äú pX, ƒèq, the graph PpXq has vertices X.
Proof. Given a preorder X ‚Äú pX, ƒèXq, we can make a graph FpXq with vertices X and an
arrow x √ë x1 whenever x ƒèX x1, as in Remark 4.4.1.10. More precisely, the preorder ƒèX
is a relation, i.e., a subset RX ƒé X ÀÜX, which we think of as a function i: RX √ë X ÀÜX.
Composing with projections œÄ1, œÄ2 : X ÀÜ X √ë X gives
srcX :‚Äú œÄ1 Àù i: RX √ë X
and
tgtX :‚Äú œÄ2 Àù i: RX √ë X.
Then we put FpXq :‚Äú pX, RX , srcX , tgtX q. This gives us a function F : ObpPrOq √ë
ObpGrphq.

5.1. CATEGORIES AND FUNCTORS
223
Suppose now that f : X √ë Y is a preorder morphism, where Y ‚Äú pY, ƒèY q. This is a
function f : X √ë Y such that for any px, x1q P X ÀÜX, if x ƒèX x1, then fpxq ƒè fpx1q. But
that is the same as saying that there exists a dotted arrow making the following diagram
of sets commute
RX


X ÀÜ X
fÀÜf

RY
 Y ÀÜ Y
(Note that there cannot be two diÔ¨Äerent dotted arrows making that diagram commute
because RY √ë Y ÀÜY is a monomorphism.) This commutative square is precisely what is
needed for a graph homomorphism, as shown in Exercise 4.3.3.7. Thus, we have deÔ¨Åned
F on objects and on morphisms. It is clear that F preserves identity and composition.
‚ñ°
Exercise 5.1.2.11.
Proposition 5.1.2.10 gave a functor P : PrO √ë Grph.
a. Is every graph G P ObpGrphq in the image of P (or more precisely, is the function
ObpPq: ObpPrOq √ë ObpGrphq
surjective)?
b. If so, why; if not, name a graph not in the image.
c. Suppose that G1 and H1 are preorders with graph formats PpG1q ‚Äú G and PpH1q ‚Äú H.
Is every graph homomorphism f : G √ë H in the image of
HomP : HomPrOpG1, H1q √ë HomGrphpG, Hq?
In other words, does every graph homomorphism between G and H come from a
preorder homomorphism between G1 and H1?
‚ô¶
Solution 5.1.2.11.
a. No. See, for example, Remark 4.4.1.10.

224
CHAPTER 5. BASIC CATEGORY THEORY
b. Neither of the following graphs are in the image of P:
a‚Äö


b‚Äö %
a‚Äö
The Ô¨Årst does not work because there are too many arrows a √ë b. The second does
not work because there is a path a √ë a (namely, the trivial path), but no arrow a √ë a.
c. Yes. Given a graph morphism f ‚Äú pf0, f1q: G √ë H, we take f 1 : G1 √ë H1 to be
f 1 ‚Äú f0. That is, the elements of the preorder G1 are just the vertices in graph G,
so f 1 should do whatever f did on vertices. Now we must check that if g1 ƒè g2 in
G1, then f 1pg1q ƒè f 1pg2q. If g1 ƒè g2, then there is a path from g1 to g2 in G, and
graph morphisms preserve paths, so there is a path from fpg1q to fpg2q in H, so
indeedf 1pg1q ƒè f 1pg2q. Now it is easy to check that Ppf 1q ‚Äú f.
‚ô¶
Remark 5.1.2.12. There is a functor W : PrO √ë Set sending pX, ƒèq to X. There is a
functor T : Grph √ë Set sending pV, A, src, tgtq to V . When we study the category of cat-
egories (see Section 5.1.2.30), it will be clear that Proposition 5.1.2.10 can be summarized
as a commutative triangle in Cat,
PrO
P

W

Grph
T
R
Set
‚úì
Exercise 5.1.2.13.
Recall from (2.3) that every function f : A √ë B has an image, imfpAq ƒé B. Use this
idea and Example 4.4.1.16 to construct a functor Im: Grph √ë PrO such that for any
graph G ‚Äú pV, A, src, tgtq, the vertices of G are the elements of ImpGq. That is, Ô¨Ånd
some ordering ƒèG, such that we have ImpGq ‚Äú pV, ƒèGq.
‚ô¶
Solution 5.1.2.13.
Suppose given an object G P ObpGrphq, i.e., a graph G ‚Äú pV, A, src, tgtq. The source
and target functions combine to give a function xsrc, tgty: A √ë V ÀÜ V . Its image is a
subset R ƒé V ÀÜ V , i.e., a binary relation. But R is not necessarily a preorder. We can
remedy that by using the preorder R generated by R, as in Example 4.4.1.16. On objects
we put ImpGq :‚Äú R. One way to understand this preorder is that it has as elements V ,
the vertices of G, and it has v ƒè v1 if and only if there exists a path from v to v1 in G.

5.1. CATEGORIES AND FUNCTORS
225
Given a morphism f : G √ë G1, we need to provide a preorder morphism ImpGq √ë
ImpG1q. The obvious choice is to use f0 (what f does on vertices), but we need to check
that it preserves the order. This is clear because graph morphisms send paths to paths‚Äîif
there was a path from v to v1 in G, there will be one from fpvq to fpv1q. We need to
check that ImpidGq ‚Äú idImpGq, but this is straightforward.
‚ô¶
Exercise 5.1.2.14.
In Exercise 5.1.2.13 you constructed a functor Im: Grph √ë PrO.
What is the
preorder ImpGq when G P ObpGrphq is the following graph?
G :‚Äú
v‚Äö
f
 w‚Äö
h

g
) x‚Äö
y‚Äö
i
S
j
) z‚Äö
k
A
‚ô¶
Solution 5.1.2.14.
The easiest way to see it is that v ƒè v1 in ImpGq if there is a path from v to v1 in G.
But for completeness, we write out the relation, which we denote ƒèImpGq:
ƒèImpGq
v
v
v
w
v
x
w
w
w
x
x
x
y
y
y
z
z
y
z
z
‚ô¶
Exercise 5.1.2.15.
Consider the functor Im: Grph √ë PrO constructed in Exercise 5.1.2.13.

226
CHAPTER 5. BASIC CATEGORY THEORY
a. Is every preorder X P ObpPrOq in the image of Im (or more precisely, in the image
of ObpImq: ObpGrphq √ë ObpPrOq)?
b. If so, why; if not, name a preorder not in the image.
c. Suppose that X 1, Y1 P ObpGrphq are graphs, with X :‚Äú ImpX 1q and Y :‚Äú ImpY1q in
the preorder format. Is every preorder morphism f : X √ë Y in the image of
HomIm : HomGrphpX 1, Y1q √ë HomPrOpX, Yq?
In other words, does every preorder homomorphism between X and Y come from a
graph homomorphism between X 1 and Y1?
‚ô¶
Solution 5.1.2.15.
a. Yes.
b. In Proposition 5.1.2.10 showed the construction of a functor P : PrO √ë Grph. Given
a preorder X :‚Äú pX, ƒèq, we can make a graph G ‚Äú PpXq out of that, with vertices X
and an edge x √ë x1 whenever x ƒè x1. The functor Im: Grph √ë PrO sends G back
to pX, ƒèq. Thus X ‚Äú ImpPpXqq is in the image of Im.
c. No. There is no graph morphism
s‚Äö
f
K
√ù√ë
t‚Äö
because the arrow f has nowhere to go. However, if we apply the functor Im, these
two graphs become the same preorder, and so there is an identity morphism between
them.
‚ô¶
Exercise 5.1.2.16.
We have functors P : PrO √ë Grph and Im: Grph √ë PrO.
a. What can you say about Im Àù P : PrO √ë PrO?
b. What can you say about P Àù Im: Grph √ë Grph?
‚ô¶

5.1. CATEGORIES AND FUNCTORS
227
Solution 5.1.2.16.
a. It is the identity functor. That is, when a preorder is turned into a graph and then
back into a preorder, it returns unchanged; similarly, when a preorder morphism is
turned into a graph morphism and then back into a preorder morphism, it remains
unchanged.
b. It is not the identity functor. When a graph G is turned into a preorder and then back
into a graph, it has lost all redundancy (more than one edge v √ë v1) and every path
in G has become an edge in PpImpGqq.
‚ô¶
Exercise 5.1.2.17.
Consider the functors P : PrO √ë Grph and Im: Grph √ë PrO. And consider the
chain graph rns of length n from Example 4.3.1.8 and the linear order rns of length n
from Example 4.4.1.7. To diÔ¨Äerentiate the two, let‚Äôs rename them for this exercise as
rnsGrph P ObpGrphq and rnsPrO P ObpPrOq. We see a similarity between rnsGrph and
rnsPrO, and we might hope that the functors help formalize this similarity. That is, we
might hope that one of the following hold:
PprnsPrOq ‚Äì? rnsGrph
or
ImprnsGrphq ‚Äì? rnsPrO.
Do either, both, or neither of these hold?
‚ô¶
Solution 5.1.2.17.
The Ô¨Årst equation does not hold. For example, Ppr0sPrOq is the loop graph (with one
vertex and one self-arrow), and that is diÔ¨Äerent from r0sGrph, which has no arrows. The
second equation does hold:
ImprnsGrphq ‚Äì rnsPrO.
‚ô¶
Remark 5.1.2.18. In the course announcement for MIT‚Äôs 18-S996 course, I wrote the
following:
It is often useful to focus one‚Äôs study by viewing an individual thing, or a
group of things, as though it exists in isolation.
However, the ability to
rigorously change our point of view, seeing our object of study in a diÔ¨Äerent
context, often yields unexpected insights. Moreover, this ability to change
perspective is indispensable for eÔ¨Äectively communicating with and learning

228
CHAPTER 5. BASIC CATEGORY THEORY
from others. It is the relationships between things, rather than the things
in and by themselves, that are responsible for generating the rich variety
of phenomena we observe in the physical, informational, and mathematical
worlds.
This holds at many diÔ¨Äerent levels. For example, one can study a group (in the sense of
DeÔ¨Ånition 4.2.1.1) in isolation, trying to understand its subgroups or its automorphisms,
and this is mathematically interesting. But one can also view it as a quotient of something
else, or as a subgroup of something else. One can view the group as a monoid and look
at monoid homomorphisms to or from it. One can look at the group in the context of
symmetries by seeing how it acts on sets. These changes of viewpoint are all clearly
and formally expressible within category theory. We know how the diÔ¨Äerent changes of
viewpoint compose and how they Ô¨Åt together in a larger context.
Exercise 5.1.2.19.
a. Is the preceding quotation also true in your scientiÔ¨Åc discipline of expertise? How so?
b. Can you imagine a way that category theory can help catalogue the kinds of relation-
ships or changes of viewpoint that exist in your discipline?
c. What kinds of structures that you use often deserve to be better formalized?
‚ô¶
Solution 5.1.2.19.
a. It is useful to study a person in isolation, e.g., in the context of anatomy. However,
even psychology is so relational (about how a person relates with other people) that it
does not make sense to consider psychology as the study of an individual in isolation.
Being able to change one‚Äôs point of view, e.g., helping a person see how others see
him or how his past self or future self might see him, yields unexpected insights. And
without an understanding of other points of view, it may be hard for a person to drive
a car (‚ÄúI was told that everyone is supposed to drive on the right side of the road. Why
are those oncoming cars driving on the left side?‚Äù) let alone cooperate with others.
The rich variety of phenomena that exist in society cannot be reduced to the anatomy
of an individual, even to the arrangement of cells in the brain.
b. If each person were assigned a database corresponding to her worldview and her ac-
quired set of examples, then relationships between people might be formalizable as
functors (or as some kind of morphisms) that relate these structures. Formalizing
interaction in this way could allow us to produce a much more eÔ¨Äective simulation of
human behavior, or allow humans to interact with computers more seamlessly.

5.1. CATEGORIES AND FUNCTORS
229
Rigorous communication with others (e.g., research papers) are written in prose. But they
should be written in a rigorous way, so that diÔ¨Äerent papers can be connected together
in interesting ways to form a network of understanding. What are the connections? In
precisely what sense is one paper an extension or a rebuttal of another?
‚ô¶
Example 5.1.2.20 (Free monoids). Let G be a set. DeÔ¨Ånition 4.1.1.15 deÔ¨Åned a monoid
ListpGq, called the free monoid on G. Given a function f : G √ë G1, there is an induced
function Listpfq: ListpGq √ë ListpG1q, and this preserves the identity element r s and
concatenation of lists, so Listpfq is a monoid homomorphism. It is easy to check that
List: Set √ë Mon is a functor.
Application 5.1.2.21. Application 2.1.2.16 discussed an isomorphism NucDNA ‚Äì NucRNA
given by RNA transcription. Applying the functor List, we get a function
ListpNucDNAq ‚Äì
√ù√ë ListpNucRNAq,
which will send sequences of DNA nucleotides to sequences of RNA nucleotides, and vice
versa. This is performed by polymerases.
‚ô¶‚ô¶
Exercise 5.1.2.22.
Let G ‚Äú t1, 2, 3, 4, 5u, G1 ‚Äú ta, b, cu, and let f : G √ë G1 be given by the sequence
pa, c, b, a, cq.5 Then if L ‚Äú r1, 1, 3, 5, 4, 5, 3, 2, 4, 1s, what is ListpfqpLq?
‚ô¶
Solution 5.1.2.22.
Use f to translate L, entry by entry:
Listpfqpr1, 1, 3, 5, 4, 5, 3, 2, 4, 1s ‚Äú ra, a, b, c, a, c, b, c, a, as.
‚ô¶
Remark 5.1.2.23 (Questionable functor). Recall from Remark 5.1.1.6 that a questionable
category is deÔ¨Åned to be a structure that looks like a category (objects, morphisms,
identities, composition formula), but which is not required to satisfy any laws. Similarly,
given categories (or questionable categories) C and D, we can deÔ¨Åne a questionable functor
F : C √ë D to consist of
A. a function ObpFq: ObpCq √ë ObpC1q, sometimes denoted simply F : ObpCq √ë
ObpC1q;
5See Exercise 2.1.2.22 if there is any confusion about this.

230
CHAPTER 5. BASIC CATEGORY THEORY
B. for every pair of objects c, d P ObpCq, a function
HomF pc, dq: HomCpc, dq √ë HomC1pFpcq, Fpdqq,
sometimes denoted simply F : HomCpc, dq √ë HomC1pFpcq, Fpdqq.
Exercise 5.1.2.24.
We can rephrase the notion of functor in terms compatible with Exercise 5.1.1.27. We
begin by saying that a functor F : C √ë C1 consists of two functions,
ObpFq: ObpCq √ë ObpC1q
and
HomF : HomC √ë HomC1,
called the on-objects part and the on-morphisms part respectively. They must follow some
rules, expressed by the commutativity of the following squares in Set:
HomC
dom 
HomF

ObpCq
ObpF q

HomC1
dom1  ObpC1q
HomC
cod 
HomF

ObpCq
ObpF q

HomC1
cod1  ObpC1q
(5.5)
ObpCq
ObpF q

ids
 HomC
HomF

ObpC1q
ids  HomC1
HomC ÀÜObpCq HomC
comp


HomC
HomF

HomC1 ÀÜObpC1q HomC1
comp  HomC1
(5.6)
a. In the right-hand diagram in (5.6), where does the (unlabeled) left-hand function come
from? Hint: Use Exercise 3.2.1.20.
Consider diagram (5.3); imagine it as though it were contained in a pane of glass.
Then imagine a parallel pane of glass involving C1 in place of C everywhere.
b. Draw arrows from the C pane to the C1 pane, each labeled ObpFq, HomF , and so on,
as appropriate.
c. If F is a functor, i.e., it satisÔ¨Åes (5.5) and (5.6), do all the squares in your drawing
commute?

5.1. CATEGORIES AND FUNCTORS
231
d. Does the deÔ¨Ånition of functor involve anything not captured in this setup?
‚ô¶
Solution 5.1.2.24.
a. We have HomF : HomC √ë HomC1, and since it commutes with dom and cod, we have
the desired function, by Exercise 3.2.1.20.
b. Let CPC ‚Äú HomC ÀÜObpCq HomC denote the set of composable pairs of arrows in C
(and similarly deÔ¨Åne CPC1 and CPF : CPC √ë CPC1). The two-pane diagram is a bit
cluttered, but looks like this:
HomC1
H

HomC
HomF 5
H

CPC1
comp
,


HomC1


ObpC1q
CPC
CPF
5
comp
,


HomC


HomF
5
ObpCq
ObpF q
5
HomC1


ObpC1q
HomC

HomF
5

ObpCq
ObpF q
5
ObpC1q
ObpCq
ObpF q
5
c. Yes.
d. No, this is all one needs: functions ObpFq: ObpCq √ë ObpC1q and HomF : HomC √ë
HomC1 such that all the squares commute.
‚ô¶
Example 5.1.2.25 (Paths-graph). Let G ‚Äú pV, A, src, tgtq be a graph.
We have a set
PathG of paths in G, and functions src, tgt: PathG √ë V . That information is enough to
deÔ¨Åne a new graph,
PathspGq :‚Äú pV, PathG, src, tgtq.

232
CHAPTER 5. BASIC CATEGORY THEORY
Moreover, given a graph homomorphism f : G √ë G1, every path in G is sent under f
to a path in G1. So Paths: Grph √ë Grph is a functor.
Exercise 5.1.2.26.
a. Consider the graph G from Example 4.3.3.3. Draw the paths-graph PathspGq for G.
b. Repeating part (a) for G1 from the same example would be hard, because the paths-
graph PathspG1q has inÔ¨Ånitely many arrows.
However, the graph homomorphism
f : G √ë G1 does induce a morphism of paths-graphs Pathspfq: PathspGq √ë PathspG1q.
How does that act on the vertices and arrows of PathspGq?
c. Given a graph homomorphism f : G √ë G1 and two paths p: v √ë w and q: w √ë x in
G, is it true that Pathspfq preserves the concatenation? Explain also what it means
to say Pathspfq preserves the concatenation.
‚ô¶
Solution 5.1.2.26.
a. Here are G and PathspGq.
G
1‚Äö
a

d

c

2‚Äö
b
 3‚Äö
4‚Äö
5‚Äö
e
 6‚Äö
PathspGq
1‚Äö
1r s
B
1ras

1rcs
N
1rds
B
1ra,bs
T
2‚Äö
2r s
N
2rbs
 3‚Äö
3r s
$
4‚Äö
4r s
&
5‚Äö
5r s

5res
 6‚Äö
6r s
%

5.1. CATEGORIES AND FUNCTORS
233
b. For the reader‚Äôs convenience, here is a copy of f : G √ë G1:
G
1‚Äö
a

d

c

2‚Äö
b
 3‚Äö
4‚Äö
5‚Äö
e
 6‚Äö
1 √û√ë 11, 2 √û√ë 21,
3 √û√ë 11, 4 √û√ë 41,
5 √û√ë 51, 6 √û√ë 51

G1
11
w

y 
21
‚Äö
x

41
‚Äö
51
‚Äö
z

By deÔ¨Ånition Pathspfq acts like f on the vertices, and arrow by arrow on paths. Here
is the formal answer:
f0 : V √ë V 1
V
V 1
1
11
2
21
3
11
4
41
5
51
6
51
f1 : PathG √ë PathG1
PathG
PathG1
1r s
11r s
1ras
11rws
1ra, bs
11rw, xs
1rcs
11rys
1rds
11rys
2r s
21r s
2rbs
21rxs
3r s
11r s
4r s
41r s
5r s
51r s
5res
51rzs
6r s
51r s
c. Yes, that is true. It means that fppq ``fpqq ‚Äú fpp ``qq, where `` denotes concate-
nation of paths.
‚ô¶
Exercise 5.1.2.27.
Suppose that C and D are categories, c, c1 P ObpCq are objects, and F : C √ë D is a
functor. Suppose that c and c1 are isomorphic in C. Show that this implies that Fpcq and
Fpc1q are isomorphic in D.
‚ô¶

234
CHAPTER 5. BASIC CATEGORY THEORY
Solution 5.1.2.27.
If c and c1 are isomorphic, that means there exists a morphism f : c √ë c1 and a
morphism f 1 : c1 √ë c in C, such that f 1 Àùf ‚Äú idc and f Àùf 1 ‚Äú idc1. But then Fpfq: Fpcq √ë
Fpc1q and Fpf 1q: Fpc1q √ë Fpcq are mutually inverse morphisms between Fpcq and Fpc1q.
Indeed, since F preserves composition and identities, we have Fpf 1q Àù Fpfq ‚Äú Fpf 1 Àù fq ‚Äú
Fpidcq ‚Äú idF pcq and Fpfq Àù Fpf 1q ‚Äú Fpf Àù f 1q ‚Äú Fpidc1q ‚Äú idF pc1q.
So Fpfq is an
isomorphism, which means that Fpcq and Fpc1q are isomorphic in D.
‚ô¶
Example 5.1.2.28. For any graph G, we can assign its set of length 1 loops EqpGq as in
Exercise 4.3.1.12. This assignment is functorial in that given a graph homomorphism G √ë
G1, there is an induced function EqpGq √ë EqpG1q. Similarly, we can functorially assign
the set of connected components of the graph, CoeqpGq. In other words, Eq: Grph √ë
Set and Coeq: Grph √ë Set are functors. The assignment of vertex set and arrow set
are two more functors Grph √ë Set.
Suppose you want to decide whether two graphs G and G1 are isomorphic. If the
graphs have thousands of vertices and thousands of arrows, this could take a long time.
However, the preceding functors, in combination with Exercise 5.1.2.27 give us some
things to try.
The Ô¨Årst thing to do is to count the number of loops of each, because these numbers
are generally small. If the number of loops in G is diÔ¨Äerent than the number of loops
in G1, then because functors preserve isomorphisms, G and G1 cannot be isomorphic.
Similarly, one can count the number of connected components, again generally a small
number. If the number of components in G is diÔ¨Äerent than the number of components in
G1, then G ¬≠‚Äì G1. Similarly, one can simply count the number of vertices or the number
of arrows in G and G1. These are all isomorphism invariants.
All this is a bit like trying to decide if a number is prime by checking if it is even, if
its digits add up to a multiple of 3, or if it ends in a 5; these tests do not determine the
answer, but they oÔ¨Äer some level of discernment.
Remark 5.1.2.29. As mentioned, functors allow ideas in one domain to be rigorously
imported to another. Example 5.1.2.28 is a Ô¨Årst taste. Because functors preserve isomor-
phisms, we can tell graphs apart by looking at them in a simpler category, Set, using
various lenses (in that case, four). There is relatively simple theorem in Set that says that
for diÔ¨Äerent natural numbers m, n the sets m and n are never isomorphic. This theorem
is transported via the four functors to four diÔ¨Äerent theorems about telling graphs apart.
5.1.2.30
The category of categories
Recall from Remark 5.1.1.2 that a small category C is one in which ObpCq is a set. But
everything said so far works whether or not C is small. The following deÔ¨Ånition gives

5.1. CATEGORIES AND FUNCTORS
235
more precision.
Proposition 5.1.2.31. There exists a category, called the category of small categories
and denoted Cat, in which the objects are the small categories and the morphisms are
the functors,
HomCatpC, Dq ‚Äú tF : C √ë D | F is a functoru.
That is, there are identity functors, functors can be composed, and the identity and asso-
ciativity laws hold.
Proof. We follow DeÔ¨Ånition 5.1.1.1. We have already speciÔ¨Åed ObpCatq and HomCat
in the statement of the proposition.
Given a small category C, there is an identity
functor idC : C √ë C that is identity on the set of objects and the set of morphisms.
And given a functor F : C √ë D and a functor G: D √ë E, it is easy to check that
G Àù F : C √ë E, deÔ¨Åned by composition of functions ObpGq Àù ObpFq: ObpCq √ë ObpEq
and HomG Àù HomF : HomC √ë HomE (see Exercise 5.1.2.24), is a functor; thus we have a
composition formula. For the same reasons, one can show that functors, as morphisms,
obey the identity law and the composition law.
Therefore, this speciÔ¨Åcation of Cat
satisÔ¨Åes the deÔ¨Ånition of being a category.
‚ñ°
Example 5.1.2.32 (Categories have underlying graphs). Suppose given a category in
the notation is as in Exercise 5.1.1.27, C ‚Äú pObpCq, HomC, dom, cod, ids, compq. Then
pObpCq, HomC, dom, codq is a graph, called the graph underlying C and denoted UpCq P
ObpGrphq. A functor F : C √ë D induces a graph morphism UpFq: UpCq √ë UpDq, as
seen in (5.5). So we have a functor,
U : Cat √ë Grph.
Example 5.1.2.33 (Free category on a graph). Example 5.1.2.25 discussed a functor
Paths: Grph √ë Grph that considered all the paths in a graph G as the arrows of
a new graph PathspGq.
In fact, PathspGq could be construed as a category, denoted
FpGq P ObpCatq and called the free category generated by G.
The objects of the category FpGq are the vertices of G. For any two vertices v, v1,
the hom-set HomF pGqpv, v1q is the set of paths in G from v to v1. The identity elements
are given by the trivial paths, and the composition formula is given by concatenation of
paths.
For the on-morphisms part of F, we need to see that a graph homomorphism f : G √ë
G1 induces a functor Fpfq: FpGq √ë FpG1q. But this was shown in Exercise 5.1.2.26.
Thus we have a functor
F : Grph √ë Cat
called the free category functor.

236
CHAPTER 5. BASIC CATEGORY THEORY
Exercise 5.1.2.34.
Let G be the graph depicted
v0‚Äö
e
√ù√ù√ù√ù√ù√ë
v1‚Äö
and let r1s P ObpCatq denote the free category on G, i.e., r1s :‚Äú FpGq, as in Example
5.1.2.33. We call r1s the free arrow category.
a. What are the objects of r1s?
b. For every pair of objects in r1s, write the hom-set.
‚ô¶
Solution 5.1.2.34.
a. Obpr1sq ‚Äú tv0, v1u.
b. There are four pairs of objects, so the four hom-sets are:
Homr1spv0, v0q ‚Äú tidv0u;
Homr1spv0, v1q ‚Äú teu;
Homr1spv1, v0q ‚Äú H;
Homr1spv1, v1q ‚Äú tidv1u.
‚ô¶
Exercise 5.1.2.35.
Let G be the graph whose vertices are all U.S. cities and whose arrows are airplane
Ô¨Çights connecting the cities. What idea is captured by the free category on G?
‚ô¶
Solution 5.1.2.35.
This captures the idea of Ô¨Çight itineraries. ‚ÄúI am leaving Boston, Ô¨Çying to Atlanta,
then on to Chicago.‚Äù You can compose itineraries if the arrival city of one itinerary equals
the departure city of the next. And there is the identity ‚ÄúI am not going anywhere‚Äù
itinerary for any U.S. city.
‚ô¶
Exercise 5.1.2.36.
Let F : Grph √ë Cat denote the free category functor from Example 5.1.2.33, and let
U : Cat √ë Grph denote the underlying graph functor from Example 5.1.2.32. What is
the composition U Àù F : Grph √ë Grph called?
‚ô¶

5.1. CATEGORIES AND FUNCTORS
237
Solution 5.1.2.36.
Since F : Grph √ë Cat freely adds all paths, one can check that UÀùF : Grph √ë Grph
is the construction that takes a graph and adds all paths; i.e., U ÀùF ‚Äú Paths (see Example
5.1.2.25).
‚ô¶
Exercise 5.1.2.37.
Recall the graph G from Example 4.3.1.2. Let C ‚Äú FpGq be the free category on G.
a. What is HomCpv, xq?
b. What is HomCpx, vq?
‚ô¶
Solution 5.1.2.37.
a. The set HomCpv, xq has two elements: vrf, gs and vrf, hs.
b. HomCpx, vq ‚Äú H.
‚ô¶
Example 5.1.2.38 (Discrete graphs, discrete categories). There is a functor Disc: Set √ë
Grph that sends a set S to the graph
DiscpSq :‚Äú pS, H, !, !q,
where !: H √ë S is the unique function. We call DiscpSq the discrete graph on the set S.
It is clear that a function S √ë S1 induces a morphism of discrete graphs. Now applying
the free category functor F : Grph √ë Cat, we get the discrete category on the set S.
This composition is also denoted Disc: Set √ë Cat.
Exercise 5.1.2.39.
Recall from (2.4) the deÔ¨Ånition of the set n for any natural number n P N, and let
Dn :‚Äú Discpnq P ObpCatq be the discrete category on the set n, as in Example 5.1.2.38.
a. List all the morphisms in D4.
b. List all the functors D3 √ë D2.
‚ô¶

238
CHAPTER 5. BASIC CATEGORY THEORY
Solution 5.1.2.39.
a. There are only identity morphisms, one for each object: tid1, id2, id3, id4u.
b. A functor F : D3 √ë D2 consists of a function F : ObpD3q √ë ObpD2q on objects as
well as a function on morphisms that respects identities and compositions. But since
the only morphisms in D3 are identities, there is no choice and no restriction in the
morphism part. In other words, a functor D3 √ë D2 is completely determined by a
function 3 √ë 2. There are eight of these, which by (2.5), can be denoted by sequences:
p1, 1, 1q;
p1, 1, 2q;
p1, 2, 1q;
p1, 2, 2q;
p2, 1, 1q;
p2, 1, 2q;
p2, 2, 1q;
p2, 2, 2q.
‚ô¶
Exercise 5.1.2.40.
Let C be a category. How many functors are there C √ë D1, where D1 :‚Äú Discp1q is
the discrete category on one element?
‚ô¶
Solution 5.1.2.40.
There is always one functor C √ë D1. There is no choice about where to send objects
(all go to the object 1), and there is no choice about where to send morphisms (all go to
the morphism id1).
‚ô¶
We sometimes refer to Discp1q as the terminal category (see Section 6.1.3) and for
simplicity denote it 1. Its unique object is denoted 1.
Exercise 5.1.2.41.
If someone said, ‚ÄúOb is a functor from Cat to Set,‚Äù what might they mean?
‚ô¶
Solution 5.1.2.41.
They probably mean that there is a functor Cat √ë Set that sends a category C to
its set of objects ObpCq. Since the speaker does not say what this functor, Ob, does on
morphisms, he is suggesting it is obvious. A morphism in Cat is a functor F : C √ë D,
which includes an on-objects part by deÔ¨Ånition. In other words, it is indeed obvious what
ObpFq: ObpCq √ë ObpDq should mean because this is given in the speciÔ¨Åcation of F (see
DeÔ¨Ånition 5.1.2.1). It is not hard to check that Ob preserves identities and compositions,
so it is indeed a functor.
‚ô¶

5.2. COMMON CATEGORIES AND FUNCTORS FROM PURE MATH
239
Exercise 5.1.2.42.
If someone said, ‚ÄúHom is a functor from Cat to Set, where by Hom I mean the
mapping that takes C to the set HomC, as in Exercise 5.1.1.27,‚Äù what might they mean?
‚ô¶
Solution 5.1.2.42.
They probably mean that there is a functor Cat √ë Set that sends a category C to
its set of morphisms HomC. Since the speaker does not indicate what this functor, Hom,
does on morphisms, she is suggesting it is obvious. A morphism in Cat is a functor
F : C √ë D, which includes an on-morphisms part by deÔ¨Ånition. In other words, it is
indeed obvious what HompFq: HompCq √ë HompDq should mean because this is given
in the speciÔ¨Åcation of F (see DeÔ¨Ånition 5.1.2.1). It is easy to check that Hom preserves
identities and compositions, so it is indeed a functor.
‚ô¶
5.2
Common categories and functors from pure math
5.2.1
Monoids, groups, preorders, and graphs
We saw in Section 5.1.1 that there is a category Mon of monoids, a category Grp of
groups, a category PrO of preorders, and a category Grph of graphs. This section shows
that each monoid M, each group G, and each preorder P can be considered as its own
category. If each object in Mon is a category, we might hope that each morphism in
Mon is just a functor, and this is true. The same holds for Grp and PrO. We saw
in Example 5.1.2.33 how each graph can be regarded as giving a free category. Another
perspective on graphs (i.e., graphs as functors) is discussed in Section 5.2.1.21.
5.2.1.1
Monoids as categories
Example 4.1.2.9 said that to olog a monoid, one should use only one box. And again
Example 4.5.3.3 said that a monoid action could be captured by only one table. These
ideas are encapsulated by the understanding that a monoid is perfectly modeled as a
category with one object.
Each monoid as a category with one object
Let pM, e, ‚Äπq be a monoid. We consider
it as a category M with one object, ObpMq ‚Äú t‚ñ≤u, and
HomMp‚ñ≤, ‚ñ≤q :‚Äú M.

240
CHAPTER 5. BASIC CATEGORY THEORY
The identity morphism id‚ñ≤serves as the monoid identity e, and the composition formula
Àù: HomMp‚ñ≤, ‚ñ≤q ÀÜ HomMp‚ñ≤, ‚ñ≤q √ë HomMp‚ñ≤, ‚ñ≤q
is given by ‚Äπ: M ÀÜ M √ë M. The associativity and identity laws for the monoid match
precisely with the associativity and identity laws for categories.
If a monoid is a category with one object, is there any categorical way of phrasing the
notion of monoid homomorphism? Suppose that M ‚Äú pM, e, ‚Äπq and M1 ‚Äú pM 1, e1, ‚Äπ1q.
We know that a monoid homomorphism is a function f : M √ë M 1 such that fpeq ‚Äú e1
and such that for every pair m0, m1 P M, we have fpm0 ‚Äπ m1q ‚Äú fpm0q ‚Äπ1 fpm1q. What
is a functor M √ë M1?
Each monoid homomorphism as a functor between one-object categories
Say
that ObpMq ‚Äú t‚ñ≤u and ObpM1q ‚Äú t‚ñ≤1u, and we know that HomMp‚ñ≤, ‚ñ≤q ‚Äú M and
HomM1p‚ñ≤1, ‚ñ≤1q ‚Äú M 1. A functor F : M √ë M1 consists Ô¨Årst of a function ObpMq √ë
ObpM1q, but these sets have only one element each, so there is nothing to say on that
front: we must have Fp‚ñ≤q ‚Äú ‚ñ≤1. It also consists of a function HomM √ë homM1, but that
is just a function M √ë M 1. The identity and composition formulas for functors match
precisely with the identity and composition formula for monoid homomorphisms. Thus a
monoid homomorphism is nothing more than a functor between one-object categories.
Slogan 5.2.1.2.
A monoid is a category with one object. A monoid homomorphism is just a
functor between one-object categories.
This is formalized in the following theorem.
Theorem 5.2.1.3. There is a functor i: Mon √ë Cat with the following properties:
‚Ä¢ For every monoid M P ObpMonq, the category ipMq P ObpCatq itself has exactly
one object,
|ObpipMqq| ‚Äú 1.
‚Ä¢ For every pair of monoids M, M1 P ObpMonq, the function
HomMonpM, M1q ‚Äì
√ù√ë HomCatpipMq, ipM1qq,
induced by the functor i, is a bijection.

5.2. COMMON CATEGORIES AND FUNCTORS FROM PURE MATH
241
Proof. This is basically the content of the preceding paragraphs. The functor i sends
a monoid to the corresponding category with one object and i sends a monoid homo-
morphism to the corresponding functor. One can check that i preserves identities and
compositions.
‚ñ°
Theorem 5.2.1.3 situates the theory of monoids very nicely within the world of cat-
egories. But we have other ways of thinking about monoids, namely, their actions on
sets. It would greatly strengthen the story if we could subsume monoid actions within
category theory also, and we can.
Each monoid action as a set-valued functor
Recall from DeÔ¨Ånition 4.1.2.1 that if
pM, e, ‚Äπq is a monoid, an action consists of a set S and a function √º: M ÀÜ S √ë S such
that e √º s ‚Äú s and m0 √º pm1 √º sq ‚Äú pm0 ‚Äπ m1q √º s for all s P S. How might we relate
the notion of monoid actions to the notion of functors? Since monoids act on sets, one
idea is to try asking what a functor F : M √ë Set is; this idea will work.
The monoid-as-category M has only one object, ‚ñ≤, so F provides one set, S :‚Äú Fp‚ñ≤q P
ObpSetq. It also provides a function HomF : HomMp‚ñ≤, ‚ñ≤q √ë HomSetpFp‚ñ≤q, Fp‚ñ≤qq, or
more concisely, a function
HF : M √ë HomSetpS, Sq.
By currying (see Proposition 3.4.2.3), this is the same as a function √º: M ÀÜS √ë S. The
Ô¨Årst monoid action law, that e √º s ‚Äú s, becomes the law that functors preserve identities,
HomF pid‚ñ≤q ‚Äú idS. The other monoid action law is equivalent to the composition law for
functors.
5.2.1.4
Groups as categories
A group is just a monoid pM, e, ‚Äπq in which every element m P M is invertible, meaning
there exists some m1 P M with m ‚Äπ m1 ‚Äú e ‚Äú m1 ‚Äπ m. If a monoid is the same thing as
a category M with one object, then a group must be a category with one object and
with an additional property having to do with invertibility. The elements of M are the
morphisms of the category M, so we need a notion of invertibility for morphisms. Luckily
we have such a notion already, namely, isomorphism.
Slogan 5.2.1.5.
A group is a category G with one object, such that every morphism in G
is an isomorphism. A group homomorphism is just a functor between such
categories.

242
CHAPTER 5. BASIC CATEGORY THEORY
Theorem 5.2.1.6. There is a functor i: Grp √ë Cat with the following properties:
‚Ä¢ For every group G P ObpGrpq, the category ipGq P ObpCatq itself has exactly one
object, and every morphism m in ipGq is an isomorphism.
‚Ä¢ For every pair of groups G, G1 P ObpGrpq, the function
HomGrppG, G1q ‚Äì
√ù√ë HomCatpipGq, ipG1qq,
induced by the functor i, is a bijection.
Just as with monoids, an action of some group pG, e, ‚Äπq on a set S P ObpSetq is the
same thing as a functor G √ë Set sending the unique object of G to the set S.
5.2.1.7
A monoid and a group stationed at each object in any
category
If a monoid is just a category with one object, we can locate monoids in any category C
by focusing on one object in C. Similarly for groups.
Example 5.2.1.8 (Endomorphism monoid). Let C be a category and x P ObpCq an object.
Let M ‚Äú HomCpx, xq. Note that for any two elements f, g P M, we have f Àù g: x √ë x
in M. Let M ‚Äú pM, idx, Àùq. It is easy to check that M is a monoid; it is called the
endomorphism monoid of x in C, denoted Endpxq.
Example 5.2.1.9 (Automorphism group). Let C be a category and x P ObpCq an object.
Let G ‚Äú tf P HomCpx, xq | f is an isomorphismu. Let G ‚Äú pG, idx, Àùq. One can check that
G is a group; it is called the automorphism group of x in C denoted Autpxq.
Exercise 5.2.1.10.
Let S ‚Äú t1, 2, 3, 4u P ObpSetq.
a. What is the automorphism group AutpSq of S in Set, and how many elements does
this group have?
b. What is the endomorphism monoid EndpSq of S in Set, and how many elements does
this monoid have?
c. Recall from Example 5.1.2.3 that every group has an underlying monoid UpGq. Is the
endomorphism monoid of S the underlying monoid of the automorphism group of S?
That is, is it the case that EndpSq ‚Äú UpAutpSqq?
‚ô¶

5.2. COMMON CATEGORIES AND FUNCTORS FROM PURE MATH
243
Solution 5.2.1.10.
a. It is the permutation group AutS ‚Äú pIsopSq, idS, Àùq, where IsopSq is as deÔ¨Åned in
Exercise 4.2.1.7. It has 4! ‚Äú 24 elements.
b. It is the monoid pHomSetpS, Sq, idS, Àùq of all functions from S to S. It has 44 ‚Äú 256
elements.
c. No. The monoid underlying a group G has the same number of elements as G has,
so it is not the case that the monoid underlying the permutation group of S is the
endomorphism monoid of S.
The reader may note that there is a functor Core: Mon √ë Grp that takes a monoid
M and returns its subset of invertible elements, which forms a group called the core of
M. The core of the endomorphism monoid EndpSq is indeed the automorphism group
CorepEndpSqq ‚Äú AutpSq.
‚ô¶
Exercise 5.2.1.11.
Consider the following graph G, which has four vertices and eight arrows:
1‚Äö
12
7
13
-
2‚Äö
24
-
21
U
3‚Äö
34
7
31
V
4‚Äö
42
V
43
U
What is the automorphism group AutpGq of G P ObpGrphq Hint: Every automorphism
of G will induce an automorphism of the set t1, 2, 3, 4u; which ones will preserve the
endpoints of arrows?
‚ô¶
Solution 5.2.1.11.
We use visual perception to guide us. The graph G has the shape of a square. Of the
4! diÔ¨Äerent possible automorphisms of t1, 2, 3, 4u, only those preserving the square shape
will be automorphisms of G. The group of automorphisms of G is called the dihedral
group of order 8 (see Example 4.2.1.4). It has eight elements,
te, r, r2, r3, f, fr, fr2, fr3u,

244
CHAPTER 5. BASIC CATEGORY THEORY
where r means rotate the square clockwise 90Àù, and f means Ô¨Çip the square horizontally.
For example, Ô¨Çipping the square vertically can be obtained by Ô¨Çipping horizontally and
then rotating twice: fr2.
‚ô¶
5.2.1.12
Preorders as categories
A preorder pX, ƒèq consists of a set X and a binary relation ƒè that is reÔ¨Çexive and
transitive. We can make from pX, ƒèq P ObpPrOq a category X P ObpCatq as follows.
DeÔ¨Åne ObpXq ‚Äú X and for every two objects x, y P X, deÔ¨Åne
HomX px, yq ‚Äú
#
t‚Äúx ƒè y‚Äùu
if x ƒè y,
H
if x ƒô y.
To clarify: if x ƒè y, we assign HomX px, yq to be the set containing only one element,
namely, the string ‚Äúx ƒè y.‚Äù6 If the pair px, yq is not in relation ƒè, then we assign
HomX px, yq to be the empty set. The composition formula
Àù: HomX px, yq ÀÜ HomX py, zq √ë HomX px, zq
(5.7)
is completely determined because either one of two possibilities occurs. One possibility
is that the left-hand side is empty (if either x ƒô y or y ƒô z; in this case there is a unique
function Àù as in (5.7)). The other possibility is that the left-hand side is not empty in
case x ƒè y and y ƒè z, which implies x ƒè z, so the right-hand side has exactly one element
‚Äúx ƒè z‚Äù in which case again there is a unique function Àù as in (5.7).
On the other hand, if C is a category having the property that for every pair of objects
x, y P ObpCq, the set HomCpx, yq is either empty or has one element, then we can form
a preorder out of C. Namely, take X ‚Äú ObpCq and say x ƒè y if there exists a morphism
x √ë y in C.
Proposition 5.2.1.13. There is a functor i: PrO √ë Cat with the following properties
for every preorder pX, ƒèq:
1. the category X :‚Äú ipX, ƒèq has objects ObpXq ‚Äú X.
2. For each pair of elements x, x1 P ObpXq, the set HomX px, x1q has at most one
element.
Moreover, any category with property 2 is in the image of the functor i.
6The name of this morphism is unimportant.
What matters is that HomX px, yq has exactly one
element iÔ¨Äx ƒè y.

5.2. COMMON CATEGORIES AND FUNCTORS FROM PURE MATH
245
Proof. To specify a functor i: PrO √ë Cat, we need to say what it does on objects and
on morphisms. To an object pX, ƒèq in PrO, we assign the category X with objects X
and a unique morphism x √ë x1 if x ƒè x1. To a morphism f : pX, ƒèXq √ë pY, ƒèY q of
preorders, we must assign a functor ipfq: X √ë Y. Again, to specify a functor, we need
to say what it does on objects and morphisms of X. To an object x P ObpXq ‚Äú X,
we assign the object fpxq P Y ‚Äú ObpYq. Given a morphism f : x √ë x1 in X, we know
that x ƒè x1, so by DeÔ¨Ånition 4.4.4.1 we have that fpxq ƒè fpx1q, and we assign to f the
unique morphism fpxq √ë fpx1q in Y. To check that the rules of functors (preservation of
identities and composition) are obeyed is routine.
‚ñ°
Slogan 5.2.1.14.
A preorder is a category in which every hom-set has either 0 elements or 1
element. A preorder morphism is just a functor between such categories.
Exercise 5.2.1.15.
Suppose that C is a preorder (considered as a category). Let x, y P ObpCq be objects
such that x ƒè y and y ƒè x. Prove that there is an isomorphism x √ë y in C.
‚ô¶
Solution 5.2.1.15.
Categorically, x ƒè y means that there is a morphism f : x √ë y in C, and similarly
g: y ƒè x means that there is a morphism y √ë x in C. We can compose these to get a
morphism g Àù f : x √ë x and a morphism f Àù g: y √ë y. But the condition that C is a
preorder is that every hom-set has at most one element. We already have idx : x √ë x
and idy : y √ë y, so composites g Àù f and f Àù g must be the identity morphisms idx and
idy respectively. By deÔ¨Ånition, then, f and g are isomorphisms.
‚ô¶
Exercise 5.2.1.16.
Proposition 5.2.1.13 stated that a preorder can be considered as a category P. Recall
from DeÔ¨Ånition 4.4.1.1 that a partial order is a preorder with an additional property.
Phrase the deÔ¨Åning property for partial orders in terms of isomorphisms in the category
P.
‚ô¶
Solution 5.2.1.16.
A preorder is a category P such that, for every pair of objects x, y P ObpPq, the
set HomPpx, yq has at most one element. An element in HomPpx, yq represents the fact

246
CHAPTER 5. BASIC CATEGORY THEORY
that x ƒè y in P. In a partial order, we never have x ƒè y and y ƒè x, unless x ‚Äú y.
The situation x ƒè y and y ƒè x corresponds categorically to the situation when there
is an isomorphism x ‚Äì y. So the condition of P being a partial order can be phrased
categorically as ‚Äúwhenever any two objects are isomorphic in P, they must in fact be
equal.‚Äù
‚ô¶
Example 5.2.1.17. The olog from Example 4.4.1.3 depicted a partial order, call it P. In
it we have
HomPp‚åúa diamond‚åù, ‚åúa red card‚åùq ‚Äú tisu
and
HomPp‚åúa black queen‚åù, ‚åúa card‚åùq ‚Äì tis Àù isu.
Both of these sets contain exactly one element; the name is not important.
The set
HomPp‚åúa 4‚åù, ‚åúa 4 of diamonds‚åùq ‚Äú H.
Exercise 5.2.1.18.
Every linear order is a preorder with a special property. Using the categorical inter-
pretation of preorders, can you phrase the property of being a linear order in terms of
hom-sets?
‚ô¶
Solution 5.2.1.18.
A linear order is a preorder P such that for any two objects x, y either HomPpx, yq
has one element or HomPpy, xq has one element, but not both (unless x ‚Äú y).
‚ô¶
Exercise 5.2.1.19.
Recall the functor P : PrO √ë Grph from Proposition 5.1.2.10, the functors F : Grph √ë
Cat and U : Cat √ë Grph from Example 5.1.2.36, and the functor i: PrO √ë Cat from
Proposition 5.2.1.13.
a. Do either of the following diagrams of categories commute?
PrO
P

i

?
Grph
F
R
Cat
PrO
P

i

?
Grph
Cat
U
;

5.2. COMMON CATEGORIES AND FUNCTORS FROM PURE MATH
247
b. We also gave a functor Im: Grph √ë PrO in Exercise 5.1.2.13. Does the following
diagram of categories commute?
Grph
Im

F
:
?
PrO
i

Cat
‚ô¶
Solution 5.2.1.19.
a. Only the second triangle commutes,
PrO
P

i

‚úì
Grph
Cat
U
;
As an example of why the Ô¨Årst triangle does not commute, let X ‚Äú 1 be the unique
preorder having one element. Then PpXq is the loop graph, having an arrow 1 √ë 1
corresponding to the fact that 1 ƒè 1, and ipXq is the terminal category, with one
object 1 and one morphism (HomipXqp1, 1q ‚Äú tid1u). But the free category on the
loop graph is the free monoid on one generator‚Äîit has HomF P pXqp1, 1q ‚Äì N. Since
HomipXqp1, 1q ‚Ä∞ HomF ÀùP pXqp1, 1q, we must have i ‚Ä∞ F Àù P.
b. No, this does not commute. An easy example is the parallel arrows graph X drawn
as follows:
X :‚Äú
a‚Äö

b‚Äö
The free category FpXq has four morphisms, whereas i Àù ImpXq has only three mor-
phisms.
‚ô¶
Proposition 5.2.1.20. There is a unique functor R: Cat √ë PrO with the following
properties:

248
CHAPTER 5. BASIC CATEGORY THEORY
1. For each category C, the preorder pX, ƒèq :‚Äú RpCq has the same set of objects,
X ‚Äú ObpCq.
2. For each pair of objects x, y P ObpCq, we have x ƒè y in RpCq if and only if the
hom-set HomCpx, yq ‚Ä∞ H is nonempty.
Furthermore, if i: PrO √ë Cat is the inclusion from Proposition 5.2.1.13, we have RÀùi ‚Äú
idPrO.
Proof. Given a category C, we deÔ¨Åne a preorder RpCq :‚Äú pObpCq, ƒèq, where x ƒè y if and
only if HomCpx, yq ‚Ä∞ H. This is indeed a preorder because the identity law and composi-
tion law for a category ensure the reÔ¨Çexivity and transitivity properties of preorders hold.
Given a functor F : C √ë D (i.e., a morphism in Cat), we get ObpFq: ObpCq √ë ObpC1q,
and for R to be deÔ¨Åned on morphisms, we need to check that this function preserves
order. If x ƒè y in RpCq, then there is a morphism g: x √ë y in C, so there is a morphism
Fpgq: Fpxq √ë Fpyq, which means Fpxq ƒè Fpyq in C1. It is straightforward to see now
that R is a functor, and there was no other way to construct R satisfying the desired
properties. It is also easy to see that R Àù i ‚Äú idPrO.
‚ñ°
5.2.1.21
Graphs as functors
Let C denote the category depicted as follows:
GrIn :‚Äú
Ar‚Äö
src 
tgt 
Ve‚Äö
(5.8)
Then a functor G: GrIn √ë Set is the same thing as two sets GpArq, GpVeq and two
functions Gpsrcq: GpArq √ë GpVeq and Gptgtq: GpArq √ë GpVeq. This is precisely what
is needed for a graph; see DeÔ¨Ånition 4.3.1.1. We call GrIn the graph-indexing category.
Exercise 5.2.1.22.
Consider the terminal category, 1, also known as the discrete category on one element
(see Exercise 5.1.2.40). Let GrIn be as in (5.8) and consider the functor i0 : 1 √ë GrIn
sending the unique object of 1 to the object V e P ObpGrInq.
a. If G: GrIn √ë Set is a graph, what is the composite G Àù i0? It consists of only one
set; in terms of the graph G, what set is it?
b. As an example, what set is it when G is the graph from Example 4.3.3.3?
‚ô¶

5.2. COMMON CATEGORIES AND FUNCTORS FROM PURE MATH
249
Solution 5.2.1.22.
a. The composite 1 i0
√ù√ë GrIn G
√ù√ë Set is the functor that sends the unique object of 1 to
the set of vertices of G.
b. The set of vertices in this graph is t1, 2, 3, 4, 5, 6u.
‚ô¶
If a graph is a functor GrIn √ë Set, what is a graph homomorphism?
Example
5.3.1.20 shows that graph homomorphisms are homomorphisms between functors, which
are called natural transformations. (Natural transformations are the highest-level struc-
ture in ordinary category theory.)
Example 5.2.1.23. Let SGrIn be the category depicted as follows:
SGrIn :‚Äú
A‚Äö
œÅ
*
src 
tgt 
V‚Äö
(5.9)
with the following composition formula:
œÅ Àù œÅ ‚Äú idA;
src Àù œÅ ‚Äú tgt;
and
tgt Àù œÅ ‚Äú src.
The idea here is that the morphism œÅ: A √ë A reverses arrows. The PED ArœÅ, œÅs ‚Äú Ar s
forces the fact that the reverse of the reverse of an arrow yields the original arrow. The
PEDs ArœÅ, srcs ‚Äú Artgts and ArœÅ, tgts ‚Äú Arsrcs force the fact that when we reverse an
arrow, its source and target switch roles.
This category SGrIn is the symmetric graph-indexing category. Just as any graph
can be understood as a functor GrIn √ë Set, where GrIn is the graph-indexing category
displayed in (5.8), any symmetric graph can be understood as a functor SGrIn √ë Set,
where SGrIn is the category drawn in (5.9). Given a functor G: SGrIn √ë Set, we
will have a set of arrows, a set of vertices, a source operation, a target operation, and a
reverse-direction operation (œÅ) that all behave as expected.
It is customary to draw the connections in a symmetric graph G as line segments
rather than arrows between vertices. However, a better heuristic is to think that each
connection between vertices in G consists of two arrows, one pointing in each direction.
Slogan 5.2.1.24.
In a symmetric graph, every arrow has an equal and opposite arrow.

250
CHAPTER 5. BASIC CATEGORY THEORY
Exercise 5.2.1.25.
Which of the following graphs are symmetric:
a. The graph G from (4.4)?
b. The graph G from Exercise 4.3.1.10?
c. The graph G1 from (4.7)?
d. The graph Loop from (4.17), i.e., the graph having exactly one vertex and one arrow?
e. The graph G from Exercise 5.2.1.11?
‚ô¶
Solution 5.2.1.25.
a. No, f has no inverse.
b. Yes.
c. No, y has no inverse (but close).
d. Yes.
e. Yes.
‚ô¶
Exercise 5.2.1.26.
Let GrIn be the graph-indexing category shown in (5.8), and let SGrIn be the
symmetric graph-indexing category displayed in (5.9).
a. How many functors are there of the form GrIn √ë SGrIn?
b. Is one more reasonable than the others? If so, call it i: GrIn √ë SGrIn, and write
how it acts on objects and morphisms.
c. Choose a functor i: GrIn √ë SGrIn, the most reasonable one, if such a thing exists.
seems most reasonable and call it i: GrIn √ë SGrIn. If a symmetric graph is a functor
S : SGrIn √ë Set, you can compose with i to get a functor S Àù i: GrIn √ë Set. This
is a graph; what graph is it? What has changed?
‚ô¶

5.2. COMMON CATEGORIES AND FUNCTORS FROM PURE MATH
251
Solution 5.2.1.26.
a. There are 9. We could send both objects of GrIn to A P ObpSGrInq: there are four
of these. We could send both objects of GrIn to V P ObpSGrInq: there is one of
these. Or we could send Ar √û√ë A and V e √û√ë V : there are four of these.
b. The most reasonable one is the inclusion that preserves names as well as possible:
Ar √û√ë A;
Ve √û√ë V ;
src √û√ë src;
tgt √û√ë tgt.
Let‚Äôs call this i: GrIn √ë SGrIn.
c. It is basically S again, except now we are considering it as a graph rather than as
a symmetric graph. It is still symmetric, but it is interacting in the context of mere
graphs.
The inclusion i: GrIn √ë SGrIn of the graph-indexing category into the
symmetric-graph-indexing category has something to do with forgetful functors. (See
Remark 5.1.2.7 and Section 7.1.4.2.)
‚ô¶
Example 5.2.1.27. Let C be a category, and consider the set of isomorphisms in C. Each
isomorphism f : c √ë c1 in C has an inverse as well as a domain (c) and a codomain (c1).
Thus we can build a symmetric graph IpCq: SGrIn √ë Set. Its vertices are the objects
in C, and its arrows are the isomorphisms in C.
5.2.2
Database schemas present categories
Recall from DeÔ¨Ånition 4.5.2.7 that a database schema (or schema, for short) consists of
a graph together with a certain kind of equivalence relation, namely a congruence, on its
paths. Section 5.4.1 deÔ¨Ånes a category Sch that has schemas as objects and appropriately
modiÔ¨Åed graph homomorphisms as morphisms. Section 5.4.2 proves that the category of
schemas is equivalent (in the sense of DeÔ¨Ånition 5.3.4.1) to the category of categories,
Sch ¬ª Cat.
The diÔ¨Äerence between schemas and categories is like the diÔ¨Äerence between monoid
presentations, given by generators and relations as in DeÔ¨Ånition 4.1.1.19, and the monoids
themselves. The same monoid has (inÔ¨Ånitely) many diÔ¨Äerent presentations, and so it is for
categories: many diÔ¨Äerent schemas can present the same category. Computer scientists
may think of the schema as syntax and the category it presents as the corresponding
semantics. A schema is a compact form and can be speciÔ¨Åed in Ô¨Ånite space and time,
whereas the category it generates can be inÔ¨Ånite.

252
CHAPTER 5. BASIC CATEGORY THEORY
Slogan 5.2.2.1.
A database schema is a category presentation.
Section 5.4.2 formally shows how to turn a schema into a category (the category
it presents). For now, it seems better not to be so formal, because the idea is fairly
straightforward. Suppose given a schema S, which consists of a graph G ‚Äú pV, A, src, tgtq
equipped with a congruence ‚Äû (see DeÔ¨Ånition 4.5.2.3). It presents a category C deÔ¨Åned
as follows. The set of objects in C is deÔ¨Åned to be the vertices V ; the set of morphisms
in C is deÔ¨Åned to be the quotient PathspGq{ ‚Äû; and the composition formula is given
by concatenation of paths. The path equivalences making up ‚Äû become commutative
diagrams in C.
Example 5.2.2.2. The following schema Loop has no path equivalence declarations. As a
graph it has one vertex and one arrow.
Loop :‚Äú
s‚Äö
f
K
The category it generates, however, is the free monoid on one generator, N. It has one
object s, but a morphism f n : s √ë s for every natural number n P N, thought of as ‚Äúhow
many times to go around the loop f.‚Äù Clearly, the schema is more compact than the
inÔ¨Ånite category it generates.
Exercise 5.2.2.3.
Consider the olog from Exercise 4.5.2.19, which says that for any father x, his youngest
child‚Äôs father is x and his tallest child‚Äôs father is x. It is redrawn here as a schema S,
which includes the desired path equivalence declarations, F rt, fs ‚Äú F r s and F ry, fs ‚Äú F r s.
C‚Äö
f
 F‚Äö
y
%
t
$
How many morphisms are there (total) in the category presented by S?
‚ô¶
Solution 5.2.2.3.
There are seven. Let S be the category presented by S. We have
HomSpF, Fq ‚Äú tF r su;
HomSpF, Cq ‚Äú tF rts,
F rysu;
HomSpC, Fq ‚Äú tCrfsu;
HomSpC, Cq ‚Äú tCr s,
Crf, ts,
Crf, ysu.

5.2. COMMON CATEGORIES AND FUNCTORS FROM PURE MATH
253
Given a child, the three morphisms C √ë C respectively return the child herself, her tallest
sibling (technically, her father‚Äôs tallest child), and her youngest sibling (technically, her
father‚Äôs youngest child).
‚ô¶
Exercise 5.2.2.4.
Suppose that G is a graph and that G is the schema generated by G with no PEDs.
What is the relationship between the category generated by G and the free category
FpGq P ObpCatq, as deÔ¨Åned in Example 5.1.2.33?
‚ô¶
Solution 5.2.2.4.
These are the same category.
‚ô¶
Exercise 5.2.2.5.
Let C ‚Äú pG, ¬ªq be a schema. A leaf table is an object c P ObpCq with no outgoing
arrows.
a. Express the condition of being a leaf table mathematically in three diÔ¨Äerent languages:
that of graphs (using symbols V, A, src, tgt), that of categories (using HomC, etc.), and
that of tables (in terms of columns, tables, rows, etc.).
b. In the language of categories, is there a diÔ¨Äerence between a terminal object and a leaf
table? Explain.
‚ô¶
Solution 5.2.2.5.
a. Graphs: A leaf vertex is a vertex v P V with no outgoing arrows, that is, one for
which there is no arrow a P A with srcpaq ‚Äú v.
Categories: A leaf object is an object c P ObpCq such that for all d P ObpCq, we have
HomCpc, dq ‚Äú
#
H
if c ‚Ä∞ d,
tidcu
if c ‚Äú d.
Tables: A leaf table is a table with only one column, namely, the ID column.
b. There is a big diÔ¨Äerence. An object c can be a leaf object and not a terminal object,
e.g., in the discrete category Discptc, duq. And an object c can be a terminal object
and not a leaf object, e.g., in the father-child category of Exercise 5.2.2.3 the object
F is terminal.
‚ô¶

254
CHAPTER 5. BASIC CATEGORY THEORY
5.2.2.6
Instances on a schema C
If schemas are like categories, what are instances? Recall that an instance I on a schema
S ‚Äú pG, ¬ªq assigns to each vertex v in G a set of rows, say, Ipvq P ObpSetq. And to every
arrow a: v √ë v1 in G the instance assigns a function Ipaq: Ipvq √ë Ipv1q. The rule is that
given two equivalent paths, their compositions must give the same function. Concisely,
an instance is a functor I : S √ë Set.
Example 5.2.2.7. We have seen that a monoid is just a category M with one object and
that a monoid action is a functor M √ë Set. With database schemas as categories, M is
a schema, and so an action becomes an instance of that schema. The monoid action table
from Example 4.1.3.1 was simply a manifestation of the database instance according to
the Rules 4.5.2.9.
Exercise 5.2.2.8.
Section 5.2.1.21 discussed how each graph is a functor GrIn √ë Set for the graph-
indexing category depicted here:
GrIn :‚Äú
Ar‚Äö
src 
tgt 
Ve‚Äö
But now we know that if a graph is a set-valued functor, then we can consider GrIn as
a database schema.
a. How many tables, and how many foreign key columns of each should there be (if
unsure, consult Rules 4.5.2.9)?
b. Write the table view of graph G from Example 4.3.3.3.
‚ô¶
Solution 5.2.2.8.
a. Two tables, with two and zero foreign key columns respectively; see part (b).

5.2. COMMON CATEGORIES AND FUNCTORS FROM PURE MATH
255
b.
Ar
ID
src
tgt
a
1
2
b
2
3
c
1
4
d
1
4
e
5
6
V e
ID
1
2
3
4
5
6
‚ô¶
5.2.3
Spaces
Category theory was invented for use in algebraic topology, and in particular, to discuss
natural transformations between certain functors. Section 5.3 discusses natural transfor-
mations more formally. It suÔ¨Éces now to say a natural transformation is some kind of
morphism between functors. In the original use, Eilenberg and Mac Lane were interested
in functors that connect topological spaces (e.g., shapes such as spheres) to algebraic
systems (e.g., groups).
For example, there is a functor that assigns to each space X its group œÄ1pXq of round-
trip voyages (starting and ending at some chosen point x P X), modulo some equivalence
relation. There is another functor that assigns to every space its group HZ1pXq of ways
to drop some (positive or negative) number of circles on X.
These two functors, œÄ1 and HZ1 are related, but they are not equal. For example,
when X is the Ô¨Ågure-8 space (two circles joined at a point) the group œÄ1pXq is much
bigger than the group HZ1pXq.
Indeed, œÄ1pXq includes information about the order
and direction of loops traveled during the voyage, whereas the group HZ1pXq includes
only information about how many times one goes around each loop. However, there is a
natural transformation of functors œÄ1 √ë HZ1, called the Hurewicz transformation, which
takes œÄ1‚Äôs voyage, counts how many times it went around each loop, and delivers that
information to HZ1.
Example 5.2.3.1. Given a set X, recall that PpXq denotes the preorder of subsets of X.
A topology on X is a choice of which subsets U P PpXq will be called open sets. To be
a topology, these open sets must follow two rules. Namely, the union of any number of
open sets must be considered to be an open set, and the intersection of any Ô¨Ånite number
of open sets must be considered open. One could say succinctly that a topology on X is
a suborder OpenpXq ƒé PpXq that is closed under taking Ô¨Ånite meets and inÔ¨Ånite joins.

256
CHAPTER 5. BASIC CATEGORY THEORY
A topological space is a pair pX, OpenpXqq, where X is a set and OpenpXq is a topology
on X. The elements of the set X are called points. A morphism of topological spaces (also
called a continuous map) is a function f : X √ë Y such that for every V P OpenpY q, the
preimage f ¬¥1pV q P PpXq is actually in OpenpXq, that is, such that there exists a dashed
arrow making the following diagram commute:
OpenpY q


OpenpXq

PpY q
f ¬¥1
 PpXq.
The category of topological spaces, denoted Top, is the category having the preceding
objects and morphisms.
Exercise 5.2.3.2.
a. Explain how looking at points gives a functor Top √ë Set.
b. Does looking at open sets give a functor Top √ë PrO?
‚ô¶
Solution 5.2.3.2.
a. A topological space pX, OpenpXqq includes a set X P ObpSetq of points. A morphism
pX, OpenpXqq √ë pY, OpenpY qq of spaces includes a function X √ë Y . Thus we have a
functor Top √ë Set, because the identity morphisms and compositions of morphisms
in Top are sent to their counterparts in Set.
b. No. A morphism pX, OpenpXqq √ë pY, OpenpY qq includes a preorder morphism in the
direction OpenpY q √ë OpenpXq, not the other way around. DeÔ¨Ånition 6.2.1.1 shows
that every category C has an opposite category Cop. Looking at open sets does give a
functor Open: Topop √ë PrO.
‚ô¶
Example 5.2.3.3 (Continuous dynamical systems). The set R can be given a topology in
a standard way.7 But pR, 0, `q is also a monoid. Moreover, for every x P R, the monoid
7The topology is given by saying that U ƒé R is open iÔ¨Äfor every x P U, there exists œµ ƒÖ 0 such that
ty P R | |y ¬¥ x| ƒÉ œµu ƒé Uu. One says, ‚ÄúU ƒé R is open if every point in U has an epsilon-neighborhood
fully contained in U.‚Äù

5.2. COMMON CATEGORIES AND FUNCTORS FROM PURE MATH
257
operation `: R ÀÜ R √ë R is continuous.8 So we say that R :‚Äú pR, 0, `q is a topological
monoid, or that it is a monoid enriched in topological spaces.
Recall from Section 5.2.1.1 that an action of R is a functor R √ë Set. Imagine a
functor a: R √ë Top. Since R is a category with one object, this amounts to an object
X P ObpTopq, a space. And for every real number t P R, we obtain a continuous map
aptq: X √ë X. Further we can ask this aptq to vary continuously as t moves around in
R. If we consider X as the set of states of some system and R as the time line, we have
modeled what is called a continuous dynamical system.
Example 5.2.3.4. Recall (see Axler [3]) that a real vector space is a set X, elements of which
are called vectors, which is closed under addition and scalar multiplication. For example,
R3 is a vector space. A linear transformation f from X to Y is a function f : X √ë Y that
appropriately preserves addition and scalar multiplication. The category of real vector
spaces, denoted VectR, has as objects the real vector spaces and as morphisms the linear
transformations.
There is a functor VectR √ë Grp sending a vector space to its underlying group of
vectors, where the group operation is addition of vectors and the group identity is the
0-vector.
Exercise 5.2.3.5.
Every vector space has vector subspaces, ordered by inclusion (the origin is inside of
any line that is inside of certain planes, and all are inside of the whole space V ). If you
know about this topic, answer the following questions.
a. Does a linear transformation V √ë V 1 induce a morphism of these orders? In other
words, is there a functor subspaces: VectR √ë PrO?
b. Would you guess that there is a nice functor VectR √ë Top? By ‚Äúnice functor‚Äù I
mean a substantive one. For example, there is a functor VectR √ë Top that sends
every vector space to the empty topological space; if someone asked for a functor
VectR √ë Top for their birthday, this functor would make them sad. Give a functor
VectR √ë Top that would make them happy.
‚ô¶
Solution 5.2.3.5.
a. Yes. If A ƒé B are subspaces of V and f : V √ë V 1 is a linear transformation, then
TpAq ƒé TpBq.
8The topology on R ÀÜ R is similar; a subset U ƒé R ÀÜ R is open if every point x P U has an epsilon-
neighborhood (a disk around x of some positive radius) fully contained in U.

258
CHAPTER 5. BASIC CATEGORY THEORY
b. Yes. Send a vector space Rn to the topological space Rn. Every linear transformation
will induce a continuous map.
‚ô¶
There is a functor | ¬® |: VectR √ë Set sending every vector space X to its set |X| of
vectors. A categorically nice way to understand this functor is as HomVectRpR, ¬¥q, which
sends X to the set of linear transformations R √ë X. Each linear transformation R √ë X
is completely determined by where it sends 1 P R, which can be any vector in X. Thus
we get the bijection |X| ‚Äì HomVectRpR, Xq.
Exercise 5.2.3.6.
Suppose we think of VectR as a database schema, and we think of | ¬® |: VectR √ë Set
as an instance (see Section 4.5). Of course, the schema and the instance are both inÔ¨Ånite,
but let‚Äôs not worry about that.
a. Pick two objects x, y and two morphisms f, g: x √ë y from VectR, actual vector spaces
and linear transformations, and call this your subschema. Draw it as dots and arrows.
b. Write four rows in each table of the instance | ¬® | on your subschema.
‚ô¶
Solution 5.2.3.6.
a.
R3
‚Äö
¬®
Àù 2
2
0
1
1
2
Àõ
‚Äö

¬®
Àù ¬¥2
1
3
¬¥1
2
2
Àõ
‚Äö

R2
‚Äö
b.
R3
ID
ÀÜ
2
2
0
1
1
2
Àô
ÀÜ
¬¥2
1
3
¬¥1
2
2
Àô
p0, 0, 0q
p0, 0q
p0, 0q
p0, 2, 3q
p4, 8q
p11, 10q
p¬¥1, 2, 1q
p2, 3q
p7, 7q
p2, 0, 1.5q
p4, 5q
p.5, 1q
...
...
...
R2
ID
p0, 0q
p4, 8q
p2, 3q
p4, 5q
p.5, 1q
...
‚ô¶

5.2. COMMON CATEGORIES AND FUNCTORS FROM PURE MATH
259
5.2.3.7
Groupoids
Groupoids are like groups except a groupoid can have more than one object.
DeÔ¨Ånition 5.2.3.8. A groupoid is a category C such that every morphism is an isomor-
phism. If C and D are groupoids, a morphism of groupoids, denoted F : C √ë D, is simply
a functor. The category of groupoids is denoted Grpd.
Example 5.2.3.9. There is a functor Grpd √ë Cat, sending a groupoid to its underlying
category. There is also a functor Grp √ë Grpd sending a group to itself as a groupoid
with one object.
There is also a functor Core: Cat √ë Grpd, sending a category C to the largest
groupoid inside C, called its core. That is, ObpCorepCqq ‚Äú ObpCq and
HomCorepCqpx, yq ‚Äú tf P HomCpx, yq | f is an isomorphismu.
Application 5.2.3.10. Let M be a material in some original state s0.9 Construct a category
SM whose objects are the states of M (which are obtained by pulling on M in diÔ¨Äerent
ways, heating it up, and so on). Include a morphism from state s to state s1 for every
physical transformation from s to s1. Physical transformations can be performed one
after another, so we can compose morphisms, and perhaps we can agree this composition
is associative.
Note that there is a morphism is : s0 √ë s representing any physical
transformation that can bring M from its initial state s0 to s.
The elastic deformation region of the material is the set of states s such that there
exists an inverse s √ë s0 to the morphism is.
A transformation is irreversible if its
representing morphism has no inverse. If a state s1 is not in the elastic deformation
region, we can still talk about the region that is (inventing a term) elastically equivalent
to s1. It is all the objects in SM that are isomorphic to s1. If we consider only elastic
equivalences in SM, we are looking at a groupoid inside it, namely, the core CorepSMq,
as in Example 5.2.3.9.
‚ô¶‚ô¶
Example 5.2.3.11. Alan Weinstein [45] explains groupoids in terms of tiling patterns on
a bathroom Ô¨Çoor. This is worth reading.
Example 5.2.3.12. Let I ‚Äú tx P R | 0 ƒè x ƒè 1u denote the unit interval. It can be given
a topology in a standard way, as a subset of R (see Example 5.2.3.3).
For any topological space X, a path in X is a continuous map I √ë X. Two paths are
called homotopic if one can be continuously deformed to the other, where the deformation
9This example may be somewhat crude, in accordance with the crudeness of my understanding of
materials science.

260
CHAPTER 5. BASIC CATEGORY THEORY
occurs completely within X.10 One can prove that being homotopic is an equivalence
relation on paths.
Paths in X can be composed, one after the other, and the composition is associative
(up to homotopy). Moreover, for any point x P X, there is a trivial path (that stays at
x). Finally every path is invertible (by traversing it backward) up to homotopy.
This all means that to any space X P ObpTopq we can associate a groupoid, called
the fundamental groupoid of X and denoted Œ†1pXq P ObpGrpdq. The objects of Œ†1pXq
are the points of X; the morphisms in Œ†1pXq are the paths in X (up to homotopy). A
continuous map f : X √ë Y can be composed with any path I √ë X to give a path I √ë Y ,
and this preserves homotopy. So, in fact, Œ†1 : Top √ë Grpd is a functor.
Exercise 5.2.3.13.
Let T denote the surface of a doughnut, i.e., a torus. Choose two points p, q P T.
Since Œ†1pTq is a groupoid, it is also a category. What would the hom-set HomŒ†1pT qpp, qq
represent?
‚ô¶
Solution 5.2.3.13.
The set HomŒ†1pT qpp, qq represents the set of (equivalence classes of) paths from p to
q, where two are considered equivalent if one can be deformed to the other.
In a course in algebraic topology, one proves that there is a bijection HomŒ†1pT qpp, qq ‚Äì
Z ÀÜ Z. This means that in drawing a line from p to q in T, one can wrap around the
tight circle or the center hole any number of times (clockwise or counterclockwise), and
the order does not matter.
‚ô¶
Exercise 5.2.3.14.
Let U ƒé R2 be an open subset of the plane, and let F be an irrotational vector Ô¨Åeld
on U (i.e., one with curlpFq ‚Äú 0). Following Exercise 5.1.1.17, we have a category CF . If
two curves C, C1 in U are homotopic, then they have the same line integral,
≈ü
C F ‚Äú
≈ü
C1 F.
We also have a category Œ†1U, given by the fundamental groupoid, as in Example
5.2.3.12. Both categories have the same objects, ObpCF q ‚Äú |U| ‚Äú ObpŒ†1Uq, the set of
points in U.
10 Let I ÀÜ I ‚Äú tpx, yq P R2 | 0 ƒè x ƒè 1 and 0 ƒè y ƒè 1u denote the square. There are two inclusions
i0, i1 : I √ë S that put the interval inside the square at the left and right sides. Two paths f0, f1 : I √ë X
are homotopic if there exists a continuous map f : I ÀÜ I √ë X such that f0 ‚Äú f Àù i0 and f1 ‚Äú f Àù i1,
I
i1

i0  I ÀÜ I
f
 X

5.2. COMMON CATEGORIES AND FUNCTORS FROM PURE MATH
261
a. Is there a functor CF
?√ù√ë Œ†1U or a functor Œ†1U
?√ù√ë CF that is identity on the underlying
objects?
b. Let C1
F ƒé CF denote the subcategory with the same objects but only those morphisms
corresponding to curves C with
≈ü
C F ‚Äú 0. Is C1
F a groupoid?
c. If F is a conservative vector Ô¨Åeld, what is CF ?
d. If F is a conservative vector Ô¨Åeld, how does CF compare with Œ†1U?
‚ô¶
Solution 5.2.3.14.
a. There is not a functor CF
?√ù√ë Œ†1U that is identity on objects, in general; the rough
idea is that two nonhomotopic paths may have the same line integral. But there is
a functor Œ†1U √ë CF that is identity on objects, and that sends a homotopy class of
paths to its equivalence class modulo line integral.
b. Yes. Let C be a curve, and let ¬¥C denote its negative, i.e., if C : r0, 1s √ë U, then ¬¥C
is the result of composing C with the function px √û√ë 1 ¬¥ xq: r0, 1s √ë r0, 1s. It is easy
to check that concatenating C and ¬¥C is homotopic to the constant path at Cp0q.
Therefore, since
≈ü
C‚Äπ¬¥C F ‚Äú 0, it follows that
≈ü
C F ‚Äú 0 if and only if
≈ü
¬¥C F ‚Äú 0. Now
we see that every morphism in C1
F is invertible, i.e., C1
F is a groupoid.
c. If F is conservative, then the line integral
≈ü
C F is independent of path, so for every
x, y P U ‚Äú ObpCq, there is exactly one morphism x √ë y if there is a path from x to y,
and no morphisms x √ë y if there is no path between them.
d. One somewhat roundabout way to describe the relationship is via preorders. Recall
the functors R: Cat √ë PrO and i: PrO √ë Cat from Propositions 5.2.1.20 and
5.2.1.13. If F is conservative, we have CF ‚Äú i Àù RpŒ†1Uq. In other words, since every
path (morphism in Œ†1U) induces the same value for its line-integral, CF is obtained
by destroying all information in Œ†1U except whether or not a path exists between two
points.
‚ô¶
Exercise 5.2.3.15.
Consider the set A of all (well-formed) arithmetic expressions that can be written
with the symbols
t0, 1, 2, 3, 4, 5, 6, 7, 8, 9, `, ¬¥, Àö, p, qu.

262
CHAPTER 5. BASIC CATEGORY THEORY
For example, here are four diÔ¨Äerent elements of A:
52,
52 ¬¥ 7,
45 ` 0,
50 ` 3 Àö p6 ¬¥ 2q.
We can say that an equivalence between two arithmetic expressions is a justiÔ¨Åcation that
they give the same Ô¨Ånal answer, e.g., 52 ` 60 is equivalent to 10 Àö p5 ` 6q ` p2 ` 0q, which
is equivalent to 10 Àö 11 ` 2.
a. I have basically described a category G.
What are its objects, and what are its
morphisms?
b. Is G a groupoid?
‚ô¶
Solution 5.2.3.15.
a. Its objects are the well-formed arithmetic expressions, ObpGq ‚Äú A.
A morphism
f : a √ë a1 is a justiÔ¨Åcation that they give the same Ô¨Ånal answer. The identity morphism
ida for a is the empty justiÔ¨Åcation that a ‚Äú a, and composition of morphisms is given
by concatenating justiÔ¨Åcations. Now G has been deÔ¨Åned as a category.
b. It does not appear to be a groupoid. The idea that it should be a groupoid would come
from the belief that every justiÔ¨Åcation for a ‚Äú a1 would have an inverse justiÔ¨Åcation
for a1 ‚Äú a.
But when we concatenate these justiÔ¨Åcations, is the result the empty
justiÔ¨Åcation? No, at least not as deÔ¨Åned so far. Perhaps there is a way to make such
a forward-then-backward justiÔ¨Åcation equivalent to the empty justiÔ¨Åcation, but this
would take some thinking, and G as deÔ¨Åned is not a groupoid.
‚ô¶
5.2.4
Logic, set theory, and computer science
5.2.4.1
The category of propositions
Given a domain of discourse, a logical proposition is a statement that is evaluated in
any model of that domain as either true or not always true, which the black-and-white
thinker might dub ‚Äúfalse.‚Äù For example, in the domain of real numbers we might have the
proposition
For any real number x P R, there exists a real number y P R such that y ƒÖ 3x.
That is true: for x ‚Äú 22, we can oÔ¨Äer y ‚Äú 100. But the following proposition is not true:

5.2. COMMON CATEGORIES AND FUNCTORS FROM PURE MATH
263
Every integer x P Z is divisible by 2 or 3.
It is true for the majority of integers, but not for all integers; thus it is dubbed false.
We say that one logical proposition P implies another proposition Q, denoted P √± Q,
if for every model in which P is true, so is Q. There is a category Prop whose objects are
logical propositions and whose morphisms are proofs that one statement implies another.
Crudely, one might say that B holds at least as often as A if there is a morphism A √ë B
(meaning in any model for which A holds, so does B). So the proposition ‚Äúx ‚Ä∞ x‚Äù holds
very seldom, and the proposition ‚Äúx ‚Äú x‚Äù holds very often.
Example 5.2.4.2. We can repeat this idea for nonmathematical statements. Take the set
of all possible statements that are veriÔ¨Åable by experiment as the objects of a category.
Given two such statements, it may be that one implies the other (e.g., ‚ÄúIf the speed of
light is Ô¨Åxed, then there are relativistic eÔ¨Äects‚Äù). Every statement implies itself (identity)
and implication is transitive, so we have a category.
Let‚Äôs consider diÔ¨Äerences in proofs to be irrelevant, in which case the category Prop
is simply a preorder pProp, √±q: either A implies B or it does not. Then it makes sense
to discuss meets and joins. It turns out that meets are ‚Äúand‚Äôs,‚Äù and joins are ‚Äúor‚Äôs.‚Äù That
is, given propositions A, B, the meet A ^ B is deÔ¨Åned to be a proposition that holds as
often as possible subject to the constraint that it implies both A and B; the proposition
‚ÄúA holds and B holds‚Äù Ô¨Åts the bill. Similarly, the join A _ B is given by ‚ÄúA holds or B
holds.‚Äù
Exercise 5.2.4.3.
Consider the set of possible laws (most likely an inÔ¨Ånite set) that can be dictated
to hold throughout a jurisdiction. Consider each law as a proposition (‚Äúsuch and such
is the case‚Äù), i.e., as an object of the preorder Prop. Given a jurisdiction V , and a
set of laws t‚Ñì1, ‚Ñì2, . . . , ‚Ñìnu that are dictated to hold throughout V , we take their meet
LpV q :‚Äú ‚Ñì1 ^ ‚Ñì2 ^ ¬® ¬® ¬® ^ ‚Ñìn and consider it to be the single law of the land V . Suppose
that V is a jurisdiction and U is a subjurisdiction (e.g., U is a county and V is a state);
write U ƒé V . Then any law dictated by the large jurisdiction (the state) must also hold
throughout the small jurisdiction (the county). Let J be the set of jurisdictions, so that
pJ, ƒéq is a preorder.
a. If V ƒé U are jurisdictions, what is the relation in Prop between LpUq and LpV q?
b. Consider the preorder pJ, ƒéq of jurisdictions. Is the law of the land a morphism of
preorders J √ë Prop? That is, considering both J and Prop to be categories (by
Proposition 5.2.1.13), we have a function L: ObpJq √ë ObpPropq; does L extend to a
functor J √ë Prop.
‚ô¶

264
CHAPTER 5. BASIC CATEGORY THEORY
Solution 5.2.4.3.
This exercise is strangely tricky, so we go through it slowly.
a. Suppose that the proposition LpV q is true, i.e., we are in a model where all V ‚Äôs laws
are being followed. Does this imply that LpUq is true? Since V ƒé U, every law of U
is a law of V (e.g., if one may not own slaves anywhere in the United States, one may
not own slaves in Maine). So indeed LpUq is true; thus we have LpV q √± LpUq.
b. Yes, L extends to a preorder morphism L: J √ë Prop because if V ƒé U, then LpV q √±
LpUq.
‚ô¶
Exercise 5.2.4.4.
Take again the preorder pJ, ƒéq of jurisdictions from Exercise 5.2.4.3 and the idea that
laws are propositions. But this time, let RpV q be the set of all possible laws (not just
those dictated to hold) that are, in actuality, being respected, i.e., followed, by all people
in V . This assigns to each jurisdiction a set. Does the ‚Äúset of respected laws‚Äù function
R: ObpJq √ë ObpSetq extend to a functor J √ë Set?
‚ô¶
Solution 5.2.4.4.
If V ƒé U, then any law respected throughout U is respected throughout V , i.e.,
RpUq ƒé RpV q. In other words, R is contravariant (see Section 6.2.1), meaning it consti-
tutes a functor R: Jop √ë Set. (Every law is being respected throughout the jurisdiction
H, and physicists want to know what laws are being respected throughout the universe-
as-jurisdiction.)
‚ô¶
5.2.4.5
A categorical characterization of Set
The category Set of sets is fundamental in mathematics, but instead of thinking of it
as something given or somehow special, it can be shown to merely be a category with
certain properties, each of which can be phrased purely categorically. This was shown by
Lawvere [23]. A very readable account is given in [26].
5.2.4.6
Categories in computer science
Computer science makes heavy use of trees, graphs, orders, lists, and monoids. All of these
can be understood in the context of category theory, although it seems the categorical
interpretation is rarely mentioned explicitly in computer science textbooks. However,

5.2. COMMON CATEGORIES AND FUNCTORS FROM PURE MATH
265
categories are used explicitly in the theory of programming languages (PL). Researchers
in that Ô¨Åeld attempt to understand the connection between what programs are supposed
to do (their denotation) and what they actually cause to occur (their operation). Category
theory provides a useful mathematical formalism in which to study this.
The kind of category most often considered by a PL researcher is known as a Carte-
sian closed category, or CCC, which means a category T that has products (like A ÀÜ B
in Set) and exponential objects (like BA in Set).
So Set is an example of a CCC,
but there are others that are more appropriate for actual computation.
The objects
in a PL person‚Äôs CCC represent the types of the programming language, types such
as integers, strings, floats. The morphisms represent computable functions, e.g.,
length:
strings√ù√ëintegers. The products allow one to discuss pairs pa, bq, where a
is of one type and b is of another type. Exponential objects allow one to consider com-
putable functions as things that can be input to a function (e.g., given any computable
function floats√ëintegers, one can consistently multiply its results by 2 and get a new
computable function floats√ëintegers). Products are studied in Section 6.1.1.8 and
exponential objects in Section 5.3.2.
But category theory does not only oÔ¨Äer a language for thinking about programs, it
oÔ¨Äers an unexpected tool called monads. The CCC model for types allows researchers
only to discuss functions, leading to the notion of functional programming languages;
however, not all things that a computer does are functions. For example, reading input
and output, changing internal state, and so on, are operations that can be performed on
a computer but that ruin the functional aspect of programs. Monads were found in 1991
by Moggi [33] to provide a powerful abstraction that opens the doors to such nonfunction
operations without forcing the developer to leave the category-theoretic paradise. Monads
are discussed in Section 7.3.
Section 5.2.2 showed that databases are well captured by the language of categories
(this is formalized in Section 5.4). Databases are used in this book to bring clarity to
concepts within standard category theory.
5.2.5
Categories applied in science
Categories are used throughout mathematics to relate various subjects as well as to draw
out the essential structures within these subjects. For example, there is active research
in categorifying classical theories like that of knots, links, and braids (Khovanov [21]).
It is similarly applied in science to clarify complex subjects. Here are some very brief
descriptions of scientiÔ¨Åc disciplines to which category theory is applied.
Quantum Ô¨Åeld theory was categoriÔ¨Åed by Atiyah [2] in the late 1980s, with much
success (at least in producing interesting mathematics).
In this domain, one takes a
category in which an object is a reasonable space, called a manifold, and a morphism is a

266
CHAPTER 5. BASIC CATEGORY THEORY
manifold connecting two manifolds, like a cylinder connecting two circles. Such connecting
manifolds are called cobordisms and the category of manifolds and cobordisms is denoted
Cob. Topological quantum Ô¨Åeld theory is the study of functors Cob √ë Vect that assign
a vector space to each manifold and a linear transformation of vector spaces to each
cobordism.
Samson Abramsky [1] showed a relationship between database theory, category theory,
and quantum physics. He used the notion of sheaves on a database (see Section 7.2.3) and
the sheaf cohomology thereof, to derive Bell‚Äôs theorem, which roughly states that certain
variables that can be observed locally do not extend to globally observable variables.
Information theory, invented in 1948 by Claude Shannon, is the study of how to
ideally compress messages so that they can be sent quickly and accurately across a noisy
channel.11 Its main quantity of interest is the number of bits necessary to encode a piece
of information. For example, the amount of information in an English sentence can be
greatly reduced. The fact that t‚Äôs are often followed by h‚Äôs, or that e‚Äôs are much more
common than z‚Äôs, implies that letters are not being used as eÔ¨Éciently as possible. The
amount of bits necessary to encode a message is called its entropy and has been linked to
the commonly used notion of the same name in physics.
Baez, Fritz, and Leinster [7] show that entropy can be captured quite cleanly using
category theory. They make a category FinProb whose objects are Ô¨Ånite sets equipped
with a probability measure, and whose morphisms are probability-preserving functions.
They characterize information loss as a way to assign numbers to such morphisms, subject
to certain explicit constraints. They then show that the entropy of an object in FinProb
is the amount of information lost under the unique map to the singleton set tu. This
approach explicates (by way of the explicit constraints for information loss functions) the
essential idea of Shannon‚Äôs information theory, allowing it to be generalized to categories
other than FinProb. Thus Baez and colleagues eÔ¨Äectively categoriÔ¨Åed information theory.
Robert Rosen proposed in the 1970s that category theory could play a major role in
biology. That is only now starting to be Ô¨Çeshed out. There is a categorical account of
11The discipline called information theory, invented by Claude Shannon, is concerned only with ideal
compression schemes. It does not pay attention to the content of the messages‚Äîwhat they mean‚Äîas
Shannon says speciÔ¨Åcally in his seminal paper: ‚ÄúFrequently the messages have meaning; that is they
refer to or are correlated according to some system with certain physical or conceptual entities. These
semantic aspects of communication are irrelevant to the engineering problem.‚Äù Thus I think the subject
is badly named. It should be called compression theory or redundancy theory.
Information is inherently meaningful‚Äîthat is its purpose‚Äîso a theory unconcerned with meaning is not
really studying information per se. (The people who decide on speed limits for roads and highways may
care about human health, but a study limited to understanding ideal speed limit schemes would not be
called ‚Äúhuman health theory.‚Äù)
Information theory is extremely important in a diverse array of Ô¨Åelds, including computer science [28],
neuroscience [5], [27], and physics [16]. I am not trying to denigrate the Ô¨Åeld; I only disagree with its
name.

5.3. NATURAL TRANSFORMATIONS
267
evolution and memory, called Memory Evolutive Systems [15]. There is also a paper [10]
by Brown and Porter with applications to neuroscience.
5.3
Natural transformations
The Big 3 of category theory are categories, functors, and natural transformations. This
section introduces the last of these, natural transformations. Category theory was orig-
inally invented to discuss natural transformations. These were suÔ¨Éciently conceptually
challenging that they required formalization and thus the invention of category theory.
If we think of categories as domains (e.g., of discourse, interaction, comparability) and
functors as translations between diÔ¨Äerent domains, the natural transformations compare
diÔ¨Äerent translations.
Natural transformations can seem a bit abstruse at Ô¨Årst, but hopefully some examples
and exercises may help.
5.3.1
DeÔ¨Ånition and examples
Let‚Äôs begin with an example. There is a functor List: Set √ë Set, which sends a set X to
the set ListpXq consisting of all lists whose entries are elements of X. Given a morphism
f : X √ë Y , we can transform a list with entries in X into a list with entries in Y by
applying f to each entry (see Exercise 5.1.2.22). Call this process translating the list.
It may seem a strange thing to contemplate, but there is also a functor ListÀùList: Set √ë
Set that sends a set X to the set of lists of lists in X. If X ‚Äú ta, b, cu, then ListÀùListpXq
contains elements like
‚Äú
ra, bs, ra, c, a, b, cs, rcs
‚Ä∞
and
‚Äú
r s
‚Ä∞
and
‚Äú
ras, r s, ra, a, as
‚Ä∞
. We can
naturally transform a list of lists into a list by concatenation. In other words, for any
set X there is a function ŒºX : List Àù ListpXq √ë ListpXq, which sends that list of lists to
ra, b, a, c, a, b, c, cs and r s and ra, a, a, as respectively. In fact, even if we use a function
f : X √ë Y to translate a list of X‚Äôs into a list of Y ‚Äôs (or a list of lists of X‚Äôs into a list
of lists of Y ‚Äôs), the concatenation works correctly.
Slogan 5.3.1.1.
What does it mean to say that concatenation of lists is natural with respect to
translation? It means that concatenating then translating is the same thing
as translating then concatenating.
Let‚Äôs make this concrete. Let X ‚Äú ta, b, cu, let Y ‚Äú t1, 2, 3u, and let f : X √ë Y assign
fpaq ‚Äú 1, fpbq ‚Äú 1, fpcq ‚Äú 2. The naturality condition says the following for any list of

268
CHAPTER 5. BASIC CATEGORY THEORY
lists of X‚Äôs, in particular, for
‚Äú
ra, bs, ra, c, a, b, cs, rcs
‚Ä∞
P List Àù ListpXq:
‚Äú
ra, bs, ra, c, a, b, cs, rcs
‚Ä∞
‚úì

ŒºX

_
ListÀùListpfq

ra, b, a, c, a, b, c, cs
_
Listpfq

‚Äú
r1, 1s, r1, 2, 1, 1, 2s, r2s
‚Ä∞ 
ŒºY
 r1, 1, 1, 2, 1, 1, 2, 2s
The top right path is concatenating then translating, and the left bottom path is trans-
lating then concatenating, and one sees here that they do the same thing.
Here is how the preceding example Ô¨Åts with the terminology of DeÔ¨Ånition 5.3.1.2. The
categories C and D are both Set, the functor F : C √ë D is List Àù List, and the functor
G: C √ë D is List. The natural transformation is Œº: ListÀùList √ë List. It can be depicted:
Set
ListÀùList

List
T
√≥Œº
Set
DeÔ¨Ånition 5.3.1.2. Let C and D be categories, and let F : C √ë D and G: C √ë D be
functors. A natural transformation Œ± from F to G, denoted Œ±: F √ë G and depicted
C
F

G
5
√≥Œ±
D,
is deÔ¨Åned as follows. One announces some constituents (A. components) and shows that
they conform to a law (1. naturality squares). SpeciÔ¨Åcally, one announces
A. for each object X P ObpCq, a morphism Œ±X : FpXq √ë GpXq in D, called the
X-component of Œ±.
One must then show that the following natural transformation law holds:
1. For every morphism f : X √ë Y in C, the square (5.10), called the naturality
square for f, must commute:
FpXq
‚úì
F pfq

Œ±X  GpXq
Gpfq

FpY q
Œ±Y
 GpY q
(5.10)

5.3. NATURAL TRANSFORMATIONS
269
The set of natural transformations F √ë G is denoted NatpF, Gq.
Remark 5.3.1.3. If we have two functors F, G: C √ë D, providing a morphism Œ±X : FpXq √ë
GpXq for every object X P ObpCq is called a questionably natural transformation. Once
we check the commutativity of all the naturality squares, i.e., once we know it satisÔ¨Åes
DeÔ¨Ånition 5.3.1.2, we drop the ‚Äúquestionably‚Äù part.
Example 5.3.1.4. Consider the following categories C ‚Äì r1s and D ‚Äì r2s:
C :‚Äú
0‚Äö
p
 1‚Äö
D :‚Äú
A‚Äö
f
 B‚Äö
g
 C‚Äö.
Consider the functors F, G: r1s √ë r2s, where Fp0q ‚Äú A, Fp1q ‚Äú B, Gp0q ‚Äú A, and
Gp1q ‚Äú C. It turns out that there is only one possible natural transformation F √ë G;
we call it Œ± and explore its naturality square. The components of Œ±: F √ë G are shown
in green. These components are Œ±0 ‚Äú idA : Fp0q √ë Gp0q and Œ±1 ‚Äú g: Fp1q √ë Gp1q. The
naturality square for p: 0 √ë 1 is shown twice below, once with notation following that in
(5.10) and once in local notation:
Fp0q
Œ±0 
F ppq

Gp0q
Gppq

Fp1q
Œ±1  Gp1q
A
idA 
f

A
gÀùf

B
g
 C
It is clear that this diagram commutes, so the components Œ±0 and Œ±1 satisfy the law of
DeÔ¨Ånition 5.3.1.2, making Œ± a natural transformation.
Proposition 5.3.1.5. Let C and D be categories, let F, G: C √ë D be functors, and for
every object c P ObpCq, let Œ±c : Fpcq √ë Gpcq be a morphism in D. Suppose given a path
c0
f1
√ù√ë c1
f2
√ù√ë ¬® ¬® ¬®
fn
√ù√ë cn such that for each arrow fi in it, the following naturality square
commutes:
Fpci¬¥1q
F pfiq

Œ±ci¬¥1  Gpci¬¥1q
Gpfiq

Fpciq
Œ±ci
 Gpciq

270
CHAPTER 5. BASIC CATEGORY THEORY
Then the naturality square for the composite p :‚Äú fn Àù ¬® ¬® ¬® Àù f2 Àù f1 : c0 √ë cn
Fpc0q
Œ±c0 
F ppq

Gpc0q
Gppq

Fpcnq
Œ±cn
 Gpcnq
also commutes. In particular, the naturality square commutes for every identity morphism
idc.
Proof. When n ‚Äú 0, we have a path of length 0 starting at each c P ObpCq. It vacuously
satisÔ¨Åes the condition, so we need to see that its naturality square
Fpcq
Œ±c

F pidcq

Gpcq
Gpidcq

Fpcq
Œ±c
 Gpcq
commutes. But this is clear because functors preserve identities.
The rest of the proof follows by induction on n. Suppose q ‚Äú fn¬¥1 Àù ¬® ¬® ¬® Àù f2 Àù f1 : c0 √ë
cn¬¥1 and p ‚Äú fn Àù q and that the naturality squares for q and for fn commute; we need
only show that the naturality square for p commutes. That is, we assume the two small
squares commute; it follows that the large rectangle does too, completing the proof.
Fpc0q
Œ±c0

F pqq

Gpc0q
Gpqq

Fpcn¬¥1q
Œ±cn¬¥1 
F pfnq

Gpcn¬¥1q
Gpfnq

Fpcnq
Œ±cn
 Gpcnq
‚ñ°
Example 5.3.1.6. Let C ‚Äú D ‚Äú r1s be the linear order of length 1, thought of as a
category (by Proposition 5.2.1.13). There are three functors C √ë D, which we can write

5.3. NATURAL TRANSFORMATIONS
271
as p0, 0q, p0, 1q, and p1, 1q; these are depicted left to right as follows:
0‚Äö 

f 
0‚Äö
f
0‚Äö 

f 
0‚Äö
f
0‚Äöz

f 
0‚Äö
f
1‚Äö
D
 
1‚Äö
1‚Äö 
 1‚Äö
1‚Äö 
 1‚Äö
These are just functors so far. What are the natural transformations say, Œ±: p0, 0q √ë
p0, 1q? To specify a natural transformation, we must specify a component for each object
in C. In this case Œ±0 : 0 √ë 0 and Œ±1 : 0 √ë 1. There is only one possible choice: Œ±0 ‚Äú id0
and Œ±1 ‚Äú f. Now that we have chosen components, we need to check the naturality
squares.
There are three morphisms in C, namely, id0, f, id1. By Proposition 5.3.1.5, we need
only check the naturality square for f. We write it twice, once in abstract notation and
once in concrete notation:
Fp0q
Œ±0 
F pfq

Gp0q
Gpfq

Fp1q
Œ±1  Gp1q
0
id0 
id0

0
f

0
f
 1
This commutes, so Œ± is indeed a natural transformation.
Exercise 5.3.1.7.
With notation as in Example 5.3.1.6, we have three functors C √ë D, namely, p0, 0q, p0, 1q,
and p1, 1q. How many natural transformations are there from F to G, i.e., what is the
cardinality of NatpF, Gq
a. when F ‚Äú p0, 0q and G ‚Äú p1, 1q?
b. when F ‚Äú p0, 0q and G ‚Äú p0, 0q?
c. when F ‚Äú p0, 1q and G ‚Äú p0, 0q?
d. when F ‚Äú p0, 1q and G ‚Äú p1, 1q?
‚ô¶
Solution 5.3.1.7.
What is a natural transformation Œ±: F √ë G? The idea is that for every object in C,
we need to move in D. This object needs to go from where F points it to where G points

272
CHAPTER 5. BASIC CATEGORY THEORY
it. In other words, for every object c P C, we need to pick a morphism Œ±c : Fpcq √ë Gpcq
called the c-component of Œ±.
There are two objects in C, namely, 0 and 1, so we need to choose two components.
Once we have chosen all these components, we need to check naturality. If it works, we
will have found a natural transformation.
a. We need morphisms Œ±0 : 0 √ë 1 and Œ±1 : 0 √ë 1. There is only one choice, Œ±0 ‚Äú Œ±1 ‚Äú f.
Is this natural? We now must go through every morphism in C and check that a certain
square commutes. There are three morphisms in C, namely, id0, id1, and f. But by
Proposition 5.3.1.5, the naturality squares for identities automatically commute. So
we just need to check the commutativity of the following left-hand square, which after
substituting the choices becomes the right-hand square:
Fp0q
Œ±0 
F pfq

Gp0q
Gpfq

Fp1q
Œ±1  Gp1q
0
f

id0

1
id1

0
f
 1
It commutes; hence there is one natural transformation p0, 0q √ë p1, 1q.
b. We need morphisms Œ±0 : 0 √ë 0 and Œ±1 : 0 √ë 0. There is only one choice, Œ±0 ‚Äú Œ±1 ‚Äú id0.
Again by Proposition 5.3.1.5, we only need to check the commutativity of the following
square, which is obvious. Thus there is one natural transformation p0, 0q √ë p0, 0q.
0
id0 
id0

0
id0

0
id0
 0
c. We need morphisms Œ±0 : 0 √ë 0 and Œ±1 : 1 √ë 0.
The latter is impossible because
HomDp1, 0q ‚Äú H. Hence there are no natural transformations p0, 1q √ë p0, 0q.
d. We need morphisms Œ±0 : 0 √ë 1 and Œ±1 : 1 √ë 1. There is only one choice, Œ±0 ‚Äú f and
Œ±1 ‚Äú id1. Again by Proposition 5.3.1.5, we only need to check the commutativity of
the following square, which is clear.
0
f

f

1
id1

1
id1
 1

5.3. NATURAL TRANSFORMATIONS
273
Thus there is one natural transformation p0, 1q √ë p1, 1q.
‚ô¶
Exercise 5.3.1.8.
Let 1 denote the discrete category on one object, Obp1q ‚Äú t1u, and let Loop denote the
category with one object ObpLoopq ‚Äú tsu and HomLoopps, sq ‚Äú N (see Example 5.2.2.2).
There is exactly one functor S : 1 √ë Loop. Characterize the natural transformations
Œ±: S √ë S.
‚ô¶
Solution 5.3.1.8.
Note that Sp1q ‚Äú s. We need to give just one component Œ±1 : s √ë s. Since we have
an isomorphism HomLoopps, sq
‚Äì
√ù√ë N, we just need to check for each natural number
n P N that the naturality square commutes. But since the only morphism in 1 is an
identity, it commutes regardless of n by Proposition 5.3.1.5. Thus there is a bijection
NatpS, Sq ‚Äì
√ù√ë N.
‚ô¶
Exercise 5.3.1.9.
Let r1s denote the free arrow category,
r1s ‚Äú
0‚Äö
f
√ù√ù√ù√ë
1‚Äö
as in Exercise 5.1.2.34, and let Loop be as in Example 5.2.2.2.
a. What are all the functors r1s √ë Loop?
b. For any two functors F, G: r1s √ë Loop, characterize the set NatpF, Gq of natural
transformations F √ë G.
‚ô¶
Solution 5.3.1.9.
a. To give a functor F : r1s √ë Loop we provide Fp0q, Fp1q P ObpLoopq and Fpfq: Fp0q √ë
Fp1q. The functor laws will invariably hold, basically because r1s is so simple, or more
precisely because it is the free category on a graph (see Example 5.1.2.33). And since
Loop has one object, we must have Fp0q ‚Äú Fp1q ‚Äú s, so choosing a functor r1s √ë Loop
amounts simply to choosing an element Fpfq P HomLoopps, sq ‚Äì N. In other words,
we have a bijection
HomCatpr1s, Loopq ‚Äì
√ù√ë N,
‚Äúhow many times should I wind around?‚Äù

274
CHAPTER 5. BASIC CATEGORY THEORY
b. Suppose given two functors F, G: r1s √ë Loop, which we can think of as winding
numbers nF , nG P N. To give a natural transformation Œ±: F √ë G, we need to give
components Œ±0, Œ±1 P HomLoopps, sq ‚Äì N. We can think of these as winding numbers
too; let‚Äôs call them n0, n1 P N respectively.
For the choices of components to be
natural, we require that this diagram commutes:
s
n0

nF

s
nG

s
n1
 s
This square commutes in Loop if and only if n0 ` nG ‚Äú nF ` n1 in N. Since nF and
nG are given, let N ‚Äú nG ¬¥ nF . There is a bijection
NatpF, Gq ‚Äì
√ù√ë tpn0, n1q P N ÀÜ N | n1 ¬¥ n0 ‚Äú Nu.
‚ô¶
Exercise 5.3.1.10.
Consider the functor List: Set √ë Set sending a set X to the set ListpXq of lists with
entries in X. There is a natural transformation ListÀùList √ë List given by concatenation.
a. If someone said, ‚ÄúSingleton lists give a natural transformation œÉ from idSet to List,‚Äù
what might she mean?
That is, for a set X, what component œÉX might she be
suggesting?
b. Do these components satisfy the necessary naturality squares for functions f : X √ë Y ?
In other words, given your interpretation of what the person is saying, is she correct?
‚ô¶
Solution 5.3.1.10.
a. She is certainly telling us about a natural transformation œÉ: idSet √ë List, and she
seems to be telling us about how its components work. Since this is a natural trans-
formation of functors Set √ë Set, to give components of œÉ is to provide, for each set
X, a function œÉX : idSetpXq √ë ListpXq, i.e., a function X √ë ListpXq. The person is
telling us that this function is given by singleton lists. We know what a singleton list
is: it looks something like r56s or ras. To give a function X √ë ListpXq, we need to
provide, for each x P X, a list of X‚Äôs. Then we see that singleton lists work: to each
x P X, let œÉXpxq ‚Äú rxs. We now have component œÉX.

5.3. NATURAL TRANSFORMATIONS
275
b. We need to check that for every function f : X √ë Y , the following square commutes:
X
œÉX 
f

ListpXq
Listpfq

Y
œÉY
 ListpY q
This is easy to check, once we recall the function Listpfq: ListpXq √ë ListpY q (see
beginning of Section 5.3.1).
‚ô¶
Exercise 5.3.1.11.
Let C and D be categories, and suppose that d P ObpDq is a terminal object. Consider
the constant functor tduC : C √ë D, which sends each object c P ObpCq to d and each
morphism in C to the identity morphism idd on d.
a. For any other functor F : C √ë D, how many natural transformations are there F √ë
tduC?
b. Let D ‚Äú Set, and let d ‚Äú tu, which is a terminal object in Set (see Exercise 3.2.3.5
or Warning 6.1.3.14). If C ‚Äú r1s is the linear order of length 1, and F : C √ë Set is any
functor, what does it mean to give a natural transformation tduC √ë F?
‚ô¶
Solution 5.3.1.11.
a. To give a natural transformation Œ±: F √ë tduC, one needs to provide a component
Œ±c : Fpcq √ë d for every c P ObpCq. But since d P ObpDq is terminal, there is exactly
one such morphism, denoted !F pcq : Fpcq √ë d. Thus there is exactly one questionably
natural transformation Œ±, and we must check that it is natural. For any f : c √ë c1 in
C, the square looks like this
Fpcq
!F pcq 
F pfq

d
idd

Fpc1q !F pc1q
 d
This may look complicated but in fact we are just asking whether two morphisms
Fpcq √ë d are the same; they surely are because d is terminal. Thus there is exactly
one natural transformation Œ±: F √ë tduC.

276
CHAPTER 5. BASIC CATEGORY THEORY
b. A functor F : r1s √ë Set can be identiÔ¨Åed with a morphism in Set, i.e., with a function
F : X0 √ë X1, for arbitrary sets X0, X1 P ObpSetq. To give a natural transformation
tduC √ë F is to give components Œ±0 : tu √ë X0 and Œ±1 : tu √ë X1 such that this
diagram commutes:
tu
Œ±0

id
tu

X0
F

tu
Œ±1
 X1
A function Œ±0 : tu √ë X0 can be identiÔ¨Åed with an element Œ±0 P X0, and similarly for
X1. Hence to give a natural transformation tduC √ë F is to give an element Œ±0 P X0,
an element Œ±1 P X1, such that FpŒ±0q ‚Äú Œ±1.
Going a bit further, if we pick Œ±0, we Ô¨Ånd that Œ±1 is forced on us. So it turns out that
there is a bijection Natptdu, Fq ‚Äì
√ù√ë X0, i.e., giving a natural transformation tduC √ë F
is the same as picking an element in the domain of the function corresponding to F.
‚ô¶
Application 5.3.1.12. Figure 4.2 showed a Ô¨Ånite state machine on alphabet Œ£ ‚Äú ta, bu,
and Example 4.1.3.1 shows its associated action table.
Imagine this was your model
for understanding the behavior of some system when acted on by commands a and b.
Suppose a colleague tells you he has a more reÔ¨Åned model that Ô¨Åts with the same data.
His model has six states rather than three, but it is compatible. What might that mean?
Both the original state machine, X, the proposed model, Y , and their associated
action tables are shown in Figure 5.1 (see page 314).
How are these models compatible? In the table for Y , if one removes the distinction
between states 1A, 1B, 1C and between states 2A and 2B, then one returns with the
table for X. The table for Y is more speciÔ¨Åc, but it is fully compatible with the table
for X. The sense in which it is compatible is precisely the sense deÔ¨Åned by there being a
natural transformation.
Recall that M ‚Äú pListpŒ£q, r s, ``q is a monoid, and that a monoid is simply a category
with one object, say, ObpMq ‚Äú t‚ñ≤u (see Section 5.2.1). With Œ£ ‚Äú ta, bu, the monoid M
can be visualized as follows:
M ‚Äú
‚ñ≤‚Äö
a

b
%
Recall also that a state machine on M is simply a functor M √ë Set. We thus have
two such functors, X and Y . A natural transformation Œ±: Y √ë X would consist of a
component Œ±m for every object m P ObpMq such that certain diagrams commute. But
M having only one object, we need only one function Œ±‚ñ≤: Y p‚ñ≤q √ë Xp‚ñ≤q, where Y p‚ñ≤q is
the set of (6) states of Y and Xp‚ñ≤q is the set of (3) states of X.

5.3. NATURAL TRANSFORMATIONS
277
The states of Y have been named so as to make the function Œ±‚ñ≤particularly easy to
guess.12 We need to check that two squares commute:
Y p‚ñ≤q
Œ±‚ñ≤
Y paq

Xp‚ñ≤q
Xpaq

Y p‚ñ≤q
Œ±‚ñ≤ Xp‚ñ≤q
Y p‚ñ≤q
Œ±‚ñ≤
Y pbq

Xp‚ñ≤q
Xpbq

Y p‚ñ≤q
Œ±‚ñ≤ Xp‚ñ≤q
(5.11)
This can only be checked by going through and making sure that certain things match,
as speciÔ¨Åed by (5.11); this is spelled out in detail. The columns that should match are
those whose entries are written in blue. These correspond to the left bottom composites
being matched with the top right composites in the naturality squares of (5.11).
Naturality square for a: ‚ñ≤√ë ‚ñ≤
Y p‚ñ≤q [ID]
Y paq
Œ±‚ñ≤Àù Y paq
Œ±‚ñ≤
Xpaq Àù Œ±‚ñ≤
State 0
State 1A
State 1
State 0
State 1
State 1A
State 2A
State 2
State 1
State 2
State 1B
State 2B
State 2
State 1
State 2
State 1C
State 2B
State 2
State 1
State 2
State 2A
State 0
State 0
State 2
State 0
State 2B
State 0
State 0
State 2
State 0
(5.12)
Naturality square for b: ‚ñ≤√ë ‚ñ≤
Y p‚ñ≤q [ID]
Y pbq
Œ±‚ñ≤Àù Y pbq
Œ±‚ñ≤
Xpbq Àù Œ±‚ñ≤
State 0
State 2A
State 2
State 0
State 2
State 1A
State 1B
State 1
State 1
State 1
State 1B
State 1C
State 1
State 1
State 1
State 1C
State 1B
State 1
State 1
State 1
State 2A
State 0
State 0
State 2
State 0
State 2B
State 0
State 0
State 2
State 0
(5.13)
To recap, scientists may often have the idea that two models Y and X are compatible,
and such notions of compatibility may be broadly agreed upon. However, these notions
can at the same time be challenging to explain to an outsider, e.g., a regulatory body or
auditor, especially in more complex situations. On the other hand, it is unambiguous to
12The function Œ±‚ñ≤: Y p‚ñ≤q √ë Xp‚ñ≤q makes the following assignments: State 0 √û√ë State 0, State 1A √û√ë
State 1, State 1B √û√ë State 1, State 1C √û√ë State 1, State 2A √û√ë State 2, State 2B √û√ë State 2.

278
CHAPTER 5. BASIC CATEGORY THEORY
simply claim ‚Äúthere is a natural transformation from Y to X.‚Äù If, in a given domain, the
notion of natural transformation captures the essence of compatible models, it may bring
clarity.
‚ô¶‚ô¶
Exercise 5.3.1.13.
Let F : C √ë D be a functor. Suppose someone said, ‚ÄúThe identity on F is a natural
transformation from F to itself.‚Äù
a. What might he mean?
b. What components is he suggesting?
c. Are the components natural?
‚ô¶
Solution 5.3.1.13.
a. He is certainly telling us about a natural transformation Œ±: F √ë F, and he seems to
be telling us that it will somehow act like an identity.
b. To give a questionably natural transformation, we need to provide, for every c P ObpCq
a morphism Œ±c : Fpcq √ë Fpcq in D. Since we have in mind the word identity, we could
take Œ±c :‚Äú idF pcq for all c. This is probably what the person means.
c. For Œ± to be natural we need to check that the following square commutes for any
f : c √ë c1 in C:
Fpcq
idF pcq 
F pfq

Fpcq
F pfq

Fpc1q idF pc1q
 Fpc1q
It clearly does commute, so Œ± is natural. This natural transformation Œ± is usually
denoted idF : F √ë F.
‚ô¶
Example 5.3.1.14. Let r1s P ObpCatq be the free arrow category described in Exercise
5.1.2.34, and let D be any category.
To specify a functor F : r1s √ë D requires the
speciÔ¨Åcation of two objects, Fpv1q, Fpv2q P ObpDq and a morphism Fpeq: Fpv1q √ë Fpv2q

5.3. NATURAL TRANSFORMATIONS
279
in D. The identity and composition formulas are taken care of once that much is speciÔ¨Åed.
To recap, a functor F : r1s √ë D is the same thing as a morphism in D.
Thus, choosing two functors F, G: r1s √ë D is precisely the same thing as choosing
two morphisms in D.
Let us call them f : a0 √ë a1 and g: b0 √ë b1, where we have
f ‚Äú Fpeq, a0 ‚Äú Fpv0q, a1 ‚Äú Fpv1q and g ‚Äú Gpeq, b0 ‚Äú Gpv0q, b1 ‚Äú Gpv1q.
A natural transformation Œ±: F √ë G consists of two components, i.e., morphisms
Œ±v0 : a0 √ë b0 and Œ±v1 : a1 √ë b1, drawn as dashed lines:
a0
Œ±v0 
f

b0
g

a1
Œ±v1
 b1
The condition for Œ± to be a natural transformation is that this square commutes.
In other words, a functor r1s √ë D is a morphism in D and a natural transformation
between two such functors is just a commutative square in D.
Example 5.3.1.15. Recall that to any graph G we can associate the paths-graph PathspGq
(see Example 5.1.2.25).
This is a functor Paths: Grph √ë Grph.
There is also an
identity functor idGrph : Grph √ë Grph. A natural transformation Œ∑: idGrph √ë Paths
would consist of a graph homomorphism Œ∑G : idGrphpGq √ë PathspGq for every graph G.
But idGrphpGq ‚Äú G by deÔ¨Ånition, so we need Œ∑G : G √ë PathspGq. Recall that PathspGq
has the same vertices as G, and every arrow in G counts as a path (of length 1). So there
is an obvious graph homomorphism from G to PathspGq. It is not hard to see that the
necessary naturality squares commute.
Example 5.3.1.16. For any graph G we can associate the paths-graph PathspGq, and can
do that twice to yield a new graph PathspPathspGqq. Let‚Äôs think through what a path of
paths in G is. It is a head-to-tail sequence of arrows in PathspGq, meaning a head-to-tail
sequence of paths in G. These composable sequences of paths (or ‚Äúpaths of paths‚Äù) are
the individual arrows in PathspPathspGqq. The vertices in PathspGq and PathspPathspGqq
are the same as those in G, and all source and target functions are as expected.
Clearly, given such a sequence of paths in G, we could compose them to one big path
in G with the same endpoints. In other words, for every G P ObpGrphq, there is graph
homomorphism ŒºG : PathspPathspGqq √ë PathspGq that is called concatenation. In fact,
this concatenation extends to a natural transformation
Œº: Paths Àù Paths √ë Paths
between functors Grph √ë Grph. Example 5.3.1.15 compared a graph to its paths-graph
using a natural transformation idGrph √ë Paths; here we are making a similar kind of
comparison.

280
CHAPTER 5. BASIC CATEGORY THEORY
Remark 5.3.1.17. Example 5.3.1.15 showed that there is a natural transformation com-
paring each graph to its paths-graph. There is a formal sense in which a category is
nothing more than a kind of reverse mapping. That is, to specify a category is the same
thing as to specify a graph G together with a graph homomorphism PathspGq √ë G. The
formalities involve monads (see Section 7.3).
Exercise 5.3.1.18.
Let X and Y be sets, and let h: X √ë Y . There is a functor CX : Grph √ë Set
that sends every graph to the set X and sends every morphism of graphs to the identity
morphism idX : X √ë X. This functor is called the constant functor at X. Similarly,
there is a constant functor CY : Grph √ë Set.
a. Use h to construct the components of a questionably natural transformation Œ±: CX √ë
CY .
b. Is Œ± natural?
‚ô¶
Solution 5.3.1.18.
a. For each graph G P ObpGrphq, we need a component Œ±G : CXpGq √ë CY pGq, but
CXpGq ‚Äú X and CY pGq ‚Äú Y , so we need a morphism Œ±G : X √ë Y . Let‚Äôs set every
component to be Œ±G :‚Äú h. We now have a questionably natural transformation.
b. For any graph morphism f : G √ë G1, we have CXpfq ‚Äú idX and CY pfq ‚Äú idY . The
naturality square for f obviously commutes (because idY Àùf ‚Äú f ÀùidX), so Œ± is indeed
natural.
‚ô¶
Exercise 5.3.1.19.
For any graph pV, A, src, tgtq we can extract the set of arrows or the set of vertices.
Since each morphism of graphs includes a function between their arrow sets and a function
between their vertex sets, we actually have functors Ar: Grph √ë Set and Ve: Grph √ë
Set.
a. If someone said, ‚ÄúTaking source vertices gives a natural transformation from Ar to
Ve,‚Äù what questionably natural transformation might she be referring to?
b. Is she correct, i.e., is it natural?

5.3. NATURAL TRANSFORMATIONS
281
c. If a diÔ¨Äerent person, say, from a totally diÔ¨Äerent city and in a totally diÔ¨Äerent frame
of mind, were to hear this and say, ‚ÄúTaking target vertices also gives a natural trans-
formation from Ar to Ve,‚Äù would they also be correct?
‚ô¶
Solution 5.3.1.19.
a. To give a questionably natural transformation, we need to provide, for each graph
G P ObpGrphq, a morphism Œ±G : ArpGq √ë VepGq in Set. In other words, if G ‚Äú
pVG, AG, srcG, tgtGq, we need to provide a function Œ±G : A √ë V . This person seems
to be suggesting we use G‚Äôs source function, Œ±G :‚Äú srcG : A √ë V .
b. We need to check that for each graph morphism f : G √ë H, the square
ArpGq
srcG 
Arpfq

VepGq
Ve

ArpHq
srcH  VepHq
commutes. Since Arpfq ‚Äú f1 and Vepfq ‚Äú f0 are the ‚Äúon arrows‚Äù and ‚Äúon-vertices‚Äù
parts of f, the square does commute by deÔ¨Ånition of graph morphism, DeÔ¨Ånition
4.3.3.1.
c. Yes, as astonishing as that may be. With category theory, we are truly one human
race.
‚ô¶
Example 5.3.1.20 (Graph homomorphisms are natural transformations). As discussed (see
diagram (5.8)), there is a category GrIn for which a functor G: GrIn √ë Set is the same
thing as a graph. Namely, we have
GrIn :‚Äú
Ar‚Äö
src 
tgt 
Ve‚Äö
A natural transformation of two such functors Œ±: G √ë G1 involves two components,
Œ±Ar : GpArq √ë G1pArq and Œ±Ve : GpVeq √ë G1pVeq, and two naturality squares, one for
src and one for tgt. This is precisely the same thing as a graph homomorphism, as deÔ¨Åned
in DeÔ¨Ånition 4.3.3.1.

282
CHAPTER 5. BASIC CATEGORY THEORY
5.3.2
Vertical and horizontal composition
This section discusses two types of compositions for natural transformations. The terms
vertical and horizontal are used to describe them; these terms come from the following
pictures:
Œ±√≥
C
F

G

H
 D
Œ≤√≥
C
F1

Œ≥1√≥
G1
0 D
F2

Œ≥2√≥
G2
0 E
We use the symbol Àù to denote vertical composition, so we have Œ≤ Àù Œ±: F √ë H in
the left-hand diagram.
We use the symbol Àõ for horizontal composition, so we have
Œ≥2 ÀõŒ≥1 : F2 ÀùF1 √ù√ë G2 ÀùG1 in the right-hand diagram. Of course, the actual arrangement
of things on a page of text does not correlate with verticality or horizontality‚Äîthese are
just names. We deÔ¨Åne them more carefully in the following.
5.3.2.1
Vertical composition of natural transformations
The following proposition proves that functors and natural transformations (using vertical
composition) form a category.
Proposition 5.3.2.2. Let C and D be categories. There exists a category, called the
category of functors from C to D and denoted FunpC, Dq, whose objects are the functors
C √ë D and whose morphisms are the natural transformations,
HomFunpC,DqpF, Gq ‚Äú tŒ±: F √ë G | Œ± is a natural transformationu.
Under this setup, there are indeed identity natural transformations and a composition for-
mula for natural transformations, so we have deÔ¨Åned a questionable category FunpC, Dq.
The category laws hold, so it is indeed a category.
Proof. Exercise 5.3.1.13 showed that for any functor F : C √ë D, there is an identity
natural transformation idF : F √ë F (its component at c P ObpCq is idF pcq : Fpcq √ë Fpcq).
Given a natural transformation Œ±: F √ë G and a natural transformation Œ≤ : G √ë H,
we need a composite Œ≤ÀùŒ±. We propose the transformation Œ≥ : F √ë H having components
Œ≤c Àù Œ±c for every c P ObpCq. To see that Œ≥ is indeed a natural transformation, one simply
puts together naturality squares for Œ± and Œ≤ to get naturality squares for Œ≤ Àù Œ±.
One proves the associativity and identity laws in FunpC, Dq using the fact that they
hold in D.
‚ñ°

5.3. NATURAL TRANSFORMATIONS
283
Notation 5.3.2.3. We sometimes denote the category FunpC, Dq by DC.
Example 5.3.2.4. Recall from Exercise 5.1.2.41 that there is a functor Ob: Cat √ë Set
sending a category to its set of objects. And recall from Example 5.1.2.38 that there is a
functor Set Disc
√ù√ù√ù√ë Cat sending a set to the discrete category with that set of objects (all
morphisms in DiscpSq are identity morphisms). Let P : Cat √ë Cat be the composition
P ‚Äú DiscÀùOb. Then P takes a category and makes a new category with the same objects
but no morphisms. It is like crystal meth for categories.
Let idCat : Cat √ë Cat be the identity functor. There is a natural transformation
i: P √ë idCat. For any category C, the component iC : PpCq √ë C is pretty easily under-
stood. It is a morphism of categories, i.e., a functor. The two categories PpCq and C have
the same set of objects, namely, ObpCq, so the functor is identity on objects; and PpCq
has no nonidentity morphisms, so nothing else needs be speciÔ¨Åed.
Exercise 5.3.2.5.
Let D ‚Äú
A‚Äö be the category with ObpDq ‚Äú tAu, and HomDpA, Aq ‚Äú tidAu. What is
FunpD, Setq? In particular, characterize the objects and the morphisms.
‚ô¶
Solution 5.3.2.5.
A functor D √ë Set requires only knowing to which object A is sent. In other words,
there is a natural bijection ObpFunpD, Setqq ‚Äì
√ù√ë ObpSetq. Given two functors X, Y : D √ë
Set, identiÔ¨Åed with sets X, Y P ObpSetq, a questionably natural transformation Œ±: X √ë
Y consists of only one component, a function Œ±A : X √ë Y . By Proposition 5.3.1.5 we
Ô¨Ånd that Œ± is natural, so there is a bijection
HomFunpD,SetqpX, Y q ‚Äú NatpX, Y q ‚Äú HomSetpX, Y q.
In fact, if 1 is the terminal category, and C is any category, then there is an isomor-
phism in Cat:
Funp1, Cq ‚Äì
√ù√ë C.
(5.14)
‚ô¶
Notation 5.3.2.6. Recall from Notation 2.1.2.9 that if X is a set, we can represent an
element x P X as a function tu
x√ù√ë X. Similarly, suppose that C is a category and
c P ObpCq is an object. There is a functor 1 √ë C that sends 1 √û√ë c. We say that this
functor represents c P ObpCq. We may denote it c: 1 √ë C.

284
CHAPTER 5. BASIC CATEGORY THEORY
Exercise 5.3.2.7.
Let n P N, and let n be the set with n elements, considered as a discrete category.13
In other words, we write n to mean what should really be called Discpnq. Describe the
category Funp3, 2q.
‚ô¶
Solution 5.3.2.7.
To describe the category Funp3, 2q, we describe its objects and then its morphisms.
An object in Funp3, 2q is a functor F : 3 √ë 2. To describe a functor, we need to say what
it does on objects, Obp3q ‚Äú t1, 2, 3u, and what it does on morphisms; however the only
morphisms in 3 are identity morphisms, and we know how a functor behaves on identities.
So to give a functor F : 3 √ë 2 is the same thing as giving a function F : 3 √ë 2, and we
know there are 23 ‚Äú 8 of these.
Suppose we have two functors F, G: 3 √ë 2; what is a natural transformation between
them?
For each object x P Obp3q, we need to give a morphism Fpxq √ë Gpxq in 2.
However, the only morphisms in 2 are the identities, so to have a natural transformation
F √ë G, we need that Fpxq ‚Äú Gpxq for all x P Obp3q. It follows that Funp3, 2q ‚Äì 8 is the
discrete category on eight objects.
‚ô¶
Example 5.3.2.8. Let 1 denote the discrete category with one object (also known as the
trivial monoid). For any category C, we investigate the category D :‚Äú FunpC, 1q. Its
objects are functors C √ë 1. Such a functor F assigns to each object in C an object in 1, of
which there is one; so there is no choice in what F does on objects. And there is only one
morphism in 1, so there is no choice in what F does on morphisms. The upshot is that
there is only one object in D, let‚Äôs call it F, so D is a monoid. What are its morphisms?
A morphism Œ±: F √ë F in D is a natural transformation of functors.
For every
c P ObpCq, we need a component Œ±c : Fpcq √ë Fpcq, which is a morphism 1 √ë 1 in 1.
But there is only one morphism in 1, namely, id1, so there is no choice about what these
components should be: they are all id1. The necessary naturality squares commute, so
Œ± is indeed a natural transformation. Thus the monoid D is the trivial monoid; that is,
FunpC, 1q ‚Äì 1 for any category C.
13When we have a functor, such as Disc: Set √ë Cat, we sometimes say, ‚ÄúLet S be a set, considered
as a category.‚Äù This means that we want to take ideas and methods available in Cat and use them on
the set S. Having the functor Disc, we use it to move S into Cat, as DiscpSq P ObpCatq, upon which
we can use the intended methods. However, DiscpSq is bulky, e.g., FunpDiscp3q, Discp2qq is harder to
read than Funp3, 2q. So we abuse notation and write S instead of DiscpSq, and talk about S as though it
were still a set, e.g., discussing its elements rather than its objects. This kind of conceptual abbreviation
is standard practice in mathematical discussion because it eases the mental burden, but when one says
‚ÄúLet S be an X considered as a Y ,‚Äù the other may always ask, ‚ÄúHow are you considering X‚Äôs to be Y ‚Äôs?‚Äù
and expect a functor .

5.3. NATURAL TRANSFORMATIONS
285
Exercise 5.3.2.9.
Let 0 represent the discrete category on 0 objects; it has no objects and no morphisms.
Let C be any category.
a. What is Funp0, Cq?
b. What is FunpC, 0q?
‚ô¶
Solution 5.3.2.9.
a. It is isomorphic to the terminal category 1. There is only one functor 0 √ë C because
the deÔ¨Ånition of functor is vacuously satisÔ¨Åed in only one way. Let‚Äôs call the unique
object in ObpFunp0, Cqq the ‚Äúempty functor to C.‚Äù A natural transformation between
the empty functor and itself requires no components, so there is again vacuously one
such natural transformation, and it must be the identity.
b. If C is not empty, ObpCq ‚Ä∞ H, then since Obp0q ‚Äú H and there is no way to give a
function ObpCq √ë H, we have FunpC, 0q ‚Äú 0. If C ‚Äú 0, then by the result in part (a)
we know that Funp0, 0q ‚Äú 1.
‚ô¶
Exercise 5.3.2.10.
Let r1s denote the free arrow category as in Exercise 5.1.2.34, and let GrIn be
the graph-indexing category (see (5.8).
Draw the underlying graph of the category
Funpr1s, GrInq.
‚ô¶
Solution 5.3.2.10.
Fun
¬®
Àù
0‚Äö
f
 1‚Äö
,
Ar‚Äö
src 
tgt 
Ve‚Äö
Àõ
‚Äö ‚Äú
‚Äö
idAr
K

9


‚Äö
src

9
tgt‚Äö &
 idVe
‚Äö &
‚ô¶

286
CHAPTER 5. BASIC CATEGORY THEORY
5.3.2.11
Natural isomorphisms
Let C and D be categories. We have deÔ¨Åned a category FunpC, Dq whose objects are
functors C √ë D and whose morphisms are natural transformations. What are the iso-
morphisms in this category?
Proposition 5.3.2.12 (Natural isomorphism). Let C and D be categories, and let F, G: C √ë
D be functors. A natural transformation Œ±: F √ë G is an isomorphism in FunpC, Dq if
and only if the component Œ±c : Fpcq √ë Gpcq is an isomorphism for each object c P ObpCq.
In this case Œ± is called a natural isomorphism.
Proof. First, suppose that Œ± is an isomorphism with inverse Œ≤ : G √ë F, and let Œ≤c : Gpcq √ë
Fpcq denote its c component. We know that Œ± Àù Œ≤ ‚Äú idG and Œ≤ Àù Œ± ‚Äú idF . Using the
deÔ¨Ånitions of composition and identity given in Proposition 5.3.2.2, this means that for
every c P ObpCq, we have Œ±c Àù Œ≤c ‚Äú idGpcq and Œ≤c Àù Œ±c ‚Äú idF pcq; in other words, Œ±c is an
isomorphism.
Second, suppose that each Œ±c is an isomorphism with inverse Œ≤c : Gpcq √ë Fpcq. We
need to see that these components assemble into a natural transformation, i.e., for every
morphism h: c √ë c1 in C, the right-hand square
Fpcq
‚úì
F phq

Œ±c
 Gpcq
Gphq

Fpc1q
Œ±c1  Gpc1q
Gpcq
?
Gphq

Œ≤c
 Fpcq
F phq

Gpc1q
Œ≤c1
 Fpc1q
commutes. We know that the left-hand square commutes because Œ± is a natural trans-
formation; each square is labeled with a ? or a ‚úìaccordingly. In the following diagram
we want to show that the left-hand square commutes. We know that the middle square
commutes.
Gpcq
idGpcq

?
Gphq

Œ≤c
 Fpcq
‚úì
F phq

Œ±c

‚úì
Gpcq
?
Gphq

Œ≤c
 Fpcq
F phq

Gpc1q
Œ≤c1
 Fpc1q
Œ±c1

idF pc1q
5
Gpc1q
‚úì
Œ≤c1
 Fpc1q
(5.15)

5.3. NATURAL TRANSFORMATIONS
287
To complete the proof we need only show that Fphq Àù Œ≤c ‚Äú Œ≤c1 Àù Gphq. This can be shown
by a ‚Äúdiagram chase.‚Äù We go through it symbolically, for demonstration. The following
three equalities come from the three check marks in the (5.15).
Fphq Àù Œ≤c ‚Äú Œ≤c1 Àù Œ±c1 Àù Fphq Àù Œ≤c ‚Äú Œ≤c1 Àù Gphq Àù Œ±c Àù Œ≤c ‚Äú Œ≤c1 Àù Gphq.
‚ñ°
Exercise 5.3.2.13.
Recall from Application 5.3.1.12 that a Ô¨Ånite state machine on alphabet Œ£ can be
understood as a functor M √ë Set, where M ‚Äú ListpŒ£q is the free monoid generated by Œ£.
That example also discussed how natural transformations provide a language for changing
state machines. Describe what kinds of changes are made by natural isomorphisms.
‚ô¶
Solution 5.3.2.13.
Let F, G: M √ë Set be two state machines, with X ‚Äú Fp‚ñ≤q and Y ‚Äú Gp‚ñ≤q.
A
natural isomorphism Œ±: F √ë G consists of a single component function Œ±‚ñ≤: X √ë Y .
It must be an isomorphism in Set, which one can think of as a simple renaming of the
states in the machine. The fact that Œ± is natural means that for any œÉ P Œ£, we have
Œ±‚ñ≤Àù FpœÉq ‚Äú GpœÉq Àù Œ±‚ñ≤. In other words, the renaming is consistent with the M action.
For example, consider the following state machines X, Y, Z : Listpa, bq √ë Set:
Original model X
ID
a
b
State 0
State 1
State 2
State 1
State 2
State 1
State 2
State 0
State 0
Isomorphic model Y
ID
a
b
Charles
Ursula
GarÔ¨Åeld
Ursula
GarÔ¨Åeld
Ursula
GarÔ¨Åeld
Charles
Charles
Nonisomorphic model Z1
ID
a
b
Land
Land
Air
Sea
Air
Sea
Air
Air
Air
Nonisomorphic model Z2
ID
a
b
Charles
Ursula
GarÔ¨Åeld
Ursula
GarÔ¨Åeld
Ursula
GarÔ¨Åeld
Charles
Charles
Mary
Charles
GarÔ¨Åeld
The Ô¨Årst two are isomorphic, X ‚Äì Y , but neither Z1 nor Z2 is isomorphic to any of the
others.
‚ô¶

288
CHAPTER 5. BASIC CATEGORY THEORY
5.3.2.14
Horizontal composition of natural transformations
Example 5.3.2.15 (Whiskering). Suppose that M ‚Äú Listpa, bq and M1 ‚Äú Listpm, n, pq
are free monoids, and let F : M1 √ë M be given by sending rms √û√ë ras, rns √û√ë rbs, and
rps √û√ë rb, a, as. An application of this might be if the sequence rb, a, as were commonly
used in practice and one wanted to add a new button just for that sequence.
Recall Application 5.3.1.12 and Figure 5.1, which is reproduced here. Let X : M √ë
Set and Y : M √ë Set be the functors, and let Œ±: Y √ë X be the natural transformation.
State 0 
State 1 
State 2 
ate 
S ate 1
te 2
0
e 2
te
Stat
Stat
tat
a 
a 
a 
b 
b 
b 
State 0 
State 1A 
State 2B 
1A 
Sta
State
b 
State 2A 
State 1B 
State 1C 
State
e
2B
State
ate
S
e 2
tate
2
State
S
2B
A 
2A
te
Sta
Stat
b 
b 
b 
b 
a 
a 
a 
a 
a 
a 
e
ate 0
te
Stat
ate 0
b 
b
a
b 
Original model X : M √ë Set
ID
a
b
State 0
State 1
State 2
State 1
State 2
State 1
State 2
State 0
State 0
Proposed model Y : M √ë Set
ID
a
b
State 0
State 1A
State 2A
State 1A
State 2A
State 1B
State 1B
State 2B
State 1C
State 1C
State 2B
State 1B
State 2A
State 0
State 0
State 2B
State 0
State 0
We can compose X and Y with F as in the diagram below
M1
F
 M
Y

X
T
Œ±√≥
Set
to get functors Y Àù F and X Àù F, both of type M1 √ë Set. These would be as follows:14
X Àù F
ID
m
n
p
State 0
State 1
State 2
State 1
State 1
State 2
State 1
State 0
State 2
State 0
State 0
State 2
Y Àù F
ID
m
n
p
State 0
State 1A
State 2A
State 1A
State 1A
State 2A
State 1B
State 0
State 1B
State 2B
State 1C
State 0
State 1C
State 2B
State 1B
State 0
State 2A
State 0
State 0
State 2A
State 2B
State 0
State 0
State 2A
14The p column comes from applying b, then a, then a, as speciÔ¨Åed by F.

5.3. NATURAL TRANSFORMATIONS
289
The map Œ± is what sent both State 1A and State 1B in Y to State 1 in X, and so on.
We can see that the same Œ± works now: the p columns of the tables respect that mapping;
that is, they act like rb, a, as or equivalently rn, m, ms. This is called whiskering. We used
Œ±: Y √ë X to get a natural transformation Y Àù F √ë X Àù F. It is a kind of horizontal
composition of natural transformation.
DeÔ¨Ånition 5.3.2.16 (Whiskering). Let B, C, D, and E be categories, let G1, G2 : C √ë D
be functors, and let Œ±: G1 √ë G2 be a natural transformation. Suppose that F : B √ë C
(resp. H : D √ë E) is a functor as depicted here:
B
F
 C
Œ±√≥
G1 
G2
D
¬®
Àö
Àö
Àùresp.
C
Œ±√≥
G1 
G2
D
H
 E
Àõ
‚Äπ‚Äπ‚Äö,
Then the prewhiskering of Œ± by F, denoted Œ± Àõ F : G1 Àù F √ë G2 Àù F (resp. the post-
whiskering of Œ± by H, denoted H Àõ Œ±: H Àù G1 √ë H Àù G2),
B
G1ÀùF

Œ±ÀõF √≥
G2ÀùF
5 D
¬®
Àö
Àö
Àùresp.
C
HÀùG1

HÀõŒ±√≥
HÀùG2
5 E
Àõ
‚Äπ‚Äπ‚Äö,
is deÔ¨Åned as follows.
For each b P ObpBq the component pŒ± Àõ Fqb : G1 Àù Fpbq √ë G2 Àù Fpbq is deÔ¨Åned to
be Œ±F pbq (resp. for each c P ObpCq, the component pH Àõ Œ±qc : H Àù G1pcq √ë H Àù G2pcq is
deÔ¨Åned to be HpŒ±cq). Checking that the naturality squares commute (in each case) is
straightforward.

290
CHAPTER 5. BASIC CATEGORY THEORY
Exercise 5.3.2.17.
Suppose given functors B
F√ù√ë C
G
√ù√ë D, and let idG : G √ë G be the identity natural
isomorphism. Show that idG Àõ F ‚Äú idGÀùF .
‚ô¶
Solution 5.3.2.17.
By DeÔ¨Ånition 5.3.2.16, for each object b P ObpBq, the component pidG Àõ Fqb is the
identity morphism pidGqF pbq : GpFpbqq √ë GpFpbqq. But there can be only one identity
morphism, so pidGqF pbq ‚Äú idGÀùF pbq ‚Äú idGÀùF pbq.
‚ô¶
DeÔ¨Ånition 5.3.2.18 (Horizontal composition of natural transformations). Let B, C, and
D be categories, let F1, F2 : B √ë C and G1, G2 : C √ë D be functors, and let Œ±: F1 √ë F2
and Œ≤ : G1 √ë G2 be natural transformations, as depicted here:
B
Œ±√≥
F1

F2
 C
Œ≤√≥
G1 
G2
D
By pre- and postwhiskering in one order or the other we get the following diagram:
G1 Àù F1
G1ÀõŒ± 
Œ≤ÀõF1

G1 Àù F2
Œ≤ÀõF2

G2 Àù F1
G2ÀõŒ±  G2 Àù F2
It is straightforward to show that this diagram commutes, so we can take the composition
to be the deÔ¨Ånition of the horizontal composition:
Œ≤ Àõ Œ±: G1 Àù F1 √ë G2 Àù F2.
Remark 5.3.2.19. Whiskering a natural transformation Œ± with a functor F is the same
thing as horizontally composing Œ± with the identity natural transformation idF . This is
true for both pre- and postwhiskering. For example, in the notation of DeÔ¨Ånition 5.3.2.16,
we have
Œ± Àõ F ‚Äú Œ± Àõ idF
and
H Àõ Œ± ‚Äú idH Àõ Œ±.

5.3. NATURAL TRANSFORMATIONS
291
Theorem 5.3.2.20 (Interchange).
Œ±1√≥
Œ≤1√≥
C
F1

F2

F3
 D
G1

G2

G3
 E
Œ±2√≥
Œ≤2√≥
Given a setup of categories, functors, and natural transformations as shown, we have
pŒ≤2 Àù Œ≤1q Àõ pŒ±2 Àù Œ±1q ‚Äú pŒ≤2 Àõ Œ±2q Àù pŒ≤1 Àõ Œ±1q.
Proof. One need only observe that each square commutes in the following diagram, so
taking either outer path to get pŒ≤2 Àù Œ≤1q Àõ pŒ±2 Àù Œ±1q yields the same morphism as taking
the diagonal path, pŒ≤2 Àõ Œ±2q Àù pŒ≤1 Àõ Œ±1q:
G1F1
G1ÀõŒ±1
Œ≤1ÀõF1

G1F2
G1ÀõŒ±2
Œ≤1ÀõF2

G1F3
Œ≤1ÀõF3

G2F1
G2ÀõŒ±1
Œ≤2ÀõF1

G2F2
G2ÀõŒ±2
Œ≤2ÀõF2

G2F3
Œ≤2ÀõF3

G3F1 G3ÀõŒ±1
 G3F2 G3ÀõŒ±2
 G3F3
‚ñ°
Exercise 5.3.2.21.
Suppose given categories, functors, and natural transformations as shown:
C
F

Œ±√≥
F 1
D
G

Œ≤√≥
G1
 E
such that Œ±: F √ë F 1 and Œ≤ : G √ë G1 are natural isomorphisms. Show that Œ≤ÀõŒ±: GÀùF √ë
G1 Àù F 1 is a natural isomorphism.
‚ô¶

292
CHAPTER 5. BASIC CATEGORY THEORY
Solution 5.3.2.21.
Let Œ±1 : F 1 √ë Œ± and Œ≤1 : G1 √ë G be the inverses of Œ± and Œ≤ respectively. To check
that Œ≤ ÀõŒ± is an isomorphism, we use Theorem 5.3.2.20 (and Exercise 5.3.2.17) to see that
pŒ≤ Àõ Œ±q Àù pŒ≤1 Àõ Œ±1q ‚Äú pŒ≤ Àù Œ≤1q Àõ pŒ± Àù Œ±1q ‚Äú idG1 Àõ idF 1 ‚Äú idG1ÀùF 1
and similarly for the other order, pŒ≤1 Àõ Œ±1q Àù pŒ≤ Àõ Œ±q ‚Äú idGÀùf.
‚ô¶
5.3.3
The category of instances on a database schema
Section 5.2.2 showed that schemas are presentations of categories, and Section 5.4 shows
that in fact the category of schemas is equivalent to the category of categories. This
section therefore takes license to blur the distinction between schemas and categories.
If C is a schema, i.e., a category, then as discussed in Section 5.2.2.6, an instance on
C is a functor I : C √ë Set. But now we have a notion beyond categories and functors,
namely, that of natural transformations. So we make the following deÔ¨Ånition.
DeÔ¨Ånition 5.3.3.1. Let C be a schema (or category). The category of instances on C,
denoted C‚ÄìSet, is FunpC, Setq. Its objects are C-instances (i.e., functors C √ë Setq, and
its morphisms are natural transformations.
Remark 5.3.3.2. One might object to DeÔ¨Ånition 5.3.3.1 on the grounds that database
instances should not be inÔ¨Ånite. This is a reasonable perspective, and the deÔ¨Ånition can
be modiÔ¨Åed easily to accommodate it. The subcategory Fin (see Example 5.1.1.4) of
Ô¨Ånite sets can be substituted for Set in DeÔ¨Ånition 5.3.3.1. One could deÔ¨Åne the category
of Ô¨Ånite instances on C as C‚ÄìFin ‚Äú FunpC, Finq. Almost all of the ideas in this book will
make perfect sense in C‚ÄìFin.
Natural transformations should serve as some kind of morphism between instances on
the same schema. How are we to interpret a natural transformation Œ±: I √ë J between
database instances I, J : C √ë Set?
A Ô¨Årst clue comes from Application 5.3.1.12. There we considered the case of a monoid
M, and we thought about a natural transformation between two functors X, Y : M √ë
Set, considered as diÔ¨Äerent Ô¨Ånite state machines. The notion of natural transformation
captured the idea of one model being a reÔ¨Ånement of another. This same kind of idea
works for databases with more than one table (categories with more than one object).
Let‚Äôs work it through slowly.
Example 5.3.3.3. Consider the terminal schema, 1 ‚Äì ‚ÄöGrapes . An instance is a functor
1 √ë Set, which represents a set (see Notation 5.3.2.6). A natural transformation Œ±: I √ë
J is a function from set I to set J. In the standard table view, we might have I and J
as shown here:

5.3. NATURAL TRANSFORMATIONS
293
Grapes pIq
ID
Grape 1
Grape 3
Grape 4
Grapes pJq
ID
Jan1-01
Jan1-02
Jan1-03
Jan1-04
Jan3-01
Jan4-01
Jan4-02
There are 343 natural transformations I √ë J. Perhaps some of them make more sense
than others, e.g., we could hope that the numbers in I corresponded to the numbers after
the hyphen in J or perhaps to what seems to be the date in January. Knowing something
like this would reduce this to only a few options out of 343 possible mappings. But it
could be that the rows in J correspond to batches, and all three grapes in I are part of
the Ô¨Årst batch on Jan-01.
The point is that the notion of natural transformation is a mathematical one; it has
nothing to do with the kinds of associations we might Ô¨Ånd natural, unless we have found
a categorical encoding for this intuition.
Exercise 5.3.3.4.
Recall the notion of set-indexed sets from DeÔ¨Ånition 3.4.6.11. Let A be a set, and
devise a schema A such that instances on A are A-indexed sets.
Is our current no-
tion of morphism between instances (i.e., natural transformations) well aligned with this
deÔ¨Ånition of mapping of A-indexed sets?
‚ô¶
Solution 5.3.3.4.
DeÔ¨Ånition 3.4.6.11 actually gives us the objects and morphisms of a category, say, the
category of A-indexed sets, in that it tells us that the objects and morphisms are merely
the A-indexed sets and the A-indexed functions. Let us denote the category of A-indexed
sets A‚ÄìSet; this exercise is asking for a category A for which there is an isomorphism
A‚ÄìSet ‚Äì
√ù√ë FunpA, Setq.
And indeed there is. Let A ‚Äú DiscpAq be the discrete category on A objects. Then a
functor S : A √ë Set is just a set Spaq for every a P A, and a morphism S √ë S1 is just a
component fa : Spaq √ë S1paq for each a P A. These coincide exactly with the notions of
A-indexed set and of mappings between them.
‚ô¶

294
CHAPTER 5. BASIC CATEGORY THEORY
For a general schema (or category) C, let us think through what a morphism Œ±: I √ë J
between instances I, J : C √ë Set is. For each object c P ObpCq, there is a component
Œ±c : Ipcq √ë Jpcq. This means that just as in Example 5.3.3.3, there is for each table c
a function from the rows in I‚Äôs manifestation of c to the rows in J‚Äôs manifestation of c.
So to make a natural transformation, such a function has to be speciÔ¨Åed table by table.
But then we have to contend with naturality squares, one for every arrow in C. Arrows
in C correspond to foreign key columns in the database. The naturality requirement was
already covered in Application 5.3.1.12 (see especially how (5.11) is checked in (5.12) and
(5.13)).
Example 5.3.3.5. We saw in Section 5.2.1.21 that graphs can be regarded as functors
G √ë Set, where G ‚Äì GrIn is the schema for graphs shown here:
G :‚Äú
Arrow
‚Äö
src 
tgt 
Vertex
‚Äö
A database instance I : G √ë Set on G consists of two tables. Here is an example
instance:
I :‚Äú
‚Äöv
f
 ‚Äöw
h
0
g
!
‚Äöx
Arrow pIq
ID
src
tgt
f
v
w
g
w
x
h
w
x
Vertex pIq
ID
v
w
x
To discuss natural transformations, we need two instances. Here is another, J : G √ë Set:
J :‚Äú
q‚Äö
i
 r‚Äö
j
) s‚Äö
k
A
‚Ñì
 t‚Äö
u‚Äö
Arrow pJq
ID
src
tgt
i
q
r
j
r
s
k
s
r
‚Ñì
s
t
Vertex pJq
ID
q
r
s
t
u

5.3. NATURAL TRANSFORMATIONS
295
To give a natural transformation Œ±: I √ë J, we give two components: one for Arrow and
one for Vertex. We need to say where each vertex in I goes in J, and we need to say
where each arrow in I goes in J. The naturality squares insist that if we specify that
g √û√ë j, for example, then we had better specify that w √û√ë r and that x √û√ë s. What a
computer is very good at, but a human is fairly slow at, is checking that a given pair of
components (arrows and vertices) really is natural.
There are 8000 ways to devise component functions Œ±Arrow and Œ±Vertex, but precisely
six natural transformations, i.e., six graph homomorphisms, I √ë J; the other 7,994 are
haphazard Ô¨Çingings of arrows to arrows and vertices to vertices without any regard to
sources and targets. The six are brieÔ¨Çy described now. The reader should look at the
graph diagrams of I and J while following along.
Every vertex in I has to be sent to some vertex in J, so we think about where to send
v and proceed from there.
‚Ä¢ If we try to send v √û√ë? u, we fail because u touches no arrows, so there is nowhere
for f to go. (0)
‚Ä¢ If we send v √û√ë q, then f must map to i, and w must map to r, and both g and h
must map to j, and x must map to s. (1)
‚Ä¢ If we send v √û√ë r, then there are two choices for g times two choices for h. (4)
‚Ä¢ If we send v √û√ë s, then there is one way to obtain a graph morphism. (1)
‚Ä¢ If we try to send v √û√ë? t, we fail as before. (0)
Humans may follow the diagrams better than the tables, whereas computers probably
understand the tables better.
Exercise 5.3.3.6.
If I, J : G √ë Set, as in Example 5.3.3.5, how many natural transformations are there
J √ë I?
‚ô¶
Solution 5.3.3.6.
A computer can Ô¨Ånd all the natural transformations between two database instances
(if the schemas are Ô¨Ånite) relatively quickly, but it can be signiÔ¨Åcantly more challenging
for humans. However, a natural transformation Œ±: J √ë I is a graph homomorphism

296
CHAPTER 5. BASIC CATEGORY THEORY
J √ë I. Luckily the human visual system is equipped to look for graph homomorphisms.
J
q‚Äö
i
 r‚Äö
j
) s‚Äö
k
A
‚Ñì
 t‚Äö
u‚Äö

I
‚Äöv
f
 ‚Äöw
h
0
g
!
‚Äöx
We start by asking where we can send q.
Work through the following informal reasoning, and then work the rest out for yourself:
If q is sent to v, then i must be sent to f, so r must be sent to w. And then
s would have to go to x. But then k does not make sense because there is no
arrow x √ë w in I. So it turns out that q cannot be sent to v after all.
From here one can see that there are no natural transformations, NatpJ, Iq ‚Äú H, basically
because of k.
‚ô¶
Exercise 5.3.3.7.
Let GrIn be the graph-indexing category, and let YA : GrIn √ë Set denote the fol-
lowing instance:
Arrow pYAq
ID
src
tgt
a
v0
v1
Vertex pYAq
ID
v0
v1
Let I : GrIn √ë Set be as in Example 5.3.3.5.
a. How many natural transformations are there YA √ë I?
b. With J as previously, how many natural transformations are there YA √ë J?
c. Do you have any conjecture about the way natural transformations YA √ë X behave
for arbitrary graphs X : G √ë Set?
‚ô¶

5.3. NATURAL TRANSFORMATIONS
297
Solution 5.3.3.7.
It is useful to see YA as a graph so we can visualize the graph morphisms YA √ë I or
YA √ë J.
YA
v0‚Äö
a
 v1‚Äö
a. A graph morphism YA √ë I amounts to an arrow in graph I. In other words, there is
a natural isomorphism
NatpYA, Iq ‚Äì tf, g, hu.
How does this works? What might g mean as a natural transformation YA √ë I?
To give a questionably natural transformation Œ±: YA √ë I, we need to give a component
Œ±Ar : tau √ë tf, g, hu and a component Œ±Ve : tv0, v1u √ë tv, w, xu. Since we have g in
mind, let‚Äôs put Œ±Arpaq :‚Äú g. There are 32 choices for Œ±Ve, but only one is natural
because the two morphisms src, tgt: Ar √ë Ve demand two naturality equations,
Œ±Vepv0q ‚Äú Œ±Ve Àù srcpaq ‚Äú src Àù Œ±Arpaq ‚Äú srcpgq ‚Äú w;
Œ±Vepv1q ‚Äú Œ±Ve Àù tgtpaq ‚Äú tgt Àù Œ±Arpaq ‚Äú tgtpgq ‚Äú x.
In other words, once we choose Œ±Arpaq to be g, the rest is forced on us.
In the
same way, we could have chosen Œ±Arpaq to be any of f, g, h, which is why we said
NatpYA, Iq ‚Äì tf, g, hu.
b. There are four, NatpYA, Jq ‚Äì ti, j, k, ‚Ñìu.
‚ô¶
In terms of databases, this notion of instance morphism Œ±: I √ë J on a schema C is
sometimes called a database homomorphism. It is related to what is known as provenance,
in that it tells us how every row in I relates to a counterpart row in J. More precisely,
for every table in C, the morphism Œ± gives a mapping from the set of rows in I‚Äôs version
of the table to J‚Äôs version of the table, such that all the foreign keys are respected. This
notion of morphism has excellent formal properties, so projections, unions, and joins of
tables (the typical database operations) would be predicted to be interesting by a category
theorist who has no idea what a database is.15
15More precisely, given a functor between schemas F : C √ë D, the pullback ŒîF : D‚ÄìSet √ë C‚ÄìSet, its
left Œ£F and its right adjoint Œ†F constitute these important queries. See Section 7.1.4.

298
CHAPTER 5. BASIC CATEGORY THEORY
5.3.4
Equivalence of categories
We have a category Cat of categories, and in every category there is a notion of isomor-
phism between objects: one morphism each way, such that each round-trip composition
is the identity. An isomorphism in Cat, therefore, takes place between two categories,
say, C and D: it is a functor F : C √ë D and a functor G: D √ë C such that G Àù F ‚Äú idC
and F Àù G ‚Äú idD.
It turns out that categories are often similar enough to be considered equivalent
without being isomorphic. For this reason, the notion of isomorphism is considered too
strong to be useful for categories, akin to saying that two material samples are the same
if there is an atom by atom matching, or that two words are the same if they are written
in the same font and size, by the same person, in the same state of mind.
As reasonable as isomorphism is as a notion in most categories, it fails to be the
right notion about categories.
The reason is that in categories there are objects and
morphisms, whereas when we talk about categories, we have categories and functors plus
natural transformations. Natural transformations serve as mappings between mappings,
and this is not part of the structure of an ordinary category. In cases where a category C
does have such mappings between mappings, it is often best to take that extra structure
into account, as we do for C ‚Äú Cat. This whole subject leads to the study of 2-categories
(or n-categories, or 8-categories), not discussed in this book. See, for example, Leinster
[25] for an introduction.
The purpose now is to explain this ‚Äúgood notion‚Äù of sameness for categories, namely,
equivalence of categories, which appropriately takes natural transformations into account.
Instead of functors going both ways with round-trips equal to identity, which is required
in order to be an isomorphism of categories, equivalence of categories demands functors
going both ways with roundtrips naturally isomorphic to identity.
DeÔ¨Ånition 5.3.4.1 (Equivalence of categories). Let C and C1 be categories. A functor
F : C √ë C1 is called an equivalence of categories and denoted F : C
¬ª
√ù√ë C116 if there exists
a functor F 1 : C1 √ë C and natural isomorphisms Œ±: idC
‚Äì
√ù√ë F 1 Àù F and Œ±1 : idC1
‚Äì
√ù√ë F Àù F 1.
In this case we say that F and F 1 are mutually inverse equivalences.
Suppose we are given functors F : C √ë C1 and F 1 : C1 √ë C. We want to know something
about the round-trips on C and on C1; we want to know the same kind of information
about each round-trip, so let‚Äôs concentrate on the C side. We want to know something
about F 1 Àù F : C √ë C, so let‚Äôs name it i: C √ë C; we want to know that i is a natural
isomorphism. That is, for every c P ObpCq, we want an isomorphism Œ±c : c ‚Äì
√ù√ë ipcq, and we
want to know that these isomorphisms are picked carefully enough that given g: c √ë c1
16The notation ¬ª has already been used for equivalences of paths in a schema. I do not mean to equate
these ideas; I am just reusing the symbol. Hopefully, no confusion will arise.

5.3. NATURAL TRANSFORMATIONS
299
in C, the choice of isomorphisms for c and c1 are compatible:
c
Œ±c 
g

ipcq
ipgq

c1
Œ±c1  ipc1q.
To be an equivalence, the same has to hold for the other round-trip, i1 ‚Äú F ÀùF 1 : C1 √ë C1.
Exercise 5.3.4.2.
Let C and C1 be categories. Suppose that F : C √ë C1 is an isomorphism of categories.
a. Is it an equivalence of categories?
b. If not, why? If so, what are the components of Œ± and Œ±1 (with notation as in DeÔ¨Ånition
5.3.4.1)?
‚ô¶
Solution 5.3.4.2.
a. Yes.
b. If a functor F : C √ë C1 is an isomorphism of categories, then there exists a functor
F 1 : C1 √ë C such that F 1ÀùF ‚Äú idC and F ÀùF 1 ‚Äú idC1. We might hope that F and F 1 are
mutually inverse equivalences of categories as well. We need natural transformations
Œ±: idC √ë F 1 Àù F and Œ±1 : idC1 √ë F Àù F 1. But since F 1 Àù F ‚Äú idC and F Àù F 1 ‚Äú idC1,
we can take Œ± and Œ±1 to be the identity transformations. Thus F and F 1 are indeed
mutually inverse equivalences of categories.
‚ô¶
Example 5.3.4.3. Let S be a set, and let S ÀÜ S ƒé S ÀÜ S be the complete relation on
S, which is a preorder KS.
Recall from Proposition 5.2.1.13 that there is a functor
i: PrO √ë Cat, and the resulting category ipKSq is called the indiscrete category on S;
it has objects S and a single morphism between every pair of objects. Here is a diagram

300
CHAPTER 5. BASIC CATEGORY THEORY
of Kt1,2,3u:
1‚Äö

H
@
2‚Äö L
Q
R
3‚Äö'
;
F
(5.16)
It is easy check that K1, the indiscrete category on one element, is isomorphic to 1,
the discrete category on one object, also known as the terminal category (see Exercise
5.1.2.40).
The category 1 consists of one object, its identity morphism, and nothing
else. Let‚Äôs think about the diÔ¨Äerence between isomorphism and equivalence using KS P
ObpCatq.
The only way that KS can be isomorphic to 1 is if S has one element.17 On the other
hand, there is an equivalence of categories
KS ¬ª 1
for every set S ‚Ä∞ H. So for example, Kt1,2,3u from (5.16) is equivalent to the terminal
category, 1.
In fact, there are many such equivalences, one for each element of S. To see this, let
S be a nonempty set, and choose an element s0 P S. For every s P S, there is a unique
isomorphism ks : s ‚Äì
√ù√ë s0 in KS. Let F : KS √ë 1 be the only possible functor (see Exercise
5.1.2.40), and let F 1 : 1 √ë KS represent the object s0. Note that F 1ÀùF ‚Äú id1 : 1 √ë 1 is the
identity, but that F Àù F 1 : KS √ë KS sends everything to s0. So F is not an isomorphism.
We need to show that it is an equivalence.
Let Œ± ‚Äú id1, and deÔ¨Åne Œ±1 : idKS √ë F Àù F 1 by Œ±1
s ‚Äú ks. Note that Œ±1
s is an isomor-
phism for each s P ObpKSq and that Œ±1 is a natural transformation (hence, a natural
isomorphism) because every possible square commutes in KS. This completes the proof,
initiated in the preceding paragraph, that the category KS is equivalent to 1 for every
nonempty set S and that this fact can be witnessed by any element s0 P S.
Example 5.3.4.4. Consider the category FLin, described in Example 5.1.1.13, of Ô¨Ånite
nonempty linear orders. For every natural number n P N, let rns P ObpFLinq denote the
linear order shown in Example 4.4.1.7. DeÔ¨Åne a category Œî whose objects are given by
17One way to see this is that by Exercise 5.1.2.41, we have a functor Ob: Cat √ë Set, and we know
by Exercise 5.1.2.27 that functors preserve isomorphisms, so an isomorphism between categories must
restrict to an isomorphism between their sets of objects. The only sets that are isomorphic to 1 have one
element.

5.3. NATURAL TRANSFORMATIONS
301
ObpŒîq ‚Äú trns | n P Nu and with HomŒîprms, rnsq ‚Äú HomFLinprms, rnsq. The diÔ¨Äerence
between FLin and Œî is only that objects in FLin may have odd labels, e.g.,
5‚Äö
 x‚Äö
 ‚ÄúSam‚Äù
‚Äö
whereas objects in Œî all have standard labels, e.g.,
0‚Äö
 1‚Äö
 2‚Äö
Clearly, FLin is a much larger category, and yet it feels as if it is pretty much the same
as Œî. Actually, they are equivalent, FLin ¬ª Œî. We will Ô¨Ånd functors F and F 1 which
witness this equivalence.
Let F 1 : Œî √ë FLin be the inclusion; and let F : FLin √ë Œî send every Ô¨Ånite nonempty
linear order X P ObpFLinq to the object FpXq :‚Äú rns P Œî, where ObpXq ‚Äì t0, 1, . . . , nu.
For each such X, there is a unique isomorphism Œ±X : X
‚Äì
√ù√ë rns, and these Ô¨Åt together
into18 the required natural isomorphism idFLin √ë F 1ÀùF. The other natural isomorphism
Œ±1 : idŒî √ë F Àù F 1 is the identity.
Exercise 5.3.4.5.
Recall from DeÔ¨Ånition 2.1.2.23 that a set X is called Ô¨Ånite if there exists a natural
number n P N and an isomorphism of sets X √ë n. Let Fin denote the category whose
objects are the Ô¨Ånite sets and whose morphisms are the functions. Let S denote the
category whose objects are the sets n and whose morphisms are again the functions. The
diÔ¨Äerence between Fin and S is that every object in S is one of these n‚Äôs, whereas every
object in Fin is just isomorphic to one of these n‚Äôs.
For every object X P ObpFinq, there exists an isomorphism pX : X
‚Äì
√ù√ë m for some
unique object m P ObpSq. Find an equivalence of categories Fin ¬ª
√ù√ë S.
‚ô¶
Solution 5.3.4.5.
There is an obvious inclusion functor i: S √ë Fin, i.e., n √û√ë n P ObpFinq. DeÔ¨Åne a
functor Q: Fin √ë S. On a Ô¨Ånite set X of cardinality |X| ‚Äú m, we take QpXq ‚Äú m. But
given a function f : X √ë Y , where |Y | ‚Äú n, how do we get a function Qpfq: m
?√ù√ë n,
especially after what was learned in Exercise 2.1.2.19?
Luckily, we are provided with isomorphisms pX : X
‚Äì
√ù√ë m and pY : Y
‚Äì
√ù√ë n.
Let
qX : m √ë X be the inverse of pX, so qX Àù pX ‚Äú pX Àù qX ‚Äú idX. Then to deÔ¨Åne Qpfq we
18The phrase ‚Äúthese Ô¨Åt together into‚Äù is shorthand for, and can be replaced by, ‚Äúthe naturality squares
commute for these components, so together they constitute.‚Äù

302
CHAPTER 5. BASIC CATEGORY THEORY
just follow the other arrows in this diagram:
X
f
 Y
pY

m
qX

Qpfq
 n
In other words, for f : X √ë Y , we deÔ¨Åne Qpfq ‚Äú pY Àù f Àù qX. We have now given a
questionable functor Q. In fact, the construction of Q is suÔ¨Éciently odd that it pays to
check carefully that it follows both the identity law and the composition law for functors.
On identity morphisms idX, we have QpidXq ‚Äú pX Àù idX Àù qX ‚Äú idX, so the identity law
holds. And for g: Y √ë Z, we have
Qpgq Àù Qpfq ‚Äú pZ Àù g Àù qY Àù pY Àù f Àù qX ‚Äú pZ Àù g Àù f Àù qX ‚Äú Qpg Àù fq,
so the composition law holds too; i.e., Q is indeed a functor.
We still need to show that Q and i are mutually inverse equivalences of categories. We
give a natural transformation Œ±: idFin √ë i Àù Q, and a natural transformation Œ±1 : idS √ë
Q Àù i. Roughly, we take Œ± ‚Äú p and Œ±1 ‚Äú q. We go through the details for Œ±.
For each X P ObpFinq, we set Œ±X to be the component pX : X √ë i Àù QpXq ‚Äú m. We
simply need to check that the naturality square commutes for each f : X √ë Y , namely,
X
pX 
f

m
pY ÀùfÀùqX

Y
pY
 n
But pY Àù f Àù qX Àù pX ‚Äú pY Àù f holds because qX Àù pX ‚Äú idX.
‚ô¶
Exercise 5.3.4.6.
We say that two categories C and D are equivalent if there exists an equivalence of
categories between them. Show that the relation of being equivalent is an equivalence
relation on ObpCatq.
‚ô¶
Solution 5.3.4.6.
For categories C and D, we write C ¬ª D if there exists an equivalence between them.
Clearly, this relation is reÔ¨Çexive because the identity C
idC
√ù√ù√ë C is an isomorphism by
Exercise 5.1.1.21, and isomorphisms of categories are equivalences by Exercise 5.3.4.2.

5.3. NATURAL TRANSFORMATIONS
303
To see that it is symmetric, suppose C ¬ª D. Then there exists an equivalence F : C √ë
D, which by DeÔ¨Ånition 5.3.4.1 has an inverse F 1 : D √ë C. Then F 1 is also an equivalence,
so D ¬ª C.
To see that it is transitive, suppose C ¬ª D and D ¬ª E.
Then we have inverse
equivalences pF, F 1q and pG, G1q as shown:
C
F
 D
G

F 1

E
G1

We need to show that G Àù F : C √ë E is an equivalence. Before we can do that, we should
name the natural isomorphisms that establish the equivalences:
Œ±: F 1 Àù F
‚Äì
√ù√ë idC,
Œ±1 : F Àù F 1
‚Äì
√ù√ë idD,
Œ≤ : G1 Àù G ‚Äì
√ù√ë idD,
Œ≤1 : G Àù G1
‚Äì
√ù√ë idE.
Using whiskering (DeÔ¨Ånition 5.3.2.16), we have natural transformations
G Àù F Àù F 1 Àù G1
GÀõŒ±1ÀõG
√ù√ù√ù√ù√ù√ë G Àù G1
Œ≤1
√ù√ë idE
(5.17)
and similarly we obtain a natural transformation F 1 Àù G1 Àù G Àù F √ë idC. In fact, each
morphism in (5.17) is a natural isomorphism by Exercise 5.3.2.21, so the composites
G Àù F Àù F 1 Àù G1
‚Äì
√ù√ë idE and F 1 Àù G1 Àù G Àù F
‚Äì
√ù√ë idC are natural isomorphisms too. This
proves that G Àù F is an equivalence of categories, so C ¬ª E as desired.
‚ô¶
Example 5.3.4.7. Consider the group Z2 :‚Äú pt0, 1u, 0, `q, where 1 ` 1 ‚Äú 0. As a category,
Z2 has one object ‚ñ≤and two morphisms, namely, 0, 1, such that 0 is the identity. Since
Z2 is a group, every morphism is an isomorphism.
Let C ‚Äú 1 be the terminal category, as in Exercise 5.1.2.40. One might accidentally
believe that C is equivalent to Z2, but this is not the case. The argument in favor of
the accidental belief is that we have unique functors F : Z2 √ë C and F 1 : C √ë Z2 (and
this is true); the round-trip F Àù F 1 : C √ë C is the identity (and this is true); and for the
round-trip F 1 Àù F : Z2 √ë Z2 both morphisms in Z2 are isomorphisms, so any choice of
morphism Œ±‚ñ≤: ‚ñ≤√ë F 1 Àù Fp‚ñ≤q will be an isomorphism (and this is true). The problem is
that whatever one does with Œ±‚ñ≤, one gets a questionably natural isomorphism, but it will
never be natural.
When we round-trip F 1 Àù F : Z2 √ë Z2, the image of 1: ‚ñ≤√ë ‚ñ≤is F 1 Àù Fp1q ‚Äú 0 ‚Äú id‚ñ≤.
So the naturality square for the morphism 1 looks like this:
‚ñ≤
Œ±‚ñ≤

1

‚ñ≤
0‚ÄúF 1ÀùF p1q

‚ñ≤
Œ±‚ñ≤
 ‚ñ≤

304
CHAPTER 5. BASIC CATEGORY THEORY
where it is undecided whether Œ±‚ñ≤is to be 0 or 1. Unfortunately, neither choice works
(i.e., for neither choice will the diagram commute) because x ` 1 ‚Ä∞ x ` 0 in Z2.
DeÔ¨Ånition 5.3.4.8 (Full and faithful functors). Let C and D be categories, and let
F : C √ë D be a functor. For any two objects c, c1 P ObpCq, there is a function
HomF pc, c1q: HomCpc, c1q √ë HomDpFpcq, Fpc1qq
guaranteed by the deÔ¨Ånition of functor. We say that F is a full functor if HomF pc, c1q
is surjective for every c, c1 P ObpCq. We say that F is a faithful functor if HomF pc, c1q is
injective for every c, c1. We say that F is a fully faithful functor if HomF pc, c1q is bijective
for every c, c1.
Exercise 5.3.4.9.
Let 1 and 2 be the discrete categories on one and two objects respectively. There is
only one functor F : 2 √ë 1.
a. Is it full?
b. Is it faithful?
‚ô¶
Solution 5.3.4.9.
a. No. Take the objects c ‚Äú 1 and c1 ‚Äú 2 in Obp2q. We have Hom2p1, 2q ‚Äú H, whereas
Hom1pFp1q, Fp2qq ‚Äú Hom1p1, 1q ‚Äú tid1u has one element. The function HomF p1, 2q
cannot be surjective.
b. Yes. Every hom-set in 2 has at most one element, and every function out of a 0- or
1-element set is injective.
‚ô¶
Exercise 5.3.4.10.
Let 0 denote the empty category, and let C be any category. There is a unique functor
F : 0 √ë C.
a. For general C, will F be full?
b. For general C, will F be faithful?
c. For general C, will F be an equivalence of categories?
‚ô¶

5.3. NATURAL TRANSFORMATIONS
305
Solution 5.3.4.10.
a. Yes, vacuously.
b. Yes, vacuously.
c. No, generally there will be no functor C
?√ù√ë 0 (unless C ‚Äú 0), so F could not be an
equivalence.
‚ô¶
Proposition 5.3.4.11. Let C and C1 be categories, and let F : C √ë C1 be an equivalence
of categories. Then F is fully faithful.
Sketch of proof. Suppose F is an equivalence, so we can Ô¨Ånd a functor F 1 : C1 √ë C and
natural isomorphisms Œ±: idC
‚Äì
√ù√ë F 1 Àù F and Œ±1 : idC1
‚Äì
√ù√ë F Àù F 1. We need to know that for
any objects c, d P ObpCq, the map
HomF pc, dq: HomCpc, dq √ë HomC1pFc, Fdq
is bijective. Consider the following diagram
HomCpc, dq
HomF pc,dq 
HomCpŒ±¬¥1
c
,Œ±dq

HomC1pFc, Fdq
HomC1ppŒ±1
F Cq¬¥1,Œ±1
F Dq

HomF 1pF c,F dq

HomCpF 1Fc, F 1Fdq
HomF pF 1F c,F 1F dq
 HomC1pFF 1Fc, FF 1Fdq
One can check that HomCpŒ±¬¥1
c , Œ±dq is bijective, so the vertical function is surjective by
Exercise 3.4.5.3. The fact that HomC1ppŒ±1
F Cq¬¥1, Œ±1
F Dq is bijective implies that the vertical
function is injective. Thus we know that HomF 1pFc, Fdq is bijective. This implies that
HomF pc, dq is bijective as well.
‚ñ°
Exercise 5.3.4.12.
Let Z2 be the group (as category) from Example 5.3.4.7. Are there any fully faithful
functors Z2 √ë 1?
‚ô¶

306
CHAPTER 5. BASIC CATEGORY THEORY
Solution 5.3.4.12.
No. As a category, Z2 has one object ObpZ2q ‚Äú t‚ñ≤u, and HomZ2p‚ñ≤, ‚ñ≤q ‚Äú t0, 1u has
two elements. Since Hom1p1, 1q ‚Äú tid1u has only one element, there is no way a functor
Z2 √ë 1 could be faithful.
‚ô¶
5.4
Categories and schemas are equivalent, Cat ¬ª Sch
Perhaps it is intuitively clear that schemas are somehow equivalent to categories. In fact,
this is a reason that so much attention has been given to databases (and ologs). This
section makes the equivalence between schemas and categories precise; it is proved in
Section 5.4.2. The basic idea was laid out in Section 5.2.2.
5.4.1
The category Sch of schemas
Recall from DeÔ¨Ånition 4.5.2.7 that a schema consists of a pair C :‚Äú pG, ¬ªq, where G ‚Äú
pV, A, src, tgtq is a graph and ¬ª is a congruence, meaning a kind of equivalence relation
on the paths in G (see DeÔ¨Ånition 4.5.2.3). If we think of a schema as being analogous to
a category, what in schema-land should fulÔ¨Åll the role of functors? That is, what are to
be the morphisms in Sch?
Unfortunately, one‚Äôs Ô¨Årst guess may give the wrong idea if we want an equivalence
Sch ¬ª Cat. Since an object in Sch is a graph with a congruence, one might imagine that
a morphism C √ë C1 in Sch should be a graph homomorphism (as in DeÔ¨Ånition 4.3.3.1)
that preserves the congruence. But graph homomorphisms require that arrows be sent to
arrows, whereas we are more interested in paths than in individual arrows‚Äîthe arrows
are merely useful for presentation.
If instead we deÔ¨Åne morphisms between schemas to be maps that send paths in C to
paths in C1, subject to the requirements that path endpoints, path concatenations, and
path equivalences are preserved, this will turn out to give the correct notion. In fact,
since a path is a concatenation of its arrows, it is more concise to give a function F from
the arrows of C to the paths of C1. This is how we proceed.
Recall from Examples 5.1.2.25 and 5.3.1.16 the paths-graph functor Paths: Grph √ë
Grph, the paths of paths functor Paths Àù Paths: Grph √ë Grph, and the natural trans-
formations for any graph G,
Œ∑G : G √ë PathspGq
and
ŒºG : PathspPathspGqq √ë PathspGq.
(5.18)
The function Œ∑G spells out the fact that every arrow in G counts as a path in G, and the
function ŒºG spells out the fact that a head-to-tail sequence of paths (a path of paths) in
G can be concatenated to a single path in G.

5.4. CATEGORIES AND SCHEMAS ARE EQUIVALENT, CAT ¬ª SCH
307
Exercise 5.4.1.1.
Let r2s denote the graph
0‚Äö e1
√ù√ë
1‚Äö e2
√ù√ë
2‚Äö, and let Loop denote the unique graph having
one vertex and one arrow
Loop :‚Äú
s‚Äö
f
K
.
a. Find a graph homomorphism f : r2s √ë PathspLoopq that is injective on arrows (i.e.,
such that no two arrows in the graph r2s are sent by f to the same arrow in PathspLoopq).
b. The graph r2s has six paths, so Pathspr2sq has six arrows. What are the images of these
arrows under the graph homomorphism Pathspfq: Pathspr2sq √ë PathspPathspLoopqq,
where f is the morphism you chose in part (a)?
c. Finally, using ŒºLoop : PathspPathspLoopqq √ë PathspLoopq, a path of paths in Loop can
be concatenated to a path. Write what the composite graph homomorphism
Pathspr2sq
Pathspfq
√ù√ù√ù√ù√ù√ë PathspPathspLoopqq
ŒºLoop
√ù√ù√ù√ù√ë PathspLoopq
does to the six arrows in Pathspr2sq.
‚ô¶
Solution 5.4.1.1.
a. The graph PathspLoopq has one vertex, s, and its set of arrows can be identiÔ¨Åed with
the set of natural numbers N. To give a graph morphism f : r2s √ë PathspLoopq, we
have no choice on vertices, and we can send each of e1 and e2 to any path we choose.
In other words, we have a bijection,
HomGrphpr2s, PathspLoopqq ‚Äì
√ù√ë N ÀÜ N.
Let‚Äôs arbitrarily choose f to be p4, 3q:
f : r2s √ë PathspLoopq
r2s
PathspLoopq
e1
srf, f, f, fs
e2
srf, f, fs

308
CHAPTER 5. BASIC CATEGORY THEORY
b.
Pathspfq
Pathspr2sq
PathspPathspLoopqq
0r s
sr s
0re1s
srsrf, f, f, fss
0re1, e2s
srsrf, f, f, fs, srf, f, fss
1r s
sr s
1re2s
srsrf, f, fss
2r s
sr s
c.
ŒºLoop Àù Pathspfq
Pathspr2sq
PathspPathspLoopqq
0r s
sr s
0re1s
srf, f, f, fs
0re1, e2s
srf, f, f, f, f, f, fs
1r s
sr s
1re2s
srf, f, fs
2r s
sr s
‚ô¶
Before we look at the deÔ¨Ånition of schema morphism, let‚Äôs return to the original
question. Given graphs G, G1 (underlying schemas C, C1) we wanted a function from the
paths in G to the paths in G1, but it was more concise to speak of a function from arrows
in G to paths in G1. How do we get what we originally wanted from the concise version?
Given a graph homomorphism f : G √ë PathspG1q, we use (5.18) to form the following
composition, denoted simply Pathsf : PathspGq √ë PathspG1q:
PathspGq
Pathspfq  PathspPathspG1qq
ŒºG1
 PathspG1q
(5.19)
This says that given a function from arrows in G to paths in G1, a path in G becomes a
path of paths in G1, which can be concatenated to a path in G1.
DeÔ¨Ånition 5.4.1.2 (Schema morphism). Let G ‚Äú pV, A, src, tgtq and G1 ‚Äú pV 1, A1, src1, tgt1q
be graphs, and let C ‚Äú pG, ¬ªGq and C1 ‚Äú pG1, ¬ªG1q be schemas. A schema morphism F
from C to D, denoted F : C √ë D, is a graph homomorphism 19
F : G √ë PathspG1q
19By DeÔ¨Ånition 4.3.3.1, a graph homomorphism F : G √ë PathspG1q will consist of a vertex part
F0 : V √ë V 1 and an arrows part F1 : E √ë PathpG1q. See also DeÔ¨Ånition 4.3.2.1.

5.4. CATEGORIES AND SCHEMAS ARE EQUIVALENT, CAT ¬ª SCH
309
that satisÔ¨Åes the following condition for any paths p and q in G:
if
p ¬ªG q
then
PathsF ppq ¬ªG1 PathsF pqq.
(5.20)
Two schema morphisms E, F : C √ë C1 are considered identical if they agree on vertices
(i.e., E0 ‚Äú F0) and if, for every arrow f in G, there is a path equivalence in G1
E1pfq ¬ªG1 F1pfq.
We now deÔ¨Åne the category of schemas, denoted Sch, to be the category whose objects
are schemas as in DeÔ¨Ånition 4.5.2.7 and whose morphisms are schema morphisms, as
in DeÔ¨Ånition 5.4.1.2.
The identity morphism on schema C ‚Äú pG, ¬ªGq is the schema
morphism idC :‚Äú Œ∑G : G √ë PathspGq, as deÔ¨Åned in Equation (5.18).
We need only
understand how to compose schema morphisms F : C √ë C1 and F 1 : C1 √ë C2. On objects
their composition is clear. Given an arrow in C, it is sent to a path in C1; each arrow in
that path is sent to a path in C2. We then have a path of paths, which we can concatenate
(via ŒºG2 : PathspPathspG2qq √ë PathspG2q, as in (5.18)) to get a path in C2 as desired.
Slogan 5.4.1.3.
A schema morphism sends vertices to vertices, arrows to paths, and path
equivalences to path equivalences.
Example 5.4.1.4. Let r2s be the linear order graph of length 2, at the left, and let C denote
the diagram at the right:
r2s :‚Äú
0‚Äö
f1
 1‚Äö
f2
 2‚Äö
C :‚Äú
a‚Äö
g

i
:
b‚Äö
h
c‚Äö
(5.21)
We impose on C the path equivalence declaration arg, hs ¬ª aris and show that in this
case C and r2s are isomorphic in Sch. There is a unique schema morphism F : r2s √ë C
such that 0 √û√ë a, 1 √û√ë b, 2 √û√ë c; it sends each arrow in r2s to a path of length 1 in C.
And we have a schema morphism F 1 : C √ë r2s, which reverses this mapping on vertices;
note that F 1 must send the arrow i in C to the path 0rf1, f2s in r2s, which is okay. The
round-trip F 1 Àù F : r2s √ë r2s is identity. The round-trip F Àù F 1 : C √ë C may look like it
is not the identity; indeed it sends vertices to themselves and sends i to the path arg, hs.
But according to DeÔ¨Ånition 5.4.1.2, this schema morphism is considered identical to idC
because there is a path equivalence idCpiq ‚Äú aris ¬ª arg, hs ‚Äú F Àù F 1piq.

310
CHAPTER 5. BASIC CATEGORY THEORY
Exercise 5.4.1.5.
Consider the schema r2s and the schema C pictured in (5.21); this time we do not
impose any path equivalence declarations on C, so arg, hs Ô¨Åaris in the current version of
C.
a. How many schema morphisms are there r2s √ë C that send 0 to a?
b. How many schema morphisms are there C √ë r2s that send a to 0?
‚ô¶
Solution 5.4.1.5.
a. There are eight, shown as columns:
The eight schema morphisms r2s √ë C that send 0 √ë a
f1
ar s
ar s
ar s
ar s
args
args
arg, hs
aris
f2
ar s
args
arg, hs
aris
br s
brhs
cr s
cr s
b. There are six, shown as columns:
The six schema morphisms C √ë r2s that send a √ë 0
g
0r s
0r s
0r s
0rf1s
0rf1s
0rf1, f2s
h
0r s
0rf1s
0rf1, f2s
1r s
1rf2s
2r s
i
0r s
0rf1s
0rf1, f2s
1r s
1rf2s
2r s
‚ô¶
Exercise 5.4.1.6.
Consider the graph Loop as follows:
Loop :‚Äú
s‚Äö
f
K
and for any natural number n P N, let Ln denote the schema pLoop, ¬ªnq, where ¬ªn is
the PED f n`1 ¬ª f n. Then Ln is the ‚ÄúÔ¨Ånite hierarchy of height n‚Äù schema of Example
4.5.2.12. Let 1 denote the graph with one vertex and no arrows; consider it a schema.
a. Is 1 isomorphic to L1 in Sch?

5.4. CATEGORIES AND SCHEMAS ARE EQUIVALENT, CAT ¬ª SCH
311
b. Is 1 isomorphic to any (other) Ln?
‚ô¶
Solution 5.4.1.6.
a. No. The schema L1 is the graph Loop with the PED f 2 ‚Äú f, so there is still one
nontrivial arrow in L1, namely, f 1 Ô¨Åf 0, whereas 1 has only the identity arrow.
b. Yes, there is an isomorphism of schemas 1 ‚Äì L0, because f ¬ª f 0 ‚Äú ids in L0.
‚ô¶
Exercise 5.4.1.7.
Let Loop and Ln be schemas as deÔ¨Åned in Exercise 5.4.1.6.
a. What is the cardinality of the set HomSchpL3, L5q?
b. What is the cardinality of the set HomSchpL5, L3q? Hint: The cardinality of the set
HomSchpL4, L9q is 8.
‚ô¶
Solution 5.4.1.7.
In general, a schema morphism G: Lm √ë Ln is determined by where it sends the
generating morphism f : s √ë s. At Ô¨Årst glance, G can send f to f k for any k P N, and
we note that these are all the same for k ƒõ n. But the functor laws impose a rule they
must follow, because f m`1 ‚Äú f m, namely,
f km`k ‚Äú pf kqm`1 ‚Äú Gpf m`1q ‚Äú Gpf mq ‚Äú pf kqm ‚Äú f km.
The only way we could have f km`k ‚Äú f km is if k ‚Äú 0 or if km ƒõ n. Thus we have a
bijection
HomSchpLm, Lnq ‚Äì
√ù√ë tk ƒè n | k ‚Äú 0 or km ƒõ nu.
We use this criterion to arrive at each of the following answers.
a. Here m ‚Äú 3 and n ‚Äú 5, so the cardinality is |HomSchpL3, L5q| ‚Äú |t0, 2, 3, 4, 5u| ‚Äú 5.
b. Here m ‚Äú 5 and n ‚Äú 3, so the cardinality is |HomSchpL5, L3q| ‚Äú |t0, 1, 2, 3u| ‚Äú 4.
‚ô¶

312
CHAPTER 5. BASIC CATEGORY THEORY
5.4.2
Proving the equivalence
This section proves the equivalence of categories, Sch ¬ª Cat. We construct the two
functors Sch √ë Cat and Cat √ë Sch and then prove that these are mutually inverse
equivalences (see Theorem 5.4.2.3).
Construction 5.4.2.1 (From schema to category). We Ô¨Årst deÔ¨Åne a functor L: Sch √ë Cat.
Let C ‚Äú pG, ¬ªq be a schema, where G ‚Äú pV, A, src, tgtq. DeÔ¨Åne LpCq to be the category
with ObpLpCqq ‚Äú V , and with HomLpCqpv1, v2q :‚Äú PathGpv, wq{¬ª, i.e., the set of paths in
G modulo the path equivalence relation for C. The composition of morphisms is deÔ¨Åned
by concatenation of paths, and part (4) of DeÔ¨Ånition 4.5.2.3 implies that such composition
is well deÔ¨Åned. We have thus deÔ¨Åned L on objects of Sch.
Given a schema morphism F : C √ë C1, where C1 ‚Äú pG1, ¬ª1q, we need to produce a
functor LpFq: LpCq √ë LpC1q. The objects of LpCq and LpC1q are the vertices of G and G1
respectively, and F provides the necessary function on objects. Diagram (5.19) provides
a function PathsF : PathspGq √ë PathspG1q provides the requisite function for morphisms.
A morphism in LpCq is an equivalence class of paths in C. For any representative path
p P PathspGq, we have PathsF ppq P PathspG1q, and if p ¬ª q, then PathsF ppq ¬ª1 PathsF pqq
by condition (5.20).
Thus PathsF indeed provides us with a function HomLpCq √ë
HomLpC1q. This deÔ¨Ånes L on morphisms in Sch. It is clear that L preserves compo-
sition and identities, so it is a functor.
Construction 5.4.2.2 (From category to schema). We Ô¨Årst deÔ¨Åne a functor R: Cat √ë Sch.
Let C ‚Äú pObpCq, HomC, dom, cod, ids, compq be a category (see Exercise 5.1.1.27). Let
RpCq ‚Äú pG, ¬ªq, where G is the graph
G ‚Äú pObpCq, HomC, dom, codq,
and with ¬ª deÔ¨Åned as the congruence generated by the following path equivalence declara-
tions: for any composable sequence of morphisms f1, f2, . . . , fn (with dompfi`1q ‚Äú codpfiq
for each 1 ƒè i ƒè n ¬¥ 1), we put
dompf1qrf1, f2, . . . , fns ¬ª dompf1qrfn Àù ¬® ¬® ¬® Àù f2 Àù f1s,
(5.22)
equating a path of length n with a path of length 1. This deÔ¨Ånes R on objects of Cat.
A functor F : C √ë D induces a schema morphism RpFq: RpCq √ë RpDq, because
vertices are sent to vertices, arrows are sent to arrows (as paths of length 1), and path
equivalence is preserved by (7.17) and the fact that F preserves the composition formula.
This deÔ¨Ånes R on morphisms in Cat. It is clear that R preserves compositions, so it is a
functor.

5.4. CATEGORIES AND SCHEMAS ARE EQUIVALENT, CAT ¬ª SCH
313
Theorem 5.4.2.3. The functors
L: Sch
 Cat: R

are mutually inverse equivalences of categories.
Sketch of proof. It is clear that there is a natural isomorphism Œ±: idCat
‚Äì
√ù√ë L Àù R; i.e.,
for any category C, there is an isomorphism C ‚Äì LpRpCqq.
Before giving an isomorphism Œ≤ : idSch
‚Äì
√ù√ë R Àù L, we look at RpLpGqq ‚Äú: pG1, ¬ª1q
for a schema G ‚Äú pG, ¬ªq. Write G ‚Äú pV, A, src, tgtq and G1 ‚Äú pV 1, A1, src1, tgt1q. On
vertices we have V ‚Äú V 1. On arrows we have A1 ‚Äú PathG{¬ª. The congruence ¬ª1 for
RpLpGqq is imposed in (5.22). Under ¬ª1, every path of paths in G is made equivalent to
its concatenation, considered as a single path of length 1 in G1.
There is a natural transformation Œ≤ : idSch √ë R Àù L whose G component sends each
arrow in G to a certain path of length 1 in G1. We need to see that Œ≤G has an inverse.
But this is straightforward: every arrow f in R Àù LpGq is an equivalence class of paths
in G; choose any one, and have Œ≤¬¥1 send f there; by DeÔ¨Ånition 5.4.1.2, any other choice
will give the identical morphism of schemas. It is easy to show that each round-trip is
equal to the identity (again up to the notion of equality of schema morphism given in
DeÔ¨Ånition 5.4.1.2).
‚ñ°

314
CHAPTER 5. BASIC CATEGORY THEORY
X:=
State 0 
State 1 
State 2 
ate 
S ate 1 
te 2 
0 
e 2
te
Stat
Stat
tat
a 
a 
a 
b 
b 
b 
Y :=
State 0 
State 1A 
State 2B 
1A 
Sta
State
b 
State 2A 
State 1B 
State 1C 
State
e
2B
State
ate
S
e 2
tate
2
State
S
2B
A 
2A
te
Sta
Stat
b 
b 
b 
b 
a 
a 
a 
a 
a 
a 
e
ate 0
te
Stat
ate 0 
b 
b
a 
b 
Original model X
ID
a
b
State 0
State 1
State 2
State 1
State 2
State 1
State 2
State 0
State 0
Proposed model Y
ID
a
b
State 0
State 1A
State 2A
State 1A
State 2A
State 1B
State 1B
State 2B
State 1C
State 1C
State 2B
State 1B
State 2A
State 0
State 0
State 2B
State 0
State 0
Figure 5.1 Finite state machines X and Y with alphabet Œ£ ‚Äú ta, bu and three states
(left) or six states (right), and their associated action tables.

Chapter 6
Fundamental Considerations of
Categories
This chapter focuses mainly on limits and colimits in a given category C. It also discusses
other important and interesting categorical constructions, such as the simple notion of
opposite categories and the Grothendieck construction, which gives something like the
histogram of a set-valued functor. As usual, the work relies as often as possible on a
grounding in databases.
This chapter is in some sense parallel to Chapter 3, Fundamental Considerations in
Set. When attention is restricted to C ‚Äú Set, the discussion of limits and colimits in this
chapter subsumes the earlier work (which focused on certain Ô¨Ånite limits and colimits).
Also, this chapter ends with a section called Arithmetic of Categories, Section 6.2.5, which
is tightly parallel with Section 3.4.3. This shows that in terms of grade school arithmetic
expressions like
A ÀÜ pB ` Cq ‚Äú? pC ÀÜ Aq ` pB ÀÜ Aq,
the behavior of categories is predictable: the rules for categories are well aligned with
those of sets, which are well aligned with those of natural numbers.
6.1
Limits and colimits
Limits and colimits are universal constructions, meaning they represent certain ideals of
behavior in a category. When it comes to sets that map to A and B, the A ÀÜ B grid is
ideal‚Äîit projects on to both A and B as straightforwardly as possible. When it comes to
sets that can interpret the elements of both A and B, the disjoint union A\B is ideal‚Äîit
315

316
CHAPTER 6. FUNDAMENTAL CONSIDERATIONS OF CATEGORIES
includes both A and B without confusion or superÔ¨Çuity. These are limits and colimits in
Set. Limits and colimits exist in other categories as well.
Limits in a preorder are meets; colimits in a preorder are joins. Limits and colimits
also exist for database instances and monoid actions, allowing us to discuss, for example,
the product or union of diÔ¨Äerent Ô¨Ånite state machines.
Limits and colimits exist for
topological spaces, giving rise to products and unions as well as to quotients.
Limits and colimits do not exist in every category. However, when C is complete with
respect to limits (or colimits), these limits always seem to mean something valuable to
human intuition. For example, when a subject had already been studied for a long time
before category theory came to promenance, it often turned out that classically interesting
constructions in the subject corresponded with limits and colimits in its categoriÔ¨Åcation
C. For example, products, unions, and quotients by equivalence relations are classical
ideas in set theory that are naturally captured by limits and colimits in Set.
6.1.1
Products and coproducts in a category
Section 3.1 discussed products and coproducts in the category Set of sets. Now we discuss
the same notions in an arbitrary category. For both products and coproducts, we begin
with examples and then write the general concept.
6.1.1.1
Products
The product of two sets is a grid, which projects down onto each of the two sets. This is
a good intuition for products in general.
Example 6.1.1.2. Given two preorders, X1 :‚Äú pX1, ƒè1q and X2 :‚Äú pX2, ƒè2q, we can take
their product and get a new preorder X1 ÀÜ X2. Both X1 and X2 have underlying sets
(namely, X1 and X2), so we might hope that the underlying set of X1 ÀÜ X2 is the set
X1 ÀÜX2 of ordered pairs, and this turns out to be true. We have a notion of less-than on
X1, and we have a notion of less-than on X2; we need to construct a notion of less-than
on X1 ÀÜ X2. So, given two ordered pairs px1, x2q and px1
1, x1
2q, when should we say that
px1, x2q ƒè1,2 px1
1, x1
2q holds? A guess is that it holds iÔ¨Äboth x1 ƒè1 x1
1 and x2 ƒè2 x1
2 hold,
and this works:1
X1 ÀÜ X2 :‚Äú pX1 ÀÜ X2, ƒè1,2q.
Note that the projection functions X1 ÀÜ X2 √ë X1 and X1 ÀÜ X2 √ë X2 induce mor-
phisms of preorders. That is, if px1, x2q ƒè1,2 px1
1, x1
2q, then in particular, x1 ƒè1 x1
1 and
1Given R1 ƒé X1 ÀÜ X1, R2 ƒé X2 ÀÜ X2, take R1 ÀÜ R2 ƒé pX1 ÀÜ X2q ÀÜ pX1 ÀÜ X2q.

6.1. LIMITS AND COLIMITS
317
x2 ƒè2 x1
2. So we have preorder morphisms
X1 ÀÜ X2
R
:
X1
X2
Exercise 6.1.1.3.
Suppose you have a partial order S ‚Äú pS, ƒèSq on songs (you prefer some songs over
others, but sometimes you cannot compare).
And suppose you have a partial order
A ‚Äú pA, ƒèAq on pieces of art. You are about to be given two pairs ps, aq and ps1, a1q,
each including a song and an art piece. Does the product partial order S ÀÜ A provide a
reasonable guess for your preferences on these pairs?
‚ô¶
Solution 6.1.1.3.
According to the product partial order S ÀÜ A, I would like a pair ps, aq more than a
pair ps1, a1q if and only if I liked s more than s1, and a more than a1. It is agnostic (i.e.,
puts no preference) on cases where s ƒõ s1 and a ƒè a1 or where s ƒè s1 and a ƒõ a1. This is
perfectly reasonable, at least as a Ô¨Årst guess. What better could an automatic procedure
do?
‚ô¶
Exercise 6.1.1.4.
Consider the partial order ƒè on N given by standard less-than-or-equal-to, so 5 ƒè 9,
and let divides be the partial order from Example 4.4.3.2, where 6 divides 12. If we
call the product order pX, ƒ∫q :‚Äú pN, ƒèq ÀÜ pN, dividesq, which of the following are true?
p2, 4q ƒ∫ p3, 4q
p2, 4q ƒ∫ p3, 5q
p2, 4q ƒ∫ p8, 0q
p2, 4q ƒ∫ p0, 0q
‚ô¶
Solution 6.1.1.4.
Among these, the true ones are
p2, 4q ƒ∫ p3, 4q
and
p2, 4q ƒ∫ p8, 0q.
‚ô¶

318
CHAPTER 6. FUNDAMENTAL CONSIDERATIONS OF CATEGORIES
Example 6.1.1.5. Given two graphs G1 ‚Äú pV1, A1, src1, tgt1q and G2 ‚Äú pV2, A2, src2, tgt2q,
we can take their product and get a new graph G1 ÀÜ G2. The vertices are the grid of
vertices V1 ÀÜ V2, so each vertex in G1 ÀÜ G2 is labeled by a pair of vertices, one from G1
and one from G2. When should an arrow connect pv1, v2q to pv1
1, v1
2q? Whenever we can
Ô¨Ånd an arrow in G1 connecting v1 to v1
1 and we can Ô¨Ånd an arrow in G2 connecting v2
to v1
2. It turns out there is a simple formula for the set of arrows in G1 ÀÜ G2, namely,
A1 ÀÜ A2.
Let‚Äôs write G :‚Äú G1 ÀÜ G2 and say, G ‚Äú pV, A, src, tgtq. We said that V ‚Äú V1 ÀÜ V2 and
A ‚Äú A1 ÀÜ A2. What should the source and target functions A √ë V be? Given a function
src1 : A1 √ë V1 and a function src2 : A2 √ë V2, the universal property for products in Set
(Proposition 3.1.1.10 or, better, Example 3.1.1.15) provides a unique function
src :‚Äú src1 ÀÜ src2 : A1 ÀÜ A2 √ë V1 ÀÜ V2.
Namely, the source of arrow pa1, a2q will be the vertex psrc1pa1q, src2pa2qq. Similarly, we
have a ready-made choice of target function tgt ‚Äú tgt1 ÀÜ tgt2. We have now deÔ¨Åned the
product graph,
G ‚Äú G1 ÀÜ G2 ‚Äú pV1 ÀÜ V2, A1 ÀÜ A2, src1 ÀÜ src2, tgt1 ÀÜ tgt2q.
Here is a concrete example. Let I and J be drawn as follows:
I :‚Äú
v‚Äö
f 
w‚Äö
g
:
h
R
x‚Äö
J :‚Äú
q‚Äö
i
 r‚Äö
j
) s‚Äö
k
A
‚Ñì
 t‚Äö
Arrow pIq
ID
src
tgt
f
v
w
g
w
x
h
w
x
Vertex pIq
ID
v
w
x
Arrow pJq
ID
src
tgt
i
q
r
j
r
s
k
s
r
‚Ñì
s
t
Vertex pJq
ID
q
r
s
t

6.1. LIMITS AND COLIMITS
319
The product I ÀÜ J has, as expected, 3 Àö 4 ‚Äú 12 vertices and 3 Àö 4 ‚Äú 12 arrows:
I ÀÜ J :‚Äú
pv,qq
‚Äö
pf,iq

pv,rq
‚Äö

pv,sq
‚Äö

)
pv,tq
‚Äö
pw,qq
‚Äö
:+
pw,rq
‚Äö
:+
pw,sq
‚Äö
R
:+
pw,tq
‚Äö
px,qq
‚Äö
px,rq
‚Äö
px,sq
‚Äö
px,tq
‚Äö
Arrow pI ÀÜ Jq
ID
src
tgt
pf, iq
pv, qq
pw, rq
pf, jq
pv, rq
pw, sq
pf, kq
pv, sq
pw, rq
pf, ‚Ñìq
pv, sq
pw, tq
pg, iq
pw, qq
px, rq
pg, jq
pw, rq
px, sq
pg, kq
pw, sq
px, rq
pg, ‚Ñìq
pw, sq
px, tq
ph, iq
pw, qq
px, rq
ph, jq
pw, rq
px, sq
ph, kq
pw, sq
px, rq
ph, ‚Ñìq
pw, sq
px, tq
Vertex pI ÀÜ Jq
ID
pv, qq
pv, rq
pv, sq
pv, tq
pw, qq
pw, rq
pw, sq
pw, tq
px, qq
px, rq
px, sq
px, tq
Here is the most important thing to notice. Look at the Arrow table for I ÀÜJ, and for
each ordered pair, look only at the Ô¨Årst entry in all three columns; you will see something
that matches with the Arrow table for I. For example, in the I ÀÜ J table, the Ô¨Årst row‚Äôs
Ô¨Årst entries are f, v, w. Then do the same for the second entry in each column, and again
you will see a match with the Arrow table for J. These matches are readily visible graph
homomorphisms I ÀÜ J √ë I and I ÀÜ J √ë J in Grph.
Exercise 6.1.1.6.
Let r1s denote the linear order graph of length 1,
r1s :‚Äú
0‚Äö
f
√ù√ù√ë
1‚Äö
and let P ‚Äú Pathspr1sq be its paths-graph, as in Example 5.1.2.25 (so P should have
three arrows and two vertices). Draw the graph P ÀÜ P.
‚ô¶

320
CHAPTER 6. FUNDAMENTAL CONSIDERATIONS OF CATEGORIES
Solution 6.1.1.6.
As a check, P ÀÜ P should have four vertices and nine arrows. Here is the solution:
‚Äö
p0,0q
p0,0q
.
p0,fq

pf,0q

pf,fq
)
‚Äö
p0,1q
p0,1q
-
pf,1q

p1,0q
‚Äö
p1,0q
E
p1,fq
 p1,1q
‚Äö
p1,1q
F
‚ô¶
Exercise 6.1.1.7.
Recall from Example 4.5.2.10 that a discrete dynamical system (DDS) is a set s
together with a function f : s √ë s. It is clear that if
Loop :‚Äú
s‚Äö
f
K
is the loop schema, then a DDS is simply an instance (a functor) I : Loop √ë Set. We
have not yet discussed DDS products, but perhaps you can guess how they should work.
For example, consider these instances I, J : Loop √ë Set:
s
(I)
ID
f
A
C
B
C
C
C
I
A‚Äö

C‚Äö
*
B‚Äö

s
(J)
ID
f
x
y
y
x
z
z
J
x‚Äö
: y‚Äö
W
z‚Äö &

6.1. LIMITS AND COLIMITS
321
a. Make a guess and tabulate I ÀÜ J. Then draw it.2
b. Recall the notion of natural transformations between functors (see Example 5.3.3.5),
which in the case of functors Loop √ë Set are the morphisms of instances. Do you
see clearly that there is a morphism of instances I ÀÜ J √ë I and I ÀÜ J √ë J? Check
that if you look only at the left-hand coordinates in your I ÀÜ J, you see something
compatible with I.
‚ô¶
Solution 6.1.1.7.
a.
s
(I ÀÜ J)
ID
f
(A,x)
(C,y)
(A,y)
(C,x)
(A,z)
(C,z)
(B,x)
(C,y)
(B,y)
(C,x)
(B,z)
(C,z)
(C,x)
(C,y)
(C,y)
(C,x)
(C,z)
(C,z)
I ÀÜ J
pA,xq
‚Äö

pA,yq
‚Äö

pA,zq
‚Äö

pC,yq
‚Äö
 pC,xq
‚Äö
#
pC,zq
‚Äö
X
pB,xq
‚Äö

pB,yq
‚Äö

pB,zq
‚Äö

(Note that the order of pC, xq and pC, yq is switched in the picture of I ÀÜ J, for
readability reasons.)
b. We can see the projection I ÀÜ J √ë I (resp. I ÀÜ J √ë J) given by looking at the Ô¨Årst
entry (resp. the second entry) in each pair.
‚ô¶
In each case what is most important to recognize is that there are projection maps
I ÀÜ J √ë I and I ÀÜ J √ë J, and that the construction of I ÀÜ J seems as straightforward
as possible, subject to having these projections.
DeÔ¨Ånition 6.1.1.8. Let C be a category, and let X, Y P ObpCq be objects. A span on X
and Y consists of three constituents pZ, p, qq, where Z P ObpCq is an object, and where
2The result is not necessarily inspiring, but at least computing it is straightforward.

322
CHAPTER 6. FUNDAMENTAL CONSIDERATIONS OF CATEGORIES
p: Z √ë X and q: Z √ë Y are morphisms in C.
Z
p

q
N
X
Y
A product of X and Y is a span X
œÄ1
√ê√ù X ÀÜ Y
œÄ2
√ù√ë Y , such that for any other span
X
p√ê√ù Z
q√ù√ë Y there exists a unique morphism tp,q : Z √ë X ÀÜ Y such that the following
diagram commutes:3
X ÀÜ Y
œÄ1

œÄ2

X
Y
Z
p

q
 
tp,q

We often denote the morphism tp,q by xp, qy: Z √ë X ÀÜ Y .
Remark 6.1.1.9. DeÔ¨Ånition 6.1.1.8 endows the product of two objects with a universal
property.
It says that a product of two objects X and Y maps to those two objects
and serves as a gateway for all that do the same. ‚ÄúNone shall map to X and Y except
through me!‚Äù This grandiose property is held by products in all the various categories
discussed so far. It is what is meant by ‚ÄúX ÀÜ Y maps to both X and Y and does so as
straightforwardly as possible.‚Äù The grid of dots obtained as the product of two sets has
such a property (see Example 3.1.1.11).
Example 6.1.1.10. Example 6.1.1.2 discussed products of preorders. This example dis-
cusses products in an individual preorder. That is, by Proposition 5.2.1.13, there is a
functor PrO √ë Cat that realizes each individual preorder as a category. If P ‚Äú pP, ƒèq
is a preorder, what are products in P? Given two objects a, b P ObpPq, we Ô¨Årst consider
ta, bu spans, i.e., a √ê z √ë b. That is some z such that z ƒè a and z ƒè b. The product is
a span a ƒõ a ÀÜ b ƒè b, but such that every other spanning object z is less than or equal
to a ÀÜ b. In other words, a ÀÜ b is as big as possible subject to the condition of being less
than a and less than b. This is precisely their meet, a ^ b (see DeÔ¨Ånition 4.4.2.1).
3The names X ÀÜ Y and œÄ1, œÄ2 are not mathematically important; they are pedagogically useful.

6.1. LIMITS AND COLIMITS
323
Example 6.1.1.11. Note that the product of two objects in a category C may not exist.
Let‚Äôs return to preorders to see this phenomenon.
Consider the set R2, and say that px1, y1q ƒè px2, y2q if there exists ‚Ñìƒõ 1 such that
x1‚Ñì‚Äú x2 and y1‚Ñì‚Äú y2; in other words, point p is less than point q if, in order to travel
from q to the origin along a straight line, one must pass through p along the way. 4 We
have given a perfectly good partial order, but p :‚Äú p1, 0q and q :‚Äú p0, 1q do not have a
product. Indeed, it would have to be a nonzero point that was on the same line through
the origin as p and the same line through the origin as q, of which there are none.
Example 6.1.1.12. Note that there can be more than one product of two objects in a
category C but that any two choices will be canonically isomorphic. Let‚Äôs return once
more to preorders to see this phenomenon.
Consider the set R2, and say that px1, y1q ƒè px2, y2q if x2
1 ` y2
1 ƒè x2
2 ` y2
2, in other
words, if the former is closer to the origin. For any point p ‚Äú px0, y0q, let Cp ‚Äú tpx, yq P
R2 | x2 ` y2 ‚Äú x2
0 ` y2
0qu, and call it the orbit circle of p.
For any two points p, q, there will be lots of points that serve as products p ÀÜ q: any
point a on the smaller of their two orbit circles will suÔ¨Éce. Given any two points a, a1 on
this smaller circle, we have a unique isomorphism a ‚Äì a1 because a ƒè a1 and a1 ƒè a.
Exercise 6.1.1.13.
Consider the preorder P of cards in a deck, shown in Example 4.4.1.3; it is not the
whole story of cards in a deck, but take it to be so. Consider this preorder P as a category
(by way of the functor PrO √ë Cat).
a. For each of the following pairs, what is their product in P (if it exists)?
‚åúa diamond‚åùÀÜ ‚åúa heart‚åù
‚åúa queen‚åùÀÜ ‚åúa black card‚åù
‚åúa card‚åùÀÜ ‚åúa red card‚åù
‚åúa face card‚åùÀÜ ‚åúa black card‚åù
b. How would these answers diÔ¨Äer if P were completed to the ‚Äúwhole story‚Äù partial order
classifying cards in a deck?
‚ô¶
Solution 6.1.1.13.
a. The product of two elements in any preorder, such as P, is their meet (if it exists).
For example, the meet of ‚åúa queen‚åùand ‚åúa black card‚åùshould be a card that is both
4Note that p0, 0q is not related to anything else.

324
CHAPTER 6. FUNDAMENTAL CONSIDERATIONS OF CATEGORIES
a queen and a black card, if this notion exists in P. Then we have
‚åúa diamond‚åùÀÜ ‚åúa heart‚åù‚Äú Does Not Exist
‚åúa queen‚åùÀÜ ‚åúa black card‚åù‚Äú ‚åúa black queen‚åù
‚åúa card‚åùÀÜ ‚åúa red card‚åù‚Äú ‚åúa red card‚åù
‚åúa face card‚åùÀÜ ‚åúa black card‚åù‚Äú ‚åúa black queen‚åù
Some of these are strange because P is not the ‚Äúwhole story.‚Äù
b. If every subset of cards were put into the order, i.e., if we took P to be the power-set
of the set of cards, it would have all meets. Let‚Äôs write the empty set of cards as ‚åúa
nonexistent card‚åùbecause (by Rules 2.3.1.2) the label on a box is what one should call
each example of that class.
‚åúa diamond‚åùÀÜ ‚åúa heart‚åù‚Äú ‚åúa nonexistent card‚åù
‚åúa queen‚åùÀÜ ‚åúa black card‚åù‚Äú ‚åúa black queen‚åù
‚åúa card‚åùÀÜ ‚åúa red card‚åù‚Äú ‚åúa red card‚åù
‚åúa face card‚åùÀÜ ‚åúa black card‚åù‚Äú ‚åúa black face card‚åù
‚ô¶
Exercise 6.1.1.14.
Let X be a set, and consider it as a discrete category. Given two objects x, y P ObpXq,
under what conditions will there exist a product x ÀÜ y in X?
‚ô¶
Solution 6.1.1.14.
The only morphisms in a discrete category are identities. Since a product needs to
project to both factors, we must have x ‚Äú x ÀÜ y ‚Äú y. So the condition is x ‚Äú y. Indeed,
in that case, any other object z mapping to x and y maps uniquely to xÀÜy by z
id
√ù√ë xÀÜy.
‚ô¶
Exercise 6.1.1.15.
Let f : R √ë R be a function like one that you would see in grade school (e.g., fpxq ‚Äú
x`7). A typical thing to do is to graph f as a curve running through the plane R2 :‚Äú RÀÜR.
For example, f is graphed as a straight line with slope 1 and y-intercept 7. In general,
the graph of f is a curve that be understood as a function F : R √ë R2.
a. For an arbitrary function f : R √ë R with graph F : R √ë R2 and an arbitrary r P R,
what are the px, yq coordinates of Fprq P R2?

6.1. LIMITS AND COLIMITS
325
b. Obtain F : R √ë R2 using the universal property given in DeÔ¨Ånition 6.1.1.8.
‚ô¶
Solution 6.1.1.15.
a. The coordinates are pr, fprqq. For example, if fpxq ‚Äú x ` 7 and r ‚Äú ¬¥12, we have
Fprq ‚Äú p¬¥12, ¬¥5q.
b. To obtain a function R √ë R ÀÜ R, we need two functions R √ë R. We take them to be
idR : R √ë R and f : R √ë R. The universal property gives the desired
R
xidR,fy
√ù√ù√ù√ù√ù√ù√ù√ë R ÀÜ R.
Note that xidR, fyprq ‚Äú pr, fprqq.
‚ô¶
Exercise 6.1.1.16.
Consider the preorder pN, dividesq, discussed in Example 4.4.3.2, where, e.g., 5 ƒè 15,
but 5 ƒô 6. Consider it as a category, using the functor PrO √ë Cat.
a. What is the product of 9 and 12 in this category?
b. Is there a standard name for products in this category?
‚ô¶
Solution 6.1.1.16.
a. 9 ÀÜ 12 ‚Äú 3.
b. Greatest common divisor. But note that 0 is the biggest element, so, for example,
0 ÀÜ 17 ‚Äú 0, even though 17 is a common divisor of 0 and 17, and even though one
might say, ‚Äú17 is greater than 0‚Äù (in the usual ordering).
‚ô¶
Example 6.1.1.17. Products do not have to exist in an arbitrary category, but they do
exist in Cat, the category of categories. That is, given two categories C and D, there is a
product category C ÀÜ D. We have ObpC ÀÜ Dq ‚Äú ObpCq ÀÜ ObpDq, and for any two objects
pc, dq and pc1, d1q, we have
HomCÀÜDppc, dq, pc1, d1qq ‚Äú HomCpc, c1q ÀÜ HomCpd, d1q.

326
CHAPTER 6. FUNDAMENTAL CONSIDERATIONS OF CATEGORIES
The composition formula is clear.
Let r1s P ObpCatq denote the linear order category of length 1:
r1s :‚Äú
0‚Äö
f
 1‚Äö
As a schema it has one arrow, but as a category it has three morphisms. So we expect
r1sÀÜr1s to have nine morphisms, and that is true. In fact, r1sÀÜr1s looks like a commutative
square:
p0,0q
‚Äö
‚úì
id0ÀÜf

fÀÜid0

p0,1q
‚Äö
fÀÜid1

p1,0q
‚Äö
id1ÀÜf
 p1,1q
‚Äö
(6.1)
We see only four morphisms here, but there are also four identities and one morphism
p0, 0q √ë p1, 1q given by composition of either direction. It is a minor miracle that the
categorical product somehow ‚Äúknows‚Äù that this square should commute; however, this is
not a mere preference but follows rigorously from the deÔ¨Ånitions we already gave of Cat
and products.
6.1.1.18
Coproducts
The coproduct of two sets is their disjoint union, which includes nonoverlapping copies
of each of the two sets. This is a good intuition for coproducts in general.
Example 6.1.1.19. Given two preorders, X1 :‚Äú pX1, ƒè1q and X2 :‚Äú pX2, ƒè2q, we can take
their coproduct and get a new preorder X1 \ X2. Both X1 and X2 have underlying sets
(namely, X1 and X2), so we might hope that the underlying set of X1 ÀÜ X2 is the disjoint
union X1 \ X2, and that turns out to be true. We have a notion of less-than on X1 and
a notion of less-than on X2.
Given an element x P X1 \ X2 and an element x1 P X1 \ X2, how can we use ƒè1 and
ƒè2 to compare x1 and x2? The relation ƒè1 only knows how to compare elements of X1,
and the relation ƒè2 only knows how to compare elements of X2. But x and x1 may come
from diÔ¨Äerent homes, e.g., x P X1 and x1 P X2, in which case neither ƒè1 nor ƒè2 gives
any clue about which should be bigger.
So when should we say that x ƒè1\2 x1 holds? The obvious guess is to say that x is
less than x1 iÔ¨Äboth x and x1 are from the same home and the local ordering has x ƒè x1.
To be precise, we say x ƒè1\2 x1 if and only if either one of the following conditions hold:

6.1. LIMITS AND COLIMITS
327
‚Ä¢ x P X1 and x1 P X1 and x ƒè1 x1, or
‚Ä¢ x P X2 and x1 P X2 and x ƒè2 x1.
With ƒè1\2 so deÔ¨Åned, one checks that it is not only a preorder but that it serves as a
coproduct of X1 and X2,5
X1 \ X2 :‚Äú pX1 \ X2, ƒè1\2q.
Note that the inclusion functions X1 √ë X1\X2 and X2 √ë X1\X2 induce morphisms
of preorders. That is, if x, x1 P X1 are elements such that x ƒè1 x1 in X1, then the same
will hold in X1 \ X2, and similarly for X2. So we have preorder morphisms
X1 \ X2
X1
;
X2
W
Exercise 6.1.1.20.
Suppose you have a partial order A :‚Äú pA, ƒèAq on apples (you prefer some apples
to others, but sometimes you cannot compare). And suppose you have a partial order
O :‚Äú pO, ƒèOq on oranges. You are about to be given two pieces of fruit from a basket
of apples and oranges. Is the coproduct partial order A \ O a reasonable guess for your
preferences, or does it seem biased?
‚ô¶
Solution 6.1.1.20.
You cannot compare apples and oranges. If the two fruits are both apples, the coprod-
uct ordering will match your preference; if the two fruits are both oranges, the coproduct
ordering will match your preference; but if one is an apple and the other is an orange,
the coproduct ordering will be agnostic about which you prefer.
‚ô¶
Example 6.1.1.21. Given two graphs G1 ‚Äú pV1, A1, src1, tgt1q and G2 ‚Äú pV2, A2, src2, tgt2q,
we can take their coproduct and get a new graph G1\G2. The vertices will be the disjoint
5Given R1 ƒé X1 ÀÜ X1, R2 ƒé X2 ÀÜ X2, take
R1 \ R2 ƒé pX1 ÀÜ X1q \ pX2 ÀÜ X2q
ƒé pX1 ÀÜ X1q \ pX1 ÀÜ X2q \ pX2 ÀÜ X1q \ pX2 ÀÜ X2q
‚Äì pX1 \ X2q ÀÜ pX1 \ X2q.

328
CHAPTER 6. FUNDAMENTAL CONSIDERATIONS OF CATEGORIES
union of vertices V1 \ V2, so each vertex in G1 \ G2 is labeled either by a vertex in G1
or by one in G2 (if any labels are shared, then something must be done to diÔ¨Äerentiate
them). When should an arrow connect v to v1? Whenever both are from the same com-
ponent (i.e., either v, v1 P V1 or v, v1 P V2) and we can Ô¨Ånd an arrow connecting them in
that component. It turns out there is a simple formula for the set of arrows in G1 \ G2,
namely, A1 \ A2.
Let‚Äôs write G :‚Äú G1\G2 and say, G ‚Äú pV, A, src, tgtq. We now know that V ‚Äú V1\V2
and A ‚Äú A1 \ A2. What should the source and target functions A √ë V be? Given
a function src1 : A1 √ë V1 and a function src2 : A2 √ë V2, the universal property for
coproducts in Set can be used to specify a unique function
src :‚Äú src1 \ src2 : A1 \ A2 √ë V1 \ V2.
Namely, for any arrow a P A, we know either a P A1 or a P A2 (and not both), so the
source of a will be the vertex src1paq if a P A1 and src2paq if a P A2. Similarly, we
have a ready-made choice of target function tgt ‚Äú tgt1 \ tgt2. We have now deÔ¨Åned the
coproduct graph.
Here is an example. Let I and J be as in Example 5.3.3.5:
I :‚Äú
v‚Äö
f 
w‚Äö
g
:
h
R
x‚Äö
J :‚Äú
q‚Äö
i
 r‚Äö
j
) s‚Äö
k
A
‚Ñì
 t‚Äö
u‚Äö
Arrow pIq
ID
src
tgt
f
v
w
g
w
x
h
w
x
Vertex pIq
ID
v
w
x
Arrow pJq
ID
src
tgt
i
q
r
j
r
s
k
s
r
‚Ñì
s
t
Vertex pJq
ID
q
r
s
t
u

6.1. LIMITS AND COLIMITS
329
The coproduct I \ J has, as expected, 3 ` 5 ‚Äú 8 vertices and 3 ` 4 ‚Äú 7 arrows:
I \ J :‚Äú
v‚Äö
f 
w‚Äö
g
:
h
R
q‚Äö
i
 r‚Äö
j
) s‚Äö
k
A
‚Ñì
 t‚Äö
x‚Äö
u‚Äö
Arrow pI \ Jq
ID
src
tgt
f
v
w
g
w
x
h
w
x
i
q
r
j
r
s
k
s
r
‚Ñì
s
t
Vertex pI \ Jq
ID
v
w
x
q
r
s
t
u
Here is the most important thing to notice. Look at the Arrow tables and notice that
there is a way to send each row in I to a row in I \ J such that all the foreign keys
match, and similarly for J. This also works for the vertex tables. These matches are
readily visible graph homomorphisms I √ë I \ J and J √ë I \ J in Grph.
Exercise 6.1.1.22.
Recall from Example 4.5.2.10 that a discrete dynamical system (DDS) is a set s
together with a function f : s √ë s; if
Loop :‚Äú
s‚Äö
f
K
is the loop schema, then a DDS is simply an instance (a functor) I : Loop √ë Set. We
have not yet discussed DDS coproducts but perhaps you can guess how they should work.
For example, consider these instances I, J : Loop √ë Set:
s
(I)
ID
f
A
C
B
C
C
C
s
(J)
ID
f
x
y
y
x
z
z
Make a guess and tabulate I \ J. Then draw it.
‚ô¶

330
CHAPTER 6. FUNDAMENTAL CONSIDERATIONS OF CATEGORIES
Solution 6.1.1.22.
s
(I ÀÜ J)
ID
f
A
C
B
C
C
C
x
y
y
x
z
z
A‚Äö

x‚Äö

C‚Äö
y‚Äö
;
B‚Äö

z‚Äö
B
‚ô¶
In each case (preorders, graphs, DDSs), what is most important to recognize is that
there are inclusion maps I √ë I \ J and J √ë I \ J, and that the construction of I \ J
seems as straightforward as possible, subject to having these inclusions.
DeÔ¨Ånition 6.1.1.23. Let C be a category, and let X, Y P ObpCq be objects. A cospan
on X and Y consists of three constituents pZ, i, jq, where Z P ObpCq is an object, and
where i: X √ë Z and j : Y √ë Z are morphisms in C.
Z
X
i
Y
Y
j
Z
A coproduct of X and Y is a cospan X
Œπ1
√ù√ë X \ Y
Œπ2
√ê√ù Y , such that for any other
cospan X
i√ù√ë Z
j√ê√ù Y there exists a unique morphism si,j : X \ Y √ë Z such that the
following diagram commutes:6
X \ Y
si,j

X
Œπ1
 
i

Y
Œπ2

j

Z
6The names X \ Y and Œπ1, Œπ2 are not mathematically important; they are pedagogically useful.

6.1. LIMITS AND COLIMITS
331
The morphism si,j is often denoted
"
i
j : X \ Y √ë Z.
Remark 6.1.1.24. DeÔ¨Ånition 6.1.1.8 endows the coproduct of two objects with a universal
property. It says that a coproduct of two objects X and Y receives maps from those
two objects, and serves as a gateway for all that do the same. ‚ÄúNone shall receive maps
from X and Y except through me!‚Äù This grandiose property is held by all the coproducts
discussed so far.
It is what is meant by ‚ÄúX \ Y receives maps from both X and Y
and does so as straightforwardly as possible.‚Äù The disjoint union of dots obtained as the
coproduct of two sets has such a property (see Example 3.1.2.5).
Example 6.1.1.25. By Proposition 5.2.1.13, there is a functor PrO √ë Cat that realizes
every preorder as a category. If P ‚Äú pP, ƒèq is a preorder, what are coproducts in P?
Given two objects a, b P ObpPq, we Ô¨Årst consider ta, bu cospans, i.e., a √ë z √ê b. A
cospan of a and b is any z such that a ƒè z and b ƒè z. The coproduct will be such a
cospan a ƒè a \ b ƒõ b, but such that every other cospanning object z is greater than or
equal to a \ b. In other words, a \ b is as small as possible subject to the condition of
being bigger than a and bigger than b. This is precisely their join, a _ b (see DeÔ¨Ånition
4.4.2.1).
Just as for products, the coproduct of two objects in a category C may not exist, or it
may not be unique. The nonuniqueness is much less ‚Äúbad‚Äù because given two candidate
coproducts, they will be canonically isomorphic. They may not be equal, but they are
isomorphic. But coproducts might not exist at all in certain categories.
Example 6.1.1.26. Consider the set R2 and partial order from Example 6.1.1.11, where
px1, y1q ƒè px2, y2q if there exists ‚Ñìƒõ 1 such that x1‚Ñì‚Äú x2 and y1‚Ñì‚Äú y2. Again the points
p :‚Äú p1, 0q and q :‚Äú p0, 1q do not have a coproduct. Indeed, it would have to be a nonzero
point that was on the same line through the origin as p and the same line through the
origin as q, of which there are none.
Exercise 6.1.1.27.
Consider the preorder P of cards in a deck, shown in Example 4.4.1.3; it is not the
whole story of cards in a deck, but take it to be so. Consider this preorder P as a category
(by way of the functor PrO √ë Cat).
a. For each of the following pairs, what is their coproduct in P (if it exists)?
‚åúa diamond‚åù\ ‚åúa heart‚åù
‚åúa queen‚åù\ ‚åúa black card‚åù
‚åúa card‚åù\ ‚åúa red card‚åù
‚åúa face card‚åù\ ‚åúa black card‚åù

332
CHAPTER 6. FUNDAMENTAL CONSIDERATIONS OF CATEGORIES
b. How would these answers diÔ¨Äer if P were completed to the ‚Äúwhole story‚Äù partial order
classifying cards in a deck?
‚ô¶
Solution 6.1.1.27.
a. The product of two elements in any preorder, such as P, is their join (if it exists). For
example, the join of ‚åúa queen‚åùand ‚åúa black card‚åùshould be a card that is either a
queen or a black card, if this notion exists in P. Then we have
‚åúa diamond‚åù\ ‚åúa heart‚åù‚Äú ‚åúa red card‚åù
‚åúa queen‚åù\ ‚åúa black card‚åù‚Äú ‚åúa card‚åù
‚åúa card‚åù\ ‚åúa red card‚åù‚Äú ‚åúa card‚åù
‚åúa face card‚åù\ ‚åúa black card‚åù‚Äú ‚åúa card‚åù
b. If every subset of cards were put into the order, i.e., if we took P to be the power-set
of the set of cards, it would have more intuitive joins:
‚åúa diamond‚åù\ ‚åúa heart‚åù‚Äú ‚åúa red card‚åù
‚åúa queen‚åù\ ‚åúa black card‚åù‚Äú ‚åúa queen or a black card‚åù
‚åúa card‚åù\ ‚åúa red card‚åù‚Äú ‚åúa card‚åù
‚åúa face card‚åù\ ‚åúa black card‚åù‚Äú ‚åúa face card or a black card‚åù
‚ô¶
Exercise 6.1.1.28.
Let X be a set, and consider it as a discrete category. Given two objects x, y P ObpXq,
under what conditions will there exist a coproduct x \ y?
‚ô¶
Solution 6.1.1.28.
The only morphisms in a discrete category are identities. Since a coproduct needs
morphisms including both its summands, we must have x ‚Äú x \ y ‚Äú y. So the condition
is x ‚Äú y. Indeed, in that case, any other object z receiving a map from x and y receives
a unique map from x \ y by x \ y
id
√ù√ë z.
‚ô¶
Exercise 6.1.1.29.
Consider the preorder pN, dividesq, discussed in Example 4.4.3.2, where, e.g., 5 ƒè 15,
but 5 ƒô 6.

6.1. LIMITS AND COLIMITS
333
a. What is the coproduct of 9 and 12 in that category?
b. Is there a standard name for coproducts in that category?
‚ô¶
Solution 6.1.1.29.
a. 9 \ 12 ‚Äú 36.
b. Least common multiple.
‚ô¶
6.1.2
Diagrams in a category
Diagrams have illustrated the text throughout the book.
What is the mathematical
foundation of these illustrations? The answer is functors.
DeÔ¨Ånition 6.1.2.1 (Diagrams). Let C and I be categories. An I-shaped diagram in C is
simply a functor d: I √ë C. In this case I is called the indexing category for the diagram.7
Here are some rules for drawing diagrams as in DeÔ¨Ånition 6.1.2.1.
Rules of good practice 6.1.2.2. Suppose given an indexing category I and an I-shaped
diagram X : I √ë C. One draws this as follows:
(i) For each object in q P I, draw a dot labeled by Xpqq; if several objects in I point
to the same object in C, then several dots are labeled the same way.
(ii) For each morphism f : q √ë q1 in I, draw an arrow between dots Xpqq and Xpq1q, and
label it Xpfq in C. Again, if several morphisms in I are sent to the same morphism
in C, then several arrows are labeled the same way.
(iii) One can abridge this process by not drawing every morphism in I, as long as every
morphism in I is represented by a unique path in C, i.e., as long as the drawing is
suÔ¨Éciently unambiguous as a depiction of X : I √ë C.
(iv) One may choose to draw a dash box around the Ô¨Ånished diagram X to indicate that
it is referencing an ambient category C.
7The indexing category I is usually assumed to be small in the sense of Remark 5.1.1.2, meaning that
its collection of objects is a set.

334
CHAPTER 6. FUNDAMENTAL CONSIDERATIONS OF CATEGORIES
Example 6.1.2.3. Consider the commutative diagram in Set:
N
`1 
Àö2

N
Àö2

N
`2  Z
(6.2)
This is the drawing of a functor d: r1sÀÜr1s √ë Set (see Example 6.1.1.17). With notation
for the objects and morphisms of r1s ÀÜ r1s, as shown in diagram (6.1), we have dp0, 0q ‚Äú
dp0, 1q ‚Äú dp1, 0q ‚Äú N and dp1, 1q ‚Äú Z (for some reason) and dpid0, fq: N √ë N given by
n √û√ë n ` 1, and so on. The fact that d is a functor means it must respect composition
formulas, which implies that diagram (6.2) commutes. We call r1s ÀÜ r1s the commutative
square indexing category. 8
Example 6.1.2.4. Recall from Section 2.2 that not all diagrams commute; one must specify
that a given diagram commutes if one wishes to communicate this fact. But then, how
is a noncommuting diagram to be understood as a functor?
Let G P ObpGrphq denote the following graph:
p0,0q
‚Äö
f

h

p0,1q
‚Äö
g

‚Äö
p1,0q
i

‚Äö
p1,1q
Recall the free category functor F : Grph √ë Cat (see Example 5.1.2.33).
The free
category FpGq P ObpCatq on G looks almost like r1sÀÜr1s in Example 6.1.2.3 except that
since p0,0qrf, gs is a diÔ¨Äerent path in G than is p0,0qrh, is, they become diÔ¨Äerent morphisms
in FpGq. A functor FpGq √ë Set might be drawn the same way that (6.2) is, but it would
be a diagram that would not be said to commute.
Exercise 6.1.2.5.
Consider r2s, the linear order category of length 2.
a. Is r2s the appropriate indexing category for commutative triangles?
b. If not, what is? If so, what might lead someone to be skeptical, and why would the
skeptic be wrong?
‚ô¶
8What is here denoted FpGq might be called the noncommutative square indexing category.

6.1. LIMITS AND COLIMITS
335
Solution 6.1.2.5.
a. Yes.
b. One might picture r2s and the commutative triangle as shown here at the left and the
right (respectively),
[2]
0‚Äö
e1
 1‚Äö
e2
 2‚Äö
Commutative
triangle
indexing
category
0‚Äö
gÀùf

f
 1‚Äö
‚úì
g
2‚Äö
and think of these as diÔ¨Äerent. But that is not correct because the drawing of r2s does
not show the composite e2 Àù e1, which is implicitly there.
‚ô¶
Example 6.1.2.6. Recall that an equalizer in Set is a diagram of sets that looks like this:
E‚Äö
f
 A‚Äö
g1

g2

B‚Äö
(6.3)
where g1 Àùf ‚Äú g2 Àùf. What is the indexing category for such a diagram? It is the schema
(6.3) with the PED Erf, g1s ¬ª Erf, g2s. That is, in some sense one sees the indexing
category, but the PED needs to be declared.
Exercise 6.1.2.7.
Let C be a category, A P ObpCq an object, and f : A √ë A a morphism in C. Consider
the following two diagrams in C:
d1 :‚Äú
A‚Äö
f
 A‚Äö
f
 A‚Äö
f
 ¬® ¬® ¬®
d2 :‚Äú
A‚Äö
f
*
a. Should these two diagrams have the same indexing category?

336
CHAPTER 6. FUNDAMENTAL CONSIDERATIONS OF CATEGORIES
b. Write the indexing category for both.
c. If they have the same indexing category, what is causing or allowing the pictures to
appear diÔ¨Äerent?
d. If they do not have the same indexing category, what coincidence makes the two
pictures have so much in common?
‚ô¶
Solution 6.1.2.7.
a. No.
b. The left-hand diagram is indexed by the linear order rNs as a category (under the
functor PrO √ë Cat), i.e., having objects ObprNsq ‚Äú N and a morphism i √ë j if
i ƒè j. The right-hand diagram is indexed by the category Loop as in (4.17).
c. This question does not apply; they do not have the same indexing category.
d. The issue arises from the fact that a diagram in C is not just an indexing category but
also the functor to C. The coincidence is in the functor rNs
d1
√ù√ë Set, which happens
to send each object i P ObprNsq to the object A P ObpCq, and which happens to send
each morphism in rNs to the morphism f in C. In other words, the coincidence is that
there is a functor rNs
F√ù√ë Loop, under which the left-hand diagram rNs
d1
√ù√ë C is the
composite rNs F√ù√ë Loop
d2
√ù√ë Set with the right-hand diagram, d1 ‚Äú d2 Àù F.
‚ô¶
DeÔ¨Ånition 6.1.2.8. Let I P ObpCatq be a category. The left cone on I, denoted I≈∏, is
the category deÔ¨Åned as follows. On objects we put ObpI≈∏q ‚Äú tLCIu\ObpIq, and we call
the new object LCI the cone point of I≈∏. On morphisms we add a single new morphism
sb : LCI √ë b for every object b P ObpIq; more precisely,
HomI≈∏pa, bq ‚Äú
$
‚Äô
‚Äô
‚Äô
&
‚Äô
‚Äô
‚Äô
%
HomIpa, bq
if a, b P ObpIq,
tsbu
if a ‚Äú LCI, b P ObpIq,
tidLCIu
if a ‚Äú b ‚Äú LCI,
H
if a P ObpIq, b ‚Äú LCI.
The composition formula is in some sense obvious. To compose two morphisms both in
I, compose as dictated by I; if one has LCI as source, then there will be a unique choice
of composite.

6.1. LIMITS AND COLIMITS
337
There is an obvious inclusion of categories,
I √ë I≈∏.
(6.4)
Remark 6.1.2.9. Note that the speciÔ¨Åcation of I≈∏ given in DeÔ¨Ånition 6.1.2.8 works just
as well if I is considered a schema and we are constructing a schema I≈∏: add the new
object LCI and the new arrows sb : LCI √ë b for each b P ObpIq, and for every morphism
f : b √ë b1 in I, add a PED LCIrsb1s ¬ª LCIrsb, fs. We generally do not distinguish between
categories and schemas, since they are equivalent, by Theorem 5.4.2.3.
Example 6.1.2.10. For a natural number n P N, deÔ¨Åne the n-leaf star schema, denoted
Starn, to be the category (or schema; see Remark 6.1.2.9) n≈∏, where n is the discrete
category on n objects. The following illustrate the categories Star0, Star1, Star2, and
Star3:
Star0
LC0
‚Äö
Star1
LC1
‚Äö
s1

1‚Äö
Star2
LC2
‚Äö
s1
B
s2
N
1‚Äö
2‚Äö
Star3
LC3
‚Äö
s1
B
s2

s3
N
1‚Äö
2‚Äö
3‚Äö
Exercise 6.1.2.11.
Let C0 :‚Äú 0 denote the empty category, and for any natural number n P N, let
Cn`1 ‚Äú pCnq≈∏. Draw C4.
‚ô¶
Solution 6.1.2.11.
We draw Cn for all 0 ƒè n ƒè 4:
C0
C1
LCC0
‚Äö
C2
LCC1
‚Äö
 LCC0
‚Äö
C3
LCC2
‚Äö
 LCC1
‚Äö
 LCC0
‚Äö
C4
LCC3
‚Äö
 LCC2
‚Äö
 LCC1
‚Äö
 LCC0
‚Äö
‚ô¶

338
CHAPTER 6. FUNDAMENTAL CONSIDERATIONS OF CATEGORIES
Exercise 6.1.2.12.
Let C be the graph-indexing schema as in (5.8). What is C≈∏, and how does it compare
to the indexing category for equalizers, (6.3)?
‚ô¶
Solution 6.1.2.12.
They are the same,
C≈∏ ‚Äì
E‚Äö
f
 A‚Äö
g1

g2

B‚Äö
where the latter is understood to include the PED Erf, g1s ‚Äú Erf, g2s.
‚ô¶
DeÔ¨Ånition 6.1.2.13. Let I P ObpCatq be a category. The right cone on I, denoted I≈π,
is the category deÔ¨Åned as follows. On objects we put ObpI≈πq ‚Äú ObpIq \ tRCIu, and
we call the new object RCI the cone point of I≈π. On morphisms we add a single new
morphism tb : b √ë RCI for every object b P ObpIq; more precisely,
HomI≈πpa, bq ‚Äú
$
‚Äô
‚Äô
‚Äô
&
‚Äô
‚Äô
‚Äô
%
HomIpa, bq
if a, b P ObpIq,
ttbu
if a P ObpIq, b ‚Äú RCI,
tidRCIu
if a ‚Äú b ‚Äú RCI,
H
if a ‚Äú RCI, b P ObpIq.
The composition formula is in some sense obvious. To compose two morphisms both in
I, compose as dictated by I; if one has RCI as target, then there will be a unique choice
of composite.
There is an obvious inclusion of categories I √ë I≈π.
Exercise 6.1.2.14.
Let C be the category p2≈∏q≈π, where 2 is the discrete category on two objects. Then
C is somehow square-shaped, but what category is it exactly?
Is C the commutative
square indexing category r1sÀÜr1s (see Example 6.1.2.3), is it the noncommutative square
indexing category FpGq (see Example 6.1.2.4), or is it something else?
‚ô¶

6.1. LIMITS AND COLIMITS
339
Solution 6.1.2.14.
It is the commutative square indexing category,
p2≈∏q≈π ‚Äì
LC2
‚Äö


‚úì
1‚Äö

2‚Äö

RC2≈∏
‚Äö
‚ô¶
Exercise 6.1.2.15.
Let I ‚Äú 2, let C be an arbitrary category, and let D ‚Äú FunpI≈∏, Cq.
a. Using Rules 6.1.2.2, draw an object d P ObpDq.
b. How might you draw a morphism f : d √ë d1 in D?
‚ô¶
Solution 6.1.2.15.
a. We have I≈∏ ‚Äú Star2, as in Example 6.1.2.10. We can draw an object d: I≈∏ √ë C as a
span,
d1
d0
i

j
 d2.
b. We could draw f : d √ë d1 as
d1
f1

d0
f0

i

j
 d2
f2

d1
1
d1
0
i1

j1
 d1
2
‚ô¶
6.1.3
Limits and colimits in a category
Let C be a category, let I be an indexing category (which means that I is a category
that we use as the indexing category for a diagram), and let D: I √ë C be an I-shaped

340
CHAPTER 6. FUNDAMENTAL CONSIDERATIONS OF CATEGORIES
diagram (which means a functor). It is in relation to this setup that we can discuss the
limit or colimit. In general, the limit of a diagram D: I √ë C is a I≈∏ shaped diagram,
lim D: I≈∏ √ë C. In the case of products we have I ‚Äú 2, and the limit looks like a span,
the shape of I≈∏ (see Exercise 6.1.2.15). For general I, D we may have many I≈∏-shaped
diagrams; which of them is the limit of D? Answer: The one with the universal gateway
property; see Remark 6.1.1.9.
6.1.3.1
Universal objects
DeÔ¨Ånition 6.1.3.2. Let C be a category. An object a P ObpCq is called initial if, for
all objects c P ObpCq, there exists a unique morphism a √ë c, i.e., |HomCpa, cq| ‚Äú 1. An
object z P ObpCq is called terminal if, for all objects c P ObpCq, there is exists a unique
morphism c √ë z, i.e., |HomCpc, zq| ‚Äú 1.
Example 6.1.3.3. For any category I, the left cone I≈∏ has a unique initial object, and
the right cone I≈π has a unique terminal object; in both cases it is the cone point. See
DeÔ¨Ånitions 6.1.2.8 and 6.1.2.13.
Example 6.1.3.4. The initial object in Set is the set a for which there is always one way
to map from a to anything else. Given c P ObpSetq, there is exactly one function H √ë c,
because there are no choices to be made, so the empty set H is the initial object in Set.
The terminal object in Set is the set z for which there is always one way to map to
z from anything else. Given c P ObpSetq, there is exactly one function c √ë tu, where
tu is any set with one element, because there are no choices to be made: everything in
c must be sent to the single element in tu. There are lots of terminal objects in Set,
and they are all isomorphic to 1.
Example 6.1.3.5. The initial object in Grph is the graph a for which there is always one
way to map from a to anything else. Given c P ObpGrphq, there is exactly one graph
homomorphism H √ë c, where H P ObpGrphq is the empty graph; so H is the initial
object.
The terminal object in Grph is more interesting. It is
Loop ‚Äú
s‚Äö
f
K
the graph with one vertex and one arrow. In fact, there are inÔ¨Ånitely many terminal
objects in Grph, but all of them are isomorphic to Loop, meaning one can change the
names of the vertex (s) and the arrow (f) and get another terminal object.

6.1. LIMITS AND COLIMITS
341
Exercise 6.1.3.6.
Let X be a set, let PpXq be the set of subsets of X (see DeÔ¨Ånition 3.4.4.9). We can
regard PpXq as a preorder under inclusion of subsets (see, for example, Section 4.4.2).
And we can regard preorders as categories using a functor PrO √ë Cat (see Proposition
5.2.1.13).
a. What is the initial object in PpXq?
b. What is the terminal object in PpXq?
‚ô¶
Solution 6.1.3.6.
a. The object H is initial.
b. The object X is terminal.
‚ô¶
Example 6.1.3.7. The initial object in the category Mon of monoids is the trivial monoid,
1. Indeed, for any monoid M, a morphism of monoids 1 √ë M is a functor between one-
object categories and these are determined by where they send morphisms.
Since 1
has only the identity morphism and functors must preserve identities, there is no choice
involved in Ô¨Ånding a monoid morphism 1 √ë M.
Similarly, the terminal object in Mon is also the trivial monoid, 1. For any monoid
M, a morphism of monoids M √ë 1 sends everything to the identity; there is no choice.
Exercise 6.1.3.8.
a. What is the initial object in Grp, the category of groups?
b. What is the terminal object in Grp?
‚ô¶
Solution 6.1.3.8.
a. The initial object in Grp is the trivial group. It could be denoted p1, 1, !q.
b. The terminal object is again the trivial group.
‚ô¶

342
CHAPTER 6. FUNDAMENTAL CONSIDERATIONS OF CATEGORIES
Example 6.1.3.9. Recall the preorder Prop of logical propositions from Section 5.2.4.1.
The initial object is a proposition that implies all others. It turns out that ‚ÄúFALSE‚Äù is
such a proposition. The proposition ‚ÄúFALSE‚Äù is like ‚Äú1 ‚Ä∞ 1‚Äù; in logical formalism it can
be shown that if ‚ÄúFALSE‚Äù is true, then everything is true.
The terminal object in Prop is a proposition that is implied by all others. It turns
out that ‚ÄúTRUE‚Äù is such a proposition. In logical formalism, everything implies that
‚ÄúTRUE‚Äù is true.
Example 6.1.3.10. The discrete category 2 has no initial object and no terminal ob-
ject. The reason is that it has two objects 1, 2, but no maps from one to the other, so
Hom2p1, 2q ‚Äú Hom2p2, 1q ‚Äú H.
Exercise 6.1.3.11.
Recall the divides preorder (see Example 4.4.3.2), where 5 divides 15.
a. Considering this preorder as a category, does it have an initial object?
b. Does it have a terminal object?
‚ô¶
Solution 6.1.3.11.
a. Yes, 1 divides everything.
b. Yes, everything divides 0.
‚ô¶
Exercise 6.1.3.12.
Let M ‚Äú pListpta, buq, r s, ``q denote the free monoid on the set ta, bu (see DeÔ¨Ånition
4.1.1.15) considered as a category via the functor Mon √ë Cat (see Theorem 5.2.1.3).
a. Does M have an initial object?
b. Does M have a terminal object?
c. Which monoids M, considered as one-object categories, have initial (resp. terminal)
objects?
‚ô¶

6.1. LIMITS AND COLIMITS
343
Solution 6.1.3.12.
As a category, a monoid M has only one object, ‚ñ≤.
This object would be initial
or terminal if there is only one morphism, |HomMp‚ñ≤, ‚ñ≤q| ‚Äú 1. But this occurs only if
M ‚Äú p1, 1, !q is the trivial monoid.
a. No.
b. No.
c. Only M ‚Äú p1, 1, !q.
‚ô¶
Exercise 6.1.3.13.
Let S be a set, and consider the indiscrete category KS P ObpCatq on objects S (see
Example 5.3.4.3).
a. For what S does KS have an initial object?
b. For what S does KS have a terminal object?
‚ô¶
Solution 6.1.3.13.
For every two objects s, s1 P S, we have |HomKSps, s1q| ‚Äú 1, so every object is both
initial and terminal.
a. The indiscrete category KS has an initial object if and only if S ‚Ä∞ H. In this case
every element of S is initial.
b. The indiscrete category KS has an terminal object if and only if S ‚Ä∞ H. In this case
every element of S is terminal.
‚ô¶
An object in a category is sometimes called universal if it is either initial or terminal,
but we rarely use that term in practice, preferring to be speciÔ¨Åc about whether the object
is initial or terminal. The word Ô¨Ånal is synonymous with the word terminal, but we will
use the latter.
Universal properties refer to either initial or terminal objects in a specially-designed
category. Colimits end up having an initial sort of universal property, and limits end up
having a terminal sort of universal property. See Section 6.1.3.16.

344
CHAPTER 6. FUNDAMENTAL CONSIDERATIONS OF CATEGORIES
Warning 6.1.3.14. A category C may have more than one initial object; similarly a cate-
gory C may have more than one terminal object. As shown in Example 6.1.3.4, any set
with one element, e.g., tÀöu or tu or t43u, is a terminal object in Set. Each of these
terminal sets has the same number of elements, i.e., there exists an isomorphism between
them, but they are not exactly the same set.
In fact, Proposition 6.1.3.15 shows that in any category C, any two terminal objects in
C are isomorphic (similarly, any two initial objects in C are isomorphic). While there are
many isomorphisms in Set between t1, 2, 3u and ta, b, cu, there is only one isomorphism
between tÀöu and tu. This is always the case for universal objects: there is a unique
isomorphism between any two terminal (resp. initial) objects in any category.
As a result, we often speak of the initial object in C or the terminal object in C, as
though there were only one. ‚ÄúIt is unique up to unique isomorphism‚Äù is put forward as
the justiÔ¨Åcation for using the rather than a. This is not too misleading, because just as
a person today does not contain exactly the same atoms as that person yesterday, the
diÔ¨Äerence is unimportant.
This book uses either the deÔ¨Ånite or the indeÔ¨Ånite article, as is convenient, when
speaking about initial or terminal objects. For example, Example 6.1.3.4 discussed the
initial object in Set and the terminal object in Set. This usage is common throughout
mathematical literature.
Proposition 6.1.3.15. Let C be a category, and let a1, a2 P ObpCq both be initial objects.
Then there is a unique isomorphism f : a1
‚Äì
√ù√ë a2. (Similarly, for any two terminal objects
in C, there is a unique isomorphism between them.)
Proof. Suppose a1 and a2 are initial.
Since a1 is initial, there is a unique morphism
f : a1 √ë a2; there is also a unique morphism a1 √ë a1, which must be ida1. Since a2 is
initial, there is a unique morphism g: a2 √ë a1; there is also a unique morphism a2 √ë a2,
which must be ida2. So g Àù f ‚Äú ida1 and f Àù g ‚Äú ida2, which means that f is the desired
(unique) isomorphism.
The proof for terminal objects is appropriately dual.
‚ñ°
6.1.3.16
Examples of limits
We are moving toward deÔ¨Åning limits and colimits in full generality. We have assembled
most of the pieces we will need: indexing categories, their left and right cones, and the
notion of initial and terminal objects. Relying on the now familiar notion of products,
we put these pieces in place and motivate one more construction, the slice category over
a diagram.

6.1. LIMITS AND COLIMITS
345
Let C be a category, and let X, Y P ObpCq be objects. DeÔ¨Ånition 6.1.1.8 deÔ¨Ånes a
product of X and Y to be a span X
œÄ1
√ê√ù X ÀÜ Y
œÄ2
√ù√ë Y such that for every other span
X
p√ê√ù Z
q√ù√ë Y , there exists a unique morphism Z √ë X ÀÜY making the triangles commute.
It turns out that we can enunciate this in the language of universal objects by saying that
the span X
œÄ1
√ê√ù X ÀÜ Y
œÄ2
√ù√ë Y is itself a terminal object in the category of tX, Y u spans.
Phrasing the deÔ¨Ånition of products in this way is generalizable to deÔ¨Åning arbitrary limits.
Construction 6.1.3.17 (Products). Let C be a category, and let X1, X2 be objects. We can
consider this setup as a diagram X : 2 √ë C, where Xp1q ‚Äú X1 and Xp2q ‚Äú X2. Consider
the category 2≈∏ ‚Äú Star2 (see Example 6.1.2.10), the inclusion i: 2 √ë 2≈∏ (see (6.4)), and
the category of functors Funp2≈∏, Cq. The objects in Funp2≈∏, Cq are spans in C, and the
morphisms are natural transformations between them (see Exercise 6.1.2.15).
Given a functor S : 2≈∏ √ë C, we can compose with i: 2 √ë 2≈∏ to get a functor 2 √ë C.
We want that to be X. That is, to get the product of X1 and X2, we are looking among
those S : 2≈∏ √ë C for which the following diagram commutes:
2
X

i

C
2≈∏
S

We are ready to deÔ¨Åne the category of tX1, X2u spans.
DeÔ¨Åne the category of X spans in C, denoted C{X, to be the category whose objects
and morphisms are as follows:
ObpC{Xq ‚Äú tS : 2≈∏ √ë C | S Àù i ‚Äú Xu
(6.5)
HomC{XpS, S1q ‚Äú tŒ±: S √ë S1 | Œ± Àõ i ‚Äú idXu.
The product of X1 and X2 was deÔ¨Åned in DeÔ¨Ånition 6.1.1.8; we can now recast X1 ÀÜ X2
as the terminal object in C{X.
An object in C{X can be pictured as a diagram in C of the following form:
X1
Z
p

q
 X2.
In other words, the objects of C{X are spans. A morphism in C{X from object X1
p√ê√ù Z
q√ù√ë
X2 to object X1
p1
√ê√ù Z1
q1
√ù√ë X2 consists of a morphism ‚Ñì: Z √ë Z1, such that p1 Àù‚Ñì‚Äú p and
q1 Àù ‚Ñì‚Äú q. So the set of such morphisms in C{X are all the ‚Ñì‚Äôs that make both squares

346
CHAPTER 6. FUNDAMENTAL CONSIDERATIONS OF CATEGORIES
commute in the right-hand diagram:
HomC{X
ÀÜ
X1
Z
p

q  X2
,
X1
Z1
p1

q1  X2
Àô
‚Äú
$
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
&
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
%
X1
Z
‚úì
‚úì
p

q 
‚Ñì

X2
X1
Z1
p1

q1  X2
,
/
/
/
/
/
/
.
/
/
/
/
/
/
-
(6.6)
Each object in C{X is a span on X1 and X2, and each morphism in C{X is a morphism
of cone points in C making everything commute. The terminal object in C{X is the product
of X1 and X2 (see DeÔ¨Ånition 6.1.1.8).
It may be strange to have a category in which the objects are spans in another category.
But once one admits this possibility, the notion of morphism between spans becomes
totally sensible.
Example 6.1.3.18. Consider the following arbitrary six-object category C, in which the
three diagrams that can commute do so:
C :‚Äú
X1‚Äö
A‚Äö
a
[
B‚Äö
f

‚úì
b1
D
b2
C
C‚Äö
‚úì
‚úì
c1
\
c2
]
g
 D‚Äö
d1
U
d2
^
X2‚Äö
Let X : 2 √ë C be given by Xp1q ‚Äú X1 and Xp2q ‚Äú X2. Then the category of X spans
might be drawn
C{X ‚Äì
pB,b1,b2q
‚Äö
pC,c1,c2q
‚Äö
g
 pD,d1,d2q
‚Äö
6.1.3.19
DeÔ¨Ånition of limit
A product of two objects X, Y P Obpq is a special case of a limit, namely, one in which
the indexing category is 2. To handle arbitrary limits, we replace 2 with an arbitrary

6.1. LIMITS AND COLIMITS
347
indexing category I, and use the following deÔ¨Ånition to generalize the category of spans,
deÔ¨Åned in (6.5).
DeÔ¨Ånition 6.1.3.20. Let C be a category, let I be a category. Let I≈∏ be the left cone
on I, and let i: I √ë I≈∏ be the inclusion. Suppose that X : I √ë C is an I-shaped diagram
in C. The slice category of C over X, denoted C{X, is the category whose objects and
morphisms are as follows:
ObpC{Xq ‚Äú tS : I≈∏ √ë C | S Àù i ‚Äú Xu;
HomC{XpS, S1q ‚Äú tŒ±: S √ë S1 | Œ± Àù i ‚Äú idXu.
A limit of X, denoted limI X or lim X, is a terminal object in C{X.
Remark 6.1.3.21. Perhaps the following diagram will be helpful for understanding limits.
Given a functor X : I √ë C, what is its limit?
The solid-arrow part of the Ô¨Ågure is
the data we start with, i.e., the category C, the indexing category I, and the diagram
X : I √ë C, as well as the part we automatically add, the cone I≈∏ with the inclusion
I
i√ù√ë I≈∏. The category C{X is found in the dotted arrow part: its objects are the dotted
arrows S : I≈∏ √ë C that make the following triangle commute, and its morphisms are the
natural transformations Œ±: S √ë S1x between them:
I
X

i

C
I≈∏
S

S1
_
Œ±
The limit of X is the initial object in this category.
Pullbacks
The relevant indexing category for pullbacks is the cospan, I ‚Äú 2≈π, drawn
as on the left:
I
0‚Äö

1‚Äö

2‚Äö
X : I √ë C
X0‚Äö
C
X1‚Äö
]
X2‚Äö

348
CHAPTER 6. FUNDAMENTAL CONSIDERATIONS OF CATEGORIES
A I-shaped diagram in C is a functor X : I √ë C, which might be drawn as on the right
(e.g., X0 P ObpCq).
An object S in the slice category C{X is a commutative diagram S : I≈∏ √ë C over X,
which looks like the left-hand box:
S P ObpC{Xq
SLCI


X0‚Äö
)
X1‚Äö

X2‚Äö
f : S √ë S1
SLCI
.
-
f

S1
LCI


X0‚Äö
)
X1‚Äö

X2‚Äö
A morphism in C{X is drawn as in the right-hand box.
A terminal object in C{X is
precisely the gateway we want, i.e., the limit of X is the pullback X0 ÀÜX2 X1 (see Remark
6.1.1.9).
Remark 6.1.3.22. Let C be a category, and suppose given a functor X : I √ë C. Its limit is
a certain functor lim X : I≈∏ √ë C. The category I≈∏ looks basically the same as I, except
it has an extra cone point LCI mapping to everything in I (see DeÔ¨Ånition 6.1.2.8). The
functor lim X can be applied to this object in I≈∏ to get an object in C, and it is this
object that people often refer to as the limit of X. We call it the limit set of X.
For example, if I ‚Äú 2 then a functor X : 2 √ë C consists of two objects in C, say X1
and X2. The left cone 2≈∏ is the span category, so the limit of X is a span, in particular
it is the product span X1 √ê X1 ÀÜ X2 √ë X2. But people often speak of the product as if
it was just X1 ÀÜ X2, the cone point of the span.
Exercise 6.1.3.23.
Let GrIn be the graph-indexing category (see (5.8)).
a. What is GrIn≈∏?
b. Let G: GrIn √ë Set be the graph from Example 4.3.1.2. Give an example of an object
in Set{G.
‚ô¶

6.1. LIMITS AND COLIMITS
349
Solution 6.1.3.23.
a. As in Exercise 6.1.2.12,
GrIn≈∏ ‚Äì
E‚Äö
f
 Ar‚Äö
src 
tgt 
Ve‚Äö
with the PED Erf, srcs ‚Äú Erf, tgts.
b. An object in Set{G is a functor S : GrIn≈∏ √ë Set such that SpArq ‚Äú tf, g, h, i, j, ku
and SpVeq ‚Äú tv, w, x, y, zu, and with source and target maps as in Example 4.3.1.2. To
specify the functor S, we need only specify what it does on the remaining object, SpEq,
and on the remaining morphism Spfq: SpEq √ë SpArq, and the necessary diagram
must commute. So we could take SpEq ‚Äú t1, 2, 3u; we are forced to have Spfqp1q ‚Äú
Spfqp2q ‚Äú Spfqp3q ‚Äú i. Indeed, since srcÀùf ‚Äú tgtÀùf, we must have SpsrcqpSpfqpxqq ‚Äú
SptgtqpSpfqpxqq, which means that Spfqpxq must be a loop in G, and i is the only one.
‚ô¶
Exercise 6.1.3.24.
Let C be a category, and let I ‚Äú 0 be the empty category. There is a unique functor
X : 0 √ë C.
a. What is the slice category C{X?
b. What is a limit of X?
‚ô¶
Solution 6.1.3.24.
a. The left cone of 0 is the terminal category 0≈∏ ‚Äú 1, and since every diagram
0
X

i

C
1
D
commutes, we have an isomorphism Funp1, Cq
‚Äì
√ù√ë C{X. But by (5.14), we have an
isomorphism C
‚Äì
√ù√ë Funp1, Cq, so in fact C{X ‚Äì C.

350
CHAPTER 6. FUNDAMENTAL CONSIDERATIONS OF CATEGORIES
b. A limit of X is deÔ¨Åned to be a terminal object in C{X, which is a terminal object in C,
if it exists. In other words, terminal objects in a category give us a canonical example
of limits. This was hinted at in Exercise 3.2.3.5.
‚ô¶
Example 6.1.3.25. In the course of doing math, random-looking diagrams sometimes come
up, for which one wants to take the limit. We have now constructed the limit for any
shape diagram. For example, if we wanted to take the product of more than two, say,
n, objects, we could use the diagram shape I ‚Äú n. A functor X : n √ë Set is n sets
X1, X2, . . . , Xn, and their limit is a functor lim X : n≈∏ √ë Set,
XLCn
‚Äö
9


X1‚Äö
X2‚Äö
¬® ¬® ¬®
Xn‚Äö
which, of course, is the product, XLCn ‚Äú X1 ÀÜ X2 ÀÜ ¬® ¬® ¬® ÀÜ Xn.
Example 6.1.3.26. We have now deÔ¨Åned limits in any category, so we have deÔ¨Åned limits
in Cat. Let r1s denote the category depicted
0‚Äö
e
 1‚Äö
and let C be an arbitrary category. Naming two categories is the same thing as naming
a functor X : 2 √ë Cat; consider the functor Xp1q ‚Äú r1s, Xp2q ‚Äú C. The limit of X is a
product of categories (see Example 6.1.1.17); it is denoted r1sÀÜC. It turns out that r1sÀÜC
looks like a C-shaped prism. It consists of two panes, front and back, say, each having the
precise shape as C (same objects, same arrows, same composition) as well as morphisms
from the front pane to the back pane making all front-to-back squares commute. For
example, if C was the category generated by the left-hand schema , then C ÀÜ r1s would

6.1. LIMITS AND COLIMITS
351
be the category generated by the right-hand schema:
A‚Äö
f

g

B‚Äö
h

C‚Äö
D‚Äö
A1‚Äö
f1

g1 
B1‚Äö
h1

A0‚Äö
Ae
D
f0

g0

B0‚Äö
Be
D
h0

C1‚Äö
D1‚Äö
C0‚Äö
Ce
D
D0‚Äö
De
D
It turns out that a natural transformation Œ±: F √ë G between functors F, G: C √ë D
is the same thing as a functor C ÀÜ r1s √ë D such that the front pane is sent via F and the
back pane is sent via G. The components are captured by the front-to-back morphisms,
and the naturality is captured by the commutativity of the front-to-back squares in CÀÜr1s.
Exercise 6.1.3.27.
Recall that Section 3.4.6.5 described relative sets. In fact, DeÔ¨Ånition 3.4.6.6 basically
deÔ¨Ånes a category of relative sets over any Ô¨Åxed set B. Let B : 1 √ë Set be the functor
representing the object B P ObpSetq.
a. What is the relationship between the slice category Set{B, as deÔ¨Åned in DeÔ¨Ånition
6.1.3.20, and the category of relative sets over B?
b. What is the limit of the functor B : 1 √ë Set?
‚ô¶
Solution 6.1.3.27.
a. They are identical: Set{B is the category of relative sets over B.
b. The limit of the diagram B : 1 √ë Set is the terminal object in the category of ‚Äúsets
mapping to B.‚Äù One can check that B
id
√ù√ë B is the terminal object.
‚ô¶
Theorem 6.1.3.28. Let I be a category and let F : I √ë Set be a functor. Then its limit
set limI F P ObpSetq exists and one can Ô¨Ånd its elements as follows. An element of the
set limI F is given by choosing an element of xi P Fpiq for each object i P ObpIq such
that, for each f : i √ë i1 one has Fpfqpxiq ‚Äú xi1.

352
CHAPTER 6. FUNDAMENTAL CONSIDERATIONS OF CATEGORIES
Proof. See [29].
‚ñ°
Exercise 6.1.3.29.
Let I be the category given by the following schema:
a‚Äö
f

c‚Äö
g

h

b‚Äö
d‚Äö
Let X : I √ë Set be given on objects by Xpaq :‚Äú 2, Xpbq :‚Äú 1, Xpcq :‚Äú 3, Xpdq ‚Äú 2, and
given (in sequence notation) on morphisms by Xpfq ‚Äú p1, 1q, Xpgq ‚Äú p1, 1, 1q, Xphq ‚Äú
p1, 2, 1q. What is the limit limI X.
‚ô¶
Solution 6.1.3.29.
By Theorem 6.1.3.28, an element of the limit set limI X is given by choosing a tuple
pxa, xb, xc, xdq such that
‚Ä¢ xa P Xpaq, xb P Xpbq, xc P Xpcq, and xd P Xpdq, and
‚Ä¢ Xpfqpxaq ‚Äú xb, Xpgqpxbq ‚Äú xc, and Xphqpxbq ‚Äú xd.
Without the second condition, there are two ways to choose xa, one way to choose
xb, three ways to choose xc and two ways to choose xd, giving twelve possible tuples.
The second restriction reduces this number. We need Xphqpxcq ‚Äú xd, so in fact xd is
determined by xc; this reduces our choices to 2 Àö 3 ‚Äú 6. We also need Xpfqpxaq ‚Äú xb and
Xpgqpxcq ‚Äú xb, but because Xpbq ‚Äú 1, this is automatic. Thus the answer is 6.
‚ô¶
6.1.3.30
DeÔ¨Ånition of colimit
The deÔ¨Ånition of colimits is appropriately dual to the deÔ¨Ånition of limits. Instead of
looking at left cones, we look at right cones; instead of being interested in terminal
objects, we are interested in initial objects.
DeÔ¨Ånition 6.1.3.31. Let C be a category, let I be a category; let I≈π be the right cone
on I, and let i: I √ë I≈π be the inclusion. Suppose that X : I √ë C is an I-shaped diagram
in C. The coslice category of C over X, denoted CX{, is the category whose objects and
morphisms are as follows:
ObpCX{q ‚Äú tS : I≈π √ë C | S Àù i ‚Äú Xu;
HomCX{pS, S1q ‚Äú tŒ±: S √ë S1 | Œ± Àõ i ‚Äú idXu.

6.1. LIMITS AND COLIMITS
353
A colimit of X, denoted colimI X or colim X, is an initial object in CX{.
Remark 6.1.3.32. Perhaps the following diagram will be helpful for understanding colim-
its. Given a functor X : I √ë C, what is its colimit? The solid-arrow part of the Ô¨Ågure
is the data we start with, i.e., the category C, the indexing category I, and the diagram
X : I √ë C, as well as the part we automatically add, the cone I≈π with the inclusion
I
i√ù√ë I≈π. The category CX{ is found in the dotted arrow part: its objects are the dotted
arrows S : I≈π √ë C that make the following triangle commute, and its morphisms are the
natural transformations Œ±: S √ë S1 between them:
I
X

i

C
I≈π
S

S1
_
Œ±
The colimit of X is the initial object in this category.
Pushouts
The relevant indexing category for pushouts is the span, I ‚Äú 2≈∏ drawn as
on the left:
I
1‚Äö
2‚Äö
0‚Äö

 
X : I √ë C
X1‚Äö
X2‚Äö
X0‚Äö
\
D
An I-shaped diagram in C is a functor X : I √ë C, which might be drawn as on the right
(e.g., X0 P ObpCq).
An object S in the coslice category CX{ is a commutative diagram S : I≈π √ë C over

354
CHAPTER 6. FUNDAMENTAL CONSIDERATIONS OF CATEGORIES
X, which looks like the left-hand box:
S P ObpCX{q
SRCI
X1‚Äö
0
X2‚Äö

X0‚Äö
`
/
f : S √ë S1
S1
RCI
SRCI
f

X1‚Äö
0
0
X2‚Äö


X0‚Äö
/
`
A morphism in CX{ is drawn as in right-hand box. An initial object in CX{ is precisely
the gateway we want, i.e., the colimit of X is the pushout, X1 \X0 X2.
Exercise 6.1.3.33.
Let GrIn be the graph-indexing category (see (5.8)).
a. What is GrIn≈π?
b. Let G: GrIn √ë Set be the graph from Example 4.3.1.2. Give an example of an object
in SetG{.
‚ô¶
Solution 6.1.3.33.
a. We have
GrIn≈π ‚Äì
Ar‚Äö
src 
tgt 
Ve‚Äö
f
 C‚Äö
with the PED Arrsrc, fs ‚Äú Arrtgt, fs.
b. An object in SetG{ is a functor S : GrIn≈π √ë Set such that SpArq ‚Äú tf, g, h, i, j, ku
and SpVeq ‚Äú tv, w, x, y, zu, and with source and target maps as in Example 4.3.1.2.
To specify the functor S, we need only specify what it does on the remaining ob-
ject, SpCq, and on the remaining morphism Spfq: SpVeq √ë SpCq, and the necessary

6.1. LIMITS AND COLIMITS
355
diagram must commute. So we could take SpCq ‚Äú t1, 2, 3u; we are forced to have
Spfqpvq ‚Äú Spfqpwq ‚Äú Spfqpxq and Spfqpyq ‚Äú Spfqpzq.
In other words, for each
connected component of this graph (of which there are two), we can choose to which
element of SpCq, of which there are three, we will send it. So we could take Spfqpvq ‚Äú 1
and Spfqpyq ‚Äú 3. We have now deÔ¨Åned an object in SetG{.
‚ô¶
Exercise 6.1.3.34.
Let C be a category, and let I ‚Äú 0 be the empty category. There is a unique functor
X : 0 √ë C.
a. What is the coslice category CX{?
b. What is a colimit of X (assuming it exists)?
‚ô¶
Solution 6.1.3.34.
a. The right cone of 0 is the terminal category 0≈π ‚Äì 1, and since every diagram
0
X

i

C
1
D
commutes, we have an isomorphism Funp1, Cq
‚Äì
√ù√ë CX{. But by (5.14), we have an
isomorphism C
‚Äì
√ù√ë Funp1, Cq, so in fact C ‚Äì CX{.
b. A colimit of X is deÔ¨Åned to be an initial object in CX{, which is an initial object in C,
if it exists. In other words, initial objects in a category give us a canonical example of
colimits. This was hinted at in Exercise 3.3.3.4.
‚ô¶
Theorem 6.1.3.35. Let I be a category and let F : I √ë Set be a functor. Then its colimit
set colimI F P ObpSetq exists and one can Ô¨Ånd its elements as follows. An element of the
set colimI F is given by choosing any i P ObpIq and any element of xi P Fpiq, and then
considering two such elements equivalent if there exists f : i √ë i1 such that Xpfqpxiq ‚Äú xi1.

356
CHAPTER 6. FUNDAMENTAL CONSIDERATIONS OF CATEGORIES
Proof. See [29].
‚ñ°
Exercise 6.1.3.36.
Let I be the category given by the following schema:
a‚Äö
f

c‚Äö
g

h

b‚Äö
d‚Äö
Let X : I √ë Set be given on objects by Xpaq :‚Äú 2, Xpbq :‚Äú 2, Xpcq :‚Äú 4, Xpdq ‚Äú 3, and
given (in sequence notation) on morphisms by Xpfq ‚Äú p1, 2q, Xpgq ‚Äú p1, 2, 1q, Xphq ‚Äú
p1, 2, 4q. What is the colimit colimI X.
‚ô¶
Solution 6.1.3.36.
We follow Theorem 6.1.3.35; to begin, we Ô¨Ånd the set of ways to choose an object
i P ObpIq and an element xi P Xpiq. This is the set of vertices in the following depiction
of X:
pc,1q
‚Äö
R
:
pa,1q
‚Äö

pc,2q
‚Äö
R
:
pa,2q
‚Äö

pb,1q
‚Äö
pc,3q
‚Äö


pd,1q
‚Äö
pb,2q
‚Äö
pd,2q
‚Äö
pd,3q
‚Äö
pd,4q
‚Äö
(6.7)
The equivalence relation is given by connections in this graph; e.g., pa, 2q ‚Äû pb, 2q ‚Äû
pc, 3q ‚Äû pd, 4q. The colimit is basically the set of connected components of this graph.
There are three equivalence classes: the one containing pa, 1q, the one containing pa, 2q,
and the one containing pd, 3q. So we have colimI X ‚Äì 3.
‚ô¶
Remark 6.1.3.37. DeÔ¨Ånition 6.1.3.31 deÔ¨Åned what it means to be a colimit in any category;
however, in any particular category, some colimits may not exist. It is like deÔ¨Åning the
quotient of any two natural numbers r, s P N by r Àú s ‚Äú q if and only if q Àö s ‚Äú r. We

6.1. LIMITS AND COLIMITS
357
have deÔ¨Åned what it means to be a quotient, but that doesn‚Äôt mean the quotient of any
two numbers exists, e.g. if r ‚Äú 7 and s ‚Äú 2.
The same goes for limits. A category C in which every diagram is guaranteed to have
a limit is called complete. A category C in which every diagram is guaranteed to have a
colimit is called cocomplete.
Example 6.1.3.38 (Cone as colimit). It turns out that Cat is cocomplete, meaning every
diagram in C has a colimit. We give an example of a colimit in Cat.
Let C be a category, and recall from Example 6.1.3.26 the category C ÀÜ r1s.
The
inclusion of the front pane is a functor i0 : C √ë C ÀÜ r1s. (Similarly, the inclusion of the
back pane is a functor i1 : C √ë C ÀÜr1s.) Finally, let t: C √ë 1 be the unique functor to the
terminal category (see Exercise 5.1.2.40). We now have a diagram in Cat of the form
C
i0 
t

C ÀÜ r1s
1
The colimit (i.e., the pushout) of this diagram in Cat slurps down the entire front pane
of C ÀÜ r1s to a point, and the resulting category is isomorphic to C≈∏. The diagrams in

358
CHAPTER 6. FUNDAMENTAL CONSIDERATIONS OF CATEGORIES
(6.8) illustrate this phenomenon.
C :‚Äú
A0‚Äö


B0‚Äö

C0‚Äö
D0‚Äö
i0

C ÀÜ r1s
A1‚Äö


B1‚Äö

A0‚Äö
D


B0‚Äö
D

C1‚Äö
D1‚Äö
C0‚Äö
D
D0‚Äö
D
t


LCC
‚Äö
1

A1‚Äö


B1‚Äö

‚Äö
D
C
\
]
C1‚Äö
D1‚Äö
C≈∏ ‚Äì pC ÀÜ r1sq \C 1
(6.8)
The category C is shown in the upper left-hand corner of (6.8). The left cone C≈∏ on C
is obtained as a pushout in Cat. We Ô¨Årst make a prism C ÀÜ r1s and then identify the
front pane with a point. (Similarly, the pushout of an analogous diagram for i1 would
give C≈π.)
Example 6.1.3.39. Consider the category Top of topological spaces. The (unÔ¨Ålled) circle
is a topological space, which people often denote by S1 (for one-dimensional sphere).

6.1. LIMITS AND COLIMITS
359
Topologically, it is equivalent to an oval, as shown in Figure 6.1. The Ô¨Ålled-in circle, also
called a two-dimensional disk, is denoted D2. The inclusion of the circle into the disk, as
its boundary, is continuous, so we have a morphism in Top of the form i: S1 √ë D2. The
terminal object in Top is the one-point space ‚Äö, so there is a unique morphism t: S1 √ë ‚Äö.
The pushout of the diagram D2
i√ê√ù S1
t√ù√ë ‚Äö is isomorphic to the two-dimensional
sphere (the exterior of a tennis ball), S2. The reason is that we have slurped the entire
bounding circle of D2 to a point, which becomes, say, the south pole, and the interior area
of D2 becomes the surface area of the sphere. Mathematically, the category of topological
spaces has the right morphisms to ensure that this intuitive picture is correct.
S1 
D2 
S2 
Figure 6.1 A pushout of topological spaces. A circle S1 is both included as the boundary
of a disk D2 and sent to a single point ‚Äö. The resulting pushout is a 2-dimensional sphere
S2, formed by sewing the boundary circle of a disk all together into a single point.
Application 6.1.3.40. Consider the symmetric graph Gn consisting of a chain of n vertices,
1‚Äö
2‚Äö
¬® ¬® ¬®
n‚Äö
Think of this as modeling a subway line.
There are n-many graph homomorphisms
G1 √ë Gn given by the various vertices. One can create transit maps using colimits. For

360
CHAPTER 6. FUNDAMENTAL CONSIDERATIONS OF CATEGORIES
example, the colimit of the left-hand diagram is the symmetric graph drawn at the right:
colim
¬®
Àö
Àö
Àö
Àö
Àö
Àö
Àö
Àö
Àö
Àö
Àù
G1
4

4

G7
G1
6

1

G5
G3
G1
2

3
 G7
G1
2

5

Àõ
‚Äπ‚Äπ‚Äπ‚Äπ‚Äπ‚Äπ‚Äπ‚Äπ‚Äπ‚Äπ‚Äö
‚Äö5
1‚Äö
2‚Äö
3‚Äö
4‚Äö4
5‚Äö
6‚Äö1
7‚Äö
‚Äö3
1‚Äö
2‚Äö
3‚Äö2
4‚Äö
5‚Äö2
6‚Äö
7‚Äö
‚Äö1
‚Äö3
‚ô¶‚ô¶
6.2
Other notions in Cat
This section discusses some additional notions about categories. Section 6.2.1 explains
a kind of duality for categories, in which arrows are Ô¨Çipped.
Reversing the order in
a preorder is an example of this duality, as is the similarity between the deÔ¨Ånitions of
limit and colimit. Section 6.2.2 discusses the Grothendieck construction, which in some
sense makes a histogram for a set-valued functor, and shows that this idea is useful for
transforming databases into the kind of format (RDF) used in scraping data oÔ¨Äweb
pages. Some ways of creating new categories from old are explained in Sections 6.2.3 and
6.2.4. Finally, Section 6.2.5 shows that precisely the same arithmetic statements that
held for sets (see Section 3.4.3) hold for categories.
6.2.1
Opposite categories
In the early days of category theory, and still today, people would sometimes discuss
two diÔ¨Äerent kinds of functors between categories: covariant functors and contravariant
functors. Covariant functors are what this book calls functors. The reader may have
come across the idea of contravariance when considering Exercise 5.2.3.2,9 which showed
that a continuous mapping of topological spaces f : X √ë Y does not induce a morphism
of orders on their open sets OpenpXq √ë OpenpY q; that is not required by the notion of
continuity. Instead, a morphism of topological spaces f : X √ë Y induces a morphism of
orders OpenpY q √ë OpenpXq, going backward. So we do not have a functor Top √ë PrO
9Similarly, see Exercise 5.2.4.4.

6.2. OTHER NOTIONS IN CAT
361
in this way, but it is quite close. It used to be said that Open is a contravariant functor
Top √ë PrO.
As important and common as contravariance is, one Ô¨Ånds that keeping track of which
functors were covariant and which were contravariant is a big hassle. Luckily, there is a
simple work-around, which simpliÔ¨Åes everything: the notion of opposite categories.
DeÔ¨Ånition 6.2.1.1. Let C be a category. The opposite category of C, denoted Cop, has
the same objects as C, i.e., ObpCopq ‚Äú ObpCq, and for any two objects c, c1, one deÔ¨Ånes
HomCoppc, c1q :‚Äú HomCpc1, cq.
Example 6.2.1.2. If n P N is a natural number and n the corresponding discrete category,
then nop ‚Äú n. Recall the span category I ‚Äú 2≈∏ from DeÔ¨Ånition 6.1.1.8. Its opposite is
the cospan category Iop ‚Äú 2≈π, from DeÔ¨Ånition 6.1.1.23.
Exercise 6.2.1.3.
Let C be the category from Example 6.1.3.18. Draw Cop.
‚ô¶
Solution 6.2.1.3.
Cop :‚Äú
X1‚Äö
a
R
d1
C
b1
]
c1
C
A‚Äö
f
 B‚Äö
‚úì
C‚Äö
‚úì
‚úì
D‚Äö
g

X2‚Äö
d2
;
b2
\
c2
D
‚ô¶
Proposition 6.2.1.4. Let C and D be categories. One has pCopqop ‚Äú C. Also one has a
canonical isomorphism FunpC, Dq ‚Äì FunpCop, Dopq. This implies that a functor Cop √ë D
can be identiÔ¨Åed with a functor C √ë Dop.
Proof. This follows straightforwardly from the deÔ¨Ånitions.
‚ñ°

362
CHAPTER 6. FUNDAMENTAL CONSIDERATIONS OF CATEGORIES
Exercise 6.2.1.5.
If C is a category and c P ObpCq is an initial object, does this imply that c is a terminal
object in Cop?
‚ô¶
Solution 6.2.1.5.
Yes. For any x P ObpCopq ‚Äú ObpCq, we have HomCoppx, cq ‚Äú HomCpc, xq ‚Äì 1.
‚ô¶
Exercise 6.2.1.6.
In Exercises 5.2.3.2, 5.2.4.3, and 5.2.4.4 there were questions about whether a certain
function ObpCq √ë ObpDq extended to a functor C √ë D.
a. Does the function Open: ObpTopq √ë ObpPrOq extend to a functor Open: Topop √ë
PrO?
b. Does the function L: ObpJq √ë ObpPropq extend to a functor L: Jop √ë Prop?
c. Does the function R: ObpJq √ë ObpSetq extend to a functor R: Jop √ë Set?
‚ô¶
Solution 6.2.1.6.
a. Yes.
b. No.
c. Yes.
‚ô¶
Example 6.2.1.7 (Simplicial sets). Recall from Example 5.3.4.4 the category Œî of linear
orders rns. For example, r1s is the linear order 0 ƒè 1, and r2s is the linear order 0 ƒè 1 ƒè 2.
Both r1s and r2s are objects of Œî. There are 6 morphisms from r1s to r2s, which could
be denoted
HomŒîpr1s, r2sq ‚Äú tp0, 0q, p0, 1q, p0, 2q, p1, 1q, p1, 2q, p2, 2qu.
The category Œîop turns out to be quite useful in algebraic topology. It is the indexing
category for a combinatorial approach to the homotopy theory of spaces. That is, we can
represent something like the category of spaces and continuous maps using the functor
category FunpŒîop, Setq, which is called the category of simplicial sets.
This may seem very complicated compared to simplicial complexes (see Section 3.4.4.3).
But simplicial sets have excellent formal properties that simplicial complexes do not. We

6.2. OTHER NOTIONS IN CAT
363
do not go further with this here, but through the work of Dan Kan, Andr¬¥e Joyal, Jacob
Lurie, and many others, simplicial sets have allowed category theory to pierce deeply into
the realm of topology, and vice versa.
6.2.2
Grothendieck construction
Let C be a database schema (or category), and let J : C √ë Set be an instance. We have
been drawing this in table form, but there is another standard way of laying out the data
in J, called the resource descriptive framework, or RDF. Developed for the World Wide
Web, RDF is a useful format when one does not have a schema in hand. For example,
when scraping information oÔ¨Äa website, one does not know which schema will be best.
In these cases information is stored in RDF triples, which are of the form
xSubject, Predicate, Objecty.
For example, one might see something like
Subject
Predicate
Object
A01
occurredOn
D13114
A01
performedBy
P44
A01
actionDescription
Told congress to raise the debt ceiling
D13114
hasYear
2013
D13114
hasMonth
January
D13114
hasDay
14
P44
FirstName
Barack
P44
LastName
Obama
(6.9)
This might be an RDF interpretation of the sentence ‚ÄúOn January 14, 2013, Barack
Obama told congress to raise the debt ceiling.‚Äù
Category-theoretically, it is quite simple to convert a database instance J : C √ë Set
into an RDF triple store. To do so, we use the Grothendieck construction, also known as
the category of elements.
DeÔ¨Ånition 6.2.2.1. Let C be a category, and let J : C √ë Set be a functor. The category
of elements of J, denoted
≈ü
C J, is deÔ¨Åned as follows:
Obp

C
Jq :‚Äú tpC, xq | C P ObpCq, x P JpCqu;
Hom≈ü
C JppC, xq, pC1, x1qq :‚Äú tf : C √ë C1 | Jpfqpxq ‚Äú x1u.

364
CHAPTER 6. FUNDAMENTAL CONSIDERATIONS OF CATEGORIES
There is a natural functor œÄJ :
≈ü
C J √ù√ë C. It sends each object pC, xq P Obp
≈ü
C Jq to
the object C P ObpCq. And it sends each morphism f : pC, xq √ë pC1, x1q to the morphism
f : C √ë C1. We call œÄJ the projection functor.
Example 6.2.2.2. Let A be a set, and consider it as a discrete category. We saw in Exercise
5.3.3.4 that a functor S : A √ë Set is the same thing as an A-indexed set, as discussed in
Section 3.4.6.9. We follow DeÔ¨Ånition 3.4.6.11 and, for each a P A, write Sa :‚Äú Spaq.
What is the category of elements of a functor S : A √ë Set? The objects of
≈ü
A S are
pairs pa, sq, where a P A and s P Spaq. Since A has nothing but identity morphisms,
≈ü
A S
has nothing but identity morphisms, i.e., it is the discrete category on a set. In fact, that
set is the disjoint union

A
S ‚Äú
ƒü
aPA
Sa.
The functor œÄS :
≈ü
A S √ë A sends each element in Sa to the element a P A.
One can see this as a kind of histogram. For example, let A ‚Äú tBOS, NYC, LA, DCu, and
let S : A √ë Set assign
SBOS ‚Äú tAbby, Bob, Casandrau,
SNYC ‚Äú H,
SLA ‚Äú tJohn, Jimu,
SDC ‚Äú tAbby, Carlau.
Then the category of elements of S would look like the (discrete) category at the top:

A
S ‚Äú
pBOS,Abbyq
‚Äö
pBOS,Bobq
‚Äö
pLA,Johnq
‚Äö
pDC,Abbyq
‚Äö
pBOS,Casandraq
‚Äö
pLA,Jimq
‚Äö
pDC,Carlaq
‚Äö
(6.10)
œÄS

A ‚Äú
BOS
‚Äö
NYC
‚Äö
LA‚Äö
DC‚Äö
We also see that the category of elements construction has converted an A-indexed
set into a relative set over A, as in DeÔ¨Ånition 3.4.6.6.

6.2. OTHER NOTIONS IN CAT
365
The preceding example does not show how the Grothendieck construction transforms
a database instance into an RDF triple store. The reason is that the database schema
was A, a discrete category that speciÔ¨Åes no connections between data (it simply collects
the data into bins). So let‚Äôs examine a more interesting database schema and instance.
This is taken from Spivak [39].
Application 6.2.2.3. Consider the following schema, Ô¨Årst encountered in Example 4.5.2.1:
C :‚Äú
Employee manager worksIn ¬ª Employee worksIn
Department secretary worksIn ¬ª Department
Employee
‚Äö
worksIn

manager

Ô¨Årst

last

Department
‚Äö
secretary

name

FirstNameString
‚Äö
LastNameString
‚Äö
DepartmentNameString
‚Äö
(6.11)
And consider the instance J : C √ë Set, which we Ô¨Årst encountered in (4.13) and (4.15):
Employee
ID
Ô¨Årst
last
manager
worksIn
101
David
Hilbert
103
q10
102
Bertrand
Russell
102
x02
103
Emmy
Noether
103
q10
Department
ID
name
secretary
q10
Sales
101
x02
Production
102
FirstNameString
ID
Alan
Bertrand
Carl
David
Emmy
LastNameString
ID
Arden
Hilbert
Jones
Noether
Russell
DepartmentNameString
ID
Marketing
Production
Sales
The category of elements of J : C √ë Set looks like this:

366
CHAPTER 6. FUNDAMENTAL CONSIDERATIONS OF CATEGORIES

C
J ‚Äú
101
‚Äö
Ô¨Årst

last
7
manager
;
worksIn

102
‚Äö
103
‚Äö
q10
‚Äö
x02
‚Äö
secretary
M
name

Alan
‚Äö
Hilbert
‚Äö
Production
‚Äö
Bertrand
‚Äö
Russell
‚Äö
Sales
‚Äö
David
‚Äö
Noether
‚Äö
Marketing
‚Äö
Emmy
‚Äö
Arden
‚Äö
Carl
‚Äö
Jones
‚Äö
œÄJ

(6.12)
C ‚Äú
Employee
‚Äö
worksIn

manager

Ô¨Årst
9
last

Department
‚Äö
secretary

name

FirstNameString
‚Äö
LastNameString
‚Äö
DepartmentNameString
‚Äö
In Diagram (6.12) of
≈ü
C J, ten arrows were omitted for ease of readability, for example,
arrow
102
‚Äö
first
√ù√ù√ù√ù√ù√ù√ë
Bertrand
‚Äö
was omitted.
How do we see the category of elements
≈ü
C J as an RDF triple store?
For each
arrow in
≈ü
C J, we take the triple consisting of the source vertex, the arrow name, and
the target vertex. So the triple store would include triples such as x101 worksIn q10y
and xq10 name Productiony. Note that if C were an olog, we could read oÔ¨Äthese triples
(and concatenations of them) as English sentences. For example, the preceding two triples
could be Englished as follows:
Employee 101 works in Department q10, which has as name Production.

6.2. OTHER NOTIONS IN CAT
367
‚ô¶‚ô¶
Exercise 6.2.2.4.
Devise a schema C for which you can imagine an instance I : C √ë Set such that the
category of elements
≈ü
pIq is the triple store in (6.9).
‚ô¶
Solution 6.2.2.4.
C :‚Äú
DescString
‚Äö
Action
‚Äö
actionDes-
cription

occurredOn

performedBy

Date
‚Äö
hasYear

hasMonth
)
hasDay

Year
‚Äö
FNString
‚Äö
Person
‚Äö
FirstName

LastName  LNString
‚Äö
Day
‚Äö
Month
‚Äö
‚ô¶
Slogan 6.2.2.5.
The Grothendieck construction takes structured, tabulated data and Ô¨Çattens
it by throwing it all into one big space. The projection functor is then tasked
with remembering which box each datum originally came from.
Exercise 6.2.2.6.
Recall from Section 4.1.2.10 that a Ô¨Ånite state machine is a free monoid pListpŒ£q, r s, ``q
acting on a set X. Recall also that we can consider a monoid as a category M with one
object, and we can consider a monoid action as a set-valued functor F : M √ë Set (see
Section 5.2.1.1). In the case of Figure 4.2 the monoid is Listpa, bq, which can be drawn
as the schema
‚ñ≤
a
*
b
,
and the functor F : M √ë Set is recorded in an action table in Example 4.1.3.1. What is
≈ü
M F? How does it relate to Figure 4.2?
‚ô¶

368
CHAPTER 6. FUNDAMENTAL CONSIDERATIONS OF CATEGORIES
Solution 6.2.2.6.
Figure 4.2 is a drawing of the category
≈ü
M F, or more precisely, of a presentation
of it. The objects are drawn as boxes, Obp
≈ü
M Fq ‚Äú tState 0, State 1, State 2u, and the
morphisms are generated by the six arrows drawn there.
‚ô¶
6.2.3
Full subcategory
DeÔ¨Ånition 6.2.3.1. Let C be a category, and let X ƒé ObpCq be a set of objects in C.
The full subcategory of C spanned by X is the category, denoted COb‚ÄúX, with objects
ObpCOb‚ÄúXq :‚Äú X and with morphisms HomCOb‚ÄúXpx, x1q :‚Äú HomCpx, x1q.
Example 6.2.3.2. The following are examples of full subcategories.
For example, the
category Fin of Ô¨Ånite sets is the full subcategory of Set spanned by the Ô¨Ånite sets.
‚Ä¢ If X ‚Äú ts P ObpSetq | s is Ô¨Åniteu, then Fin ‚Äú SetOb‚ÄúX.
‚Ä¢ If X ‚Äú tP P ObpPrOq | P is a Ô¨Ånite linear order)u, then FLin ‚Äú PrOOb‚ÄúX.
‚Ä¢ If X ‚Äú trns P FLin | n P Nu (see Example 5.3.4.4), then Œî ‚Äú FLinOb‚ÄúX.
‚Ä¢ If X ‚Äú tM P ObpMonq | M is a groupu, then Grp ‚Äú MonOb‚ÄúX.
‚Ä¢ If X ‚Äú tC P ObpCatq | C has one objectu, then Mon ‚Äú CatOb‚ÄúX.
‚Ä¢ If X ‚Äú tn P ObpFinq | n P Nu, then there is an equivalence of categories Fin ¬ª
FinOb‚ÄúX.
‚Ä¢ If X ‚Äú tpV, A, src, tgtq P ObpGrphq | A ‚Äú Hu, then Set ‚Äì GrphOb‚ÄúX.
‚Ä¢ If X ‚Äú tC P Cat | C is discreteu, then Set ‚Äì CatOb‚ÄúX.
Remark 6.2.3.3. A subcategory C ƒé D is (up to isomorphism) just a functor i: C √ë D
that happens to be injective on objects and arrows. The subcategory is full if and only if
i is a full functor in the sense of DeÔ¨Ånition 5.3.4.8.
Example 6.2.3.4. Let C be a category, let X ƒé ObpCq be a set of objects, and let COb‚ÄúX
denote the full subcategory of C spanned by X. We can realize this as a Ô¨Åber product
of categories. Indeed, recall that for any set, we can form the indiscrete category on
that set (see Example 5.3.4.3).
In fact, we have a functor Ind: Set √ë Cat.
Thus
the function X √ë ObpCq can be converted into a functor between indiscrete categories
IndpXq √ë IndpObpCqq. There is also a unique functor C √ë IndpObpCqq sending each

6.2. OTHER NOTIONS IN CAT
369
object to itself. Then the full subcategory of C spanned by X is the Ô¨Åber product of
categories,
COb‚ÄúX
‚åü


C

IndpXq
 IndpObpCqq
Exercise 6.2.3.5.
Recall the sets 0, 1, 2 P ObpSetq from Notation 2.1.2.21. Including all identities and
all compositions, how many morphisms are there in the full subcategory SetOb‚Äút0,1,2u?
‚ô¶
Solution 6.2.3.5.
We can write a function m √ë n as a length m sequence of numbers i with 1 ƒè i ƒè n.
For example, there is function 3 √ë 5, that we would write p4, 4, 2q.
There are 11 morphisms in C; every entry in the table is the set HomCpm, nq:
m
n
0
1
2
0
tp qu
H
H
1
tp qu
tp1qu
tp1, 1qu
2
tp qu
tp1q, p2qu
tp1, 1q, p1, 2q, p2, 1q, p2, 2qu
‚ô¶
6.2.4
Comma categories
Category theory includes a highly developed and interoperable catalogue of materials
(categories such as rns, GrIn, PrO, etc.)
and production techniques for making new
categories from old. One such was the full subcategory idea in the previous section‚Äî
given any category and any subset of objects, one can form a new category to restrict
attention to the subset. Another is the comma category construction.
DeÔ¨Ånition 6.2.4.1. Let A
F√ù√ë C
G
√ê√ù B be a cospan of categories. The comma category
of C morphisms from F to G, denoted pF √ìC Gq or simply pF √ì Gq, is the category with
objects
ObpF √ì Gq ‚Äú tpa, b, fq | a P ObpAq, b P ObpBq, f : Fpaq √ë Gpbq in Cu,

370
CHAPTER 6. FUNDAMENTAL CONSIDERATIONS OF CATEGORIES
and for any two objects pa, b, fq and pa1, b1, f 1q the set HompF √ìGqppa, b, fq, pa1, b1, f 1qq of
morphisms pa, b, fq √ù√ë pa1, b1, f 1q is
tpq, rq | q: a √ë a1 in A, r: b √ë b1 in B, such that f 1 Àù Fpqq ‚Äú Gprq Àù fu.
In diagram form,
HompF √ìGqppa, b, fq, pa1, b1, f 1qq :‚Äú
$
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
&
‚Äô
‚Äô
‚Äô
‚Äô
‚Äô
%
a
q

Fpaq
‚úì
f

F pqq

Gpbq
Gprq

b
r

a1
Fpa1q
f 1
 Gpb1q
b1
,
/
/
/
/
/
.
/
/
/
/
/
-
There is a canonical functor pF √ì Gq √ë A, called left projecton, sending pa, b, fq to a,
and a canonical functor pF √ì Gq √ë B, called right projection, sending pa, b, fq to b.
A cospan A
F√ù√ë C
G
√ê√ù B is reversible, i.e., we can Ô¨Çip it to obtain B
G
√ù√ë C
F
√ê√ù A.
However, note that pF √ì Gq is diÔ¨Äerent than (i.e., almost never equivalent to) pG √ì Fq.
Slogan 6.2.4.2.
When two categories A, B can be interpreted in a common setting C, the
comma category integrates them by recording how to move from A to B
inside C.
Example 6.2.4.3. Let C be a category and I : C √ë Set a functor. This example shows that
the comma category construction captures the notion of taking the category of elements
≈ü
C I (see DeÔ¨Ånition 6.2.2.1).
Consider the set 1, the category Discp1q, and the functor F : Discp1q √ë Set sending
the unique object to the set 1. We use the cospan Discp1q
F
√ù√ù√ù√ë Set
I
√ê√ù√ù√ù C. There is
an isomorphism of categories
≈º
C
I ‚Äì pF √ì Iq.
Indeed, an object in pF √ì Iq is a triple pa, b, fq, where a P ObpDiscp1qq, b P ObpCq, and
f : Fpaq √ë Ipbq is a morphism in Set. There is only one object in Discp1q, so this reduces
to a pair pb, fq, where b P ObpCq and f : tu √ë Ipbq. The set of functions tu √ë Ipbq
is isomorphic to Ipbq (see Exercise 2.1.2.20). So we have reduced ObpF √ì Iq to the set
of pairs pb, xq, where b P ObpCq and x P Ipbq; this is Obp
≈ü
C Iq. Because there is only

6.2. OTHER NOTIONS IN CAT
371
one function 1 √ë 1, a morphism pb, xq √ë pb1, x1q in pF √ì Iq boils down to a morphism
r: b √ë b1 such that the diagram
1
x  Ipbq
Iprq

1
x1  Ipb1q
commutes. But such diagrams are in one-to-one correspondence with the diagrams deÔ¨Ån-
ing morphisms in
≈ü
C I.
Exercise 6.2.4.4.
Let C be a category, and let c, c1 P ObpCq be objects represented by the functors
c, c1 : 1 √ë C. Consider the cospan 1
c
√ù√ù√ù√ë C
c1
√ê√ù√ù√ù 1. What is the comma category
pc √ì c1q?
‚ô¶
Solution 6.2.4.4.
Its objects are in bijection with HomCpc, c1q. Since the only morphism in 1 is identity,
pc √ì c1q is discrete.
‚ô¶
Exercise 6.2.4.5.
Let C and D be categories, and let !: C √ë 1 and !: D √ë ! be the unique functors to
the terminal category. What is the comma category for C
!√ù√ë 1
!√ê√ù D?
‚ô¶
Solution 6.2.4.5.
There is an isomorphism to the product category,
pC √ì Dq ‚Äì
√ù√ë C ÀÜ D.
‚ô¶
Exercise 6.2.4.6.
Let C be a category.
a. If c P C is an initial object, what is the comma category for the cospan 1 c√ù√ë C
idC
√ê√ù√ù C?
b. If d P C is a terminal object, what is the comma category for the cospan C
idC
√ù√ù√ë C
d
√ê√ù C?
‚ô¶

372
CHAPTER 6. FUNDAMENTAL CONSIDERATIONS OF CATEGORIES
Solution 6.2.4.6.
a. If c P ObpCq is initial, it is easy to check that there is an isomorphism pc √ì Cq ‚Äì C.
b. If d P ObpCq is terminal, it is easy to check that there is an isomorphism pC √ì dq ‚Äì C.
‚ô¶
6.2.5
Arithmetic of categories
Section 3.4.3 summarized some of the properties of products, coproducts, and exponen-
tials for sets, showing that they lined up precisely with familiar arithmetic properties of
natural numbers. We can do the same for categories.
In the following proposition, we denote the coproduct of two categories A and B by
the notation A ` B rather than A \ B. We also denote the functor category FunpA, Bq
by BA. Finally, we use 0 and 1 to refer to the discrete category on 0 objects and on 1
object respectively.
Proposition 6.2.5.1. The following isomorphisms exist for any small categories A, B,
and C.
‚Ä¢ A ` 0 ‚Äì A.
‚Ä¢ A ` B ‚Äì B ` A.
‚Ä¢ pA ` Bq ` C ‚Äì A ` pB ` Cq.
‚Ä¢ A ÀÜ 0 ‚Äì 0.
‚Ä¢ A ÀÜ 1 ‚Äì A.
‚Ä¢ A ÀÜ B ‚Äì B ÀÜ A.
‚Ä¢ pA ÀÜ Bq ÀÜ C ‚Äì A ÀÜ pB ÀÜ Cq.
‚Ä¢ A ÀÜ pB ` Cq ‚Äì pA ÀÜ Bq ` pA ÀÜ Cq.
‚Ä¢ A0 ‚Äì 1.
‚Ä¢ A1 ‚Äì A.
‚Ä¢ 0A ‚Äì 0,
if A ‚Ä∞ 0.
‚Ä¢ 1A ‚Äì 1.

6.2. OTHER NOTIONS IN CAT
373
‚Ä¢ AB`C ‚Äì AB ÀÜ AC.
‚Ä¢ pABqC ‚Äì ABÀÜC.
‚Ä¢ pA ÀÜ BqC ‚Äì AC ÀÜ BC.
Proof. These are standard results; see Mac Lane [29].
‚ñ°


Chapter 7
Categories at Work
The reader should now have an understanding of the basic notions of category theory:
categories, functors, natural transformations, and universal properties. As well, we have
discussed many sources of examples: orders, graphs, monoids, and databases. This chap-
ter begins with the notion of adjoint functors (also known as adjunctions), which are like
dictionaries translating back and forth between diÔ¨Äerent categories.
7.1
Adjoint functors
How far can we take this dictionary analogy?
In the common understanding of dictionaries, we assume that two languages (say,
French and English) are equally expressive and that a good dictionary will assist in an
even exchange of ideas. But in category theory we often have two categories that are not
on the same conceptual level. This is most clear in the case of free-forgetful adjunctions.
Section 7.1.1 explores the sense in which each adjunction provides a dictionary between
two categories that are not necessarily on an equal footing, so to speak.
7.1.1
Discussion and deÔ¨Ånition
Consider the category of monoids and the category of sets. A monoid pM, e, ‚Äπq is a set
with a unit element and a multiplication formula that is associative. A set is just a set.
A dictionary between Mon and Set should not be required to set up an even exchange
but rather an exchange that is appropriate to the structures at hand. It will be in the
form of two functors, denoted L: Set √ë Mon and R: Mon √ë Set. So we can translate
back and forth, but to say what kind of exchange is appropriate will require more work.
375

376
CHAPTER 7. CATEGORIES AT WORK
An extended analogy will introduce the subject. A one-year-old can make repeatable
noises, and an adult can make repeatable noises. One might say, ‚ÄúAfter all, talking is
nothing but making repeatable noises.‚Äù But the adult‚Äôs repeatable noises are called words,
they form sentences, and those sentences can cause nuclear wars. There is something more
in adult language than simply repeatable sounds. In the same vein, a game of tennis can
be viewed in terms of physics, the movement of trillions of atoms, but in so doing one
won‚Äôt see the game aspect. So we have here something analogous to two categories here:
trepeated noisesu and tmeaningful wordsu. We are looking for adjoint functors to serve
as the appropriate sort of dictionary.
To translate baby talk into adult language we would make every repeated noise a kind
of word, thereby granting it meaning. We do not know what a given repeated noise should
mean, but we give it a slot in our conceptual space while always pondering, ‚ÄúI wonder
what she means by Koh....‚Äù On the other hand, to translate from meaningful words to
repeatable noises is easy. We just hear the word as a repeated noise, which is how the
baby probably hears it.
Adjoint functors often come in the form of ‚Äúfree‚Äù and ‚Äúforgetful.‚Äù Here we freely add
Koh to our conceptual space without having any idea how it adheres to the rest of the
child‚Äôs noises or feelings. But it does not act like a sound to us, it acts like a word; we do
not know what it means, but we Ô¨Ågure it means something. Conversely, the translation
going the other way is ‚Äúforgetful,‚Äù forgetting the meaning of the words and just hearing
them as sounds. The baby hears our words and accepts them as mere sounds, not knowing
that there is anything extra to get.
Sets are like the babies in the story: they are simple objects full of unconnected
dots. Monoids are like the adults, forming words and performing actions. In the monoid
each element means something and combines with other elements in certain ways. There
are many diÔ¨Äerent sets and many diÔ¨Äerent monoids, just as there are many babies and
many adults, but there are diÔ¨Äerences in how they interact, so we put them in diÔ¨Äerent
categories.
Applying free functor L: Set √ë Mon to a set X makes every element x P X a word,
and these words can be strung together to form more complex words. (Section 4.1.1.12
discussed the free monoid functor L.) Since a set such as X carries no information about
the meaning or structure of its various elements, the free monoid FpXq does not relate
diÔ¨Äerent words in any way. To apply the forgetful functor R: Mon √ë Set to a monoid,
even a structured one, is to simply forget that its elements are anything but mere elements
of a set. It sends a monoid pM, e, ‚Äπq to the set M.

7.1. ADJOINT FUNCTORS
377
DeÔ¨Ånition 7.1.1.1. Let B and A be categories.1 An adjunction between B and A is a
pair of functors
L: B √ë A
and
R: A √ë B
together with a natural isomorphism2 whose component for any objects A P ObpAq and
B P ObpBq is
Œ±B,A : HomApLpBq, Aq
‚Äì
√ù√ù√ù√ë HomBpB, RpAqq.
(7.1)
This isomorphism is called the adjunction isomorphism for the pL, Rq adjunction, and for
any morphism f : LpBq √ë A in A, we refer to Œ±B,Apfq: B √ë RpAq as the adjunct of f.3
The functor L is called the left adjoint and the functor R is called the right adjoint.
We may say that L is the left adjoint of R or that R is the right adjoint of L. 4 We often
denote this setup
L: B
 A :R

(7.2)
Proposition 7.1.1.2. Let L: Set √ë Mon be the functor sending X P ObpSetq to the
free monoid LpXq :‚Äú pListpXq, r s, ``q, as in DeÔ¨Ånition 4.1.1.15. Let R: Mon √ë Set be
the functor sending each monoid M :‚Äú pM, e, ‚Äπq to its underlying set RpMq :‚Äú M. Then
L is left adjoint to R.
Proof. This is precisely the content of Proposition 4.1.4.9.
‚ñ°
Example 7.1.1.3. We need to ground the discussion in some concrete mathematics. In
Proposition 7.1.1.2 we provided an adjunction between sets and monoids. A set X gets
transformed into a monoid by considering lists in X; a monoid M gets transformed into
a set by forgetting the multiplication law. So we have a functor for translating each way,
L: Set √ë Mon,
R: Mon √ë Set,
but an adjunction is more than that: it includes a guarantee about the relationship
between these two functors. What is the relationship between L and R? Consider an
arbitrary monoid M ‚Äú pM, e, ‚Äπq.
1Throughout this deÔ¨Ånition, notice that B‚Äôs come before A‚Äôs, especially in (7.1), which might be
confusing. It was a stylistic choice to match with the Babies and Adults discussion.
2The natural isomorphism Œ± (see Proposition 5.3.2.12) is between two functors Bop ÀÜ A √ë Set,
namely, the functor pB, Aq √û√ë HomApLpBq, Aq and the functor pB, Aq √û√ë HomBpB, RpAqq.
3Conversely, for any g : B √ë RpAq in B, we refer to Œ±¬¥1
B,Apgq: LpBq √ë A as the adjunct of g.
4The left adjoint does not have to be called L, nor does the right adjoint have to be called R, of
course.

378
CHAPTER 7. CATEGORIES AT WORK
If we want to pick out three elements of the set M, that is the same thing as giving
a function ta, b, cu √ë M. But that function exists in the category of sets; in fact it is
an element of HomSetpta, b, cu, Mq. But since M ‚Äú RpMq is the underlying set of the
monoid, we can view the current paragraph in the light of adjunction (7.1) by saying the
set
HomSetpta, b, cu, RpMqq.
classiÔ¨Åes all the ways to choose three elements out of the underlying set of monoid M.
It was constructed completely from within the context of sets and functions.
Now, what does (7.1) mean? The equation
HomMonpLpta, b, cuq, Mq ‚Äì HomSetpta, b, cu, RpMqq
tells us that somehow we can classify all the ways to choose three elements from M, while
staying in the context of monoids and monoid homomorphisms. In fact, it tells us how to
do so, namely, as HomMonpListpt1, 2, 3uq, Mq. Exercise 7.1.1.4 looks at that. The answer
can be extracted from the proof of Proposition 4.1.4.9.
Exercise 7.1.1.4.
Let X ‚Äú ta, b, cu, and let M ‚Äú pN, 1, Àöq be the multiplicative monoid of natural
numbers (see Example 4.1.3.2). Let g: X √ë N be the function given by gpaq ‚Äú 7, gpbq ‚Äú
2, gpcq ‚Äú 2, and let Œ≤X,M : HomSetpX, RpMqq √ë HomMonpLpXq, Mq be as in the proof
of Proposition 4.1.4.9.
Consider the list rb, b, a, cs P LpXq. What is Œ≤X,Mpgqprb, b, a, csq?
‚ô¶
Solution 7.1.1.4.
By deÔ¨Ånition, we have
Œ≤X,Mpgqprb, b, a, csq :‚Äú gpbq Àö gpbq Àö gpaq Àö gpcq ‚Äú 2 Àö 2 Àö 7 Àö 2 ‚Äú 56.
‚ô¶
Let us look once more at the adjunction between adults and babies. Using the notation
of DeÔ¨Ånition 7.1.1.1, A is the adult category of meaningful words, and B is the baby
category of repeated noises. The left adjoint turns every repeated sound into a meaningful
word (having free meaning), and the right adjoint forgets the meaning of any word and
considers it merely as a sound.
At the risk of taking this simple analogy too far, let‚Äôs look at the heart of the issue:
how to conceive of the isomorphism (7.1) of hom-sets. Once we have freely given a slot
to each of the baby‚Äôs repeated sounds, we try to Ô¨Ånd a mapping from the lexicon LpBq
of these new words to the adult lexicon A of meaningful words; these are mappings in

7.1. ADJOINT FUNCTORS
379
the adult category A of the form LpBq √ë A. And (stretching it) the baby tries to Ô¨Ånd
a mapping (which we might see as emulation) from her set B of repeatable sounds to
the set RpAq of the sounds the adult seems to repeat. If there were a global system for
making these transformations, that would establish (7.1) and hence the adjunction.
Note that the directionality of the adjunction makes a diÔ¨Äerence. If L: B √ë A is left
adjoint to R: A √ë B, there is no reason to think that L is also a right adjoint. In the case
of babies and adults, we see that it would make little sense to look for a mapping in the
category of meaningful words from the adult lexicon to the wordiÔ¨Åcations of baby sounds
HomApA, LpBqq, because there is unlikely to be a good candidate for most of the words.
That is, to which of the child‚Äôs repeated noises would we assign the concept ‚Äúweekday‚Äù?
Again, this is simply an analogy and should not be taken to seriously.
The next
example shows mathematically that the directionality of an adjunction is not arbitrary.
Example 7.1.1.5. Let L: Set √ë Mon and R: Mon √ë Set be the free and forgetful
functors from Proposition 7.1.1.2. We know that L is left adjoint to R; however L is not
right adjoint to R. In other words, we can show that the necessary natural isomorphism
cannot exist.
Let X ‚Äú ta, bu, and let M ‚Äú 1 be the trivial monoid. Then the necessary natural
isomorphism would need to give a bijection
HomMonpM, LpXqq ‚Äì? HomSetpt1u, Xq.
But the left-hand side has one element, because M is the initial object in Mon (see Ex-
ample 6.1.3.7), whereas the right-hand side has two elements. Therefore, no isomorphism
can exist.
Example 7.1.1.6. Preorders have underlying sets, giving rise to a functor U : PrO √ë Set.
The functor U has both a left adjoint and a right adjoint.
The left adjoint of U is
D: Set √ë PrO, sending a set X to the discrete preorder on X (the preorder with
underlying set X, having the fewest possible ƒè‚Äôs). The right adjoint of U is I : Set √ë
PrO, sending a set X to the indiscrete preorder on X (the preorder with underlying set
X, having the most possible ƒè‚Äôs). See Example 4.4.4.5.
Exercise 7.1.1.7.
Let U : Grph √ë Set denote the functor sending a graph to its underlying set of
vertices. This functor has both a left and a right adjoint.
a. What functor Set √ë Grph is the left adjoint of U?
b. What functor Set √ë Grph is the right adjoint of U?
‚ô¶

380
CHAPTER 7. CATEGORIES AT WORK
Solution 7.1.1.7.
a. The discrete graph functor Disc: Set √ë Grph is left adjoint to U.
b. The indiscrete graph (or complete graph) functor Ind: Set √ë Grph (see Exercise
4.3.1.6) is right adjoint to U.
‚ô¶
Example 7.1.1.8. Here are some other adjunctions:
‚Ä¢ Ob: Cat √ë Set has a left adjoint Disc: Set √ë Cat given by the discrete category.
‚Ä¢ Ob: Cat √ë Set has a right adjoint Ind: Set √ë Cat given by the indiscrete
category.
‚Ä¢ The underlying graph functor Cat √ë Grph has a left adjoint Grph √ë Cat given
by the free category.
‚Ä¢ The inclusion Grp √ë Mon has a right adjoint Mon
Core
√ù√ù√ù√ë Grp, called the core,
that sends a monoid to its subgroup of invertible elements.
‚Ä¢ The functor PrO √ë Grph, given by drawing edges for ƒè‚Äôs, has a left adjoint given
by existence of paths.
‚Ä¢ The forgetful functor from partial orders to preorders has a left adjoint given by
quotienting out the cliques (see Exercise 4.4.1.15).
‚Ä¢ Given a set A, the functor p¬¥ÀÜAq: Set √ë Set has a right adjoint HompA, ¬¥q (this
was called currying in Section 3.4.2).
Exercise 7.1.1.9.
Let 1 denote the terminal category. There is a unique functor !: Set √ë 1.
a. Does ! have a left adjoint? If so, what is it; if not, why not?
b. Does ! have a right adjoint? If so, what is it; if not, why not?
‚ô¶

7.1. ADJOINT FUNCTORS
381
Solution 7.1.1.9.
a. Yes.
To give a functor U : 1 √ë Set is to give a set U, but which one?
For any
set X P ObpSetq, we need a bijection Hom1p1, 1q ‚Äì HomSetpU, Xq. In other words,
U ‚Äú H is the only choice.
b. Yes. We need to give a set U : 1 √ë Set such that for any set X P ObpSetq, we have
a bijection Hom1p1, 1q ‚Äì HomSetpX, Uq. In other words, any singleton set, such as
U ‚Äú tu, will work.
‚ô¶
Exercise 7.1.1.10.
The discrete category functor Disc: Set √ë Cat has a left adjoint p: Cat √ë Set. In
this exercise you will work out how to unpack this idea and begin to deduce how p must
behave.
a. For an arbitrary object X P ObpSetq and an arbitrary object C P ObpCatq, write the
adjunction in the style of (7.2), appropriately Ô¨Ålling in all the variables (e.g., decide
whether B ‚Äú Cat or B ‚Äú Set, etc.).
b. For X and C as in part (a), write the adjunction isomorphism in the style of (7.1),
appropriately Ô¨Ålling in all the variables.
c. Let C be the free category on the graph G
G :‚Äú
v‚Äö
f
 w‚Äö
h

g
) x‚Äö
y‚Äö
i
S
j
) z‚Äö
k
A
and let X ‚Äú t1, 2, 3u. How many elements does the set HomCatpC, DiscpXqq have?
d. What can you do to an arbitrary category C P ObpCatq to make a set ppCq such
that the adjunction isomorphism holds? That is, how does the functor p: Cat √ë Set
behave on objects?
‚ô¶

382
CHAPTER 7. CATEGORIES AT WORK
Solution 7.1.1.10.
a. The adjunction looks like this:
p: Cat
 Set :Disc

.
b. The adjunction isomorphism for C and X looks like this:
Œ±C,X : HomSetpppCq, Xq
‚Äì
√ù√ù√ù√ë HomCatpC, DiscpXqq.
c. Suppose F : C √ë DiscpXq is a functor. The only morphisms in DiscpXq are identities,
so F must send every arrow in C to an identity, meaning that v, w, x must all be sent
to the same element of X, i.e., Fpvq ‚Äú Fpwq ‚Äú Fpxq, and similarly Fpyq ‚Äú Fpzq.
But this is the only criterion for F. In other words, there are HomCatpC, DiscpXqq ‚Äì
t1, 2, 3utv,yu ‚Äì 9 choices for F.
d. Given a category C, we Ô¨Ånd that for any functor F : C √ë DiscpXq, if two objects
c, c1 P ObpCq are connected by a morphism c √ë c1 or c1 √ë c, then Fpcq ‚Äú Fpc1q.
Let K ‚Äú ObpCq{‚Äû be the quotient by the equivalence relation generated by declaring
c ‚Äû c1 if there is a morphism between them. To give such a functor is essentially the
same as giving a function K √ë X.
To make this precise, recall that we have sets and functions
HomC
dom 
cod  ObpCq ,
constituting the underlying graph of C, and taking the coequalizer, we get the set ppCq
of ‚Äúislands in C.‚Äù In the case of the category C in part (c), there were two islands: one
containing v and one containing y.
‚ô¶
The following proposition says that all adjoints to a given functor are isomorphic to
each other.
Proposition 7.1.1.11. Let C and D be categories, let F : C √ë D be a functor, and let
G, G1 : D √ë C also be functors. If both G and G1 are right adjoint (resp. if both are left
adjoint) to F, then there is a natural isomorphism œÜ: G ‚Äì
√ù√ë G1.
Proof. Suppose that both G and G1 are right adjoint to F (the case of G and G1 being
left adjoint is similarly proved). We Ô¨Årst give a formula for the components of œÜ: G √ë G1

7.1. ADJOINT FUNCTORS
383
and its inverse œà: G1 √ë G. Given an object d P ObpDq, we use c ‚Äú Gpdq to obtain two
natural isomorphisms, one from each adjunction:
HomCpGpdq, Gpdqq ‚Äì HomDpFpGpdqq, dq ‚Äì HomCpGpdq, G1pdqq.
The identity morphism idGpdq is then sent to some morphism Gpdq √ë G1pdq, which we take
to be the component œÜd. Similarly, we use c1 ‚Äú G1pdq to obtain two natural isomorphisms,
one from each adjunction:
HomCpG1pdq, G1pdqq ‚Äì HomDpFpG1pdqq, dq ‚Äì HomCpG1pdq, Gpdqq.
Again, the identity element idG1pdq is sent to some morphism G1pdq √ë Gpdq, which we
take to be the d-component œàd. The naturality of the adjunction isomorphisms implies
that œÜ and œà are natural transformations, and it is straightforward to check that they
are mutually inverse.
‚ñ°
7.1.1.12
QuantiÔ¨Åers as adjoints
One of the simplest places where adjoints show up is between preimages and the logical
quantiÔ¨Åers D and @, ideas Ô¨Årst discussed in Notation 2.1.1.1.
The setting in which to
discuss this is that of sets and their power preorders. That is, if X is a set, then recall
from Section 4.4.2 that the power-set PpXq has a natural ordering by inclusion of subsets.
Given a function f : X √ë Y and a subset V ƒé Y the preimage is f ¬¥1pV q :‚Äú tx P
X | fpxq P V u. If V 1 ƒé V , then f ¬¥1pV 1q ƒé f ¬¥1pV q, so in fact f ¬¥1 : PpY q √ë PpXq can be
considered a functor (where of course we are thinking of preorders as categories). The
quantiÔ¨Åers D and @ appear as adjoints of f ¬¥1.
Let‚Äôs begin with the left adjoint of f ¬¥1 : PpY q √ë PpXq. It is a functor Lf : PpXq √ë
PpY q. Choose an object U ƒé X in PpXq. It turns out that
LfpUq ‚Äú ty P Y | Dx P f ¬¥1pyq such that x P Uu.
And the right adjoint Rf : PpXq √ë PpY q, when applied to U, is
RfpUq ‚Äú ty P Y | @x P f ¬¥1pyq, x P Uu.
In fact, the functor Lf is generally denoted Df : PpXq √ë PpY q, and Rf is generally denoted
@f : PpXq √ë PpY q.
PpXq
Df

@f
T PpY q.
f ¬¥1

The next example shows why this notation is apt.

384
CHAPTER 7. CATEGORIES AT WORK
Example 7.1.1.13. In logic or computer science the quantiÔ¨Åers D and @ are used to ask
whether any or all elements of a set have a certain property. For example, one may have
a set U of natural numbers and want to know whether any or all are even or odd. Let
Y ‚Äú teven, oddu, and let
p: N √ë Y
be the function that assigns to each natural number its parity (even or odd). Because
the elements of PpNq and PpY q are ordered by inclusion of subsets, we can construe these
orders as categories (by Proposition 5.2.1.13). What is new is that we have adjunctions
between these categories:
PpNq
Dp

@p
T PpY q.
p¬¥1

Given a subset U ƒé N, i.e., an object U P ObpPpNqq, we investigate the objects DppUq, @ppUq.
These are both subsets of teven, oddu. The set DppUq includes the element even if there
exists an even number in U; it includes the element odd if there exists an odd number in
U. Similarly, the set @ppUq includes the element even if every even number is in U, and
it includes odd if every odd number is in U.
Let‚Äôs use the deÔ¨Ånition of adjunction to ask whether every element of U ƒé N is
even. Let V ‚Äú tevenu ƒé Y . Then f ¬¥1pV q ƒé N is the set of even numbers, and there
is a morphism U √ë f ¬¥1pV q in the preorder PpNq if and only if every element of U is
even. Therefore, the adjunction isomorphism HomPpNqpU, f ¬¥1pV qq ‚Äì HomPpY qpDpU, V q
says that DpU ƒé tevenu if and only if every element of U is even.
Exercise 7.1.1.14.
The national scout jamboree is a gathering of Boy Scouts from troops across the
United States. Let S be the set of Boy Scouts in the U.S., and let T be the set of Boy
Scout troops in the U.S. Let t: S √ë T be the function that assigns to each Boy Scout his
troop. Let U ƒé S be the set of Boy Scouts in attendance at this year‚Äôs jamboree.
a. What is the meaning of the object DtU
b. What is the meaning of the object @tU?
‚ô¶
Solution 7.1.1.14.
a. The object DtU P PpTq is a set of troops; which one? It is the set of troops being
represented at the jamboree, i.e., the set of troops x having at least one scout in
attendance. ‚ÄúWelcome to the jamboree, troop x.‚Äù

7.1. ADJOINT FUNCTORS
385
b. The object @tU P PpTq is a set of troops; which one? It is the set of troops x for which
every member is in attendance at the jamboree. ‚ÄúWay to go, troop x!‚Äù
‚ô¶
Exercise 7.1.1.15.
Let X be an arbitrary set and U ƒé X a subset.
a. Find a set Y and a function f : X √ë Y such that DfU tells you whether U is nonempty.
b. What is the meaning of @fU for your choice of Y and f?
‚ô¶
Solution 7.1.1.15.
a. If this is going to work for any X, we should probably try to Ô¨Ånd a universal choice for
Y and f. Let‚Äôs take Y ‚Äú tu, so there is a unique function !: X √ë tu. We Ô¨Ånd that
H ‚Äú D!U means ‚Äúit is not true that something exists in U,‚Äù and tu ‚Äú D!U means
‚Äúsomething exists in U.‚Äù
b. We Ô¨Ånd that H ‚Äú @!U means ‚Äúit is not true that everything is in U,‚Äù and tu ‚Äú @!U
means ‚Äúeverything is in U.‚Äù In other words, @! tells us whether a subset U ƒé X is
actually equal to X or not.
‚ô¶
In fact, the idea of quantiÔ¨Åers as adjoints is part of a larger story. Suppose we think
of elements of a set X as bins, or storage areas. An element of PpXq can be construed as
an injection U √£√ë X, i.e., an assignment of a bin to each element of U, with at most one
element of U in each bin. Relaxing the injectivity restriction, we may consider arbitrary
sets U and assignments U √ë X of a bin to each element u P U.
Given a function
f : X √ë Y , we can generalize Df and @f to functors denoted Œ£f and Œ†f, which will
parameterize disjoint unions and products (respectively) over y P Y . This is discussed in
Section 7.1.4.
7.1.2
Universal concepts in terms of adjoints
This section explores how universal concepts, i.e., initial objects and terminal objects,
colimits and limits, are easily phrased in the language of adjoint functors. We say that
a functor F : C √ë D is a left adjoint or has a right adjoint if there exists a functor
G: D √ë C such that F is a left adjoint of G. Proposition 7.1.1.11 showed that if F is a
left adjoint of some functor G, then it is isomorphic to every other left adjoint of G, and
G is isomorphic to every other right adjoint of F.

386
CHAPTER 7. CATEGORIES AT WORK
Example 7.1.2.1. Let C be a category and t: C √ë 1 the unique functor to the terminal
category. Then t has a right adjoint if and only if C has a terminal object, and t has a
left adjoint if and only if C has an initial object. The proofs are dual, so let‚Äôs focus on
the Ô¨Årst.
The functor t has a right adjoint R: 1 √ë C if and only if for every object c P ObpCq
there is an isomorphism
HomCpc, rq ‚Äì Hom1ptpcq, 1q,
where r ‚Äú Rp1q.
But Hom1ptpcq, 1q has one element.
Thus t has a right adjoint iÔ¨Ä
HomCpc, rq has one element for each c P ObpCq.
This is the deÔ¨Ånition of r being a
terminal object.
When colimits and limits were deÔ¨Åned in DeÔ¨Ånitions 6.1.3.31 and 6.1.3.20, it was for
individual I-shaped diagrams X : I √ë C. Using adjoints we can deÔ¨Åne the limit of every
I-shaped diagram in C at once.
Let t: I √ë 1 denote the unique functor to the terminal category. Suppose given an
object c P ObpCq, represented by the functor c: 1 √ë C. Then c Àù t: I √ë C is the constant
functor at c, sending each object in I to the same C-object, c, and every morphism in
I to idc. Thus composing with t induces a functor C ‚Äì Funp1, Cq √ë FunpI, Cq, denoted
Œît : C √ë FunpI, Cq. It sends each object c to the associated constant functor c Àù t.
Suppose we want to take the colimit or limit of X. We are given an object X of
FunpI, Cq, and we want back an object of C. We could hope, and it turns out to be true,
that the adjoints of Œît are the limit and colimit. Indeed, let Œ£t : FunpI, Cq √ë C denote
the left adjoint of Œît, and let Œ†t : FunpI, Cq √ë C denote the right adjoint of Œît. Then Œ£t
is the functor that takes colimits, and Œ†t is the functor that takes limits.
A generalization of colimits and limits is given in Section 7.1.4. But for now, let‚Äôs
consider a concrete example.
Example 7.1.2.2. Let C ‚Äú Set, and let I ‚Äú 3. The category Funp3, Setq is the category of
t1, 2, 3u-indexed sets, e.g., pZ, N, Zq P ObpFunp3, Setqq is an object of it. We will obtain
the limit, i.e., the product of these three sets 3 √ë Set using adjoints.
In fact, the limit will be right adjoint to a functor Œît : Set √ë Funp3, Setq, deÔ¨Åned as
follows. Given a set c P ObpSetq, represented by a functor c: 1 √ë Set, and deÔ¨Åne Œîtpcq
to be the composite c Àù t: 3 √ë Set; it is the constant functor. That is, Œîtpcq: 3 √ë Set
is the t1, 2, 3u-indexed set pc, c, cq.
To say that Œît has a right adjoint called Œ†t : Funp3, Setq √ë Set and that Œ†t takes
limits should mean that the deÔ¨Ånition of right adjoint provides the formula that yields
the appropriate limit. Fix a functor D: 3 √ë Set, so Dp1q, Dp2q, and Dp3q are sets. We
know from Example 6.1.3.25 that the limit, lim D, of D is supposed to be the product
Dp1q ÀÜ Dp2q ÀÜ Dp3q. For example, if D ‚Äú pZ, N, Zq, then lim D ‚Äú Z ÀÜ N ÀÜ Z. How does
this fact arise in the deÔ¨Ånition of adjoint?

7.1. ADJOINT FUNCTORS
387
The deÔ¨Ånition of Œ†t being the right adjoint to Œît says that for any c P ObpSetq and
D P Funp3, Setq, there is a natural isomorphism of sets,
Œ±c,D : HomFunp3,SetqpŒîtpcq, Dq ‚Äì HomSetpc, Œ†tpDqq.
(7.3)
The domain of Œ±c,D has elements f P HomFunp3,SetqpŒîtpcq, Dq that look like the left-hand
drawing, but having these three maps is equivalent to having the right-hand diagram:
c
fp1q

c
fp2q

c
fp3q

Dp1q
Dp2q
Dp3q
c
fp1q
=
fp2q

fp3q
8
Dp1q
Dp2q
Dp3q
The isomorphism Œ±c,D in (7.3) says that choosing the three functions fp1q, fp2q, fp3q
is the same thing as choosing a function c √ë Œ†tpDq.
This is basically the universal
property for limits: there is a unique function ‚Ñì: c √ë Dp1qÀÜDp2qÀÜDp3q, so this product
is isomorphic to Œ†t. I have not given a formal proof here but hopefully enough for the
interested reader to work it out.
7.1.3
Preservation of colimits or limits
One useful fact about adjunctions is that left adjoints preserve all colimits, and right
adjoints preserve all limits.
Proposition 7.1.3.1. Let L: B
 A :R

be an adjunction. For any indexing cate-
gory I and functor D: I √ë B, if D has a colimit in B, then there is a unique isomorphism
Lpcolim Dq ‚Äì colimpL Àù Dq.
Similarly, for any I P ObpCatq and functor D: I √ë A, if D has a limit in A, then
there is a unique isomorphism
Rplim Dq ‚Äì limpR Àù Dq.
Proof. The proof is simple if one knows the Yoneda lemma (Section 7.2.1.14). See Mac
Lane [29] for details.
‚ñ°

388
CHAPTER 7. CATEGORIES AT WORK
Example 7.1.3.2. Since Ob: Cat √ë Set is both a left adjoint and a right adjoint, it must
preserve both limits and colimits. This means that if one wants to know the set of objects
in the Ô¨Åber product of some categories, one can simply take the Ô¨Åber product of the set
of objects in those categories,
ObpA ÀÜC Bq ‚Äì ObpAq ÀÜObpCq ObpBq.
While the right-hand side might look daunting, it is just a Ô¨Åber product in Set, which is
quite understandable (see DeÔ¨Ånition 3.2.1.1).
This is greatly simplifying. If one thinks through what deÔ¨Ånes a limit in Cat, one
encounters notions of slice categories and terminal objects in them. These slice categories
are in Cat so they involve several categories and functors, and it is diÔ¨Écult for a beginner.
Knowing that the objects are given by a simple Ô¨Åber product makes the search for limits
in Cat much simpler.
For example, if rns is the linear order category of length n, then rns ÀÜ rms has pn `
1qpm ` 1q objects because rns has n ` 1 objects and rms has m ` 1 objects.
Example 7.1.3.3. The path preorder functor L: Grph √ë PrO given by existence of paths
(see Exercise 5.1.2.13) is left adjoint to the functor R: PrO √ë Grph given by replacing
ƒè‚Äôs by arrows. This means that L preserves colimits. So taking the union of graphs G
and H results in a graph whose path poset LpG \ Hq is the union of the path posets of
G and H. But this is not so for products, i.e., we do not expect to have an isomorphism
LpG ÀÜ Hq ‚Äì? LpGq ÀÜ LpHq.
As an example, let G ‚Äú H ‚Äú
a‚Äö
f
 b‚Äö . Then LpGq ‚Äú LpHq ‚Äú r1s, the linear order
of length 1. But the product G ÀÜ H in Grph looks like the graph
pa,aq
‚Äö
)
pa,bq
‚Äö
pb,aq
‚Äö
pb,bq
‚Äö
Its preorder LpGÀÜHq does not have pa, aq ƒè pa, bq, whereas this is the case in the preorder
LpGq ÀÜ LpHq. So LpG ÀÜ Hq ¬≠‚Äì LpGq ÀÜ LpHq. The left adjoint preservers all colimits, but
not necessarily limits.
7.1.4
Data migration
As we saw in Sections 5.2.2 and 5.2.2.6, a database schema is a category C, and an
instance is a functor I : C √ë Set.

7.1. ADJOINT FUNCTORS
389
Notation 7.1.4.1. Let C be a category. The category FunpC, Setq of functors from C to
Set, i.e., the category of instances on C, is denoted C‚ÄìSet.
This section discusses what happens to the resulting instances when diÔ¨Äerent schemas
are connected by a functor, say, F : C √ë D. It turns out that three adjoint functors
emerge: ŒîF : D‚ÄìSet √ë C‚ÄìSet, Œ£F : C‚ÄìSet √ë D‚ÄìSet, and Œ†F : C‚ÄìSet √ë D‚ÄìSet, where
ŒîF is adjoint to both of them:
Œ£F : C‚ÄìSet
 D‚ÄìSet :ŒîF

ŒîF : D‚ÄìSet
 C‚ÄìSet :Œ†F .

Interestingly, many of the basic database operations are captured by these three functors.
For example, ŒîF handles the job of duplicating or deleting tables as well as duplicating
or deleting columns in a single table. The functor Œ£F handles taking unions, and the
functor Œ†F handles joining tables together, matching columns, or selecting the rows with
certain properties (e.g., everyone whose Ô¨Årst name is Mary).
This section is challenging, and it can be safely skipped, resuming at Section 7.2. For
those who want to pursue it, there is an open source implementation of these ideas and
more, called FQL,5 which stands for functorial query language (not to be confused with
Facebook query language).
7.1.4.2
Pullback: Œî
Given a functor F : C √ë D and a functor I : D √ë Set, we can compose them to get a
functor I Àù F : C √ë Set. In other words, the presence of F provides a way to convert D-
instances into C-instances. In fact, this conversion is functorial, meaning that a morphism
of D-instances Œ±: I √ë I1 is sent to a morphism of C-instances. This can be seen by
whiskering (see DeÔ¨Ånition 5.3.2.16):
C
F
 D
I
	
√≥Œ±
I1
JSet
We denote the resulting functor ŒîF : D‚ÄìSet √ë C‚ÄìSet and call it pullback along F.
An example of this was given in Example 5.3.2.15, which showed how a monoid homo-
morphism F : M1 √ë M could add functionality to a Ô¨Ånite state machine. More generally,
we can use pullbacks to reorganize data, copying and deleting tables and columns.
Remark 7.1.4.3. Given a functor F : C √ë D, which we think of as a schema translation,
the functor ŒîF : D‚ÄìSet √ë C‚ÄìSet goes the opposite way. The reasoning is simple to
5FQL is available on the Internet. See http://categoricaldata.net/fql.html.

390
CHAPTER 7. CATEGORIES AT WORK
explain (we are composing functors) but something about it often seems strange at Ô¨Årst.
The rough idea of this contravariance is captured by the role-reversal in the following
slogan:
Slogan 7.1.4.4.
If I get my information from you, then your information becomes my infor-
mation.
Consider the following functor F : C √ë D: 6
C :‚Äú
SSN
‚Äö
First
‚Äö
T1‚Äö
_
0

T2‚Äö


B
Last
‚Äö
Salary
‚Äö
F
√ù√ù√ù√ë
SSN
‚Äö
First
‚Äö
T‚Äö
_
/
)
S
Last
‚Äö
Salary
‚Äö
‚Äú: D
(7.4)
Recall how to read schemas. In schema C there are leaf tables SSN, First, Last,
Salary, which represent diÔ¨Äerent kinds of basic data. More interestingly, there are two
fact tables. The Ô¨Årst is called T1, and it relates SSN, First, and Last. The second is
called T2, and it relates First, Last, and Salary.
The functor F : C √ë D relates C to a schema D which has a single fact table relating
all four attributes: SSN, First, Last, and Salary. We are interested in ŒîF : D‚ÄìSet √ë
C‚ÄìSet. Suppose given the following database instance I : D √ë Set on D:
T
ID
SSN
First
Last
Salary
XF667
115-234
Bob
Smith
$250
XF891
122-988
Sue
Smith
$300
XF221
198-877
Alice
Jones
$100
6This example was taken from Spivak [38].

7.1. ADJOINT FUNCTORS
391
SSN
ID
115-234
118-334
122-988
198-877
342-164
First
ID
Adam
Alice
Bob
Carl
Sam
Sue
Last
ID
Jones
Miller
Pratt
Richards
Smith
Salary
ID
$100
$150
$200
$250
$300
How does one get the instance ŒîF pIq: C √ë Set? The formula was given: compose
I with F. In terms of tables, it is like duplicating table T as T1 and T2 but deleting
a column from each in accordance with the deÔ¨Ånition of C in (7.4). Here is the result,
ŒîF pIq, in table form:
T1
ID
SSN
First
Last
XF667
115-234
Bob
Smith
XF891
122-988
Sue
Smith
XF221
198-877
Alice
Jones
T2
ID
First
Last
Salary
XF221
Alice
Jones
$100
XF667
Bob
Smith
$250
XF891
Sue
Smith
$300
SSN
ID
115-234
118-334
122-988
198-877
342-164
First
ID
Adam
Alice
Bob
Carl
Sam
Sue
Last
ID
Jones
Miller
Pratt
Richards
Smith
Salary
ID
$100
$150
$200
$250
$300
Exercise 7.1.4.5.
Consider the schemas
r1s ‚Äú
0‚Äö
f
√ù√ù√ù√ë
1‚Äö
and
r2s ‚Äú
0‚Äö
g
√ù√ù√ù√ë
1‚Äö
h
√ù√ù√ù√ë
2‚Äö
and the functor F : r1s √ë r2s given by sending 0 √û√ë 0 and 1 √û√ë 2.
a. How many possibilities are there for Fpfq?

392
CHAPTER 7. CATEGORIES AT WORK
b. Suppose I : r2s √ë Set is given by the following tables:
0
ID
g
Am
To be verb
Baltimore
Place
Carla
Person
Develop
Action verb
Edward
Person
Foolish
Adjective
Green
Adjective
1
ID
h
Action verb
Verb
Adjective
Adjective
Place
Noun
Person
Noun
To be verb
Verb
2
ID
Adjective
Noun
Verb
Write the two tables associated to the r1s-instance ŒîF pIq: r1s √ë Set.
‚ô¶
Solution 7.1.4.5.
a. Only one possibility: Fpfq ‚Äú h Àù g.
b.
0
ID
f
Am
Verb
Baltimore
Noun
Carla
Noun
Develop
Verb
Edward
Noun
Foolish
Adjective
Green
Adjective
‚ô¶
7.1.4.6
Left pushforward: Œ£
Let F : C √ë D be a functor.
The functor ŒîF : D‚ÄìSet √ë C‚ÄìSet has a left adjoint,
Œ£F : C‚ÄìSet √ë D‚ÄìSet.
The rough idea is that Œ£F performs parameterized colimits.
Given an instance I : C √ë Set, we get an instance on D that acts as follows. For each
object d P ObpDq, the set Œ£F pIqpdq is the colimit (think of union) of some diagram in C.
Left pushforwards (also known as left Kan extensions) are discussed at length in
Spivak [38]; here we examine some examples from that paper.

7.1. ADJOINT FUNCTORS
393
Example 7.1.4.7. We again use the functor F : C √ë D from (7.4):
C :‚Äú
SSN
‚Äö
First
‚Äö
T1‚Äö
_
0

T2‚Äö


B
Last
‚Äö
Salary
‚Äö
F
√ù√ù√ù√ë
SSN
‚Äö
First
‚Äö
T‚Äö
_
/
)
S
Last
‚Äö
Salary
‚Äö
‚Äú: D
(7.4)
We apply the left pushforward Œ£F : C‚ÄìSet √ë D‚ÄìSet to the following instance I : C √ë Set:
T1
ID
SSN
First
Last
T1-001
115-234
Bob
Smith
T1-002
122-988
Sue
Smith
T1-003
198-877
Alice
Jones
T2
ID
First
Last
Salary
T2-001
Alice
Jones
$100
T2-002
Sam
Miller
$150
T2-004
Sue
Smith
$300
T2-010
Carl
Pratt
$200
SSN
ID
115-234
118-334
122-988
198-877
342-164
First
ID
Adam
Alice
Bob
Carl
Sam
Sue
Last
ID
Jones
Miller
Pratt
Richards
Smith
Salary
ID
$100
$150
$200
$250
$300
The functor F : C √ë D sends both tables T1 and T2 to table T. Applying Œ£F takes
what was in T1 and T2 and puts the union in T. The result, Œ£F I : D √ë Set, is as follows:

394
CHAPTER 7. CATEGORIES AT WORK
T
ID
SSN
First
Last
Salary
T1-001
115-234
Bob
Smith
T1-001.Salary
T1-002
122-988
Sue
Smith
T1-002.Salary
T1-003
198-877
Alice
Jones
T1-003.Salary
T2-001
T2-A101.SSN
Alice
Jones
$100
T2-002
T2-A102.SSN
Sam
Miller
$150
T2-004
T2-004.SSN
Sue
Smith
$300
T2-010
T2-A110.SSN
Carl
Pratt
$200
SSN
ID
115-234
118-334
122-988
198-877
342-164
T2-001.SSN
T2-002.SSN
T2-004.SSN
T2-010.SSN
First
ID
Adam
Alice
Bob
Carl
Sam
Sue
Last
ID
Jones
Miller
Pratt
Richards
Smith
Salary
ID
$100
$150
$200
$250
$300
T1-001.Salary
T1-002.Salary
T1-003.Salary
As one can see, no set salary information for any data comes from table T1, nor does
any set SSN information come form table T2.
But the deÔ¨Ånition of adjoint, given in
DeÔ¨Ånition 7.1.1.1, yields the universal response: freely add new variables that take the
place of missing information. It turns out that this idea already has a name in logic,
Skolem variables, and a name in database theory, labeled nulls.
Exercise 7.1.4.8.
Consider the functor F : 3 √ë 2 given by the sequence p1, 2, 2q.
a. Write an instance I : 3 √ë Set.
b. Given the description ‚ÄúŒ£F performs a parameterized colimit,‚Äù make an educated guess
about what Œ£F pIq: 2 √ë Set is. Give your answer in the form of two sets that are
made up from the three sets you already wrote.
‚ô¶

7.1. ADJOINT FUNCTORS
395
Solution 7.1.4.8.
a.
1
ID
Science
Math
English
Gym
Social studies
Recess
2
ID
Peter
David
Robert
Bryan
Michelle
Sam
Samantha
Brendan
3
ID
Cool
Slick
Bad
Awesome
Sweet
Rockin
Sick
b.
1
ID
Science
Math
English
Gym
Social studies
Recess
2
ID
Peter
David
Robert
Bryan
Michelle
Sam
Samantha
Brendan
Cool
Slick
Bad
Awesome
Sweet
Rockin
Sick
‚ô¶
Here is the actual formula for computing left pushforwards. Suppose that F : C √ë D
is a functor, and let I : C √ë Set be a set-valued functor on C. Then Œ£F pIq: D √ë Set
is deÔ¨Åned as follows. Given an object d P ObpDq, we Ô¨Årst form the comma category (see
DeÔ¨Ånition 6.2.4.1) for the cospan
C
F√ù√ë D
d
√ê√ù 1
and denote it pF √ì dq. There is a canonical projection functor œÄ: pF √ì dq √ë C, which we
can compose with I : C √ë Set to obtain a functor pF √ì dq √ë Set. We are ready to deÔ¨Åne
Œ£F pIqpdq to be its colimit,
Œ£F pIqpdq :‚Äú colim
pF √ìdq I Àù œÄ.

396
CHAPTER 7. CATEGORIES AT WORK
Œ£F pIq: D √ë Set has been deÔ¨Åned on objects d P ObpDq. Morphisms are treated here
only brieÔ¨Çy; see Spivak [38] for details. Given a morphism g: d √ë d1, there is an induced
functor pF √ì gq: pF √ì dq √ë pF √ì d1q and a commutative diagram of categories:
pF √ì dq
pF √ìgq

œÄ
:
IÀùœÄ
K
pF √ì d1q
œÄ1
]
IÀùœÄ1
a
C
I

Set
By the universal property for colimits, this induces the required function
colim
pF √ìdq I Àù œÄ
Œ£F pIqpgq
√ù√ù√ù√ù√ù√ù√ù√ù√ë colim
pF √ìd1q I Àù œÄ1.
7.1.4.9
Right pushforward: Œ†
Let F : C √ë D be a functor. Section 7.1.4.6 explained that the functor ŒîF : D‚ÄìSet √ë
C‚ÄìSet has a left adjoint.
The present section explains that ŒîF has a right adjoint,
Œ†F : C‚ÄìSet √ë D‚ÄìSet as well. The rough idea is that Œ†F performs parameterized limits.
Given an instance I : C √ë Set, we get an instance on D that acts as follows. For each
object d P ObpDq, the set Œ†F pIqpdq is the limit (think of Ô¨Åber product) of some diagram
in C.
Right pushforwards (also known as right Kan extensions) are discussed at length in
Spivak [38]; here we look at some examples from that paper.

7.1. ADJOINT FUNCTORS
397
Example 7.1.4.10. We again use the functor F : C √ë D from (7.4) and Example 7.1.4.7.
We apply the right pushforward Œ†F to instance I : C √ë Set from that example.7
The instance Œ†F pIq puts data in all Ô¨Åve tables in D. In T it puts pairs pt1, t2q, where
t1 is a row in T1, and t2 is a row in T2, for which the Ô¨Årst and last names agree. It copies
the leaf tables exactly, so they are not displayed here; the following is the table T for
Œ†F pIq:
T
ID
SSN
First
Last
Salary
T1-002T2-A104
122-988
Sue
Smith
$300
T1-003T2-A101
198-877
Alice
Jones
$100
From T1 and T2 there are only two ways to match Ô¨Årst and last names.
7Repeated for convenience,
C :‚Äú
SSN
‚Äö
First
‚Äö
T1‚Äö
_
/
)
T2‚Äö
`

B
Last
‚Äö
Salary
‚Äö
F
√ù√ù√ù√ù√ë
SSN
‚Äö
First
‚Äö
T‚Äö
b
/
)
S
Last
‚Äö
Salary
‚Äö
‚Äú: D
(7.4)
I : C √ë Set is
T1
ID
SSN
First
Last
T1-001
115-234
Bob
Smith
T1-002
122-988
Sue
Smith
T1-003
198-877
Alice
Jones
T2
ID
First
Last
Salary
T2-001
Alice
Jones
$100
T2-002
Sam
Miller
$150
T2-004
Sue
Smith
$300
T2-010
Carl
Pratt
$200
SSN
ID
115-234
118-334
122-988
198-877
342-164
First
ID
Adam
Alice
Bob
Carl
Sam
Sue
Last
ID
Jones
Miller
Pratt
Richards
Smith
Salary
ID
$100
$150
$200
$250
$300

398
CHAPTER 7. CATEGORIES AT WORK
Exercise 7.1.4.11.
Consider the functor F : 3 √ë 2 given by the sequence p1, 2, 2q.
a. Write an instance I : 3 √ë Set.
b. Given the description ‚ÄúŒ†F performs a parameterized limit,‚Äù make an educated guess
about what Œ†F pIq: 2 √ë Set is. Give your answer in the form of two sets that are
made up from the three sets you already wrote down.
‚ô¶
Solution 7.1.4.11.
a.
1
ID
Science
Math
English
Gym
Social studies
Recess
2
ID
John
Deb
Liz
3
ID
Cool
Slick
Awesome
Sweet
b.
1
ID
Science
Math
English
Gym
Social studies
Recess
2
ID
(John,Cool)
(John,Slick)
(John,Awesome)
(John,Sweet)
(Deb,Cool)
(Deb,Slick)
(Deb,Awesome)
(Deb,Sweet)
(Liz,Cool)
(Liz,Slick)
(Liz,Awesome)
(Liz,Sweet)
‚ô¶

7.1. ADJOINT FUNCTORS
399
Here is the actual formula for computing right pushforwards. Suppose that F : C √ë D
is a functor, and let I : C √ë Set be a set-valued functor on C. Then Œ†F pIq: D √ë Set
is deÔ¨Åned as follows. Given an object d P ObpDq, we Ô¨Årst form the comma category (see
DeÔ¨Ånition 6.2.4.1) for the cospan
1 d√ù√ë D
F
√ê√ù C
and denote it pd √ì Fq. There is a canonical projection functor œÄ: pd √ì Fq √ë C, which we
can compose with I : C √ë Set to obtain a functor pd √ì Fq √ë Set. We are ready to deÔ¨Åne
Œ†F pIqpdq to be its limit,
Œ†F pIqpdq :‚Äú lim
pd√ìF q I Àù œÄ.
Œ†F pIq: D √ë Set has been deÔ¨Åned on objects d P ObpDq, and morphisms are treated
only brieÔ¨Çy; see Spivak [38] for details. Given a morphism g: d √ë d1, there is an induced
functor pg √ì Fq: pd1 √ì Fq √ë pd √ì Fq and a commutative diagram of categories:
pd1 √ì Fq
pg√ìF q

œÄ1
C
IÀùœÄ1
K
pd √ì Fq
œÄ
R
IÀùœÄ
a
C
I

Set
By the universal property for limits, this induces the required function
lim
pd√ìF q I Àù œÄ
Œ†F pIqpgq
√ù√ù√ù√ù√ù√ù√ù√ù√ë lim
pd1√ìF q I Àù œÄ1.
Proposition 7.1.4.12. Left adjoints are closed under composition, as are right adjoints.
That is, given adjunctions,
C
L
 D
L1

R

E
R1

their composite is also an adjunction:
C
L1ÀùL  E.
RÀùR1


400
CHAPTER 7. CATEGORIES AT WORK
Proof. This is a straightforward calculation. For any objects c P ObpCq and e P ObpEq
we have adjunction isomorphisms:
HomEpL1pLpcqq, eq ‚Äì HomDpLpcq, R1peqq ‚Äì HomCpc, RpR1peqqq
whose composite is the required adjunction isomorphism. It is natural in our choice of
objects c and e.
‚ñ°
Example 7.1.4.13 (Currying via Œî, Œ£, Œ†). This example shows how currying (as in Sec-
tions 3.4.2 and 7.1.1.8) arises out of a certain combination of data migration functors.
Let A, B, and C be sets. Consider the unique functor a: A √ë 1 and consider B and
C as functors 1
B
√ù√ù√ù√ë Set and 1
C
√ù√ù√ù√ë Set respectively.
A
a
 1
B
!
C
0Set
Note that 1‚ÄìSet ‚Äì Set, and we elide the diÔ¨Äerence.
We know that Œ£a is left adjoint to Œîa and that Œîa is left adjoint to Œ†a, so by
Proposition 7.1.4.12, the composite Œ£a Àù Œîa is left adjoint to Œ†aŒîa. The goal is to see
currying arise out of the adjunction isomorphism
HomSetpŒ£aŒîapBq, Cq ‚Äì HomSetpB, Œ†aŒîapCqq.
(7.5)
By deÔ¨Ånition, ŒîapBq: A √ë Set assigns to each element a P A the set B. Since Œ£A
takes disjoint unions, we have a bijection
Œ£apŒîapBqq ‚Äú
Àú ƒü
aPA
B
¬∏
‚Äì A ÀÜ B.
Similarly, ŒîapCq: A √ë Set assigns to each element a P A the set C. Since Œ†A takes
products, we have a bijection
Œ†apŒîapCqq ‚Äú
Àú≈∫
aPA
C
¬∏
‚Äì CA.
The currying isomorphism HomSetpA ÀÜ B, Cq ‚Äì HomSetpB, CAq falls out of (7.5).

7.2. CATEGORIES OF FUNCTORS
401
7.2
Categories of functors
For any two categories C and D,8 Section 5.3.2.1 discussed the category FunpC, Dq of
functors and natural transformations between them. This section discusses functor cat-
egories a bit more and gives some important applications in mathematics (sheaves) that
extend to the real world.
7.2.1
Set-valued functors
Let C be a category. We have been denoted by C‚ÄìSet the functor category FunpC, Setq.
Here is a nice result about these categories.
Proposition 7.2.1.1. Let C be a category. The category C‚ÄìSet is closed under colimits
and limits. That is, for any category I and functor D: I √ë C‚ÄìSet, both the limit and the
colimit of D exist in C‚ÄìSet.
Sketch of proof. We rely on the fact that the category Set is complete and cocomplete
(see Remark 6.1.3.37), i.e., that it has all limits and colimits (see Theorems 6.1.3.28 and
6.1.3.35 for constructions). Let J be an indexing category and D: J √ë C‚ÄìSet a functor.
For each object c P ObpCq, we have a functor Dc : J √ë Set deÔ¨Åned by Dcpjq ‚Äú Dpjqpcq.
DeÔ¨Åne a functor L: C √ë Set by Lpcq ‚Äú limJ Dc, and note that for each f : c √ë c1 in C
there is an induced function Lpfq: Lpcq √ë Lpc1q. One can check that L is a limit of J,
because it satisÔ¨Åes the relevant universal property.
The dual proof holds for colimits.
‚ñ°
Application 7.2.1.2. When taking in data about a scientiÔ¨Åc subject, one often Ô¨Ånds that
how one thinks about the problem changes over time. We understand this phenomenon
in the language of databases in terms of a series of schemas C1, C2, . . . , Cn`1, perhaps
indexed chronologically. The problem is that previously-collected data is held in what
may be outdated schemas, and we want to work with it in our current understanding. By
Ô¨Ånding appropriate functors between these schemas, or possibly with the help of auxiliary
schemas, we can make a chain of categories and functors
C1
D1
F1

G1
 E1
H1  C2
D2
F2

G2
 E2
H2  ¬® ¬® ¬®
Gn  En
Hn  Cn`1.
We can then use the data migration functors ŒîF , Œ†G, and Œ£H to move data from category
C1 to category Cn`1 using projections, joins, and unions in any combination. Theorems
8Technically C has to be small but, as mentioned in Remark 5.1.1.2), we do not worry about that
distinction in this book.

402
CHAPTER 7. CATEGORIES AT WORK
about sequences of Œî‚Äôs, Œ†‚Äôs, and Œ£‚Äôs can help us understand how such a transformation
will behave, before we spend the resources to enact it.
‚ô¶‚ô¶
Exercise 7.2.1.3.
By Proposition 7.2.1.1, the category C‚ÄìSet is closed under taking colimits and limits.
By Exercises 6.1.3.24 and 6.1.3.34, this means in particular, that C‚ÄìSet has an initial
object and a terminal object.
a. Let A P ObpC‚ÄìSetq be the initial object, considered as a functor A: C √ë Set. For any
c P ObpCq, what is the set Apcq?
b. Let Z P ObpC‚ÄìSetq be the terminal object, considered as a functor Z : C √ë Set. For
any c P ObpCq, what is the set Zpcq?
‚ô¶
Solution 7.2.1.3.
a. If A is initial, then for any object c P ObpCq, we have Apcq ‚Äú H. In other words, the
initial instance makes every table empty.
b. If A is terminal, then for any object c P ObpCq, we have Apcq ‚Äì tu. In other words,
the terminal instance puts one row in every table.
‚ô¶
Proposition 7.2.1.1 says that we can add or multiply database instances together. In
fact, database instances on C form a topos, which means that just about every consider-
ation we made for sets holds for instances on any schema. Perhaps the simplest schema
is C ‚Äú ‚Äö , on which the relevant topos ‚Äö ‚ÄìSet is indeed equivalent to Set. But schemas
can be arbitrarily complex categories, and it is impressive that all these set-theoretic
notions make sense in such generality. Here is a table that compares these domains:

7.2. CATEGORIES OF FUNCTORS
403
Dictionary between Set and C‚ÄìSet
Concept in Set
Concept in C‚ÄìSet
Set
Object in C‚ÄìSet
Function
Morphism in C‚ÄìSet
Element
Representable functor
Empty set
Initial object
Natural numbers
Natural numbers object
Image
Image
(Co)limits
(Co)limits
Exponential objects
Exponential objects
‚ÄúFamiliar‚Äù arithmetic
‚ÄúFamiliar‚Äù arithmetic
Power-sets 2X
Power objects Œ©X
Characteristic functions
Characteristic morphisms
Surjections, injections
Epimorphisms, monomorphisms
Thus elements of a set are akin to representable functors in C‚ÄìSet, which are deÔ¨Åned
in Section 7.2.1.6. We brieÔ¨Çy discuss monomorphisms and epimorphisms Ô¨Årst in general
(DeÔ¨Ånition 7.2.1.4) and then in C‚ÄìSet (Proposition 7.2.1.5).
DeÔ¨Ånition 7.2.1.4 (Monomorphism, epimorphism). Let S be a category, and let f : X √ë
Y be a morphism. We say that f is a monomorphism if it has the following property.
For all objects A P ObpSq and morphisms g, g1 : A √ë X in S,
A
g

g1
0X
f
 Y,
if f Àù g ‚Äú f Àù g1, then g ‚Äú g1.
We say that f : X √ë Y is an epimorphism if it has the following property. For all
objects B P ObpSq and morphisms h, h1 : Y √ë B in S,
X
f
 Y
h
!
h1
" B,
if h Àù f ‚Äú h1 Àù f, then h ‚Äú h1.
In the category of sets, monomorphisms are the same as injections, and epimorphisms
are the same as surjections (see Proposition 3.4.5.8). The same is true in C‚ÄìSet: one can
check table by table that a morphism of instances is mono or epi.

404
CHAPTER 7. CATEGORIES AT WORK
Proposition 7.2.1.5. Let C be a category, let X, Y : C √ë Set be objects in C‚ÄìSet, and let
f : X √ë Y be a morphism in C‚ÄìSet. Then f is a monomorphism (resp. an epimorphism)
if and only if for every object c P ObpCq, the function fpcq: Xpcq √ë Y pcq is injective (resp.
surjective).
Sketch of proof. We Ô¨Årst show that if f is mono (resp.
epi), then so is fpcq, for all
c P ObpCq. Considering c as a functor c: 1 √ë C, this result follows from the fact that Œîc
preserves limits and colimits, hence monos and epis.
We now check that if fpcq is mono for all c P ObpCq, then f is mono. Suppose that
g, g1 : A √ë X are morphisms in C‚ÄìSet such that f Àù g ‚Äú f Àù g1. Then for every c, we have
f Àù gpcq ‚Äú f Àù g1pcq, which implies by hypothesis that gpcq ‚Äú g1pcq. But the morphisms
in C‚ÄìSet are natural transformations, and if two natural transformations g, g1 have the
same components, then they are the same.
A similar argument works to show the analogous result for epimorphisms.
‚ñ°
7.2.1.6
Representable functors
Given a category C, there are certain functors C √ë Set that come with the package, i.e.,
that are not arbitrary from a mathematical perspective as database instances usually are.
In fact, there is a certain instance corresponding to each object in C. So if C is a database
schema, then for every table c P ObpCq there is a certain database instance associated
to it.
These instances, i.e., set-valued functors, are called representable functors (see
DeÔ¨Ånition 7.2.1.7). The idea is that if a database schema is a conceptual layout of types
(e.g., as an olog), then each type c has an instance associated to it, standing for ‚Äúthe
generic thing of type c with all its generic attributes.‚Äù
DeÔ¨Ånition 7.2.1.7. Let C be a category, and let c P ObpCq be an object. The functor
HomCpc, ¬¥q: C √ë Set, sending d P ObpCq to the set HomCpc, dq and acting similarly on
morphisms d √ë d1, is said to be represented by c. If a functor F : C √ë Set is isomorphic to
HomCpc, ¬¥q, we say that F is a representable functor. To shorten notation we sometimes
write
Yc :‚Äú HomCpc, ¬¥q.
Example 7.2.1.8. Given a category C and an object c P ObpCq, we get a representable
functor Yc. If we think of C as a database schema and c as a table, then what does the
representable functor Yc : C √ë Set look like in terms of databases? It turns out that the
following procedure will generate it.
Begin by writing a new row, say, ‚Äú,‚Äù in the ID column of table c. For each foreign
key column f : c √ë c1, add a row in the ID column of table c1 called ‚Äúfpq‚Äù and record
that result, ‚Äúfpq,‚Äù in the f column of table c. Repeat as follows: for each table d,

7.2. CATEGORIES OF FUNCTORS
405
identify all rows r that have a blank cell in column g: d √ë e. Add a new row called
‚Äúgprq‚Äù to table e and record that result, ‚Äúgprq, ‚Äù in the pr, gq cell of table d.
Here is a concrete example. Let C be the following schema:
C :‚Äú
A‚Äö
f
 B‚Äö
g1

g2

h 
C‚Äö
i
 D‚Äö
E‚Äö
Then YB : C √ë Set is given by ‚Äúmorphisms from B to ‚Äì,‚Äù i.e., it is the following instance:
A
ID
f
B
ID
g1
g2
h

g1pq
g2pq
hpq
C
ID
i
g1pq
ipg1pqq
g2pq
ipg2pqq
D
ID
ipg1pqq
ipg2pqq
E
ID
hpq
To create YB we began with a single element in table B and followed the arrows,
putting new entries wherever they were required. One might call this the schematically
implied reference spread or SIRS of the element  in table B. Notice that the table at A
is empty, because there are no morphisms B √ë A in C.
Representable functors Yc yield database instances that are as free as possible, subject
to having the initial row  in table c. We saw this before (as Skolem variables) when
studying the left pushforward Œ£. Indeed, suppose c P ObpCq is an object represented
by the functor c: 1 √ë C. A database instance on 1 is the same thing as a set X. The
left pushforward Œ£cpXq has the same kinds of Skolem variables as Yc does. In fact, if
X ‚Äú tu is a one-element set, then we get the representable functor
Yc ‚Äì Œ£ctu.

406
CHAPTER 7. CATEGORIES AT WORK
Exercise 7.2.1.9.
Consider the schema for graphs,
GrIn :‚Äú
Ar‚Äö
src 
tgt 
Ve‚Äö
a. Write the representable functor YAr : GrIn √ë Set as two tables.
b. Write the representable functor YVe as two tables.
‚ô¶
Solution 7.2.1.9.
a. This was done in Exercise 5.3.3.7, although not with the most natural names. Here
we rewrite YAr ‚Äú HomGrInpAr, ¬¥q as
Ar
ID
src
tgt

srcpq
tgtpq
Ve
ID
srcpq
tgtpq
b. Here is YVe ‚Äú HomGrInpVe, ¬¥q with ‚Äúnatural names‚Äù:
Ar
ID
src
tgt
Ve
ID

(The left-hand table is empty because there are no morphisms Ve √ë Ar in GrIn.)
‚ô¶
Exercise 7.2.1.10.
Consider the loop schema
Loop :‚Äú
s‚Äö
f
K
.
Express the representable functor Ys : Loop √ë Set in table form.
‚ô¶

7.2. CATEGORIES OF FUNCTORS
407
Solution 7.2.1.10.
We have Ys ‚Äú HomLoopps, ¬¥q: Loop √ë Set.
On objects, of which there is only
ObpLoopq ‚Äú tsu, we have Yspsq ‚Äú tf n | n P Nu. The morphism f : s √ë s acts on Yspsq
by composing. Here is Ys in table form:
s
ID
f

fpq
fpq
f 2pq
f 2pq
f 3pq
f 3pq
f 4pq
f 4pq
f 5pq
...
...
‚ô¶
Let B be a box in an olog, say, ‚åúa person‚åù, and recall that an aspect of B is an
outgoing arrow, such as ‚åúa person‚åù
has as height in inches
√ù√ù√ù√ù√ù√ù√ù√ù√ù√ù√ù√ù√ù√ù√ù√ë ‚åúan integer‚åù.
The following
slogan explains representable functors in those terms.
Slogan 7.2.1.11.
The functor represented by ‚åúa person‚åùsimply leaves a placeholder, like
xperson‚Äôs name herey or xperson‚Äôs height herey, for every aspect of ‚åúa person‚åù.
In general, there is a representable functor for every type in an olog. The rep-
resentable functor for type T simply encapsulates the most generic or abstract
example of type T, by leaving a placeholder for each of its attributes.
Exercise 7.2.1.12.
Recall from DeÔ¨Ånition 7.2.1.7 that a functor F : C √ë Set is said to be represented by
c if there is a natural isomorphism F ‚Äì HomCpc, ¬¥q.
a. There is a functor Ob: Cat √ë Set (see Exercise 5.1.2.41) sending a category C to
its set ObpCq of objects, and sending a functor to its on-objects part. This functor is
representable by some category. Name a category A that represents Ob.
b. There is a functor Hom: Cat √ë Set (see Exercise 5.1.2.42) sending a category C to
the set HomC of all morphisms in C and sending a functor to its on-morphisms part.
This functor is representable by a category. Name a category B that represents Hom.
‚ô¶

408
CHAPTER 7. CATEGORIES AT WORK
Solution 7.2.1.12.
a. The functor Ob is represented by the category 1. That is, there is a natural isomor-
phism of sets,
ObpCq ‚Äì HomCatp1, Cq.
b. The functor Hom is represented by the free arrow category r1s ‚Äú ‚Äö √ù√ë ‚Äö . That is,
there a natural isomorphism of sets
HomC ‚Äì HomCatpr1s, Cq.
‚ô¶
Exercise 7.2.1.13.
Let C be a category, let c, c1 P ObpCq be objects, and let Yc, Yc1 : C √ë Set be the
associated representable functors. Given f : c √ë c1, we want to construct a morphism
Yf : Yc1 √ë Yc in FunpC‚ÄìSetq. Of course, Yf is supposed to be a natural transformation,
so we need to provide a component pYfqd for every object d P ObpCq.
a. What must the domain and codomain of pYfqd be?
(Simplify your answer using
DeÔ¨Ånition 7.2.1.7.)
b. Can you make sense of the statement, ‚ÄúDeÔ¨Åne pYfqd by precomposition‚Äù?
c. If h: d √ë e is a morphism in C, draw the naturality square for Yf. Does it commute?
‚ô¶
Solution 7.2.1.13.
a. We have pYfqd : Yc1pdq √ë Ycpdq.
But by deÔ¨Ånition, this is pYfqd : HomCpc1, dq √ë
HomCpc, dq.
b. Given an element g P HomCpc1, dq, we can precompose with f to get a morphism
c
f√ù√ë c1
g√ù√ë d, so let‚Äôs deÔ¨Åne pYfqdpgq ‚Äú g Àù f.
c. The naturality square is as follows
Yc1pdq
Yc1phq
pYf qd

Yc1peq
pYf qe

Ycpdq
Ycphq
 Ycpeq

7.2. CATEGORIES OF FUNCTORS
409
and it commutes because, for any element g P Yc1pdq, the composition c
f√ù√ë c1
g√ù√ë d h√ù√ë e
is associative. More explicitly, going down then right we have pYfqdpgq ‚Äú g Àù f and
Ycphqpg Àù fq ‚Äú h Àù pg Àù fq. Going right then down we have Yc1phqpgq ‚Äú h Àù g and
pYfqeph Àù gq ‚Äú ph Àù gq Àù f. To reiterate, the associativity of composition in C insures
that this square commutes.
‚ô¶
7.2.1.14
Yoneda‚Äôs lemma
One of the most powerful tools in category theory is Yoneda‚Äôs lemma. It is often consid-
ered by students to be quite abstract, but grounding it in databases may help.
Suppose that I : C √ë Set is an arbitrary database instance, let c P ObpCq be an
object, and let f : c √ë c1 be any outgoing arrow. Because I is a functor, we know that
for every row r P Ipcq in table c, a value has been recorded in the f column. The value
in the pr, fq cell refers to some row in table c1. That is, each row in table c induces SIRS
throughout the database as freely as possible (see Example 7.2.1.8). The instance Yc
consists entirely of a single row  in table c and its SIRS. The idea is that for any row
r P Ipcq in arbitrary instance I, there exists a unique map Yc √ë I sending  to r.
Proposition 7.2.1.15 (Yoneda‚Äôs lemma, part 1). Let C be a category, c P ObpCq an
object, and I : C √ë Set a set-valued functor. There is a natural bijection
HomC‚ÄìSetpYc, Iq
‚Äì
√ù√ù√ù√ù√ë Ipcq.
Proof. See Mac Lane [29].
‚ñ°
Example 7.2.1.16. Consider the category C drawn as follows:
C :‚Äú
mother Àù Ô¨ÅrstChild = idMother
Child
‚Äö
mother
 Mother
‚Äö
Ô¨ÅrstChild
M
There are two representable functors, YChild and YMother. The former, YChild : C √ë Set, is
shown here:

410
CHAPTER 7. CATEGORIES AT WORK
Child pYChildq
ID
mother

mother()
Ô¨ÅrstChild(mother())
mother()
Mother pYChildq
ID
Ô¨ÅrstChild
mother()
Ô¨ÅrstChild(mother())
The representable functor YChild is the freest instance possible, starting with one element
in the Child table and satisfying the constraints. The latter, YMother is the freest instance
possible, starting with one element in the Mother table and satisfying the constraints.
Since motherÀùÔ¨ÅrstChild=idMother, this instance has just one row in each table:
Child pYMotherq
ID
mother
Ô¨ÅrstChild()

Mother pYMotherq
ID
Ô¨ÅrstChild

Ô¨ÅrstChild()
Here is an arbitrary instance I : C √ë Set:
Child (I)
ID
mother
Amy
Ms. Adams
Bob
Ms. Adams
Carl
Ms. Jones
Deb
Ms. Smith
Mother (I)
ID
Ô¨ÅrstChild
Ms. Adams
Bob
Ms. Jones
Carl
Ms. Smith
Deb
Yoneda‚Äôs lemma (7.2.1.15) is about the set of natural transformations YChild √ë I.
Recall from DeÔ¨Ånition 5.3.1.2 that a search for natural transformations can get tedious.
Yoneda‚Äôs lemma makes the calculation quite trivial. In this case there are exactly four
such natural transformations, HomC‚ÄìSetpYChild, Iq ‚Äì IpChildq ‚Äì 4, and they are com-
pletely determined by where  goes. In some sense the symbol  in YChild represents
childness in this database.
Exercise 7.2.1.17.
Consider the schema C and instance I : C √ë Set from Example 7.2.1.16. Let YChild be
the representable functor, and write p √û√ë Amyq for the unique natural transformation
YChild √ë I sending  to Amy, and so on.
a. What is p √û√ë AmyqChildpÔ¨ÅrstChild(motherpqqq?9
9There is a lot of clutter here. Note that ‚ÄúÔ¨ÅrstChild(mother())‚Äù is a row in the Child table of YChild.
Assuming that the math follows the meaning, if  points to Amy, where should Ô¨ÅrstChild(mother())
point?

7.2. CATEGORIES OF FUNCTORS
411
b. What is p √û√ë BobqChildpÔ¨ÅrstChild(motherpqqq?
c. What is p √û√ë CarlqChildpÔ¨ÅrstChild(motherpqqq?
d. What is p √û√ë AmyqMotherpmotherpqq?
e. In parts (a)‚Äì(d), what information does the Ô¨Årst subscript (Child, Child, Child,
Mother) give you about the answer?
‚ô¶
Solution 7.2.1.17.
The math works out as expected.
a. p √û√ë AmyqChildpÔ¨ÅrstChild(motherpqqq is the Ô¨Årst child of the mother of Amy, namely
Bob.
b. p √û√ë BobqChildpÔ¨ÅrstChild(motherpqqq ‚Äú Bob.
c. p √û√ë CarlqChildpÔ¨ÅrstChild(motherpqqq ‚Äú Carl.
d. p √û√ë AmyqMotherpmotherpqq ‚Äú Ms. Adams.
e. Abstractly, is the component of the natural transformation. Practically, it tells us
what kind of answer we are expecting: the Ô¨Årst three (Bob, Bob, Carl) are children
and the last (Ms. Adams) is a mother.
‚ô¶
Section 7.2.1.6 showed that a representable functor C √ë Set is a mathematically gen-
erated database instance for an abstract thing of type T P ObpCq. It creates placeholders
for every attribute that things of type T are supposed to have.
Slogan 7.2.1.18.
Yoneda‚Äôs lemma says the following. Specifying an actual thing of type T is
the same as Ô¨Ålling in all placeholders found in the generic thing of type T.
Yoneda‚Äôs lemma is considered by many category theorists to be the most important
tool in the subject. While its power is probably unclear to students whose sole back-
ground in category theory comes from this book, Yoneda‚Äôs lemma is indeed extremely
useful for reasoning. It allows us to move the notion of functor application into the realm
of morphisms between functors (i.e., morphisms in C‚ÄìSet, which are natural transforma-
tions). This keeps everything in one place‚Äîit is all in the morphisms‚Äîand thus more
interoperable.

412
CHAPTER 7. CATEGORIES AT WORK
Example 7.2.1.19. Example 4.1.1.27 discussed the cyclic monoid M generated by the
symbol Q and subject to the relation Q7 ‚Äú Q4, depicted as
Q0
‚Äö
 Q1
‚Äö
 Q2
‚Äö
 Q3
‚Äö
 Q4
‚Äö
:
Q6
‚Äö
;
Q5
‚Äö

(7.6)
Here is the mathematical foundation for this picture. Since M is a category with one
object, ‚ñ≤, there is a unique representable functor (up to isomorphism) Y :‚Äú Y‚ñ≤: M √ë
Set. Any functor M √ë Set can be thought of as a set with an M action (see Section
5.2.1.1). In the case of Y , the required set is
Y p‚ñ≤q ‚Äú HomMp‚ñ≤, ‚ñ≤q ‚Äì tQ0, Q1, Q2, Q3, Q4, Q5, Q6u,
and the action is pretty straightforward (it is called the principal action). For example,
Q5 √º Q2 ‚Äú Q4. We might say that (7.6) is a picture of this principal action of M.
However, we can go one step further.
Given the functor Y : M √ë Set, we can
take its category of elements,
≈ü
M Y (see Section 6.2.2). The category
≈ü
M Y has objects
Y p‚ñ≤q P ObpSetq, i.e., the set of dots in (7.6), and it has a unique morphism Qi √ë Qj for
every path of length ƒè 6 from Qi to Qj in that picture. So the drawing of M in (7.6) is
actually the category of elements of M‚Äôs unique representable functor.
Exercise 7.2.1.20.
Let C be a category, let c P ObpCq be an object, and let I P ObpC‚ÄìSetq be in instance of
C. Consider c also as a functor c: 1 √ë C and recall the pullback functor Œîc : C‚ÄìSet √ë Set
and its left adjoint Œ£c : Set √ë C‚ÄìSet (see Section 7.1.4).
a. What is the set ŒîcpIq?
b. What is HomSetptu, ŒîcpIqq?
c. What is HomC‚ÄìSetpŒ£cptuq, Iq?
d. How does Œ£cptuq compare to Yc, the functor represented by c, as objects in C‚ÄìSet?
‚ô¶
Solution 7.2.1.20.
These ideas were mentioned on page 405.
a. We have ŒîcpIq: 1 √ë Set, which we can consider as a set. It is ŒîcpIq ‚Äú Ipcq.

7.2. CATEGORIES OF FUNCTORS
413
b. For any set X, we have a bijection HomSetptu, Xq ‚Äì X (see Exercise 2.1.2.20). So
HomSetptu, ŒîcpIqq ‚Äì Ipcq.
c. Since Œ£c is left adjoint to Œîc (see Section 7.1.4.6), we must have
HomC‚ÄìSetpŒ£cptuq, Iq ‚Äì HomSetptu, ŒîcpIqq ‚Äì Ipcq.
d. Since for any I P ObpC‚ÄìSetq, we have a natural isomorphism
HomC‚ÄìSetpYc, Iq ‚Äì Ipcq ‚Äì HomC‚ÄìSetpŒ£cptuq, Iq,
it seems that Yc and Œ£cptuq are similar. In fact, we could say that Yc and Œ£cptuq
represent the same functor C‚ÄìSet √ë Set. Yoneda‚Äôs embedding Proposition 7.2.1.21
implies that they are isomorphic,
Yc ‚Äì Œ£cptuq.
‚ô¶
Proposition 7.2.1.21 (Yoneda‚Äôs lemma, part 2). Let C be a category. The assignment
c √û√ë Yc from Proposition 7.2.1.15 extends to a functor Y : Cop √ë C‚ÄìSet, and this functor
is fully faithful.
In particular, if c, c1 P ObpCq are objects and there is an isomorphism Yc ‚Äì Yc1 in
C‚ÄìSet, then there is an isomorphism c ‚Äì c1 in C.
Proof. See Mac Lane [29].
‚ñ°
Exercise 7.2.1.22.
The distributive law for addition of natural numbers says c ÀÜ pa ` bq ‚Äú c ÀÜ a ` c ÀÜ b.
Following is a proof of the distributive law using category-theoretic reasoning. Annotate
anything shown in red with a justiÔ¨Åcation for why it is true.
Proposition (Distributive law). For any natural numbers a, b, c P N, the distributive law
holds:
cpa ` bq ‚Äú ca ` cb.
Sketch of proof. To Ô¨Ånish, justify things shown in red.
Let A, B, C be Ô¨Ånite sets, and let X be another Ô¨Ånite set.
HomSetpC ÀÜ pA ` Bq, Xq‚ÄìHomSetpA ` B, XCq
‚ÄìHomSetpA, XCq ÀÜ HomSetpB, XCq
‚ÄìHomSetpC ÀÜ A, Xq ÀÜ HomSetpC ÀÜ B, Xq
‚ÄìHomSetppC ÀÜ Aq ` pC ÀÜ Bq, Xq.

414
CHAPTER 7. CATEGORIES AT WORK
By the appropriate application of Yoneda‚Äôs lemma, we see that there is an isomorphism
C ÀÜ pA ` Bq ‚Äì pC ÀÜ Aq ` pC ÀÜ Bq
in Fin. The result about natural numbers follows.
‚ñ°
‚ô¶
Solution 7.2.1.22.
There are six red things. The Ô¨Årst four are arithmetic of categories, justiÔ¨Åed by the
Proposition 6.2.5.1. In that language we have
XCÀÜpA`Bq ‚Äì pXCqA`B ‚Äì pXCqA ÀÜ pXCqB ‚Äì XCÀÜA ÀÜ XCÀÜB ‚Äì XpCÀÜAq`pCÀÜBq.
So now we have an isomorphism
HomSetpC ÀÜ pA ` Bq, Xq ‚Äì HomSetpC ÀÜ A ` C ÀÜ B, Xq
for any set X. This isomorphism is natural in X, but this very important issue is not
elaborated here (see Mac Lane [29] for such details).
Thus the representable functor
YCÀÜpA`Bq is isomorphic to the representable functor YCÀÜA`CÀÜB. By applying Yoneda‚Äôs
Proposition 7.2.1.21, we have an isomorphism C ÀÜ pA ` Bq ‚Äì pC ÀÜ Aq ` pC ÀÜ Bq. This
is the Ô¨Åfth red thing.
Thus if a, b, c P N are such that A ‚Äì a, B ‚Äì b, and C ‚Äì c, it follows that cpa ` bq ‚Äú
ca ` cb, justifying the sixth red thing.
‚ô¶
7.2.1.23
The subobject classiÔ¨Åer Œ© P ObpC‚ÄìSetq
If C is a category, then the functor category C‚ÄìSet is a special kind of category, called
a topos. Note that when C ‚Äú 1 is the terminal category, then we have an isomorphism
1‚ÄìSet ‚Äì Set, so the category of sets is a special case of a topos. What is interesting
about toposes (or topoi) is that they generalize many properties of Set. This short section
investigates only one such property, namely, that C‚ÄìSet has a subobject classiÔ¨Åer, denoted
Œ© P ObpC‚ÄìSetq. In the case C ‚Äú 1 the subobject classiÔ¨Åer is tTrue, Falseu P ObpSetq
(see DeÔ¨Ånition 3.4.4.9).
As usual, we consider the matter of subobject classiÔ¨Åers by grounding the discussion
in terms of databases.
The analogue of tTrue, Falseu for an arbitrary database can
be quite complex‚Äîit encodes the whole story of relational database instances for that
schema.

7.2. CATEGORIES OF FUNCTORS
415
DeÔ¨Ånition 7.2.1.24. Let C be a category, let C‚ÄìSet denote its category of instances,
and let 1C P ObpC‚ÄìSetq denote the terminal object. A subobject classiÔ¨Åer for C‚ÄìSet is an
object Œ©C P ObpC‚ÄìSetq and a morphism t: 1C √ë Œ©C with the following property. For any
monomorphism f : I √ë J in C‚ÄìSet, there exists a unique morphism charpfq: J √ë Œ©C
such that the following diagram is a pullback in C‚ÄìSet:
I
!

f

‚åü
1C
t

J
charpfq
 Œ©C
That is, for any instance J there is a bijection
HomC‚ÄìSetpJ, Œ©q ‚Äì tI P ObpC‚ÄìSetq | I ƒé Ju.
In terms of databases, what this means is that for every schema C, there is some special
instance Œ©C P ObpC‚ÄìSetq that somehow classiÔ¨Åes subinstances of anything. When the
schema is the terminal category, C ‚Äú 1, instances are sets and according to DeÔ¨Ånition
3.4.4.9 the subobject classiÔ¨Åer is Œ©1 ‚Äú tTrue, Falseu. One might think that the subobject
classiÔ¨Åer for C‚ÄìSet should just consist of a two-element set table by table, i.e., that for
every c P ObpCq, we should have Œ©C ‚Äú? tTrue, Falseu, but this is not correct.
In fact, for any object c P ObpCq, there is a way to Ô¨Ågure out what Œ©Cpcq has to
be. We know by Yoneda‚Äôs lemma (Proposition 7.2.1.15) that Œ©Cpcq ‚Äú HomC‚ÄìSetpYc, Œ©Cq,
where Yc is the functor represented by c. There is a bijection between HomC‚ÄìSetpYc, Œ©Cq
and the set of subinstances of Yc. Thus we have
Œ©Cpcq ‚Äú tI P ObpC‚ÄìSetq | I ƒé Ycu.
(7.7)
How should Œ©C : C √ë Set behave on morphisms? By Exercise 7.2.1.13, each morphism
f : c √ë d in C induces a morphism Yf : Yd √ë Yc, and the map Œ©Cpfq: Œ©Cpcq √ë Œ©Cpdq
sends a subinstance A ƒé Yc to the pullback
Y ¬¥1
f
pAq


‚åü
A

Yd
Yf
 Yc
(7.8)
That is, Œ©CpfqpAq ‚Äú Y ¬¥1
f
pAq.
We have now fully described Œ©C as a functor, but the description is very abstract.
Here is an example of a subobject classiÔ¨Åer.

416
CHAPTER 7. CATEGORIES AT WORK
Example 7.2.1.25. Consider the following category C ‚Äì r3s:
C :‚Äú
‚úì
0‚Äö
after 1

after 2

after 3
	
1‚Äö
after 1

after 2

2‚Äö
after 1
 3‚Äö
‚úì
‚úì
To write Œ©C, we need to understand the representable functors Yc P ObpC‚ÄìSetq, for
c ‚Äú 0, 1, 2, 3, as well as their subobjects. Here is Y0 as an instance:
0 (Y0)
ID
after 1
after 2
after 3

after 1()
after 2()
after 3()
1 (Y0)
ID
after 1
after 2
after 1pq
after 2pq
after 3pq
2 (Y0)
ID
after 1
after 2pq
after 3pq
3 (Y0)
ID
after 3pq
What are the subinstances of this?
There is the empty subinstance H ƒé Y0 and
the identity subinstance Y0 ƒé Y0. But there are three more as well. Note that if we
want to keep the  row of table 0, then we have to keep everything. But if we throw
away the  row of table 0, we can still keep the rest and get a subinstance.
If we
want to keep the after 1pq row of table 1, then we have to keep its images in tables 2
and 3. But we could throw away both the  row of table 0 and the after 1pq row of
table 1 and still keep the rest. And so on. In other words, there are Ô¨Åve subobjects of
Y0, i.e., elements of Œ©Cp0q, but they are hard to name. We arbitrarily name them by
Œ©Cp0q :‚Äú tyes, wait 1, wait 2, wait 3, neveru.
The same analysis holds for the other tables of Œ©C. For example, we denote the three
subinstances of Y2 by Œ©Cp2q ‚Äú tyes, wait 1, neveru. In sum, the database instance Œ©C is:
0 (Œ©C)
ID
after 1
after 2
after 3
yes
yes
yes
yes
wait 1
yes
yes
yes
wait 2
wait 1
yes
yes
wait 3
wait 2
wait 1
yes
never
never
never
never
1 (Œ©C)
ID
after 1
after 2
yes
yes
yes
wait 1
yes
yes
wait 2
wait 1
yes
never
never
never

7.2. CATEGORIES OF FUNCTORS
417
2 (Œ©C)
ID
after 1
yes
yes
wait 1
yes
never
never
3 (Œ©C)
ID
yes
never
The morphism 1 √ë Œ©C picks out the yes row of every table.
Now that we have constructed Œ©C P ObpC‚ÄìSetq, we are ready to use it. What makes
Œ©C special is that for any instance X : C √ë Set, the subinstances if X are in one-to-one
correspondence with the instance morphisms X √ë Œ©C. Consider the following arbitrary
instance X, where the blue rows denote a subinstance A ƒé X.
0 pXq
ID
after 1
after 2
after 3
a1
b1
c1
d1
a2
b2
c1
d1
a3
b2
c1
d1
a4
b3
c2
d2
a5
b5
c3
d1
1 pXq
ID
after 1
after 2
b1
c1
d1
b2
c1
d1
b3
c2
d2
b4
c1
d1
b5
c3
d1
2 pXq
ID
after 1
c1
d1
c2
d2
c3
d1
3 pXqq
ID
d1
d2
(7.9)
This blue subinstance A ƒé X corresponds to a natural transformation charpAq: X √ë
Œ©C. That is, for each c P ObpCq, all the rows in the c table of X are sent to the rows in
the c table of Œ©C, as they would be for any natural transformation. The way charpAq
works is as follows. For each table i and row x P Xpiq, Ô¨Ånd the Ô¨Årst column f in which
the entry is blue (i.e., fpxq P A), and send x to the corresponding element of Œ©Cpiq. For
example, charpAqp0q sends a1 to wait 2 and sends a4 to never, and charpAqp2q sends c1
to yes and sends c2 to never.
Exercise 7.2.1.26.
a. Write the blue subinstance A ƒé X shown in (7.9) as an instance of C, i.e., as four
tables.
b. This subinstance A ƒé X corresponds to a map ‚Ñì:‚Äú charpAq: X √ë Œ©C.
For all
c P ObpCq, we have a function ‚Ñìpcq: Xpcq √ë Œ©Cpcq. With c ‚Äú 1, write out ‚Ñìp1q: Xp1q √ë
Œ©Cp1q.
‚ô¶

418
CHAPTER 7. CATEGORIES AT WORK
Solution 7.2.1.26.
a.
0 pXq
ID
after 1
after 2
after 3
1 pXq
ID
after 1
after 2
b2
c1
d1
b4
c1
d1
2 pXq
ID
after 1
c1
d1
3 pXqq
ID
d1
b.
charpAqp1q
Xp1q
Œ©Cp1q
b1
wait 1
b2
yes
b3
never
b4
yes
b5
wait 2
‚ô¶
Exercise 7.2.1.27.
Let Loop be the loop schema
Loop ‚Äú
s‚Äö
f
K
a. What is the subobject classiÔ¨Åer Œ©Loop P ObpLoop‚ÄìSetq? (Write it out in table form.)
b. In Exercise 7.2.1.10 you computed the representable functor Ys.
How does Œ©Loop
compare to Ys?
c. Consider the discrete dynamical system X and its subset W ƒé X:
W
C‚Äö L
E‚Äö
J

X
A‚Äö
 B‚Äö
 C‚Äö L
D‚Äö
"
E‚Äö
"
F‚Äö
 G‚Äö
 H‚Äö
M

7.2. CATEGORIES OF FUNCTORS
419
What is the morphism charpWq: X √ë Œ©Loop that corresponds to this subobject?
‚ô¶
Solution 7.2.1.27.
a. We see in (7.7) the formula for Œ©Looppsq:
Œ©Looppsq ‚Äú tI P ObpLoop‚ÄìSetq | I ƒé Ysu,
where Ys ‚Äú HomLoopps, ¬¥q is the representable functor at s. Recall from Exercise
7.2.1.10 that Yspsq can be expressed in table form as
s
ID
f
f 0
f 1
f
f 2
f 2
f 3
f 3
f 4
f 4
f 5
...
...
What is the set of subobjects of this?
Which subsets of Yspsq ‚Äú tf 0, f 1, f 2, . . .u
are closed under composition with f? If a subset is closed under composition with
f and contains f k, then it contains f k`1.
So a subobject A ƒé Ys is completely
characterized by the least element (if it has one) in Apsq. We can write such a subobject
as Ak ƒé Ys for k P N \ t8u, where Akpsq ‚Äú tf i | i P N, i ƒõ ku ƒé Yspsq. In particular,
A8 ‚Äú H is the initial instance. We elide the diÔ¨Äerence between Ak : Loop √ë Set and
Akpsq P ObpSetq.
Now we need to understand the function Œ©Looppfq: Œ©Looppsq √ë Œ©Looppsq. The func-
tion Yf : Ys √ë Ys is simply ‚Äúcomposition with f,‚Äù sending f k to f k`1. So diagram
(7.8), applied to s, says that for a subset Ak, the set Œ©LooppfqpAkq is the pullback in
the following diagram (left), which is abbreviated in the right-hand diagram:
Y ¬¥1
f
pAkq


‚åü
Ak

Yspsq
Yf
 Yspsq
ti ` 1 ƒõ ku


‚åü
ti ƒõ ku

N
i√û√ëi`1
 N

420
CHAPTER 7. CATEGORIES AT WORK
In other words, we have
Œ©LooppfqpAkq ‚Äú
$
‚Äô
&
‚Äô
%
A8
if k ‚Äú 8,
Ak¬¥1
if 1 ƒè k ƒÉ 8,
A0
if k ‚Äú 0.
At this point perhaps it is redundant, but we provide the requested table:
Œ©Looppsq
ID
f
A0
A0
A1
A0
A2
A1
A3
A2
...
...
A8
A8
b. The tables Yspsq and Œ©Looppsq in part (a) are not isomorphic, even though they have
basically the same number of rows (inÔ¨Ånitely many). For example, Ys has no Ô¨Åxed
points under the action of f, whereas Œ©Loop has two.
c. The idea is that charpWqpsq: Xpsq √ë Œ©Looppsq will send each element of x P Xpsq to
‚Äúthe number k such that applying f k to x will put it into W.‚Äù So we have
charpWqpsq
Xpsq
Œ©Looppsq
A
A2
B
A1
C
A0
D
A2
E
A0
F
A8
G
A8
H
A8
‚ô¶
Exercise 7.2.1.28.
Let GrIn ‚Äú
Ar‚Äö
src 
tgt 
Ve‚Äö
be the indexing category for graphs.

7.2. CATEGORIES OF FUNCTORS
421
a. Write the subobject classiÔ¨Åer Œ©GrIn P ObpGrIn‚ÄìSetq in tabular form, i.e., as two
tables.
b. Draw Œ©GrIn as a graph.
c. Let G be the following graph and G1 ƒé G the blue part.
w‚Äö
f
)
g

h 
x‚Äö
y‚Äö
j
E
i
 z‚Äö
Write G P ObpGrIn‚ÄìSetq in tabular form.
d. Write the components of the natural transformation charpG1q: G √ë Œ©GrIn.
‚ô¶
Solution 7.2.1.28.
a. Recall from Exercise 7.2.1.9 that YAr and YVe are as follows:
Ar pYArq
ID
src
tgt

srcpq
tgtpq
Ve pYArq
ID
srcpq
tgtpq
Ar pYVeq
ID
src
tgt
Ve pYVeq
ID

There are Ô¨Åve subobjects of YAr. We name them Arrow, Endpoints, Source, Target,
and Nothing:
Ar pArrowq
ID
src
tgt

srcpq
tgtpq
Ve pArrowq
ID
srcpq
tgtpq
Ar pEndpointsq
ID
src
tgt
Ve pEndpointsq
ID
srcpq
tgtpq
Ar pSourceq
ID
src
tgt
Ve pSourceq
ID
srcpq
Ar pTargetq
ID
src
tgt
Ve pTargetq
ID
tgtpq
Ar pNothingq
ID
src
tgt
Ve pNothingq
ID

422
CHAPTER 7. CATEGORIES AT WORK
There are two subobjects of YVe, namely, H ƒé YVe and YVe ƒé YVe. We are ready to
write Œ©GrIn.
Œ©GrInpArq
ID
src
tgt
Arrow
Vertex
Vertex
Endpoints
Vertex
Vertex
Source
Vertex
Nothing
Target
Nothing
Vertex
Nothing
Nothing
Nothing
Œ©GrInpVeq
ID
Vertex
Nothing
b.
‚Äö
Vertex
Arrow 7
Endpoints
^
Source
a
Nothing
‚Äö
Nothing
&
Target
c
c. This is review and preparation for part (d).
Ar pGq
ID
src
tgt
f
w
x
g
w
x
h
w
y
i
y
z
j
y
y
Ve pGq
ID
w
x
y
z
d. The natural transformation charpG1q: G √ë Œ©GrIn has a component function for each

7.2. CATEGORIES OF FUNCTORS
423
object in ObpGrInq ‚Äú tAr, Veu:
charpG1qAr
GpArq
Œ©GrInpArq
f
Endpoints
g
Arrow
h
Source
i
Target
j
Nothing
charpG1qVe
GpVeq
Œ©GrInpVeq
w
Vertex
x
Vertex
y
Nothing
z
Vertex
‚ô¶
7.2.2
Database instances in other categories
So far we have focused on the category C‚ÄìSet ‚Äú FunpC, Setq of set-valued functors
C √ë Set for arbitrary categories, or database schemas, C. What if we allow the target
category Set to change?
7.2.2.1
Representations of groups
The classical mathematical subject of representation theory is the study of FunpG, Vectq,
where G is a group and Vect is the category of vector spaces (over, say, R). Every such
functor F : G √ë Vect is called a representation of G. Since G is a category with one
object ‚ñ≤, the functor F provides a single vector space V ‚Äú Fp‚ñ≤q together with an action
of G on it.
We can think of this in terms of databases if we have a presentation of G in terms of
generators and relations. The schema corresponding to G has one table, and this table
has a column for each generator (see Section 4.1.3). Giving a representation F is the same
as giving an instance on the schema, with some properties that stem from the fact that
the target category is Vect rather than Set. There are many possibilities for expressing
such data.
One possibility is if we could draw V , say, if V were one-, two-, or three-dimensional.
If so, let P be the chosen picture of V , e.g., P is the standard drawing of a Cartesian
coordinate plane V ‚Äú R2. Then every column of the table would consist entirely of the
picture P instead of a set of rows. Touching a point in the ID column R2 would result
in a point being drawn in the R2 corresponding to the other column, in accordance with
the G action. Each column would, of course, respect addition and scalar multiplication.
Another possibility is to use the fact that there is a functor U : Vect √ë Set, so the
instance F : G √ë Vect could be converted to an ordinary instance U Àù F : G √ë Set.

424
CHAPTER 7. CATEGORIES AT WORK
We would have an ordinary set of rows.
This set would generally be inÔ¨Ånite, but it
would be structured by addition and scalar multiplication. For example, assuming V is
Ô¨Ånite-dimensional, one could Ô¨Ånd a few rows that generated the rest.
A third possibility is to use monads, which would allow the table to have only as many
rows as V has dimensions. This yields a considerable saving of space. See Section 7.3. In
all these possibilities, the usual tabulated format of databases has been slightly altered
to accommodate the extra information in a vector space.
7.2.2.2
Representations of quivers
Representation theory also studies representations of quivers. A quiver is just the free
category (see Example 5.1.2.33) on a graph. If P is a graph with free category P, then a
representation of the quiver P is a functor F : P √ë Vect. Such a representation consists
of a vector space at each vertex of P and a linear transformation for each arrow. All
the discussion in Section 7.2.2.1 works in this setting, except that there is more than one
table.
7.2.2.3
Other target categories
One can imagine the value of using target categories other than Set or Vect for databases.
Application 7.2.2.4. Geographic data consists of maps of the earth together with various
functions on it. For example, for any point on the earth one may want to know the
average of temperatures recorded in the past ten years or the precise temperature at this
moment. Earth can be considered as a topological space, E. Similarly, temperatures on
earth reside on a continuum, say, the space T of real numbers r¬¥100, 200s. Thus the
temperature record is a continuous function E √ë T.
Other records such as precipitation, population density, elevation, and so on, can all
be considered as continuous functions from E to some space.
Agencies like the U.S.
Geological Survey hold databases of such information. By modeling them on functors
C √ë Top, they may be able to employ mathematical tools such as persistent homology
(see Weinberger [44]) to Ô¨Ånd interesting invariants of the data.
‚ô¶‚ô¶
Application 7.2.2.5. Application 7.2.2.4 discussed using topological database instances to
model geographical data. Other scientiÔ¨Åc disciplines could use the same kind of tool. For
example, in studying the mechanics of materials, one may want to consider the material as
a topological space M and measure values such as energy as a continuous map M √ë E.
Such observations could be modeled by databases with target category Top or Vect
rather than Set.
‚ô¶‚ô¶

7.2. CATEGORIES OF FUNCTORS
425
7.2.3
Sheaves
Let X be a topological space (see Example 5.2.3.1), such as a sphere. Section 7.2.2.3
discussed continuous functions out of X and their use in science (e.g., recording temper-
atures on the earth as a continuous map X √ë r¬¥100, 200s). Sheaves allow us to consider
the local-global nature of such maps, taking into account reparable discrepancies in data-
gathering tools.
Application 7.2.3.1. Suppose that X is the topological space corresponding to the earth,
and let region mean an open subset U ƒé X. Suppose that we cover X with 10,000 regions
U1, U2, . . . , U10000, such that some of the regions overlap in a nonempty subregion (e.g.,
U5 X U9 ‚Ä∞ Hq. For each i, j, let Ui,j ‚Äú Ui X Uj.
For each region Ui ƒé X, we have a temperature-recording device, which gives a
function Ti : Ui √ë r¬¥100, 200s. If Ui X Uj ‚Ä∞ H, then two diÔ¨Äerent recording devices give
us temperature data for the intersection Ui,j. Suppose we Ô¨Ånd that they do not give
precisely the same data but that there is a translation formula between their results. For
example, Ti might register 3Àù warmer than Tj registers, throughout the region Ui X Uj.
Roughly speaking, a consistent system of translation formulas is called a sheaf. It
does not demand a universal true temperature function but only a consistent translation
system between them.
‚ô¶‚ô¶
DeÔ¨Ånitions 7.2.3.2 and 7.2.3.5 make the notion of sheaf precise, but it is developed
slowly at Ô¨Årst.
For every region U, we can record the value of some function (say, temperature)
throughout U. Although this record might consist of a mountain of data (a temperature
for each point in U), it can be thought of as one thing. That is, it is one element in the
set of ‚Äúvalue assignments throughout U‚Äù. A sheaf holds the set of ‚Äúvalue assignments
throughout U‚Äù for each region U as well as how a ‚Äúvalue assignment throughout U‚Äù
restricts to a ‚Äúvalue assignment throughout V ‚Äù for any subset V ƒé U.
DeÔ¨Ånition 7.2.3.2. Let X be a topological space, let OpenpXq denote its partial order
of open sets, and let OpenpXqop be the opposite category. A presheaf on X is a functor
O: OpenpXqop √ë Set. For every open set U ƒé X, we refer to the set OpUq as the set
of value assignments throughout U of O. If V ƒé U is an open subset, it corresponds to
an arrow in OpenpXq, and applying the functor O yields a function called the restriction
map from U to V and denoted œÅV,U : OpUq √ë OpV q. Given a P OpUq, we may denote
œÅV,Upaq by a|V ; it is called the restriction of a to V .
The category of presheaves on X is simply OpenpXqop‚ÄìSet (see DeÔ¨Ånition 5.3.3.1).

426
CHAPTER 7. CATEGORIES AT WORK
Exercise 7.2.3.3.
a. Find four overlapping open subsets that cover the square X :‚Äú r0, 3s ÀÜ r0, 3s ƒé R2.
Write a label for each open set as well as a label for each overlap (two-fold, three-fold,
etc.). You now have labeled n open sets. What is your n?
b. Draw the preorder OpenpXq. For each of the n open sets, draw a dot with the appro-
priate label. Then draw an arrow from one dot to another when the Ô¨Årst refers to an
open subset of the second. This is OpenpXq.
c. Make up and write formulas R1 : X √ë R and R2 : X √ë R with R1pxq ƒè R2pxq for
all x P X, expressing a range of temperatures R1ppq ƒè Tempppq ƒè R2ppq that an
imaginary experiment shows can exist at each point p in the square. What is the
temperature range at p ‚Äú p2, 1q P X?
d. Make a presheaf O: OpenpXqop √ë Set as follows. For each of your open sets, say,
A P OpenpXq, put
OpAq :‚Äú tTemp: A √ë R | @a P A, R1paq ƒè Temppaq ƒè R2paqu.
Call one of your n open sets A. What is OpAq? Then choose some A1 ƒé A; what is
OpA1q, and what is the restriction map œÅA1,A : OpAq √ë OpA1q in this case? Do you
like the name ‚Äúvalue assignment throughout A‚Äù for an element of OpAq?
‚ô¶
Solution 7.2.3.3.
a. Inside the 3 ÀÜ 3 grid, I drew four 2 ÀÜ 2 squares, which I denoted NE ‚Äú r1, 3s ÀÜ r1, 3s
(for NorthEast), NW :‚Äú r0, 2s ÀÜ r1, 3s, SE ‚Äú r1, 3s ÀÜ r0, 2s, and SW ‚Äú r0, 2s ÀÜ r0, 2s.
The two-fold intersections are denoted
N :‚Äú NE X NW,
S :‚Äú SE X SW,
E :‚Äú NE X SE,
W :‚Äú NW X SW,
C :‚Äú NW X SE ‚Äú NE X SW.
All the other n-fold intersections are one of these, so my value of n is 9. (Other values
are possible.)

7.2. CATEGORIES OF FUNCTORS
427
b.
NW
‚Äö
N‚Äö


NE
‚Äö
W‚Äö


C‚Äö


D
C
A



E‚Äö


SW
‚Äö
S‚Äö


SE‚Äö
c. Let R1 ‚Äú x ` y and R2 ‚Äú 2x ` y ` 1. We have 3 ƒè Tempp2, 1q ƒè 6.
d. Let A ‚Äú N ‚Äú r1, 2s ÀÜ r2, 3s be the North subset. We have
OpNq ‚Äú tTemp: N √ë R | @px, yq P N, x ` y ƒè Temppx, yq ƒè 2x ` y ` 1u.
We have C ƒé N, so let A1 ‚Äú C ‚Äú r1, 2s ÀÜ r1, 2s, so
OpCq ‚Äú tTemp: C √ë R | @px, yq P C, x ` y ƒè Temppx, yq ƒè 2x ` y ` 1u.
Clearly, there is a function OpNq √ë OpCq, because if we have a Temp function that is
deÔ¨Åned throughout N, we can restrict it to a Temp function that is deÔ¨Åned throughout
C, and the conditions on it (namely, x ` y ƒè Temppx, yq ƒè 2x ` y ` 1) are the same.
I think ‚Äúvalue assignment throughout A‚Äù is a good name for this concept.
‚ô¶
Before moving to a deÔ¨Ånition of sheaves, we need to clarify the notion of covering.
Suppose that U is a region and V1, . . . , Vn are subregions (i.e., for each 1 ƒè i ƒè n, we
have Vi ƒé U). Then we say that the Vi collectively cover U if every point in U is in Vi
for some i. Another way to say this is that the natural function \iVi √ë U is surjective.
Example 7.2.3.4. Let X ‚Äú R be the space of real numbers, and deÔ¨Åne the following open
subsets: U ‚Äú p5, 10q, V1 ‚Äú p5, 7q, V2 ‚Äú p6, 9q, V3 ‚Äú p8, 10q.10 Then V1, V2, V3 collectively
cover of U. It has overlaps V12 ‚Äú V1 X V2 ‚Äú p6, 7q, V13 ‚Äú V1 X V3 ‚Äú H, V23 ‚Äú V2 X V3 ‚Äú
p8, 9q.
Given a presheaf O: OpenpXqop √ë Set, we have sets and functions as in the following
10Parentheses are used to denote open intervals of real numbers. For example, p6, 9q denotes the set
tx P R | 6 ƒÉ x ƒÉ 9u.

428
CHAPTER 7. CATEGORIES AT WORK
diagram
OpV1q
H
OpV1 X V2q
OpUq
/

)
OpV2q
?
H
OpV2 X V3q
OpV3q
?
A presheaf O on X tells us what value assignments throughout U can exist for each
U. Suppose we have a value assignment a1 P OpV1q throughout V1 and another value
assignment a2 P OpV2q throughout V2, and suppose they agree as value assignments
throughout V1 X V2, i.e., a1|V1XV2 ‚Äú a2|V1XV2. In this case we should have a unique value
assignment b P OpV1 Y V2q throughout V1 Y V2 that agrees on the V1 part with a1 and
agrees on the V2 part with a2; i.e., b|V1 ‚Äú a1 and b|U2 ‚Äú a2. The condition that such
equations hold for every covering is the sheaf condition.
For example, the elements of OpUq might be functions h: U √ë R, each of which we
imagine as a curve deÔ¨Åned on the interval U ‚Äú p5, 10q. The sheaf condition says that if
one is given a curve-snippet over p5, 7q, a curve-snippet over p6, 9q, and a curve snippet
over p8, 10q, and these all agree on overlap intervals p6, 7q and p8, 9q, then they can be
put together to form a curve over all of U.
DeÔ¨Ånition 7.2.3.5. Let X be a topological space, let OpenpXq be its partial order of
open sets, and let O: OpenpXqop √ë Set be a presheaf. Given an open set U ƒé X and a
cover V1, . . . , Vn of U, the following condition is called the sheaf condition for that cover.
Sheaf condition Given a sequence a1, . . . , an, where each ai P OpViq is a value assign-
ment throughout Vi, suppose that for all i, j, we have ai|ViXVj ‚Äú aj|ViXVj; then
there is a unique value assignment b P OpUq such that b|Vi ‚Äú ai.
The presheaf O is called a sheaf if it satisÔ¨Åes the sheaf condition for every cover.
Remark 7.2.3.6. Application 7.2.3.1 said that sheaves help us patch together information
from diÔ¨Äerent sources. Even if diÔ¨Äerent temperature-recording devices Ti and Tj regis-
tered diÔ¨Äerent temperatures on an overlapping region Ui X Uj, they could be patched
together if given a consistent translation system between their results. What is actually

7.2. CATEGORIES OF FUNCTORS
429
needed is a set of isomorphisms
pi,j : Ti|Ui,j
‚Äì
√ù√ë Tj|Ui,j
that translate between them, and that these pi,j‚Äôs act in concert with one another. This
(when precisely deÔ¨Åned) is called descent data. The way it interacts with the deÔ¨Ånition
of sheaf given in DeÔ¨Ånitions 7.2.3.2 and 7.2.3.5 is buried in the restriction maps œÅ for
the overlaps as subsets Ui,j ƒé Ui and Ui,j ƒé Uj (see Grothendieck and Raynaud [18] for
details).
Application 7.2.3.7. Consider outer space as a topological space X. DiÔ¨Äerent amateur as-
tronomers record observations of what they see in X on a given night. Let C ‚Äú r390, 700s
denote the set of wavelengths in the visible light spectrum (written in nanometers). Given
an open subset U ƒé X, let OpUq denote the set of functions U √ë C. The presheaf O
satisÔ¨Åes the sheaf condition; this is the taken-for-granted fact that we can patch together
diÔ¨Äerent observations of space.
Figure 7.1 (see page 469) shows three views of the night sky.
Given a telescope
position to obtain the Ô¨Årst view, one moves the telescope right and a little down to
obtain the second, and one moves it down and left to obtain the third. These are value
assignments a1 P OpV1q, a2 P OpV2q, and a3 P OpV3q throughout subsets V1, V2, V3 ƒé X
(respectively). These subsets V1, V2, V3 cover some (strangely shaped) subset U ƒé X.
Because the restriction of a1 to V1 X V2 is equal to the restriction of a2 to V1 X V2, and
so on, the sheaf condition says that these three value assignments glue together to form
a single value assignment throughout U, as shown in Figure 7.2 (see page 470).
‚ô¶‚ô¶
Exercise 7.2.3.8.
Find an application of sheaves in your own domain of expertise.
‚ô¶
Solution 7.2.3.8.
Suppose a sociologist assigns to each open set U on earth the set EpUq of all ways
that the inhabitants of U could feasibly be employed. This forms a sheaf. If V ƒé U is
a subset, then any method to employ everyone in U gives a method by which to employ
everyone in V . And if we know how to employ everyone in V1 and everyone in V2, and if
our methods agree on V1 X V2, then we know a way to employ everyone in V1 Y V2.
‚ô¶
Application 7.2.3.9. Suppose we have a sheaf for temperatures on earth. For every region
U, we have a set of theoretically possible temperature assignments throughout U. For
example, we may know that if it is warm in Texas, warm in Arkansas, and warm in
Kansas, then it cannot be cold in Oklahoma. With such a sheaf O in hand, one can use

430
CHAPTER 7. CATEGORIES AT WORK
facts about the temperature in one region U to predict the temperature in another region
V .
The mathematics is as follows. Suppose given regions U, V ƒé X and a subset A ƒé
OpUq corresponding to what we know about the temperature assignment throughout U.
We take the following Ô¨Åber product:
pœÅU,Xq¬¥1pAq
‚åü


OpXq
œÅU,X

œÅV,X  OpV q
A
 OpUq
The image of the top composite imppœÅU,Xq¬¥1pAq √ë OpV qq is a subset of OpV q telling us
which temperature assignments are possible throughout V , given our knowledge A about
the temperature throughout U.
We can imagine the same type of prediction systems for other domains as well, such
as the energy of various parts of a material.
‚ô¶‚ô¶
Example 7.2.3.10. Exercises 5.2.4.3 and 5.2.4.4 discussed the idea of laws being dictated
or respected throughout a jurisdiction. If X is earth, to every jurisdiction U ƒé X we
assign the set OpUq of laws that are dictated to hold throughout U. Given a law on U
and a law on V , we can see if they amount to the same law on U X V . For example, on
U a law might say, ‚Äúno hunting near rivers‚Äù and on V a law might say, ‚Äúno hunting in
public areas.‚Äù It happens that on U X V all public areas are near rivers, and vice versa,
so the laws agree there. These laws patch together to form a single rule about hunting
that is enforced throughout the union U Y V , respected by all jurisdictions within it.
7.2.3.11
Sheaf of ologged concepts
DeÔ¨Ånition 7.2.3.5 deÔ¨Ånes what should be called a sheaf of sets. We can discuss sheaves
of groups or even sheaves of categories. Here is an application of the latter.

7.2. CATEGORIES OF FUNCTORS
431
Recall the notion of simplicial complexes (see Section 3.4.4.3). They look like this:
A 
B 
D 
C 
E 
F 
G 
H 
I 
J 
K 
L 
M 
L
A
M
D
(7.10)
Given such a simplicial complex X, we can imagine each vertex v P X0 as an entity with
a worldview (e.g., a person) and each simplex as the common worldview shared by its
vertices. To model this, we assign to each vertex v P X an olog Opvq, corresponding to
the worldview held by that entity, and to each simplex u P Xn, we assign an olog Opuq
corresponding to a common ground worldview. Recall that X is a subset of PpX0q; it is
a preorder and its elements (the simplices) are ordered by inclusion. If u, v are simplices
with u ƒé v, then we want a map of ologs (i.e., a schema morphism) Opvq √ë Opuq. In
this way the model says that any idea shared among the people in v is shared among
the people in u. Thus we have a functor O: X √ë Sch (where we forget the distinction
between ologs and databases for notational convenience).
To every simplicial complex (indeed every ordered set) one can associate a topological
space; in fact, we have a functor Alx: PrO √ë Top, called the Alexandrov functor.
Applying AlxpXopq, we have a space denoted X. One can visualize X as X, but the open
sets include unions of simplices. There is a unique sheaf of categories on X that behaves
like O on simplices of X.
Example 7.2.3.12. Imagine two groups of people G1 and G2 each making observations
about the world. Suppose there is some overlap H ‚Äú G1 X G2. Then it may happen that
there is a conversation including G1 and G2, and both groups are talking about something
(though using diÔ¨Äerent words). H says, ‚ÄúYou guys are talking about the same things,

432
CHAPTER 7. CATEGORIES AT WORK
you just use diÔ¨Äerent words.‚Äù In this case there is an observation being made throughout
G1 Y G2 that agrees with both those on G1 and those on G2.
7.2.3.13
Time
One can use sheaves to model objects in time; Goguen [17] gave an approach to this.
For an approach that more closely Ô¨Åts the Ô¨Çow of this book, let C be a database schema.
The lifespan of information about the world is generally Ô¨Ånite; that is, what was true
yesterday is not always the case today. Thus we can associate to each interval U of time
the information that we deem to hold throughout U. This is sometimes called the valid
time of the data.
If data is valid throughout U and we have a subset V ƒé U, then of course it is valid
throughout V . And the sheaf condition holds too. If some information is valid throughout
U, and some other information is valid throughout U 1, and if these two things restrict
to the same information on the overlap U X V , then they can be glued together to form
information that is valid throughout the union U Y V .
So we can model information change over time by using a sheaf of C-sets on the
topological space R. In other words, for every time interval, we give an C-instance whose
information is valid throughout that time interval. DeÔ¨Ånition 7.2.3.5 only deÔ¨Åned sheaves
with values in Set; we are now generalizing to sheaves in C‚ÄìSet. Namely we consider
functors OpenpRq √ë C‚ÄìSet satisfying the same sheaf condition.
Example 7.2.3.14. Consider a hospital in which babies are born. In our scenario, mothers
enter the hospital, babies are born, mothers and babies leave the hospital. Let C be the
schema
c
a baby
was birthed by

m
a mother
Consider the eight-hour intervals
Shift1 :‚Äú pJan 1, 00 : 00 ¬¥ 08 : 00q,
Shift2 :‚Äú pJan 1, 04 : 00 ¬¥ 12 : 00q,
Shift3 :‚Äú pJan 1, 08 : 00 ¬¥ 16 : 00q.
The nurses take shifts of eight hours, overlapping with their predecessors by four hours,
and they record in the database only patients that were there throughout their shift or

7.3. MONADS
433
throughout any overlapping shift. Here is the schema:
a baby,
Shift1 X Shift2

a baby,
Shift1 X Shift3

a
baby,
Shift1
*

a
baby,
Shift2
,
*
was birthed by

a
baby,
Shift3
,

a mother,
Shift1 X Shift2
a mother,
Shift2 X Shift3
a mother,
Shift1
*
a mother,
Shift2
,
*
a mother,
Shift3
,
Whether or not this implementation of the sheaf semantics is most useful in practice
is certainly debatable. But something like this could easily be useful as a semantics, i.e.,
a way of thinking about, the temporal nature of data.
7.3
Monads
Monads would probably not have been invented without category theory, but they have
been useful in understanding algebraic theories, calculating invariants of topological
spaces, and embedding nonfunctional operations into functional programming languages.
We mainly discuss monads in terms of how they can help one make explicit a given mod-
eling context and in so doing allow one to simplify the language used in such models. We
use databases to give concrete examples.
Much of the following material on monads is taken from Spivak [40].
7.3.1
Monads formalize context
Monads can formalize assumptions about the way one does business throughout a domain.
For example, suppose we want to consider functions that are not required to return a

434
CHAPTER 7. CATEGORIES AT WORK
value for all inputs. These are not valid functions as deÔ¨Åned in Section 2.1.2 (because
they are not total), but in math classes one wants to speak of fpxq ‚Äú 1
x and gpxq ‚Äú tanpxq
as though they were functions R √ë R, so that they can be composed without constantly
paying attention to domains.
Functions that are not required to be deÔ¨Åned throughout their domain are called
partial functions.
We all know how they should work, so we need a way to make it
mathematically legal. Monads, and the Kleisli categories to which they give rise, provide
us with a way to do so. In particular, we will be able to formally discuss the composition
R
1
x√ù√ë R
tanpxq
√ù√ù√ù√ù√ë R.
Here we are drawing arrows between sets as though we were talking about total
functions, but there is an implicit context in which we are actually talking about partial
functions.
Monads allow us to write maps between sets in the functional way while
holding the underlying context. What makes them useful is that the notion of context we
are using here is made formal.
Example 7.3.1.1 (Partial functions). Partial functions can be modeled by ordinary func-
tions if we add a special ‚Äúno answer‚Äù element to the codomain.
That is, the set of
partial functions A √ë B is in one-to-one correspondence with the set of ordinary func-
tions A √ë B \ tu.
For example, suppose we want to model the partial function
fppxq :‚Äú
1
x2¬¥1 : R √ë R in this way; we would use the total function ft : R √ë R \ tu
deÔ¨Åned as:
fpxq :‚Äú
$
‚Äô
&
‚Äô
%
1
x2¬¥1
if x ‚Ä∞ ¬¥1 and x ‚Ä∞ 1,

if x ‚Äú ¬¥1,

if x ‚Äú 1.
An ordinary function g: A √ë B can be considered a partial function because we can
compose it with the inclusion
B √ë B \ tu.
(7.11)
to get A √ë B \ tu.
But how do we compose two partial functions written in this way? Suppose f : A √ë
B \ tu and g: B √ë C \ tu are functions. First form a new function
g1 :‚Äú g \ tu: B \ tu √ë C \ tu \ tu,
then compose to get pg1 Àù fq: A √ë C \ tu \ tu, and Ô¨Ånally send both ‚Äôs to the same
element by composing with
C \ tu \ tu √ë C \ tu.
(7.12)

7.3. MONADS
435
How should one think about composing partial functions g Àù f? Every element a P A
is sent by f either to an element b P B or to ‚Äúno answer.‚Äù If it has an answer fpaq P B,
then this again is sent by g either to an element gpfpaqq P C or to ‚Äúno answer.‚Äù We get
a partial function A √ë C by sending a to gpfpaqq if possible or to ‚Äúno answer‚Äù if it gets
stopped along the way.
This monad is sometimes called the maybe monad in computer science, because a
partial function f : A √ë B takes every element of A and may output just an element of
B or may output nothing; more succinctly, it outputs a ‚Äúmaybe B.‚Äù
Exercise 7.3.1.2.
a. Let f : Z √ë Z \ tu be the partial function given by fpnq ‚Äú
1
n2¬¥n. Calculate the
following: fp¬¥3q, fp¬¥2q, fp¬¥1q, fp0q, fp1q, and fp2q.
b. Let g: Z √ë Z \ tu be the partial function given by
gpnq ‚Äú
#
n2 ¬¥ 3
if n ƒõ ¬¥1,

if n ƒÉ ¬¥1
Write f Àù gpnq for ¬¥3 ƒè n ƒè 2.
‚ô¶
Solution 7.3.1.2.
a.)
f
Z
Z \ tu
¬¥3
1
12
¬¥2
1
6
¬¥1
1
2
0

1

2
1
2
b.)
f Àù g
Z
Z \ tu
¬¥3

¬¥2

¬¥1
1
6
0
1
12
1
1
6
2

‚ô¶
Application 7.3.1.3. Experiments are supposed to be performed objectively, but suppose
we imagine that changing the person who performs the experiment, say, in psychology,

436
CHAPTER 7. CATEGORIES AT WORK
may change the outcome. Let A be the set of experimenters, let X be the parameter space
for the experimental variables (e.g., X ‚Äú Age ÀÜ Income), and let Y be the observation
space (e.g., Y ‚Äú propensity for violence).
We want to think of such an experiment
as telling us about a function f : X √ë Y (how age and income aÔ¨Äect propensity for
violence).
However, we may want to make some of the context explicit by including
information about who performed the experiment. That is, we are really Ô¨Ånding a function
f : X ÀÜ A √ë Y .
Given a set P of persons, the experimenter wants to know the age and income of each,
i.e., a function P √ë X. However, it may be the case that even ascertaining this basic
information, which is achieved merely by asking each person these questions, is subject
to which experimenter in A is doing the asking. Then we again want to consider the
experimenter as part of the equation, replacing the function P √ë X with a function
P ÀÜ A √ë X. In such a case, we can use a monad to hide the fact that everything in sight
is assumed to be inÔ¨Çuenced by A. In other words, we want to announce, once and for all,
the modeling context‚Äîthat every observable is possibly inÔ¨Çuenced by the observer‚Äîso
that it can recede into the background.
We return to this in Examples 7.3.2.6 and 7.3.3.4.
‚ô¶‚ô¶
7.3.2
DeÔ¨Ånition and examples
What aspects of Example 7.3.1.1 are about monads, and what aspects are about partial
functions in particular? Monads are structures involving a functor and a couple of natural
transformations. Roughly speaking, the functor for partial functors was B √û√ë B \ tu,
and the natural transformations were given in (7.11) and (7.12). This section gives the
deÔ¨Ånition of monads and a few examples.
We return to consider about how monads
formalize context in Section 7.3.3.
DeÔ¨Ånition 7.3.2.1 (Monad). A monad on Set is deÔ¨Åned as follows: One announces
some constituents (A. functor, B. unit map, C. multiplication map) and shows that they
conform to some laws (1. unit laws, 2. associativity law). SpeciÔ¨Åcally, one announces
A. a functor T : Set √ë Set,
B. a natural transformation Œ∑: idSet √ë T,
C. a natural transformation Œº: T Àù T √ë T.
We sometimes refer to the functor T as though it were the whole monad; we call Œ∑ the
unit map and Œº the multiplication map. One must then show that the following monad
laws hold:

7.3. MONADS
437
1. The following diagrams of functors Set √ë Set commute:
T Àù idSet
idT ÀõŒ∑ 
‚Äú
+
T Àù T
Œº

T
idSet Àù T
Œ∑ÀõidT 
‚Äú
+
T Àù T
Œº

T
2. The following diagram of functors Set √ë Set commutes:
T Àù T Àù T
ŒºÀõidT 
idT ÀõŒº

T Àù T
Œº

T Àù T
Œº
 T
Example 7.3.2.2 (List monad). We now go through DeÔ¨Ånition 7.3.2.1 using the List
monad.
The Ô¨Årst step is to give a functor List: Set √ë Set, which was done in Ex-
ample 5.1.2.20. Recall that if X ‚Äú tp, q, ru, then ListpXq includes the empty list r s,
singleton lists such as rps, and any other list of elements in X such as rp, p, r, q, ps. Given
a function f : X √ë Y , one obtains a function Listpfq: ListpXq √ë ListpY q by entrywise
application of f, as in Exercise 5.1.2.22.
As a monad, the functor List comes with two natural transformations, a unit map
Œ∑ and a multiplication map Œº. Given a set X, the unit map Œ∑X : X √ë ListpXq returns
singleton lists as follows:
X
Œ∑X
 ListpXq
p 
 rps
q 
 rqs
r 
 rrs
Given a set X, the multiplication map ŒºX : ListpListpXqq √ë ListpXq concatenates lists

438
CHAPTER 7. CATEGORIES AT WORK
of lists as follows:
ListpListpXqq
ŒºX
 ListpXq
‚Äú
rps, rqs
‚Ä∞ 
 rp, qs
‚Äú
rq, p, rs, r s, rq, r, p, rs, rrs
‚Ä∞ 
 rq, p, r, q, r, p, r, rs
The naturality of Œ∑ and Œº means that these maps work appropriately well under entrywise
application of a function f : X √ë Y . Finally, the three monad laws from DeÔ¨Ånition 7.3.2.1
can be exempliÔ¨Åed as follows:
rp, q, qs  idListÀùŒ∑  ‚Äú
rps, rqs, rqs
‚Ä∞
_
Œº

rp, q, qs
rp, q, qs  Œ∑ÀùidList  ‚Äú
rp, q, qs
‚Ä∞
_
Œº

rp, q, qs
‚Äù‚Äú
rp, qs, rr, rs
‚Ä∞
,
‚Äú
r s, rr, q, qs
‚Ä∞ƒ±  ŒºÀùidList 
_
idListÀùŒº

‚Äú
rp, qs, rr, rs, r s, rr, q, qs
‚Ä∞
_
Œº

‚Äú
rp, q, r, rs, rr, q, qs
‚Ä∞ 
Œº
 rp, q, r, r, r, q, qs
Exercise 7.3.2.3.
Let P: Set √ë Set be the power-set functor, so that given a function f : X √ë Y , the
function Ppfq: PpXq √ë PpY q is given by taking images.
a. Make sense of the statement, ‚ÄúWith Œ∑ deÔ¨Åned by singleton subsets and with Œº deÔ¨Åned
by union, J :‚Äú pP, Œ∑, Œºq is a monad.‚Äù
b. With X ‚Äú ta, bu, write the function Œ∑X as a two-row, two-column table.
c. With X ‚Äú ta, bu, write the function ŒºX as a sixteen-row, two-column table (you can
stop after Ô¨Åve rows if you fully understand it).
d. Check that you believe the monad laws from DeÔ¨Ånition 7.3.2.1.
‚ô¶

7.3. MONADS
439
Solution 7.3.2.3.
a. The statement suggests that the components of Œ∑: idSet √ë P can be deÔ¨Åned using
the concept of singleton subsets and that the components of Œº: P Àù P √ë P can be
deÔ¨Åned using the concept of union. Given a set X P ObpSetq, we need a function
Œ∑X : X √ë PpXq, meaning that for every element x P X, we need a subset of X. The
statement suggests we send x to the singleton subset txu ƒé X. The statement also
suggests that we obtain ŒºX : PpPpXqq √ë PpXq by sending a set of subsets to their
union. For example, if X ‚Äú t1, 2, 3, 4, 5u, then an element T P PpPpXqq might look
like tt1, 2u, H, t1, 3, 5uu; the union of these subsets is ŒºXpTq ‚Äú t1, 2, 3, 5u, a subset
of X. It is not hard to check that the given Œ∑ and Œº are natural transformations.
The statement now asserts that the power-set functor P, together with these natural
transformations, forms a monad.
b.)
Œ∑X
X
PpXq
a
tau
b
tbu
c.)
ŒºX
PpPpXqq
PpXq
H
H
tHu
H
ttauu
tau
ttbuu
tbu
tta, buu
ta, bu
tH, tauu
tau
tH, tbuu
tbu
tH, ta, buu
ta, bu
ttau, tbuu
ta, bu
tta, ta, buuu
ta, bu
ttbu, ta, buu
ta, bu
tH, tau, tbuu
ta, bu
tH, tau, ta, buu
ta, bu
tH, tbu, ta, buu
ta, bu
ttau, tbu, ta, buu
ta, bu
tH, tau, tbu, ta, buu
ta, bu
d. The monad laws hold. One says that if we take all the singleton subsets of X and
union them, we get X. Another says that if we take the singleton set consisting of the
whole set X and union it, we get X. The last says that the union of unions is a union.
‚ô¶
Example 7.3.2.4 (Partial functions as a monad). Here is the monad for partial functions, as
discussed in Example 7.3.1.1. The functor T : Set √ë Set sends a set X to the set X\tu.
Clearly, given a function f : X √ë Y , there is an induced function pf \tuq: pX \tuq √ë

440
CHAPTER 7. CATEGORIES AT WORK
pY \ tuq, so this is a functor. The natural transformation Œ∑: id √ë T is given on a set
X by the component function
Œ∑X : X √ë X \ tu
that includes X √£√ë X \ tu. Finally, the natural transformation Œº: T Àù T √ë T is given
on a set X by the component function
ŒºX : X \ tu \ tu √ù√ë X \ tu
that collapses both copies of .
Exercise 7.3.2.5.
Let E be a set with elements refered to as exceptions.
We imagine exceptions as
warnings like ‚ÄúoverÔ¨Çow!‚Äù or ‚Äúdivision by zero!‚Äù and we imagine that a function f : X √ë Y
outputs either a value or one of these exceptions. Let T : Set √ë Set be the functor
X √û√ë X \ E. Follow Example 7.3.2.4 and Ô¨Ånd a unit map Œ∑ and a multiplication map Œº
for which pT, Œ∑, Œºq is a monad.
‚ô¶
Solution 7.3.2.5.
Given a set X, we need Œ∑X : X √ë X \ E and ŒºX : X \ E \ E √ë X \ E. We let Œ∑X
be the inclusion, and we let ŒºX be the map sending both copies of E in the domain to
the codomain by identity on E.
‚ô¶
Example 7.3.2.6. Fix a set A. Let T : Set √ë Set be the functor given by TpXq ‚Äú XA ‚Äú
HomSetpA, Xq; this is a functor. For a set X and an element x P X, let cx : A √ë X be
the constant-x function, cxpaq ‚Äú x for all a P A. DeÔ¨Åne Œ∑X : X √ë TpXq to be given by
the constant-x function, x √û√ë cx.
Now we have to specify a natural transformation Œº: T Àù T √ë T, i.e., for each X P
ObpSetq, we need to provide an X-component function
ŒºX : pXAqA √ë XA.
By currying (see Example 7.1.1.8), this is equivalent to providing a function pXAqA ÀÜ
A √ë X. For any Y P ObpSetq, we have an evaluation function (see Exercise 3.4.2.5)
ev: Y A ÀÜ A √ë Y . We use it twice and Ô¨Ånd the desired function:
pXAqA ÀÜ A
evÀÜidA
√ù√ù√ù√ù√ù√ù√ù√ë XA ÀÜ A
ev
√ù√ù√ù√ù√ë X.
Remark 7.3.2.7. Monads can be deÔ¨Åned on categories other than Set. In fact, for any
category C, one can take DeÔ¨Ånition 7.3.2.1 and replace every occurrence of Set with C
and obtain the deÔ¨Ånition for monads on C. We have actually seen a monad pPaths, Œ∑, Œºq

7.3. MONADS
441
on the category Grph of graphs before, namely, in Examples 5.3.1.15 and 5.3.1.16. That
is, Paths: Grph √ë Grph, which sends a graph to its paths-graph is the functor part.
The unit map Œ∑ includes a graph into its paths-graph using the observation that every
arrow is a path of length 1. And the multiplication map Œº concatenates paths of paths.
The Kleisli category of this monad (see DeÔ¨Ånition 7.3.3.1) is used, e.g., in (5.19), to deÔ¨Åne
morphisms of database schemas.
7.3.3
Kleisli category of a monad
We are on our way to understanding how monads are used in computer science and how
they may be useful for formalizing methodological context. There is only one more stop
along the way, called the Kleisli category of a monad. For example, when we apply this
Kleisli construction to the partial functions monad (Example 7.3.2.4), we obtain the cat-
egory of partial functions (see Example 7.3.3.2). When we apply the Kleisli construction
to the monad X √û√ë XA of Example 7.3.2.6 we get the psychological experiment example
(Application 7.3.1.3) completed in Example 7.3.3.4.
DeÔ¨Ånition 7.3.3.1. Let J ‚Äú pT, Œ∑, Œºq be a monad on Set. Form a new category, called
the Kleisli category for J, denoted KlspJq, with sets as objects, ObpKlspJqq :‚Äú ObpSetq,
and with
HomKlspJqpX, Y q :‚Äú HomSetpX, TpY qq
for sets X, Y . The identity morphism idX : X √ë X in KlspJq is given by Œ∑: X √ë TpXq
in Set. The composition of morphisms f : X √ë Y and g: Y √ë Z in KlspJq is given as
follows. Writing them as functions, we have f : X √ë TpY q and g: Y √ë TpZq. The Ô¨Årst
step is to apply the functor T to g, giving Tpgq: TpY q √ë TpTpZqq. Then compose with
f to get TpgqÀùf : X √ë TpTpZqq. Finally, compose with ŒºZ : TpTpZqq √ë TpZq to get the
required function X √ë TpZq:
X
f
 TY
Y
g
 TZ
X
f
 TY
T g  TTZ
ŒºZ
 TZ.
(7.13)
The associativity of this composition formula follows from the associativity law for mon-
ads.
Example 7.3.3.2. Recall the monad J for partial functions, TpXq ‚Äú X \ tu, from
Example 7.3.2.4. The Kleisli category KlspJq has sets as objects, but a morphism f : X √ë
Y means a function X √ë Y \ tu, i.e., a partial function. Given another morphism

442
CHAPTER 7. CATEGORIES AT WORK
g: Y √ë Z, the composition formula in KlspJq ensures that g Àù f : X √ë Z has the
appropriate behavior.
Note how this monad allows us to make explicit a context in which all functions are
assumed partial and then hide this context from our notation.
Remark 7.3.3.3. For any monad J ‚Äú pT, Œ∑, Œºq on Set, there is a functor i: Set √ë KlspJq,
given as follows. On objects we have ObpKlspJqq ‚Äú ObpSetq, so take i ‚Äú idObpSetq.
Given a morphism f : X √ë Y in Set, we need a morphism ipfq: X √ë Y in KlspJq, i.e.,
a function ipfq: X √ë TpY q. We assign ipfq to be the composite X
f√ù√ë Y
Œ∑√ù√ë TpY q. The
functoriality of this mapping follows from the unit law for monads.
Example 7.3.3.4. In this example we return to the setting laid out in Application 7.3.1.3,
where we had a set A of experimenters and assumed that the person doing the experiment
might aÔ¨Äect the outcome. We use the monad J ‚Äú pT, Œ∑, Œºq from Example 7.3.2.6 and
hope that KlspJq will conform to the understanding of how to manage the eÔ¨Äect of the
experimenter on data.
The objects of KlspJq are ordinary sets, but a map f : X √ë Y in KlspJq is a function
X √ë Y A. By currying, this is the same as a function X ÀÜ A √ë Y , as desired. To
compose f with g: Y √ë Z in KlspJq, we follow the formula from (7.13). It turns out to
be equivalent to the following. We have a function X ÀÜA √ë Y and a function Y ÀÜA √ë Z.
Multiplying by idA, we have a function X ÀÜ A √ë Y ÀÜ A, and we can now compose to get
X ÀÜ A √ë Z.
What does this say in terms of experimenters aÔ¨Äecting data gathering? It says that if
we work within KlspJq, then we may assume that the experimenter is being taken into
account; all proposed functions X √ë Y are actually functions A ÀÜ X √ë Y . The natural
way to compose these experiments is that we only consider the data from one experiment
to feed into another if the experimenter is the same in both experiments.11
Exercise 7.3.3.5.
Exercise 7.3.2.3 discussed the power-set monad J ‚Äú pP, Œ∑, Œºq.
a. Can you Ô¨Ånd a way to relate the morphisms in KlspJq to relations? That is, given
a morphism f : A √ë B in KlspJq, is there a natural way to associate to it a relation
R ƒé A ÀÜ B?
11This requirement is somewhat stringent, but it can be mitigated in a variety of ways. One such way
would be to model the ability to hand oÔ¨Äthe experimental results to another person, who would then
carry them forward. This could be done by deÔ¨Åning a preorder structure on A to model who can hand
oÔ¨Äto whom (see Example 7.3.3.8).

7.3. MONADS
443
b. How does the composition formula in KlspJq relate to the composition of relations
given in DeÔ¨Ånition 3.2.2.3?12
‚ô¶
Solution 7.3.3.5.
a. A morphism A √ë B in KlspJq is a function f : A √ë PpBq in Set.
From such a
function we need to obtain a binary relation, i.e., a subset R ƒé A ÀÜ B. Recall that
for any set X (e.g., X ‚Äú B or X ‚Äú A ÀÜ B), we can identify the subsets of X with the
functions X √ë Œ© ‚Äú tTrue, Falseu, using the characteristic function as in DeÔ¨Ånition
3.4.4.12. In other words, we have a bijection
PpXq ‚Äì HomSetpX, Œ©q.
By currying, we get an isomorphism
HomSetpA, PpBqq ‚Äì HomSetpA, HomSetpB, Œ©qq
‚Äì HomSetpA ÀÜ B, Œ©q ‚Äì PpA ÀÜ Bq.
In other words, we can identify the function f : A √ë PpBq with an element of PpAÀÜBq,
i.e., with a subset R ƒé A ÀÜ B, i.e., with a relation.
A more down-to-earth way to specify how f : A √ë PpBq gives rise to a binary relation
R ƒé A ÀÜ B is as follows. We ask, given pa, bq P A ÀÜ B, when is it in R? We see that
fpaq P PpBq is a subset, so the answer is that we put pa, bq P R if b P fpaq. This gives
the desired relation.
b. It is the same.
‚ô¶
Exercise 7.3.3.6.
(Challenge) Let J ‚Äú pP, Œ∑, Œºq be the power-set monad. The category KlspJq is closed
under binary products, i.e., every pair of objects A, B P ObpKlspJqq has a product
in KlspJq.
What is the product of A ‚Äú t1, 2, 3u and B ‚Äú ta, bu, and what are the
projections?
‚ô¶
12Actually, DeÔ¨Ånition 3.2.2.3 is about composing spans, but a relation R ƒé A ÀÜ B is a kind of span,
R √ë A ÀÜ B.

444
CHAPTER 7. CATEGORIES AT WORK
Solution 7.3.3.6.
The product of A and B in KlspJq is AÀÜB ‚Äú t1, 2, 3, a, bu, which coincidentally would
be their coproduct in Set. The projection maps are functions PpAq
œÄ1
√ê√ù t1, 2, 3, a, bu
œÄ2
√ù√ë
PpBq; we use the obvious maps, e.g., œÄ1p3q ‚Äú t3u and œÄ1paq ‚Äú H. The question did
not ask for the universal property, but we specify it anyway. Given f : X √ë PpAq and
g: X √ë PpBq, we take xf, gy: X √ë PpA \ Bu to be given by union.
‚ô¶
Exercise 7.3.3.7.
(Challenge.) Let J ‚Äú pP, Œ∑, Œºq be the power-set monad. The category KlspJq is closed
under binary coproducts, i.e., every pair of objects A, B P ObpKlspJqq has a coproduct
in KlspJq. What is the coproduct of A ‚Äú t1, 2, 3u and B ‚Äú ta, bu?
‚ô¶
Solution 7.3.3.7.
It is A \ B ‚Äú t1, 2, 3, a, bu, which coincidentally would be their coproduct in Set, as
in Exercise 7.3.3.6. The inclusion maps are functions A i1
√ù√ë Ppt1, 2, 3, a, buq
i2
√ê√ù B; we use
the inclusion of singleton subsets. The question did not ask for the universal property,
but we specify it anyway. Given f : A √ë PpXq and g: B √ë PpXq, we take their coproduct
A \ B √ë PpXq to be given by union.
‚ô¶
Example 7.3.3.8. Let A be any preorder. We speak of A throughout this example as
though it were the linear order given by time; however, the mathematics works for any
A P ObpPrOq.
There is a monad J ‚Äú pT, Œ∑, Œºq that captures the idea that a function f : X √ë Y
occurs in the context of time in the following sense: The output of f is determined not
only by the element x P X on which it is applied but also by the time at which it was
applied to x; and the output of f occurs at another time, which is not before the time of
input.
The functor part of the monad is given on Y P ObpSetq by
TpY q ‚Äú tp: A √ë A ÀÜ Y | if ppaq ‚Äú pa1, yq then a ƒè a1u.
The unit Œ∑Y : Y √ë TpY q sends y to the function a √û√ë pa, yq. The multiplication map
ŒºY : TpTpY qq √ë TpY q is as follows.
Suppose given p: A √ë A ÀÜ TpY q in TpTpY qq.
Then ŒºY ppq: A √ë A ÀÜ Y is given on a P A as follows. Suppose ppaq ‚Äú pa1, p1q, where
p1 : A √ë A ÀÜ Y . Then we assign ŒºY ppqpaq ‚Äú p1pa1q P A ÀÜ Y .
Given two sets X, Y , what is the meaning of a morphism X √ë Y in the Kleisli
category KlspJq, i.e., a function f : X √ë TpY q? Note that TpY q ƒé HomSetpA, A ÀÜ Y q,
and composing with f, we have a function X √ë HomSetpA, AÀÜY q, which can be curried

7.3. MONADS
445
to a function f : A ÀÜ X √ë A ÀÜ Y . So we have an isomorphism
HomKlspJqpX, Y q ‚Äì tf P HomSetpA ÀÜ X, A ÀÜ Y q | if fpa, xq ‚Äú pa1, yq then a ƒè a1u.
The right-hand set could be characterized as time-sensitive functions f : X √ë Y for which
the output arrives after the input.
Remark 7.3.3.9. One of the most important monads in computer science is the state
monad. It is used when one wants to allow a program to mutate state variables (e.g., in
the program
if x ƒè 4, then x :‚Äú x ` 1 else Print ‚Äúdone‚Äù
x is a state variable). The state monad is a special case of the monad discussed in Example
7.3.3.8. Given any set A, the usual state monad of type A is obtained by giving A the
indiscrete preorder (see Example 4.4.4.5). More explicitly, it is a monad with functor
part
X √û√ë pA ÀÜ XqA
(see Example 7.3.5.3).
Example 7.3.3.10. We reconsider Figure 1.1 reproduced as Figure 7.3.
	

	
	

	

		




	

Figure 7.3 An olog whose arrows do not denote functions. It should be interpreted using
a monad.

446
CHAPTER 7. CATEGORIES AT WORK
It looks like an olog, and all ologs are database schemas (see Section 4.5.2.15). But
how is ‚Äúanalyzed by a person yields‚Äù a function? For it to be a function, there must
be only one hypothesis corresponding to a given observation.
The very name of this
arrow belies the fact that it is an invalid aspect in the sense of Section 2.3.2.1, because
given an observation, there may be more than one hypothesis yielded, corresponding to
which person is doing the observing. In fact, all the arrows in this Ô¨Ågure correspond
to some hidden context involving people: the prediction is dependent on who analyzes
the hypothesis, the speciÔ¨Åcation of an experiment is dependent on who is motivated to
specify it, and experiments may result in diÔ¨Äerent observations by diÔ¨Äerent observers.
Without monads, the model of science proposed by this olog would be diÔ¨Écult to
believe in. But by choosing a monad we can make explicit (and then hide from discourse)
the implicit assumption that ‚Äúthis is all dependent on which human is doing the science.‚Äù
The choice of monad is an additional modeling choice. Do we want to incorporate the
partial order of time? Do we want the scientist to be modiÔ¨Åed by each function (i.e., the
person is changed when analyzing an observation to yield a hypothesis)? These are all
interesting possibilities.
One reasonable choice would be to use the state monad of type A, where A is the
set of scientiÔ¨Åc models. This implies the following context. Every morphism f : X √ë Y
in the Kleisli category of this monad is really a morphism f : X ÀÜ A √ë Y ÀÜ A; while
ostensibly giving a map from X to Y , it is inÔ¨Çuenced by the scientiÔ¨Åc model under which
it is performed, and its outcome yields a new scientiÔ¨Åc model.
Reading the olog in this context might look like this:
A hypothesis (in the presence of a scientiÔ¨Åc model) analyzed by a person
produces a prediction (in the presence of a scientiÔ¨Åc model), which motivates
the speciÔ¨Åcation of an experiment (in the presence of a scientiÔ¨Åc model), which
when executed results in an observation (in the presence of a scientiÔ¨Åc model),
which analyzed by a person yields a hypothesis (in the presence of a scientiÔ¨Åc
model).
The parenthetical statements can be removed if we assume them to be always there,
which can be done using the preceding monad.
7.3.3.11
Relaxing functionality constraint for ologs
Section 2.3.2 said that every arrow in an olog has to be English-readable as a sentence,
and it has to correspond to a function. For example, the arrow
a person
has  a child
(7.14)

7.3. MONADS
447
makes for a readable sentence, but it does not correspond to a function because a person
may have no children or more than one child. We call an olog in which every arrow
corresponds to a function (the only option proposed so far in this book) a functional olog.
Requiring that ologs be functional comes with advantages and disadvantages. The main
advantage is that creating a functional olog requires more conceptual clarity, and this
has beneÔ¨Åts for the olog creator as well as for anyone to whom he tries to explain the
situation. The main disadvantage is that creating a functional olog takes more time, and
the olog takes up more space on the page.
In the context of the power-set monad (see Exercise 7.3.2.3), a morphism f : X √ë Y
between sets X and Y , as objects in KlspPq, becomes a binary relation on X and Y rather
than a function (see Exercise 7.3.3.5). So in that context, the arrow in (7.14) becomes
valid. An olog in which arrows correspond to mere binary relations rather than functions
might be called a relational olog.
7.3.4
Monads in databases
This section discusses how to record data in the presence of a monad. The idea is quite
simple. Given a schema (category) C, an ordinary instance is a functor I : C √ë Set. But if
J ‚Äú pT, Œ∑, Œºq is a monad, then a Kleisli J-instance on C is a functor J : C √ë KlspJq. Such
a functor associates to every object c P ObpCq a set Jpcq, and to every arrow f : c √ë c1 in
C a morphism Jpfq: Jpcq √ë Jpc1q in KlspJq. How does this look in terms of tables?
Recall that to represent an ordinary database instance I : C √ë Set, we use a tabular
format in which every object c P ObpCq is displayed as a table including one ID column
and one additional column for each arrow f : c √ë c1 emanating from c. The cells in the
ID column of table c contain the elements of the set Ipcq, and the cells in the f column
contain elements of the set Ipc1q.
To represent a Kleisli database instance J : C √ë KlspJq is similar; we again use a
tabular format in which every object c P ObpCq is displayed as a table including one ID
column and one additional column for each arrow f : c √ë c1 emanating from c. The cells
in the ID column of table c again contain the elements of the set Jpcq; however the cells
in the f column do not contain elements of Jpc1q, but T-values in Jpc1q, i.e., elements of
TpJpc1qq.
Example 7.3.4.1. Let J ‚Äú pT, Œ∑, Œºq be the monad for partial functions (see Example
7.3.1.1). Given any schema C, we can represent a Kleisli J-instance I : C √ë KlspJq in
tabular format. For every object c P ObpCq we have a set Ipcq of rows, and given a column
f : c √ë c1, applying f to a row either produces a value in Ipc1q or fails to produce a value;
this is the essence of partial functions. We might denote the absence of a value using .

448
CHAPTER 7. CATEGORIES AT WORK
Consider the schema indexing graphs
C :‚Äú
Arrow
‚Äö
src 
tgt 
Vertex
‚Äö
As discussed in Section 5.2.1.21, an ordinary instance on C represents a graph:
I :‚Äú
‚Äöv
f
 ‚Äöw
h
0
g
!
‚Äöx
Arrow pIq
ID
src
tgt
f
v
w
g
w
x
h
w
x
Vertex pIq
ID
v
w
x
A Kleisli J-instance on C represents graphs in which edges can fail to have a source
vertex, fail to have a target vertex, or both:
J :‚Äú
‚Äöv
i

f
 ‚Äöw
h
0
g
!
‚Äöx
j

Arrow pJq
ID
src
tgt
f
v
w
g
w
x
h
w
x
i
v

j


Vertex pJq
ID
v
w
x
The context of these tables is that of partial functions, so we do not need a reference for
 in the vertex table. Mathematically, the morphism Jpsrcq: JpArrowq √ë JpVertexq in
KlspJq needs to be a function JpArrowq √ë JpVertexq \ tu, and it is.
7.3.4.2
Probability distributions
Let r0, 1s ƒé R denote the set of real numbers between 0 and 1. Let X be a set and
p: X √ë r0, 1s a function. We say that p is a Ô¨Ånitary probability distribution on X if there
exists a Ô¨Ånite subset W ƒé X such that
√ø
wPW
ppwq ‚Äú 1,
(7.15)

7.3. MONADS
449
and such that ppxq ƒÖ 0 if and only if x P W. Note that the subset W is unique if it exists;
we call it the support of p and denote it Suppppq.
For any set X, let DistpXq denote the set of Ô¨Ånitary probability distributions on X. It
is easy to check that given a function f : X √ë Y , one obtains a function Distpfq: DistpXq √ë
DistpY q by Distpfqpyq ‚Äú ≈ô
fpxq‚Äúy ppxq. Thus we can consider Dist: Set √ë Set as a
functor, and in fact the functor part of a monad. Its unit Œ∑: X √ë DistpXq is given by the
Kronecker delta function x √û√ë Œ¥x, where Œ¥xpxq ‚Äú 1 and Œ¥xpx1q ‚Äú 0 for x1 ‚Ä∞ x. Its multipli-
cation Œº: DistpDistpXqq √ë DistpXq is given by weighted sum: given a Ô¨Ånitary proba-
bility distribution w: DistpXq √ë r0, 1s and x P X, put Œºpwqpxq ‚Äú ≈ô
pPSupppwq wppqppxq.
Example 7.3.4.3 (Markov chains). Let Loop be the loop schema
Loop :‚Äú
s‚Äö
f
K
as in Example 4.5.2.10. A Dist-instance on Loop is equivalent to a time-homogeneous
Markov chain. To be explicit, a functor Œ¥: Loop √ë KlspDistq assigns to the unique
object s P ObpLoopq a set S ‚Äú Œ¥psq, called the state space, and to f : s √ë s a function
Œ¥pfq: S √ë DistpSq, which sends each element x P S to some probability distribution
on elements of S. For example, the left-hand table Œ¥ (having states Œ¥psq ‚Äú ta, b, c, du)
corresponds to the right-hand Markov matrix M:
Œ¥ :‚Äú
s
ID
f
a
.5(a)+.5(b)
b
1(b)
c
.7(a)+.3(c)
d
.4(a)+.3(b)+.3(d)
M :‚Äú
¬®
Àö
Àö
Àù
0.5
0.5
0
0
0
1
0
0
0.7
0
0.3
0
0.4
0.3
0
0.3
Àõ
‚Äπ‚Äπ‚Äö
(7.16)
As one might hope, for any natural number n P N, the map f n : S √ë S in KlspDistq
corresponds to the matrix M n, which sends an element s P S to its probable location
after n iterations of the transition map, f npsq P DistpSq.
Application 7.3.4.4. Every star emits a spectrum of light, which can be understood as
a distribution on the electromagnetic spectrum. Given an object B on earth, diÔ¨Äerent
parts of B will absorb radiation at diÔ¨Äerent rates. Thus B produces a function from the
electromagnetic spectrum to distributions of energy absorption. In the context of the
probability distributions monad, we can record data on the schema
star
‚Äö
emits
 wavelengths
‚Äö
absorbed by B
 energies
‚Äö

450
CHAPTER 7. CATEGORIES AT WORK
The composition formula for Kleisli categories is the desired one: to each star we associate
the weighted sum of energy absorption rates over the set of wavelengths emitted by the
star.
‚ô¶‚ô¶
7.3.5
Monads and adjunctions
There is a strong connection between monads and adjunctions: every adjunction creates
a monad, and every monad comes from an adjunction. For example, the List monad
(Example 7.3.2.2) comes from the free forgetful adjunction between sets and monoids
Set
F
Mon
U

(see Proposition 7.1.1.2). That is, for any set X, the free monoid on X is
FpXq ‚Äú pListpXq, r s, ``q,
and the underlying set of that monoid is UpFpXqq ‚Äú ListpXq. So the List functor is given
by U Àù F : Set √ë Set. But a monad is more than a functor; it includes a unit map Œ∑ and
a multiplication map Œº (see DeÔ¨Ånition 7.3.2.1). Luckily, the unit Œ∑ and multiplication Œº
drop out of the adjunction too. First, we discuss the unit and counit of an adjunction.
DeÔ¨Ånition 7.3.5.1. Let C and D be categories, and let L: C √ë D and R: D √ë C be
functors with adjunction isomorphism
Œ±c,d : HomDpLpcq, dq
‚Äì
√ù√ù√ù√ë HomCpc, Rpdqq
for any objects c P ObpCq and d P ObpDq (see DeÔ¨Ånition 7.1.1.1). The unit Œ∑: idC √ë RÀùL
(resp. the counit œµ: L Àù R √ë idD) of the adjunction is a natural transformation deÔ¨Åned
as follows.
Given an object c P ObpCq, we apply Œ± to idLpcq : Lpcq √ë Lpcq to get the c component
Œ∑c : c √ë R Àù Lpcq
of Œ∑. Similarly given an object d P ObpDq we apply Œ±¬¥1 to idRpdq : Rpdq √ë Rpdq to get
the d component
œµd : L Àù Rpdq √ë d.
One checks that these components are natural.
Later we see how to use the unit and counit of any adjunction to make a monad. We
Ô¨Årst walk through the process in Example 7.3.5.2.

7.3. MONADS
451
Example 7.3.5.2. Consider the adjunction Set
F
Mon
U

between sets and monoids. Let
T ‚Äú U Àù F : Set √ë Set; this will be the functor part of the monad, and we have seen
that T ‚Äú List. The unit of the adjunction, Œ∑: idSet √ë U Àù F is precisely the unit of the
monad: for any set X P ObpSetq the component Œ∑X : X √ë ListpXq is the function that
takes x P X to the singleton list rxs P ListpXq. The monad also has a multiplication map
ŒºX : TpTpXqq √ë TpXq, which amounts to concatenating a list of lists. This function
comes about using the counit œµ, as follows
T Àù T ‚Äú U Àù F Àù U Àù F
idU Àõ œµ Àõ idF
√ù√ù√ù√ù√ù√ù√ù√ù√ù√ù√ë U Àù F ‚Äú T.
The general procedure for extracting a monad from an adjunction is analogous to the
process shown in Example 7.3.5.2. Given any adjunction
C
L
D,
R

we deÔ¨Åne J ‚Äú R Àù L: C √ë C, we deÔ¨Åne Œ∑: idC √ë J to be the unit of the adjunction
(as in DeÔ¨Ånition 7.3.5.1), and we deÔ¨Åne Œº: J Àù J √ë J to be the natural transformation
idR Àõ œµ Àõ idL : RLRL √ë RL, obtained by applying the counit œµ: LR √ë idD.
This procedure produces monads on arbitrary categories C, whereas the deÔ¨Ånition of
monad (DeÔ¨Ånition 7.3.2.1) considers only the case C ‚Äú Set. However, DeÔ¨Ånition 7.3.2.1
can be generalized to arbitrary categories C by simply replacing every occurrence of the
string Set with the string C. Similarly, the deÔ¨Ånition of Kleisli categories (DeÔ¨Ånition
7.3.3.1) considers only the case C ‚Äú Set, but again the generalization to arbitrary cate-
gories C is straightforward.
Example 7.3.5.3. Let A P ObpSetq be a set, and recall the currying adjunction
Set
X√û√ëXÀÜA
 Set,
Y √û√ëY A

discussed brieÔ¨Çy in Example 7.1.1.8. The corresponding monad StA is typically called
the state monad of type A in programming language theory. Given a set X, we have
StApXq ‚Äú pA ÀÜ XqA.
In the Kleisli category KlspStAq a morphism from X to Y is a function of the form
X √ë pA ÀÜ Y qA, but this can be curried to a function A ÀÜ X √ë A ÀÜ Y .
As discussed in Remark 7.3.3.9, this monad is related to holding onto an internal state
variable of type A. Under the state monad StA, every morphism written X √ë Y , when
viewed as a function, takes as input not only an element of X, but also the current state
a P A, and it produces as output not only an element of Y , but also an updated state.

452
CHAPTER 7. CATEGORIES AT WORK
Computer scientists in programming language theory have found monads very useful
(Moggi [33]). In much the same way, monads on Set might be useful in databases (see
Section 7.3.4). Another, totally diÔ¨Äerent way to use monads in databases is by using a
mapping between schemas to produce in each one an internal model of the other. That is,
for any functor F : C √ë D, i.e., mapping of database schemas, the adjunction pŒ£F , ŒîF q
produces a monad on C‚ÄìSet, and the adjunction pŒîF , Œ†F q produces a monad on D‚ÄìSet.
If one interprets the List monad as producing in Set an internal model of the category
Mon of monoids, one can similarly interpret these monads on C‚ÄìSet and D‚ÄìSet as
producing internal models of each within the other.
7.4
Operads
This section brieÔ¨Çy introduces operads, which are generalizations of categories. They
often are useful for speaking about self-similarity of structure.
For example, we use
operads to model agents made up of smaller agents, or materials made up of smaller
materials. This association with self-similarity is not really inherent in the deÔ¨Ånition, but
it tends to emerge in thinking about many operads used in practice.
Let me begin with a warning.
Warning 7.4.0.4. My use of the term operad is not entirely standard and conÔ¨Çicts with
widespread usage. The more common term for what I am calling an operad is colored
operad or symmetric multicategory. An operad classically is a multicategory with one
object, and a colored operad is a multicategory with possibly many objects (one for
each ‚Äúcolor‚Äù).
The term multicategory stems from the fact that the morphisms in a
multicategory have many, rather than one, domain object. One reason I prefer not to use
the term multicategory is that there is nothing really ‚Äúmulti‚Äù about the multicategory
itself, only its morphisms. Further, I do not see enough reason to diÔ¨Äerentiate, given that
the term multicategory seems rather clunky and the term operad seems rather sleek. I
hope my break with standard terminology does not cause confusion.
This introduction to operads is quite short; see Leinster [25] for an excellent treatment.
Operads are also related to monoidal categories, a subject that is not elaborated in this
book to discuss, but which was brieÔ¨Çy mentioned when discussing topological enrichment
in Example 5.2.3.3. Many of the following operads are actually monoidal categories in
disguise.
7.4.1
DeÔ¨Ånition and classical examples
An operad is like a category in that it has objects, morphisms, and a composition formula,
and it obeys an identity law and an associativity law. The diÔ¨Äerence is that each morphism
f in an operad can have many inputs (and one output):

7.4. OPERADS
453
A 
B 
C 
S 
f 
The description of composition in an operad is a bit more complicated than for a category,
because it involves much more variable indexing; however, the idea is straightforward.
Figure ?? shows morphisms being composed. Note that S and T disappear from the
composition, but this is analogous to the way the middle object disappears from the
composition of morphisms in a category
A
f
√ù√ù√ù√ë S
g
√ù√ù√ù√ë X
the morphisms to the left compose to give
A
gÀùf
√ù√ù√ù√ù√ù√ë X
Here is the deÔ¨Ånition, taken from Spivak [41]. Skip to Example 7.4.1.3 if the deÔ¨Ånition
gets too diÔ¨Écult.
DeÔ¨Ånition 7.4.1.1. An operad O is deÔ¨Åned as follows: One announces some constituents
(A. objects, B. morphisms, C. identities, D. compositions) and shows that they conform
to some laws (1. identity law, 2. associativity law). SpeciÔ¨Åcally, one announces
A. a collection ObpOq, each element of which is called an object of O;
B. for each object y P ObpOq, Ô¨Ånite set n P ObpFinq, and n-indexed set of objects
x: n √ë ObpOq, a set Onpx; yq P ObpSetq; its elements are called morphisms
from x to y in O;
C. for every object x P ObpOq, a speciÔ¨Åed morphism, denoted idx P O1px; xq and
called the identity morphism on x.
D. Let s: m √ë n be a morphism in Fin. Let z P ObpOq be an object, let y: n √ë
ObpOq be an n-indexed set of objects, and let x: m √ë ObpOq be an m-indexed
set of objects. For each element i P n, write mi :‚Äú s¬¥1piq for the pre-image of s
under i, and write xi ‚Äú x|mi : mi √ë ObpOq for the restriction of x to mi. Then
one announces a function
Àù: Onpy; zq ÀÜ
≈∫
iPn
Omipxi; ypiqq √ù√ë Ompx; zq,
(7.17)
called the composition formula.

454
CHAPTER 7. CATEGORIES AT WORK
Given an n-indexed set of objects x: n √ë ObpOq and an object y P ObpOq, we sometimes
abuse notation and denote the set of morphisms from x to y by Opx1, . . . , xn; yq.13 We
may write HomOpx1, . . . , xn; yq, in place of Opx1, . . . , xn; yq, when convenient. We can
denote a morphism œÜ P Onpx; yq by œÜ: x √ë y or by œÜ: px1, . . . , xnq √ë y; we say that each
xi is a domain object of œÜ and that y is the codomain object of œÜ. We use inÔ¨Åx notation
for the composition formula, e.g., œà Àù pœÜ1, . . . , œÜnq.
One must then show that the following operad laws hold:
1. For every x1, . . . , xn, y P ObpOq and every morphism œÜ: px1, . . . , xnq √ë y, we
have
œÜ Àù pidx1, . . . , idxnq ‚Äú œÜ
and
idy Àù œÜ ‚Äú œÜ.
2. Let m
s√ù√ë n
t√ù√ë p be composable morphisms in Fin.
Let z P ObpOq be an
object, let y: p √ë ObpOq, x: n √ë ObpOq, and w: m √ë ObpOq respectively
be a p-indexed, n-indexed, and m-indexed set of objects. For each i P p, write
ni ‚Äú t¬¥1piq for the pre-image and xi : ni √ë ObpOq for the restriction. Similarly,
for each k P n, write mk ‚Äú s¬¥1pkq and wk : mk √ë ObpOq; for each i P p, write
mi,¬¥ ‚Äú ptÀùsq¬¥1piq and wi,¬¥ : mi,¬¥ √ë ObpOq; for each j P ni, write mi,j :‚Äú s¬¥1pjq
and wi,j : mi,j √ë ObpOq. Then the following diagram commutes:
≈õ
Oppy; zq ÀÜ ≈õ
iPp Onipxi; ypiqq ÀÜ ≈õ
iPp, jPni Omi,jpwi,j; xipjqq

d ≈õ
Onpx; zq ÀÜ ≈õ
kPn Omkpwk; xpkqq
H
≈õ
Oppy; zq ÀÜ ≈õ
iPp Omi,¬¥pwi,¬¥; ypiqq
I
Ompw; zq
Remark 7.4.1.2. This remark considers the abuse of notation in DeÔ¨Ånition 7.4.1.1 and
how it relates to an action of a symmetric group on each morphism set in the deÔ¨Ånition
of operad. We follow the notation of DeÔ¨Ånition 7.4.1.1, especially the use of subscripts
in the composition formula.
Suppose that O is an operad, z P ObpOq is an object, y: n √ë ObpOq is an n-indexed
set of objects, and œÜ: y √ë z is a morphism.
If we linearly order n, enabling us to
write œÜ: pyp1q, . . . , yp|n|qq √ë z, then changing the linear ordering amounts to Ô¨Ånding an
13There are three abuses of notation when writing Opx1, . . . , xn; yq.
First, it confuses the set n P
ObpFinq with its cardinality |n| P N.
But rather than writing Opx1, . . . , x|n|; yq, it would be more
consistent to write Opxp1q, . . . , xp|n|q; yq because we have assigned subscripts another meaning in part
D. But even this notation unfoundedly suggests that the set n has been endowed with a linear ordering,
which it has not. This may be seen as a more serious abuse, but see Remark 7.4.1.2.

7.4. OPERADS
455
isomorphism of Ô¨Ånite sets œÉ: m ‚Äì
√ù√ë n, where |m| ‚Äú |n|. Let x ‚Äú y Àù œÉ, and for each i P n,
note that mi ‚Äú œÉ¬¥1ptiuq ‚Äú tœÉ¬¥1piqu, so xi ‚Äú x|œÉ¬¥1piq ‚Äú ypiq. Taking idxi P Omipxi; ypiqq
for each i P n, and using the identity law, we Ô¨Ånd that the composition formula induces
a bijection Onpy; zq ‚Äì
√ù√ë Ompx; zq, which we might denote
œÉ: Opyp1q, yp2q, . . . , ypnq; zq ‚Äì O
`
ypœÉp1qq, ypœÉp2qq, . . . , ypœÉpnqq; z
Àò
.
(7.18)
In other words, the permutation group Autpnq acts on the set On of n-ary morphisms by
permuting the order of the domain objects ObpOqn.
Throughout this book, we allow this abuse of notation and speak of morphisms
œÜ: py1, y2, . . . , ynq √ë z for a natural number n P N, without mentioning the abuse inher-
ent in choosing an order, as long as it is clear that permuting the order of indices would
not change anything up to the canonical isomorphism of (7.18).
Example 7.4.1.3 (Little squares operad). An operad commonly used in mathematics is
called the little n-cubes operad. We will focus on n ‚Äú 2 and talk about the little squares
operad O. Here the set of objects has only one element, denoted by a square, ObpOq ‚Äú
tÀùu. For a natural number n P N, a morphism f : pÀù, Àù, . . . , Àùq √ù√ë Àù is a positioning of n
nonoverlapping squares inside of a square. Figure 7.5 shows a morphism pX1, X2, X3q √ë
Y , where X1 ‚Äú X2 ‚Äú X3 ‚Äú Y ‚Äú Àù.
The composition formula says that given a positioning of small squares inside a large
square, and given a positioning of tiny squares inside each of those small squares, we get
a positioning of tiny squares inside a large square. See Figure 7.6.
Example 7.4.1.3 exempliÔ¨Åes the kind of self-similarity mentioned on page 452.
Exercise 7.4.1.4.
Consider an operad O like the little squares operad from Example 7.4.1.3, except with
three objects: square, circle, equilateral triangle. A morphism is again a nonoverlapping
positioning of shapes inside a shape.
a. Draw an example of a morphism f from two circles and a square to a triangle.
b. Find three other morphisms that compose into f, and draw the composite.
‚ô¶

456
CHAPTER 7. CATEGORIES AT WORK
Solution 7.4.1.4.
a.
b.
(
)
, ,
‚ö¨
=
‚ô¶
Example 7.4.1.5. Let Sets denote the operad deÔ¨Åned as follows.
As objects we put
ObpSetsq ‚Äú ObpSetq. For a natural number n P N and sets X1, . . . , Xn, Y , put
HomSetspX1, . . . , Xn; Y q :‚Äú HomSetpX1 ÀÜ ¬® ¬® ¬® ÀÜ Xn, Y q.

7.4. OPERADS
457
Given functions f1 : pX1,1 ÀÜ ¬® ¬® ¬® ÀÜ X1,m1q √ë Y1 through fn : pXn,1 ÀÜ ¬® ¬® ¬® ÀÜ Xn,mnq √ë Yn
and a function Y1 ÀÜ ¬® ¬® ¬® ÀÜ Yn √ë Z, the universal property provides a unique function of
the form pX1,1 ÀÜ ¬® ¬® ¬® ÀÜ Xn,mnq √ù√ë Z, giving rise to the composition formula in Sets.
7.4.1.6
Operads: functors and algebras
If operads are like categories, then we can deÔ¨Åne things like functors and call them operad
functors.
Warning 7.4.1.7. What is called an operad functor in DeÔ¨Ånition 7.4.1.8 is usually called
an operad morphism. I think the terminology clash between morphisms of operads and
morphisms in an operad is confusing. It is similar to what would occur in regular category
theory (see Chapter 5) if we replaced the term functor with the term category morphism.
DeÔ¨Ånition 7.4.1.8. Let O and O1 be operads. An operad functor from O to O1, denoted
F : O √ë O1, is deÔ¨Åned as follows. One announces some constituents (A. on-objects part,
B. on-morphisms part) and shows that they conform to some laws (1. preservation of
identities, 2. preservation of composition). SpeciÔ¨Åcally, one announces
A. a function ObpFq: ObpOq √ë ObpO1q, sometimes denoted simply F : ObpOq √ë
ObpO1q;
B. for each object y P ObpOq, Ô¨Ånite set n P ObpFinq, and n-indexed set of objects
x: n √ë ObpOq, a function
Fn : Onpx; yq √ë O1
npFx; Fyq.
One must then show that the following operad functor laws hold:
1. For each object x P ObpOq, the equation Fpidxq ‚Äú idF x holds.
2. Let s: m √ë n be a morphism in Fin. Let z P ObpOq be an object, let y: n √ë
ObpOq be an n-indexed set of objects, and let x: m √ë ObpOq be an m-indexed
set of objects. Then, with notation as in DeÔ¨Ånition 7.4.1.1, the following diagram
of sets commutes:
Onpy; zq ÀÜ ≈õ
iPn Omipxi; ypiqq
F

Àù

O1
npFy; Fzq ÀÜ ≈õ
iPn O1
mipFxi; Fypiqq
Àù

Ompx; zq
F
 O1
mpFx; Fzq
(7.19)

458
CHAPTER 7. CATEGORIES AT WORK
We denote the category of operads and operad functors Oprd.
Exercise 7.4.1.9.
Let O denote the little squares operad from Example 7.4.1.3, and let O1 denote the
little shapes operad you constructed in Exercise 7.4.1.4.
a. Can you Ô¨Ånd an operad functor F : O √ë O1?
b. Is it possible to Ô¨Ånd an operad functor G: O1 √ë O?
‚ô¶
Solution 7.4.1.9.
a. Yes. One of the shapes in ObpO1q was a square, so we know F on objects. And a
morphism in O is a way to draw squares in a square, which is in particular, a way to
draw shapes in a shape, meaning that it can be assigned to a morphism in O1. The
composition formula works correctly, so we have deÔ¨Åned the operad functor.
b. I cannot think of one. If you think you have one, beware if you are using any kind of
resizing or scaling operation. Think about how that resizing interacts with the fact
that your functor needs to preserve identity morphisms.
‚ô¶
DeÔ¨Ånition 7.4.1.10 (Operad algebra). Let O be an operad, and let Sets be the operad
from Example 7.4.1.5. An algebra on O is an operad functor A: O √ë Sets.
Remark 7.4.1.11. Every category can be construed as an operad (there is a functor Cat √ë
Oprd), one in which every morphism is unary. That is, given a category C, one makes
an operad O with ObpOq :‚Äú ObpCq and with
HomOpx1, . . . , xn; yq ‚Äú
#
HomCpx1, yq
if n ‚Äú 1,
H
if n ‚Ä∞ 1.
Throughout the book a connection is made between database schemas and categories (see
Section 5.2.2), under which a schema C is construed as a category presentation, i.e., by
generators and relations. Similarly, it is possible to discuss operad presentations O, again
by generators and relations. Under this analogy, an instance C √ë Set of the database
(see Section 5.2.2.6) corresponds to an algebra O √ë Sets of the operad.

7.4. OPERADS
459
7.4.2
Applications of operads and their algebras
Hierarchical structures seem to be well modeled by operads. A hierarchical structure often
has basic building blocks and instructions for how they can be put together into larger
building blocks. Describing such structures using operads and their algebras allows one to
make appropriate distinctions between diÔ¨Äerent types of thinking, which may otherwise be
blurred. For example, the abstract building instructions should be encoded in the operad,
whereas the concrete building blocks should be encoded in the algebra. Morphisms of
algebras are high-level understandings of how building blocks of very diÔ¨Äerent types (such
as materials versus numbers) can occupy the same place in the structure and be compared.
We get a general Ô¨Çavor of these ideas in the following examples.
Application 7.4.2.1. Every material is composed of constituent materials, arranged in
certain patterns. (In case the material is pure, we consider the material to consist of itself
as the sole constituent.) Each of these constituent materials is itself an arrangement of
constituent materials. Thus a kind of self-similarity can be modeled with operads.
For example, a tendon is made of collagen Ô¨Åbers that are assembled in series and
then in parallel, in a speciÔ¨Åc way. Each collagen Ô¨Åber is made of collagen Ô¨Åbrils that are
again assembled in series and then in parallel, with slightly diÔ¨Äerent speciÔ¨Åcations. We
can continue, perhaps indeÔ¨Ånitely. Going a bit further, each collagen Ô¨Åbril is made up of
tropocollagen collagen molecules, which are twisted ropes of collagen molecules, and so
on.14
Here is how operads might be employed. We want the same operad to model all three
of the following: actual materials, theoretical materials, and functional properties. That
is, we want more than one algebra on the same operad.
The operad O should abstractly model the structure but not the substance being
structured. Imagine that each of the shapes, say a triangle, in Figure (7.7) is a placeholder
that indicates ‚Äúyour triangular material here.‚Äù Each morphism represents a construction
of a material out of parts.
‚ô¶‚ô¶
Application 7.4.2.2. Suppose we have chosen an operad O to model the structure of
materials. Say each object of O corresponds to a certain quality of material, and each
morphism corresponds to an arrangement of various qualities to form a new quality.
An algebra A: O √ë Sets on O requires us to choose what substances will Ô¨Åll in for
these qualities. For every object x P ObpOq, we want a set Apxq that will be the set of
materials with that quality. For every arrangement, i.e., morphism, f : px1, . . . , xnq √ë y,
and every choice a1 P Apx1q, . . . , an P Apxnq of materials, we need to understand what
14Thanks to Professor Sandra Shefelbine for explaining the hierarchical nature of collagen to me. Any
errors are my own.

460
CHAPTER 7. CATEGORIES AT WORK
material a1 ‚Äú Apfqpa1, . . . , anq P Apyq will emerge when materials a1, . . . , an are arranged
in accordance with f.
There may be more than one interesting algebra on O. Suppose that B : O √ë Sets
is an algebra of strengths rather than of materials. For each object x P ObpOq, which
represents some quality, we let Bpxq be the set of possible strengths that something of
quality x can have. Then for each arrangement, i.e., morphism, f : px1, . . . , xnq √ë y,
and every choice b1 P Bpx1q, . . . , bn P Bpxnq of strengths, we need to understand what
strength b1 ‚Äú Bpfqpb1, . . . , bnq P Bpyq will emerge when strengths b1, . . . , bn are arranged
in accordance with f.
Finally, a morphism of algebras S : A √ë B would consist of a coherent system for
assigning to each material a P ApXq of a given quality x a speciÔ¨Åc strength Spaq P BpXq,
in such a way that morphisms behave appropriately. One can use the language of operads
and algebras to state a very precise goal for the Ô¨Åeld of material mechanics.
‚ô¶‚ô¶
Exercise 7.4.2.3.
Consider again the little squares operad O from Example 7.4.1.3. Suppose we want
to use this operad to describe photographic mosaics.
a. Devise an algebra P : O √ë Sets that sends the square to the set M of all photos that
can be pasted into that square. What does P do on morphisms in O?
b. Devise an algebra C : O √ë Sets that sends each square to the set of all colors (visible
frequencies of light). In other words, CpÀùq is the set of colors, not the set of ways
to color the square. What does C do on morphisms in O. Hint: Use some kind of
averaging scheme for the morphisms.
c. Guess: If someone were to appropriately deÔ¨Åne morphisms of O-algebras (something
akin to natural transformations between functors O √ë Sets), do you think there
would be some morphism of algebras P √ë C?
‚ô¶
Solution 7.4.2.3.
a. Suppose given a morphism f : pÀù1, Àù2, . . . Àùnq √ù√ë Àù in O, i.e., an arrangement of n
little squares in a square. We need a function Ppfq: M n √ë M, i.e., for every n-tuple
pm1, . . . , mnq of mosaics, we need a new mosaic Ppfqpm1, . . . , mnq P M. One solution
would be to put the mosaics m1, . . . , mn in their respective places (as dictated by f)
and then to Ô¨Åll in the rest of the big square with white. This would indeed give an
algebra.

7.4. OPERADS
461
b. Think of the set of colors, i.e., the set CpÀùq, as the set of points in the color cube,
L ‚Äú r0, 1str,g,bu, whose coordinate axes correspond to the amounts of red, green,
and blue light that are in the color. Given an arrangement f : pÀù1, Àù2, . . . Àùnq √ù√ë Àù
of squares in the square, we need a function Cpfq: Ln √ë L, i.e., for every n-tuple
p‚Ñì1, . . . , ‚Ñìnq of color choices, we need a new color choice Cpfqp‚Ñì1, . . . , ‚Ñìnq P L.
To
produce this color, we begin by drawing the little squares inside the big one and
coloring them according to ‚Ñì1, . . . , ‚Ñìn. We then sum up the quantities of red, green,
and blue light in all of them, perhaps as some sort of integral over the outer square.
We divide this quantity by the total area of the outer square. Then Cpfqp‚Ñì1, . . . , ‚Ñìnq
assigns the outer square this color.
c. Yes, this should work by taking the average color of the mosaic.
‚ô¶
7.4.2.4
Relations and wiring diagrams
Example 7.4.2.5. Here we describe an operad of relations, denoted R. The objects are
sets, ObpRq ‚Äú ObpSetq. A morphism f : pX1, X2, . . . , Xnq √ù√ë Y in R is a relation
R ƒé X1 ÀÜ X2 ÀÜ ¬® ¬® ¬® ÀÜ Xn ÀÜ Y.
(7.20)
We use a composition formula similar to that in DeÔ¨Ånition 3.2.2.3. Namely, to compose
relations R1, . . . , Rn with S, we Ô¨Årst form a Ô¨Åber product, denoted FP:
FP


‚åü
S


Z
≈õ
iPn Ri


≈õ
iPn Yi
≈õ
iPn
≈õ
jPmi Xi,j
We have an induced function FP √ù√ë
¬¥≈õ
iPn
≈õ
jPmi Xi,j
¬Ø
ÀÜZ, and its image is the subset
we take to be the composite: S Àù pR1, . . . , Rnq ƒé
¬¥≈õ
iPn
≈õ
jPmi Xi,j
¬Ø
ÀÜ Z. This gives a
composition formula, for which the associativity and identity laws hold, so we indeed
have an operad R.
Application 7.4.2.6. Suppose we are trying to model life in the following way. We deÔ¨Åne
an entity as a set of available experiences. We also want to be able to put entities together

462
CHAPTER 7. CATEGORIES AT WORK
to form a superentity, so we have a notion of morphism f : pX1, . . . , Xnq √ù√ë Y deÔ¨Åned
as a relation, as in (7.20).
The idea is that the morphism f is a way of translating between the experiences
available to the subentities and the experiences available to the superentity. The su-
perentity Y consists of some available experiences, like ‚Äúhunger‚Äù P Y . The subentities
Xi each have their own set of available experiences, like ‚ÄúU88fh‚Äù P X2. The relation
R ƒé X1 ÀÜ . . . ÀÜ Xn ÀÜ Y provides a way to translate between them. It says that when X1
is experiencing ‚Äúacidic‚Äù and X2 is experiencing ‚ÄúU88fh,‚Äù and so on, this is the same as
Y experiencing ‚Äúhunger.‚Äù
The operad R from Example 7.4.2.5 becomes useful as a language for discussing issues
in this domain.
‚ô¶‚ô¶
Example 7.4.2.7. Let R be the operad of relations from Example 7.4.2.5, and recall that
ObpRq ‚Äú ObpSetq.
Consider the algebra S : R √ë Sets given by SpXq ‚Äú PpXq for
X P ObpRq. Given a morphism R ƒé ≈õ
i Xi ÀÜ Y and subsets X1
i ƒé Xi, we have a subset
≈õ
i X1
i ƒé ≈õ
i Xi. We take the Ô¨Åber product
FP


‚åü
R

 Y
≈õ
i X1
i
 ≈õ
i Xi
and the image of FP √ë Y is a subset of Y , as needed. We will continue with Application
7.4.2.8 using this algebra.
Application 7.4.2.8. Following Application 7.4.2.6 we can use Example 7.4.2.7 as a model
of survival.
Each entity Y survives only for a subset of the phenomena that it can
experience. Under this interpretation, the algebra from Example 7.4.2.7 deÔ¨Ånes survival
of an entity as the survival of all parts.
Suppose that we understand how the experiences of a superentity Y relate to those
of subentities X1, . . . , Xn in the sense that we have a morphism f : pX1, . . . , Xnq √ë Y
in R.
In the language of Application 7.4.2.6, we have a translation between the set
of experiences available across the sub-entities and the set of experiences available to
the superentity. Our algebra postulates that the superentity will survive exactly those
experiences for which each subentity survives.
Another way to phrase this, rather than in terms of survival, would be in terms of
allowance. A bureaucracy consists of a set of smaller bureaucracies, each of which allows
certain requests to pass; the whole bureaucracy allows a request to pass if and only if,
when the request is translated into the perspective of each subbureaucracy, it is allowed
to pass there.
‚ô¶‚ô¶

7.4. OPERADS
463
Exercise 7.4.2.9.
DeÔ¨Åne the following six sets, A ‚Äú B ‚Äú M ‚Äú C ‚Äú N ‚Äú Z ‚Äú Z, and consider them as
objects A, B, M, C, N, Z P ObpRq.
a. How would you encode the relations
ab ‚Äú m2, c2 ‚Äú n3, m ` n ‚Äú z
as a 2-ary morphism R1 : pA, Bq √ë M, a 1-ary morphism R2 : pCq √ë N, and a 2-ary
morphism S : pM, Nq √ë Z in the operad R?
b. What is the domain and codomain of the composite S Àù pR1, R2q?
c. Write the composite S Àù pR1, R2q as a relation.
‚ô¶
Solution 7.4.2.9.
a. These are the relations:
R1 ‚Äú tpa, b, mq | ab ‚Äú m2u ƒé A ÀÜ B ÀÜ M.
R2 ‚Äú tpc, nq | c2 ‚Äú n3u ƒé C ÀÜ N.
S ‚Äú tpm, n, zq | m ` n ‚Äú zu ƒé M ÀÜ N ÀÜ Z.
b. The composition is a 3-ary morphism S Àù pR1, R2q: pA, B, Cq √ë Z.
c. The composition is given by the relation
S Àù pR1, R2q ‚Äú tpa, b, c, zq ƒéA ÀÜ B ÀÜ C ÀÜ Z |
Dm P M, Dn P N such that
ab ‚Äú m2, c2 ‚Äú n3, m ` n ‚Äú zu.
‚ô¶
Example 7.4.2.10. This example discusses wiring diagrams. This operad is denoted W
(see [41]). An object of W is just a Ô¨Ånite set, ObpWq ‚Äú ObpFinq, elements of which
are called wires. A morphism in W is shown in Figure 7.8 (see page 474) and is formal-
ized as follows. Given objects C1, . . . , Cn, and D, a morphism pC1, . . . , Cnq √ë D is a

464
CHAPTER 7. CATEGORIES AT WORK
commutative diagram of sets
D
q

≈Æ
iPn Ci
p
 G
(7.21)
such that p and q are jointly surjective.
Composition of morphisms is easily understood in graphic form: Given wiring dia-
grams inside of wiring diagrams, we can throw away the intermediary circles. In terms
of sets, we Ô¨Årst take the pushout PO:
E

≈Æ
iPn Di


H

≈Æ
iPn
≈Æ
jPmi Ci,j
 ≈Æ
iPn Gi
 PO
‚åú
and then take the composition to be the image of p\iPn \jPmi Ci,jq \ E √ù√ë PO.
Exercise 7.4.2.11.
Let C1 ‚Äú ta, b, mu, C2 ‚Äú tc, nu, C3 ‚Äú tm, n, zu, let C ‚Äú C1 \ C2 \ C3, and let
D ‚Äú ta, c, zu.
a. Suppose we draw C1, C2, and C3 as follows:
b
m
a
z
m
n
n
c
Follow those examples to draw D.
b. What set G and functions C
p√ù√ë G
q√ê√ù D in (7.21) correspond to this picture?

7.4. OPERADS
465
b
m
a
z
n
c
‚ô¶
Solution 7.4.2.11.
a. We can draw D ‚Äú ta, c, zu as follows:
z
a
c
b. Here G ‚Äú ta, b, m, c, n, zu. The functions C
p√ù√ë G
q√ê√ù D are given in the following
tables:
p: C1 \ C2 \ C3 √ë G
ID
(From)
G
a
C1
a
b
C1
b
m
C1
m
c
C2
c
n
C2
n
m
C3
m
n
C3
n
z
C3
z
q: D √ë G
ID
(From)
G
a
D
a
c
D
c
z
D
z
‚ô¶

466
CHAPTER 7. CATEGORIES AT WORK
Example 7.4.2.12. Let‚Äôs continue with the operad W of wiring diagrams, and try to
form an algebra on it. Taking R to be the operad of relations as described in Example
7.4.2.5, there is an operad functor Q: W √ë R. It assigns to each C P ObpWq the set
ZC P ObpRq ‚Äú ObpSetq. To a morphism G: pC1, . . . , Cnq √ù√ë D as in (7.21) it assigns
the relation
ZG ƒé
¬®
Àù≈∫
iPn
ZCi
Àõ
‚ÄöÀÜ ZD.
The idea is that to an entity deÔ¨Åned as having a bunch of cables carrying integers, a
phenomenon is the same thing as a choice of integer on each cable. A wiring diagram
translates between phenomena experienced locally and phenomena experienced globally.
Now recall the algebra S : R √ë Set from Example 7.4.2.7. We can compose with Q
to get Q1 :‚Äú S Àù Q: W √ë Set.
Exercise 7.4.2.13.
Consider the wiring diagrams operad W from Example 7.4.2.10. Let‚Äôs continue with
Exercise 7.4.2.11 so that ‚Äúeverything,‚Äù i.e., C1, C2, C3, D, G, i, and j, are as in that exer-
cise. By Example 7.4.2.12 we have an algebra Q1 : W √ë Set.
a. What might we mean by saying that the following picture represents an element q1 P
Q1pC1q?
a‚àób = m2
b
m
a
b. Suppose we have the following elements q1 P Q1pC1q, q2 P Q1pC2q, and q3 P Q1pC3q:
a‚àób = m2
b
m
a
m+ n = z
z
m
n
c2 = n3
n
c
Given the wiring diagram G: pC1, C2, C3q √ë D pictured here,

7.4. OPERADS
467
a‚àób = m2
b
m
a
m+ n = z
z
n
c
c2 = n3
what is Gpq1, q2, q3q P Q1pDq?
‚ô¶
Solution 7.4.2.13.
a. First, what is Q1pC1q? Recall from Example 7.4.2.7 that S : R √ë Set is the algebra
of subsets. We have
Q1pC1q ‚Äú S Àù QpC1q ‚Äú SpZCq ‚Äì PpZ3q.
In other words, q1 P Q1pC1q should be a subset of Z3. The picture indicates that the
desired subset should be
q1 ‚Äú tpa, b, mq P Z3 | a Àö b ‚Äú mu.
b. Following the mathematics, we Ô¨Ånd a situation similar to that of Exercise 7.4.2.11,
and the answer is similar. Namely, Gpq1, q2, q3q is the following subset:
Gpq1, q2, q3q ‚Äú tpa, c, zq | Db, m, n such that a Àö b ‚Äú m2, m ` n ‚Äú z, c2 ‚Äú n3u.
‚ô¶
Application 7.4.2.14. In cognitive neuroscience or in industrial economics, it may be that
we want to understand the behavior of an entity such as a mind, a society, or a business
in terms of its structure. Knowing the connection pattern (connectome, supply chain) of
subentities should help us understand how big changes are generated from small ones.
‚ô¶‚ô¶

468
CHAPTER 7. CATEGORIES AT WORK
Application 7.4.2.15. In [36], Radul and Sussman discuss propagator networks. Their
implementation can presumably be understood in terms of wiring diagrams and their
algebra of relations.
‚ô¶‚ô¶

7.4. OPERADS
469
Figure 7.1 Three overlapping views of the night sky. Source: NASA, ESA, Digitized
Sky Survey Consortium.

470
CHAPTER 7. CATEGORIES AT WORK
Figure 7.2 The three overlapping views have been glued together into one coherent view.

7.4. OPERADS
471
A 
B 
C 
S 
D 
T 
f1 
f2 
g 
X 
A 
B 
C
S 
D
T
f1
f2f
g 
X
g ‚ö¨ (f1,f2) 
X 
A 
B 
C 
D 
g ‚ö¨(f1,f2f )
X 
A 
B
C
D 
X
the morphisms above compose to give 
Figure 7.4 The composition of morphisms f1 and f2 with g.

472
CHAPTER 7. CATEGORIES AT WORK
X1 
X2 
X3 
Y 
Figure 7.5 A morphism pX1, X2, X3q √ù√ë Y in an operad with only one object, Àù.
X1 
X2 
X3 
Y 
X1 
X2 
X3 
= 
X1
X3
X2
Y 
Figure 7.6 A morphism pX1, X2, X3q √ë Y
and morphisms pW1,1, W1,2q √ë X1,
pW2,1, W2,2, W2,3q √ë X2, and pW3,1q √ë X3, each of which is a positioning of squares
inside a square. The composition formula is given by scaling and positioning the squares
to give pW1,1, W1,2, W2,1, W2,2, W2,3, W3,1q √ù√ë Y.

7.4. OPERADS
473
Figure 7.7 A morphism expressing the construction of a material from smaller materials.

474
CHAPTER 7. CATEGORIES AT WORK
= 
‚Äô 
2 
3 
1 
‚Äô ‚ö¨ (1, 2, 3) 
Y2 
Y1 
Y3 
Figure 7.8 Morphisms in a wiring diagram operad W. Composition of wiring diagrams
is given by substitution.

References
[1] Abramsky, S. (2012) Relational databases and Bell‚Äôs Theorem. Available at http:
//arxiv.org/abs/1208.6416
[2] Atiyah, M. (1989) Topological quantum Ô¨Åeld theories. Publications Math¬¥ematiques de
l‚ÄôIH¬¥ES 68(1), 175‚Äì186.
[3] Axler, S. (1997) Linear Algebra Done Right. 2d ed. New York: Springer.
[4] Awodey, S. (2010) Category Theory. 2d ed. Oxford: Oxford University Press.
[5] Bralow, H. (1961) Possible principles underlying the transformation of sensory mes-
sages. In Sensory Communication, ed. W. Rosenblaith, 217‚Äì234. Cambridge, MA: MIT
Press.
[6] Baez, J.C.; Dolan, J. (1995) Higher-dimensional algebra and topological quantum
Ô¨Åeld theory. Journal of Mathematical Physics 36: 6073‚Äì6105.
[7] Baez, J.C.; Fritz, T.; Leinster, T. (2011) A characterization of entropy in terms of
information loss. Entropy 13(11): 1945‚Äì1957.
[8] Baez, J.C.; Stay, M. (2011) Physics, topology, logic and computation: a Rosetta
Stone. In New Structures for Physics, ed. B. Coecke, 95√ê172. Lecture Notes in Physics
813. Heidelberg: Springer.
[9] Brown, R.; Porter, T. (2006) Category Theory: An abstract setting for analogy and
comparison. In: What Is Category Theory? ed. G. Sica, 257‚Äì274. Advanced Studies in
Mathematics and Logic. Monza Italy: Polimetrica.
[10] Brown, R.; Porter, T. (2003) Category theory and higher dimensional algebra: po-
tential descriptive tools in neuroscience. In Proceedings of the International Conference
on Theoretical Neurobiology, vol. 1, 80‚Äì92.
475

476
REFERENCES
[11] Barr, M.; Wells, C. (1990) Category Theory for Computing Science. New York:
Prentice Hall.
[12] Biggs, N.M. (2004) Discrete Mathematics. New York: Oxford University Press.
[13] Diaconescu, R. (2008) Institution-Independent Model Theory Boston: Birkh¬®auser.
[14] D¬®oring, A.; Isham, C. J. (2008) A topos foundation for theories of physics. I. Formal
languages for physics. Journal of Mathematical Physics 49(5): 053515.
[15] Ehresmann, A.C.; Vanbremeersch, J-P. (2007) Memory Evolutive Systems: Hierar-
chy, Emergence, Cognition. Amsterdam: Elsevier.
[16] Everett III, H. (1973). The theory of the universal wave function. In The Many-
Worlds Interpretation of Quantum Mechanics, ed. B.S. DeWitt and N. Graham, 3‚Äì140.
Princeton, NJ: Princeton University Press.
[17] Goguen, J. (1992) Sheaf semantics for concurrent interacting objects Mathematical
Structures in Computer Science 2(2): 159‚Äì191.
[18] Grothendieck, A.; Raynaud, M. (1971) RevÀÜetements ¬¥etales et groupe fondamental
S¬¥eminaire de G¬¥eom¬¥etrie Alg¬¥ebrique du Bois Marie, 1960/61 (SGA 1) Lecture Notes in
Mathematics 224. In French. New York: Springer.
[19] Kr¬®omer, R. (2007) Tool and Object: A History and Philosophy of Category Theory.
Boston: Birkh¬®auser.
[20] Lambek, J. (1980) From Œª-calculus to Cartesian closed categories. In To H. B. Curry:
Essays on Combinatory Logic, Lambda Calculus and Formalism, ed. J.P. Seldin and J.
Hindley, 376‚Äì402. London: Academic Press.
[21] Khovanov, M. (2000) A categoriÔ¨Åciation of the Jones polynomial. Duke Mathematical
Journal 101(3):359‚Äì426.
[22] Landry, E.; Marquis, J.-P. (2005) Categories in contexts: Historical, foundational,
and philosophical. Philosophia Mathematica 13(1): 1‚Äì43.
[23] Lawvere, F.W. (2005) An elementary theory of the category of sets (long version)
with commentary. Reprints in Theory and Applications of Categories. no. 11, 1‚Äì35.
Expanded from Procedings of the National Academy of Sciences 1964; 52(6):1506‚Äì1511.
[24] Lawvere, F.W.; Schanuel, S.H. (2009) Conceptual Mathematics. A First Introduction
to Categories. 2d ed. Cambridge: Cambridge University Press.

REFERENCES
477
[25] Leinster, T. (2004) Higher Operads, Higher Categories. London Mathematical Soci-
ety Lecture Note Series 298. New York: Cambridge University Press.
[26] Leinster, T. (2012) Rethinking set theory. Available at http://arxiv.org/abs/1212.
6543.
[27] Linsker, R. (1988) Self-organization in a perceptual network. Computer 21(3): 105‚Äì
117.
[28] MacKay, D.J. (2003) Information Theory, Inference and Learning Algorithms. Cam-
bridge: Cambridge University Press.
[29] Mac Lane, S. (1998) Categories for the Working Mathematician. 2d ed. New York:
Springer.
[30] Marquis, J.-P. (2009) From a Geometrical Point of View: A Study in the History
and Philosophy of Category Theory. New York: Springer.
[31] Marquis, J.-P. (2013) Category theory. In Stanford Encyclopedia of Philosophy (sum-
mer ed.), ed. E.N. Zalta, Available at http://plato.stanford.edu/archives/spr2011/
entries/category-theory.
[32] Minsky, M. (1985) The Society of Mind. New York: Simon and Schuster.
[33] Moggi, E. (1991) Notions of computation and monads. Information and Computation
93(1): 52‚Äì92.
[34] nLab. http://ncatlab.org/nlab/show/HomePage.
[35] Penrose, R. (2005) The Road to Reality. New York: Knopf.
[36] Radul, A.; Sussman, G.J. (2009). The Art of the Propagator. MIT Computer Science
and ArtiÔ¨Åcial Intelligence Laboratory Technical Report.
[37] Simmons, H. (2011) An Introduction to Category Theory. New York: Cambridge
University Press.
[38] Spivak, D.I. (2012) Functorial data migration. Information and Computation 217
(August): 31‚Äì51.
[39] Spivak, D.I. (2013) Database queries and constraints via lifting problems. Mathemat-
ical structures in computer science 1‚Äì55. Available at http://arxiv.org/abs/1202.2591.
[40] Spivak, D.I. (2012) Kleisli database instances. Available at http://arxiv.org/abs/
1209.1011.

478
REFERENCES
[41] Spivak, D.I. (2013) The operad of wiring diagrams: Formalizing a graphical language
for databases, recursion, and plug-and-play circuits. Available at: http://arxiv.org/
abs/1305.0297.
[42] Spivak, D.I.; Giesa, T.; Wood, E.; Buehler, M.J. (2011) Category-theoretic analysis
of hierarchical protein materials and social networks. PLoS ONE 6(9): e23911.
[43] Spivak, D.I.; Kent, R.E. (2012) Ologs: A categorical framework for knowledge rep-
resentation. PLoS ONE 7(1): e24274.
[44] Weinberger, S. (2011) What is . . . persistent homology? Notices of the AMS 58(1):
36‚Äì39.
[45] Weinstein, A. (1996) Groupoids: Unifying internal and external symmetry. Notices
of the AMS 43(7): 744‚Äì752.
[46] Wikipedia. Accessed between December 6, 2012 and December 31, 2013.

Index
a category
Cat, 235
FLin, 210
Fin, 205, 301
FunpC, Dq, 282
Grp, 206
Grpd, 259
Grph, 211
KlspJq, 441
Mon, 205
Oprd, 458
PrO, 207
Prop, 262
Sch, 309
Set, 205
Starn, 337
Top, 256
Vect, 257, 423
Œî, 300, 362
C‚ÄìSet, 292
GrIn, 248
free arrow, 236
terminal, 238
a functor
Cat Core
√ù√ù√ù√ë Grpd, 259
Cat Hom
√ù√ù√ù√ë Set, 239
Cat Ob
√ù√ù√ë Set, 238, 283, 380
Cat √ë Grph, 236, 380
Cat √ë Oprd, 458
Cat √ë Sch, 312
FLin √ë PrO, 221
Grp √ë Cat, 242
Grp √ë Grpd, 259
Grp √ë Mon, 220, 380
Grpd √ë Cat, 259
Grph Paths
√ù√ù√ù√ë Grph, 232, 235, 279, 306
Grph √ë Cat, 235, 380
Grph √ë PrO, 224, 247
Grph √ë Set, 224, 280, 379
KlspJq √ë Set, 442
Mon Core
√ù√ù√ù√ë Grp, 380
Mon √ë Cat, 240
Mon √ë Set, 219, 375
PrO √ë Cat, 244, 246, 299, 322, 323,
331
PrO √ë Grph, 222, 246, 380
PrO √ë Set, 224, 379
PrO √ë Top, 431
Sch √ë Cat, 312
Set Disc
√ù√ù√ù√ë Cat, 237, 283, 380
Set Disc
√ù√ù√ù√ë Grph, 237
Set Ind
√ù√ù√ë Cat, 368, 380
Set List
√ù√ù√ë Set, 267
Set √ë Mon, 229, 375
Set √ë PrO, 379
Top Œ†1
√ù√ù√ë Grpd, 260
Top √ë PrOop, 256
Top √ë Set, 256
VectR √ë Grp, 257
479

480
INDEX
VectR √ë PrO, 257
VectR √ë Set, 258
VectR √ë Top, 257
Œî √ë FLin, 301
Mon Core
√ù√ù√ù√ë Grp, 243
Set Disc
√ù√ù√ù√ë Cat, 284
Set Disc
√ù√ù√ù√ë Grph, 380
Set Ind
√ù√ù√ë Grph, 380
a group
E3, 141
GL3, 141
Up1q, 143
dihedral, 141, 243
a monad
Paths, 440
exceptions, 440
List, 437
maybe, 434
partial functions, 434
a schema
Loop, 320, 449
department store, 186
indexing graphs, 294
a set
R, 11
Rƒõ0, 11
tu, 11
n, 21
N, 10
Z, 10
a symbol
pF √ì Gq, 369
ƒÉf, gƒÖ, 44
X{‚Äû, 76
rns, 165
"
f
g , 51
Fun, 282
HomSet, 16
HomC, 204
N, 10
Ob, 204
Œ©, 100
P, 96
Path, 153
R, 43
Z, 10
√º, 125
Àù, 14, 204
colim, 353
Àõ, 289
H, 10
D, 10, 383
D!, 10
@, 11, 383
idX, 18
≈ü
, 363
‚Äì, 18
≈∏, 336
lim, 347
‚åü, 56
√û√ë, 13
Cop, 361
C{X, 347
CX{, 352
``, 120
xx‚Ñìyy, 36
≈π, 338
‚Äû, 75
¬ª, 33, 298
\, 48
ÀÜ, 41
‚åú, 84
f ¬¥1, 61
:=, 11
a warning
‚Äúset‚Äù of objects in a category, 205
diÔ¨Äerent worldviews, 28

INDEX
481
misuse of the, 344
notation for composition, 33
operad functors, 457
operads vs. multicategories, 452
oversimpliÔ¨Åed science, 6
action
left, 125
of a group, 143
of a monoid, 125
orbit of, 145
right, 125
action table, 133
adjoint functors, 375
adjunct, 377
adjunction, 377
adjunction isomorphism, 377
analogy: babies and adults, 376
counit, 450
unit, 450
algebra
operad, 458
an operad
Sets, 456
little n-cubes, 455
little squares, 455
relations, 461
wiring diagrams, 463
appropriate comparison, 135, 155, 176, 204,
219
arrow, 146
Baez, John, 5
biological classiÔ¨Åcation, 178
canonical, 20
cardinality, 22
category, 204
arithmetic of, 372
as equivalent to schema, 306
cartesian closed, 264
cocomplete, 357
comma, 369
complete, 357
coslice, 352
discrete, 237, 380
equivalence of, 298
free category, 235, 424
indiscrete, 380
Kleisli, 441
non-example, 207, 208
of elements, 363
of functors, 282
opposite, 361
presentation, 252
questionable, 206
slice, 347
small, 205
underlying graph of, 235
CCCs, 264
characteristic function, 101
clunky, 47
coequalizer, 88
colimit, 352
closed under, 401
common ground, 431
commuting diagram, 23
component, 268
composition
classical order, 16, 33
diagrammatic order, 16, 33
of functions, 14
of morphisms, 204
concatenation
of lists, 120
of paths, 154
cone
left, 336
right, 338
congruence, 189

482
INDEX
on a monoid, 121
connected component, 82, 234
context, 433
coproduct
inclusion functions, 49
coproducts, 326
of sets, 48
universal property for, 50
core, 243, 259
correspondence
one-to-one, 18
coslice, 352
cospan, 330, 331, 347, 369
currying, 90
as adjunction, 380
via data migration functors, 400
data, 6
valid time, 432
data migration, 388
left pushforward Œ£, 392
pullback Œî, 389
right pushforward Œ†, 396
database
business rules, 186
category of instances on, 292
foreign key, 185
homomorphism, 297
instance, 196, 254
Kleisli, 447
primary key, 185
schema, 186, 191
tables, 184
descent data, 429
diagam
commutes, 23
diagram, 333
in Set, 23
Dolan, James, 5
dynamical system
continuous, 256
discrete, 192
Eilenberg, Samuel, 4
element, 9
represented by a function, 15
EnglishiÔ¨Åcation, 36, 38, 198, 366
entry
in list, 120
epimorphism, 403
in Set, 104
equalizer, 73, 348
equivalence relation, 75
as partition, 77
equivalence classes, 75
generated, 78
quotient by, 76
trivial, 81
exceptions, 440
exponentials
evaluation of, 93
exponentials
in Set, 91
Ô¨Åber product, 55
Ô¨Åber sum, 83
Ô¨Ånite state machine, 130, 367
FQL, 389
function, 11
bijection, 102
codomain, 11
composition, 14
domain, 11
equality of, 16
identity, 18
induced, 44
injection, 102
inverse, 18
isomorphism, 18
representing an element, 15

INDEX
483
surjection, 102
functor, 219
adjoint, 377
constant, 280, 386
contravariant, 360
covariant, 360
faithful, 304
forgetful, 221, 251
full, 304
representable, 404
representing an object, 283
functorial query language, 389
gateway, 322
generators, 120
geography, 181, 424
graph, 146
as functor, 248
bipartite, 70
chain, 150
converting to a preorder, 167
discrete, 149
free category on, 235, 424
homomorphism, 155
indiscrete, 149
paths, 153
paths-graph, 231, 441
symmetric, 249
graph homomorphism
as functor, 294
Grothendieck
construction, 363
expanding universes, 205
in history, 4
group, 141
action, 143
as category, 241
homomorphism, 146
of automorphisms, 242
groupoid, 259
fundamental, 259
of material states, 259
hierarchy, 192
hom-set, 204
homomorphism
database, 297
graph, 155
group, 146
monoid, 122, 135
iÔ¨Ä, 82
image, 14
in olog, 38
inclusion functions, 49
indexed set, 112, 113
as functor, 293
indexing category, 333
inÔ¨Åx notation, 117
information theory, 266
initial object, 340
in C‚ÄìSet, 402
instance, 196, 254
Kleisli, 447
isomorphism, 213
of sets, 18
join, 172
Joyal, Andr¬¥e, 5
Kan extension
left, 392
right, 396
Kan, Daniel, 5
Kleisli category, 441
labeled null, 394
Lambek, Joachim, 5
laws
category, 204

484
INDEX
functor, 219
monad, 436
monoid, 116
monoid action, 125
natural transformation, 268
operad, 454
operad-functor, 457
Lawvere, William, 4
leaf table, 253
limit, 347
closed under, 401
linear order
Ô¨Ånite, 165
list, 120, 437
as functor, 229
concatenation, 120
local-to-global, 4, 266
Mac Lane, Saunders, 4
Markov chain, 449
materials
force extension curves, 90
force-extension curves, 12
meet, 172
Moggi, Eugenio, 5
monad, 433, 436
formalizing context, 433
Kleisli category of, 441
on Grph, 440
on Set, 436
on arbitrary category, 451
monoid, 116
action, 125
additive natural numbers, 117
as category, 239
commutative, 118
cyclic, 124
free, 120, 229
generators, 120
homomorphism, 135
initial, 341
inverse of an element in, 141
multiplication formula, 116
of endomorphisms, 242
olog of, 130
presented, 122
terminal, 341
trivial, 119
trivial homomorphism, 136
unit element of, 116
monomorphism, 403
in Set, 104
morphism, 204
inverse, 213
multicategory, 452
multiset, 108
natural isomorphism, 286
natural transformation, 268
as functor, 350
as reÔ¨Ånement of model, 276
for adding functionality, 288
horizontal composition of, 290
interchange, 290
questionable, 269
vertical composition of, 282
whiskering of, 289
object
represented by a functor, 283
olog, 24
as database schema, 194
aspects, 27
facts, 32
facts in English, 36
images, 38
invalid aspects, 27
path in, 32
relational, 447
rules, 26, 32, 191

INDEX
485
sheaf of, 430
types, 25
underlying graph, 147
one-to-one correspondence, 18
open cover, 427
operad
algebra of, 458
colored, 452
morphism of, 457
orbit, 145
rotating earth, 144
order, 163
linear order, 163
morphism, 176
opposite, 175
partial order, 163
preorder, 163
tree, 174
partial function, 434
partial functions, 434
path, 153
PED, 189
permutation, 142
power-set, 96
as poset, 168
preimage, 61, 383
preorder
as category, 244
clique in, 169
converting to graph, 166
discrete, 177
generated, 169
indiscrete, 177
join, 172
meet, 172
presheaf, 425
product
as grid, 42
projection functions, 42
products, 316, 321, 345
as not always existing, 323
of sets, 41
universal property for, 44
projection functions, 42
pullback, 347
of sets, 55
pushout, 353
of topological spaces, 358
RDF, 363
as category of elements, 365
relation
binary, 158
equivalence, 75
graph of, 160
relative set, 111
as slice category, 351
representable functor, 404
representation theory, 423
representative
of an equivalence class, 76
restriction of scalars, 139
retraction, 90
RNA transcription, 19
schema, 191
as category presentation, 251, 252
as equivalent to category, 306
as syntax, 251
congruence, 189
fact table, 390
leaf table, 186, 390
morphism, 308
of a database, 186
Path equivalence declaration (PED), 189
schematically implied reference spread, 405
security, 180
set, 9
arithmetic of, 94

486
INDEX
Lawvere is description of, 264
numeral, 21
permutation of, 142
set builder notation, 10
sheaf
condition, 428
descent data, 429
sheaves, 425
simplex, 97
simplicial complex, 97, 431
simplicial set, 362
Skolem, 405
Skolem variable, 394
slice, 347
space, 181, 255
topological, 255
space group, 142
span, 67
composite, 68
stereotype, 28
subcategory
full, 209, 368
subobject classiÔ¨Åer
in C‚ÄìSet, 414
in Set, 100
subset, 10
as function, 13
characteristic function of, 101
complement, 101
subway, 359
symmetry, 141
terminal object, 340
in C‚ÄìSet, 402
in Set, 74
topological space, 256
topology, 255
topos, 414
tree, 174
root, 174
trivial homomorphism
of monoids, 136
universal property, 322
products, 44
pullback, 347
vector Ô¨Åeld, 212, 260
conservative, 261
vector space, 257, 423
vertex, 146
wiring diagram, 463
Yoneda‚Äôs lemma, 409

