7
Program semantics and inﬁnite regular terms
Bruno Courcelle
Institut Universitaire de France
Universit´e Bordeaux 1,
Laboratoire Bordelais de Recherche en Informatique
Abstract
The communication by Gilles Kahn, Jean Vuillemin and myself
at the second International Colloquium on Automata, Languages
and Programming, held in Saarbr¨ucken in 1974 is in French in the
proceedings, and has not been published as a journal article. However,
Todd Veldhuizen wrote in 2002 an English translation that is reproduced
in the next chapter.
`A propos Chapter 8
It was quite a surprise for me to receive a message from Todd Veldhuizen
saying that he had translated from French a 30-year-old conference
paper presented at the second International Colloquium on Automata,
Languages and Programming, held in Saarbr¨ucken in 1974, of which I
am coauthor with G. Kahn and J. Vuillemin. He did that work because
he felt the paper was “seminal”. First of all I would like to thank him for
this work. The publication of his translation in a volume dedicated to the
memory of Gilles Kahn is a testimony of the gratitude of Jean Vuillemin
and myself to him, and the recognition of an important scientiﬁc contri-
bution of Gilles among many others.
In this overview, I indicate a few research directions that can be traced
back to that communication. I give only a few related references, this
overview is not a thorough bibliographical review of related articles.
In the late 1960s, D. Scott constructed the ﬁrst model of lambda-
calculus, and his construction has been a corner stone for the theory
of semantic domains and for denotational semantics [10,12]. Formal
semantics of programming languages was beginning during these years.
From Semantics to Computer Science Essays in Honour of Gilles Kahn,
eds Yves
Bertot, G´erard Huet, Jean-Jacques L´evy and Gordon Plotkin. Published by Cambridge
University Press.
c
⃝Cambridge University Press 2009.
165
https://doi.org/10.1017/CBO9780511770524.008 Published online by Cambridge University Press

166
B. Courcelle
In the early 1970s, this formalization was also considered in a diﬀerent,
more syntactic perspective in the research group lead by Maurice Nivat
at INRIA (INRIA, Institut National de Recherche en Informatique et
Automatique, was called Laboria in 1974) and at Paris 7 University. This
group has developed a theory of program schemes with uninterpreted
conditional operators, handling them as basic functions rather than as
control structures, which was the usual approach at that time. One
obtains in this way a smoother algebraic treatment and more decidability
results (although most problems are undecidable, and the decidable
ones are actually intractable). This theory is exposed in the book by I.
Guessarian [9], and in a chapter of the Handbook of Theoretical Computer
Science [6].
This approach uses in a fundamental way inﬁnite terms(comparable to
formal power series) as syntactic objects representing the behaviours of
program schemes under all interpretations. (Such terms are traditionally
called “trees”, in particular in my works, but this terminology is
actually inadequate, because trees are diﬀerent objects in graph theory.)
The ICALP communication deals with regular terms, i.e. with inﬁnite
terms described as unique solutions of certain ﬁnite equation systems.
Other, less abstract, recursive program schemes correspond to more
complex inﬁnite terms (called algebraic trees). These terms are related
to deterministic context-free languages like regular terms are to regular
languages. Regular and algebraic “trees” are surveyed in [4].
Another feature of the ICALP communication, which was developed
later, is the focus on systems of equations and their least ﬁxed points.
In this way, program schemes get closer to denotational semantics than
to operational semantics. This is coherent with the use of uninterpreted
conditional operators. However, term rewriting systems are still useful
for proving properties of program schemes depending on equational
axioms satisﬁed by the base functions. The term “algebraic semantics”
referring to this approach was in current use in the late 1970s. See [6,9].
Program
transformations
by
“folding
and
unfolding”
recursive
deﬁnitions have raised a lot of interest. The characterization of equiva-
lences of programs in terms of formal proof systems has certainly
beneﬁted from these developments. Recursive program schemes and
grammars of various types are treated in a uniform way in my survey
[5]. The existence of a formal system able to express the equivalence of
recursive program schemes is the central fact proved by G. S´enizergues
from which follows the decidability of the equivalence problem for
deterministic pushdown automata [14,15]. (Deciding equality of inﬁnite
https://doi.org/10.1017/CBO9780511770524.008 Published online by Cambridge University Press

Program semantics and inﬁnite regular trees
167
terms is also relevant in the study of recursive data types [1]). A system
for proving the equivalence of monadic recursion schemes linked with
simple deterministic languages was proposed shortly after ICALP’74
by J. Vuillemin and myself [8]. On the other hand, I. Walukiewicz has
proved in [16] the completeness of a formal proof system for the µ-
calculus, a language based on least and greatest ﬁxed-points of systems
of equations.
Regular inﬁnite terms arise in a natural way as most general ﬁrst-order
uniﬁers of regular inﬁnite terms, but also of ﬁnite ones. This extension of
the results of the ICALP’74 communication has been studied by G. Huet
and G. Kahn (but their projected article has never been completed1)
and included in G. Huet’s doctoral dissertation [11]. A detailed account
is given in my survey [4], and the idea of using regular inﬁnite terms as
most general uniﬁers has been used by A. Colmerauer in some version of
PROLOG [3]. Regular inﬁnite terms also arise in the decidability proof
of monadic second-order logic on the inﬁnite complete binary tree given
by M. Rabin [13], also in the late 1960s. They form the ground level of
a hierarchy of inﬁnite graphs having a decidable monadic second-order
theory deﬁned by D. Caucal [2], and the base of a deﬁnition of certain
higher-order recursion schemes by T. Knapik and myself [7].
References
[1] F. Cardone and M. Coppo, Decidability properties of recursive types. ICTCS 2003,
Bertinoro, Italy, Lecture Notes in Computer Science 2841, pp. 242–255, Springer-
Verlag, 2003.
[2] D. Caucal, On inﬁnite terms having a decidable monadic theory. MFCS 2002,
Lecture Notes in Computer Science 2420, pp. 165-176, Springer-Verlag, 2002.
[3] A. Colmerauer, Prolog and inﬁnite trees, logic programming, In: W. Clark and
S.Tarnlund (eds.), pp. 153–172. Academic Press, 1982.
[4] B. Courcelle, Fundamental properties of inﬁnite trees, Theoretical Computer
Science, 25:95–169, 1983.
[5] B. Courcelle, Equivalences and transformations of regular systems. Applications to
recursive program schemes and grammars. Theoretical Computer Science, 42:1–122,
1986.
[6] B. Courcelle, Recursive applicative program schemes. In: J. Van Leeuwen (ed.),
Handbook of Theoretical Computer Science, Volume B, pp. 459–492. Elsevier, 1990.
[7] B. Courcelle and T. Knapik, The evaluation of ﬁrst-order substitution is monadic
second-order compatible. Theoretical Computer Science, 281:177–206, 2002.
[8] B. Courcelle and J. Vuillemin, Completeness results for the equivalence of recursive
schemas. Journal of Computing Systems Science, 12:179–197, 1976.
[9] I. Guessarian, Algebraic Semantics, Lecture Notes in Computer Science 99,
Springer Verlag, 1981.
1 G. Huet, private communication.
https://doi.org/10.1017/CBO9780511770524.008 Published online by Cambridge University Press

168
B. Courcelle
[10] C. Gunter and D. Scott, Semantic domains. In: J. Van Leeuwen (ed.), Handbook
of Theoretical Computer Science, Volume B, pp. 633–674. Elsevier, 1990.
[11] G. Huet, R´esolution d’´equations dans des langages d’ordre 1, 2, . . . , ω. Doctoral
dissertation, Universit´e Paris 7, 1976.
[12] P. Mosses, Denotational semantics. In: J. Van Leeuwen (ed.), Handbook of
Theoretical Computer Science, Volume B, pp. 575–632. Elsevier, 1990.
[13] M. Rabin, Decidability of second-order theories and automata on inﬁnite trees,
Transactions of the American Mathematical Society, 141:1–35, 1969.
[14] G. S´enizergues, Complete formal systems for equivalence problems, Theoretical
Computer Science, 231:309–334, 1999.
[15] G. S´enizergues, L(A) = L(B) ?, Theoretical Computer Science, 251:1–166, 2001.
[16] I. Walukiewicz, Completeness of Kozen’s axiomatization of propositional µ-
calculus, Information and Computation, 157:142–182, 2000.
https://doi.org/10.1017/CBO9780511770524.008 Published online by Cambridge University Press

