FORTH
FOR
THE
COMPLETE
IDIOT
(
FORTH-79 HANDY REFERENCE
Stack Inputs and outputs are shown; top of stack on right. See operand key at bottom.
True If ni less than n2.
less-then
True If top two numbers are equal
equals
True if ni greater than n2. “greater-ttien
True if top number negative. “zero-less”
True if top number zero. (Equivalent to NOT) “Zero-eQUals”
True if top number greater then zero. ‘zero-greater
True If dl less than . d-less-than”
Compare top Iwo Items as unsigned Integers. “u-less-than”
Reverse truth value. (Equivalent to 0)
Add. “plus”
Add double-precision numbers. d-plu$
Subtract (ni —n2). ‘minus”
Add 1 to top number. one-plus”
Subtract 1 from top number.
one-mInuW
Add 2 to top number. ‘two-plus”
Subtract 2 from top number. “two-minus”
Multiply. “times”
Divide (nh/n2). (Quotient rounded toward zero) ‘dMde”
Modulo (La., remainder from dMSIOn nl/n2). Remainder has same sign as ft. “mod”
Divide, giving remainder and quotient “divide-mod”
Multiply, then divide (nI’n2/n3), with double-precision intermediate. “times-divide-mod”
Like /MOD • but give quotient only, rounded toward zero. “times-divide”
Multiply unsigned numbers, leaving unsigned double-precision result “u-times”
Divide double number by single, giving remainder and quotient all unsigned. “u-divide-mod”
Leave greater of two numbers. ‘max”
Leave lesser of two numbers. “min”
Absolute value, “absolute”
Leave two’s complement
Leave twos compliment of double-precision number. “d-negate”
Bltwlse logical AND.
Bitwise logical OR
Bltwlse logical exclusive-OR. “x-or’
Loop back to BEGIN until true at UNTiL.
LOOP while true at WHILE; REPEAT loops unconditionallyto BEGIN. When false, continue after
REPEAT.
Terminate execution of colon definition. (May not be used within DO.., LOOP)
Execute dictionary entry at compilation address on stack (a.p., address returned by FIND).
Duplicate top of stack.
Discard tap of stack.
Exchange top two stack items.
Make copy of second Item on top.
Rotate third item to top. “rote”
Copy ni-tb item to top. (Thus
1 PICK
DUP .2 PICK
OVER)
Rotate n-th Item to top. (Thus 2 ROLL
SWAP .3 ROLL
ROT)
Duplicate only It non-zero. “query-dup
Move top item to ‘return stack” for temporary storage (use caution). “to-f”
Retrieve item from return stack. “r-from
Copy top of return stack onto stack. “r-fetch
Count number of items on stack.
STACK MANIPULATION
DUP
n—nn)
DROP
n—)
SWAP
nln2—n2nl)
OVER
nln2—nln2nl)
ROT
nln2n3—n2n3nl)
PICK
ni—n2)
ROLL
n—)
?DUP
n—n(n))
>R
n—)
-.n)
—n)
DEPTH
— n)
COMPARISON
(nin2—flag)
—
(nln2—fiag)
>
(nln2—flag)
0<
(n—flag)
(n—flag)
0>
(n—flag)
0<
(dl—fIag)
(unlun2—flag)
NOT
(flag—-iflag)
ARITHMETIC AND LOGICAL
+
(nin2—-euni)
0+
(dld2-.sum)
—
(nln2—dlff)
1+
(n—n+1)
1—
(n—n—)
2+
(n—n+2)
2—
(n—n—2)
•
(nlri2—prod)
I
(nln2—quot)
MOO
(nln2—rern)
IMOD
(nin2—,emquot)
‘/MOD
(nln2nS—remquot)
“I
(nln2n3—quot)
(unlun2-ud)
WMOD
(udun—uremuquot)
MAX
(nln2—max)
MIN
(nln2—min)
ABS
(n—mi)
NEGATE
(n— —n)
DNEGATE
(d——d)
AND
(nin2—and)
OR
(nln2—oq)
XOR
(nln2—xor)
MEMORY
CI
+1
MOVE
MOVE
FILL
CONTROL
DO...LOOP
.3
LEAVE
DO...+LOOP
IF,. .(true). - .THEN
IF.. . (true) . . . ELSE
- - (false)
. .THEN
BEGIN - - - UNTIL
BEGIN . -. WHILE
-. REPEAT
( addr — n)
Replace address by number at address. “IetcW
(naddr— )
Storenataddr.”store
( addr — byte)
Fetch least significant byte only. “c-tetcW
( n addr —)
Store least signflcant byte only. “c-store”
( addr — )
Display number at address. “puestlon-maIIc
( n addr — )
Add n to number at addr. ‘plus-store”
( addrl sddf2 n — )
Move n numbers starting at addrl to memory starting at addf2, if n>0.
( addrl addr2 n —)
Move n bytes starting at addrl to memory starting at addi2. It n)O. “c-move”
( addr n byte —)
Pill n bytes in memory with byte beginning at ad&, If n>0,
STRUCTURES
do: ( end+1 start —)
Set up loop, given index range.
( — index)
Place current loop index on data stack.
( — Index)
Return Index of next outer loop in same definItion.
( — )
Terminate loop at next LOOP or +LOOP , by setting limit equal to Index.
do: ( limit start — )
Like DO... LOOP, but adds stack value (instead of always 1) to Index- Loop terminates when
-Hoop: ( n —)
Index Is greater than or equal to limit (n>0), or when Index Is less than limit (n<0). “plus-loop”
lt(flag—)
lttopofstacktnje,execute.
Ii: ( flag —)
Same, but it false, execute ELSE clause.
imfl(ftag-)
while: (flag —
(_)
(addi’—)
-w
,. ni, . . - 10-bit signed numbers
d, di.... 32-bit signed numbers
addr, addrl,... addresses
u
unsigned
byte
B-bit byte
char
7-bit ascii character value
flag
boolean flag

FORTI-;
FOR
THE
COMPLETE
IDICT
TERMINAL INPUT-OUTPUT
CR
EMrr
SPACE
SPACES
TYPE
COUNT
—TRAILING
KEY
EXPECT
QUERY
WORD
NUMERIC
BASE
DECIMAL
U.
CONVERT
.5
HOLD
SIGN
COMPILER
ALLOT
w4MEDIATE
UTERAL
STATE
hOUFILE
(COMPtLE
tERE
PAD
>lN
ABORT
ourr
79-STANDARD
n— )
adOrn—
addr — addr+l n)
addr ni
— adOr n2)
-char)
adn-)
cbs
— addr)
CONVERSION
(-addr)
(—)
(n—
(wi-)
(dl addrl
(—
)
(udi -ud2)
(ud —00)
(c-)
(n— )
(0 — adOrn)
(-addr)
(
—addr)
(—)
(—)
( —addr)
( —addr)
(—)
(n— )
(n— )
C—)
(—)
(n— )
C-—)
(—)
(—)
(—)
C—)
(—)
(-addr)
(-.addr)
(-sOOt)
C-—)
(—)
C—)
C—)
Do a carriage return and hr,e teed
c-r
Type ascii value from stack.
Type one apace.
Type n spaces, If n>O.
Type string of n characters begirmirig at addr. If n>0.
Change address of string (prefixed by length byte at addr) to TYPE form.
Reduce character count of string at addr to omit trailing blanks. dash-traiIing’
Read key end leave ascn value on stack.
Read n cfleracters (or until carnage return) from terminal to address, with null(s) at
red.
Read line of up to 60 characters from terminal to input butter.
Read next word from input stream using char as delimiter, ortmtd mill. Leave addief length byte.
System variable containing radix for numeric conversion.
Set decimal number base.
Print number with one trailing blank and sign if negative. dor
Print top of stack as unsigned number with one trailing blank. ‘u-dor
—
addr2 ) Convert String ataddrl +1 todoublenurnber. Addtodl leaving awn 02 and add
tnon-digit.
Start numeric output string conversion. i.ss-sharp
Convert next digit of unsigned double number and add character to output string. ‘sherp
Convert all significant digits of unsigned do*.lole number to output string. stiwp-s
Add ascii char to output string
Add minus sign to output string If ricO.
top d and terminate numeric output string, leaving addr and count for TYPE. ‘shwp-grester
MASS STORAGE INPUT/OUTPUT
UST
(n—)
LOAD
(it—
SCR
( —addr)
BLOCK
(n—addx)
UPDATE
( —
BUFFER
(n—sddr)
SAVE-BUFFERS
(
—
EMPTY-BUFFERS
(-)
DEFINING WORDS
:xxx
C-’)
C—)
VARIABLE xxx
( —
xx( -addr)
CONSTANT xxx
(n —
xxx ( — it)
VOCABULARY xxx
( —
CREATE... DOES> does: ( — addr)
VOCABULARIES
CONTEXT
CURRENT
FORTH
DEFINITIONS
FIND
FORGET xxx
List screen n and set SCR to contain it.
interpret screen n, then resume interpretation of the current input stream.
System variable containing screen number most recently listed.
Leave memory address of block, reading from mass storage If necessary.
Mark last block referenced as modified.
add of a free buffer, as
adtoblock n wittepreviousc 4.ntstomassetoragelt UPDATEd.
Write alt UPDATEd blocks to mass storage.
Mark all block buffers as empty, without writing UPDATEd blocks to mass storage.
Begin colon definition of xxx . colon
d colon dflnificn, semcolon
Cleats a two-byte variable named xxx mturns address when executed.
Create a constant named xxx with value n returns value when executed.
Create a vocabulary named xxx; bec;omes CONT vocabulary when executed.
Used to create a new defining word, with execution-time routine In high-level FOR1K ‘does
System variable pointIng to vocabulary where word names we searched for.
System variable pointing to vocabulary where new definitions are put
Mainvocabulary, contained in allothervocabularlee. Execution of FORThsetscontextvocabulaiy.
Sets CURRENT vocabulary to CONTEXT.
Find address of xxx in dictlonary
If used in definition, compile address. tick’
Leavecon 3aliri address of next wordinirElutstream. itnolloundin CONTEXT orFORTH, leaveD.
Forget all definitions back to and including xxx • which must be in CURRENT or FORTH.
Compile a number Into the dictionary. ‘cornma
Add two bytes to the parameter field of the most recently-defined word.
Print message (terminated by
‘). If used in definition, print when executed. “dot-ouote
Mark lastdeflned word to be executed when encountered ins definition, rather than compiled.
if compiling, save n in dictionary, to be returned to stack when definition is executed.
System variable whose value Is non-zero when compilation is aceraring.
Stop compiling input text and begin executing. ‘Ieft”bracket
Slop executing input text and begin compiling. “flght-bracker
Compile the address of the next non-IMMEDIATE word Into the dictionary.
Compile the Iottng word, even If IMMEDIATE. braeket-ccaiplle
Begin comment, terminated by) on same line or screen; apace after ( . paren, do.e-parn’
Leave address of next available dictionary location.
Leave address of a scratch area of at least 64 bytes.
System variable containing character offset into input buffec used. e.g., by WORD. “ton
S stemvariable containingblock number currentty being interpreted, cr0 if tromtwminaL “b-Hi
Clear data and return stacks, set execution mode, return control to terminal.
u ABORT ,
xcept does not Clear data staci or print any message.
VerIfy that system conforms toFORTH-79.Staridd.
MISCELLANEOUS

