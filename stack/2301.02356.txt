Graphical quantum Cliﬀord-encoder compilers from the ZX calculus
Andrey Boris Khesin,1, ∗Jonathan Z. Lu,2, † and Peter W. Shor1, ‡
1Department of Mathematics, Massachusetts Institute of Technology, Cambridge, MA
2Department of Physics, Harvard University, Cambridge, MA
(Dated: January 9, 2023)
We present a quantum compilation algorithm that maps Cliﬀord encoders, an equivalence class of
quantum circuits that arise universally in quantum error correction, into a representation in the ZX
calculus. In particular, we develop a canonical form in the ZX calculus and prove canonicity as well
as eﬃcient reducibility of any Cliﬀord encoder into the canonical form. The diagrams produced by
our compiler explicitly visualize information propagation and entanglement structure of the encoder,
revealing properties that may be obscured in the circuit or stabilizer-tableau representation.
Quantum algorithms have been shown to solve a
broad range of computational problems ranging from
search to physical simulation [1–8]. Recent progress
in the experimental realization of scalable quantum
computers have further generated excitement about
the potential of quantum algorithms in practice [9–
13]. Often, however, a quantum algorithm may not
be in a representation that is most conducive to how
one wants to study it. For example, an algorithm
may be expressed in terms of higher-level unitary
operations (e.g. a quantum Fourier transform oper-
ator, continuous rotation gates, etc.), while an actual
quantum computer can only implement a ﬁnite (al-
beit hopefully universal) set of gates. This is akin to
the classical motivation for compilers, which map
high-level programming languages in which algo-
rithms are expressed into a universal set of boolean-
circuit gates.
A similar compiler can be devised
for the quantum realm, using the famous Solovay-
Kitaev theorem which has been recently been im-
proved to rely on fewer assumptions about the ﬁnite
gate set itself [14]. Beyond this fundamental result,
there has been a recent ﬂurry of results related to
quantum compilation from high-level operations to
a ﬁnite gate set [15–19]. The choice of ﬁnite gate
set is typically chosen to be Cliﬀord (Hadamard,
phase, and controlled-NOT gates) set plus the T
gate, where T = |0⟩⟨0| + eiπ/4 |1⟩⟨1|, which is uni-
versal [8, 19].
Yet the idea of compilation can extend far be-
yond the realm of high-to-low-level transformations
of quantum gates; any undesirable property of an al-
gorithm’s representation can motivate the construc-
tion of a compiler that maps the algorithm into a
more useful representation for the task at hand. We
are speciﬁcally motivated by the fact that the circuit
representation of quantum operations can often blur
the structure of the output’s entanglement structure
(in the intuitive sense of understanding how the cir-
cuit entangles the input qubits just by looking at it).
The circuit diagram may also obscure the structure
of information propagation, i.e. which qubits aﬀect
the values of which other qubits.
In this letter,
we take a ﬁrst step towards
a compiler that resolves such issues by produc-
ing a representation that explicitly illustrates in-
formation propagation and entanglement struc-
ture.
Speciﬁcally, we consider a restricted set of
quantum operations—Cliﬀord operations—and map
them into visual graph diagrams that we design to
have the above properties. Although Cliﬀord opera-
tions are not universal, they are used widely in stud-
ies of fault-tolerant quantum computation [8, 20]
and quantum coding theory [8, 21–25].
Building Blocks — Our main tool is the ZX-
calculus, a graphical language for vectors that has
become of great interest in quantum information re-
search [26–30]. The ZX-calculus produces visual di-
agrams that represent quantum states, circuits, and
more. As with any formal logical system, the ZX
calculus has a set of rules which may be iteratively
applied to transform diagrams into equivalent dia-
grams. These rules are representations of identities
in quantum circuits. The ZX-calculus has become
of more interest than ever in fault-tolerant quan-
tum computation and quantum compiler theory be-
cause it can explicitly visualize properties of circuits
and entanglement in an intuitive manner.
It has
recently been applied to a host of quantum compu-
tation problems, including lattice surgery [31] and
quantum optimization [32].
Importantly, the ZX-
calculus is, for stabilizer tableaus, complete (equal-
ities of tableaus can be derived from corresponding
ZX diagrams), sound (vice versa), and universal (ev-
ery quantum operation can be expressed in the ZX-
calculus) [26, 33].
Consequently, there is great potential for the ZX-
calculus to be not simply a tool for quantum com-
piler theory, but a quantum representation itself to
which circuits and, in the stabilizer formalism of
quantum error correction, stabilizer tableaus, can
be compiled.
A requirement for any well-deﬁned
arXiv:2301.02356v1  [quant-ph]  6 Jan 2023

2
compiler whose output is a ZX-calculus diagram is
uniqueness—any two equivalent input representa-
tions must map to the same ZX-calculus diagram.
Such a diagram is known as a ZX canonical form
(ZXCF). Much room for exploration remains for the
construction of such forms. Recently, Hu and Khesin
[34] investigated the idea of ZXCFs on states, and
showed the following.
Theorem A (Hu and Khesin [34]). There exists a
ZXCF for stabilizer quantum states, which we call
HK form.
Their analysis motivates our construction of a
ZXCF for quantum circuits (though we restrict our-
selves to Cliﬀord circuits). More precisely, we com-
pile Cliﬀord encoders, which are equivalence classes
of circuits.
Deﬁnition B. Two circuits are equivalent Cliﬀord
encoders if they have the same image over all possi-
ble input states. That is, two circuits C1 and C2 are
equivalent encoders if there exists a unitary U such
that C1 = C2U or C2 = C1U.
An
encoder
can
always
be—and
is
most
naturally—represented by a Cliﬀord circuit (as op-
posed to a non-Cliﬀord circuit). Encoders moreover
have the same expressive power as incomplete stabi-
lizer tableaus—stabilizer matrices of size (n−k)×n
that do not fully specify a state. Incomplete stabi-
lizer tableaus are the crux of the Gottesman-Knill
theorem, which proves the eﬃcient classical simu-
latability of Cliﬀord circuits [35] and are also used
to specify encodings (hence the name Cliﬀord en-
coders) of the logical qubits in quantum error cor-
rection. In fact, incomplete stabilizer tableaus are
themselves Cliﬀord encoders, and are used widely in
error-correcting protocols [24, 25, 36]. As such, we
will consider these tableaus to be a possible form of
the compiler input, in addition to encoders repre-
sented as a Cliﬀord circuit.
We will ﬁrst construct a ZXCF that illustrates in-
formation propagation and entanglement. We will
then describe the full compilation algorithm and
show that it is eﬃcient. Lastly, we show that the
compiler map is well-deﬁned by proving the canon-
icity of the ZXCF.
Canonical Form Construction — We follow the
standard notation of ZX-calculus graph diagram-
matics, speciﬁed in Backens [33]; we refer the reader
there for the basics of the ZX calculus and trans-
formation rules. Green nodes are associated with Z
operators, and red with X. Each node may be as-
sociated with a local Cliﬀord operator (which may
be expressed as a phase which is a multiple of π/2),
and each edge may have a Hadamard gate on it. We
color an edge blue if it has a Hadamard gate on it
(some notations draw a box on the edge instead).
The circuit takes n −k input qubits to n output
qubits, for k ≥0. We deﬁne our ZXCF in this paper
to be in encoder-respecting form if the diagram is
structured as follows.
Deﬁnition C. An encoder-respecting form D has
only green nodes, and is structured as a semi-
bipartite graph (input-associated nodes and output-
associated nodes). The input cluster I has n −k
nodes associated with the n −k input qubits of the
corresponding encoder, and the output cluster O has
n nodes. Each input node has a free (not connected
to any other nodes) edge—the input edge. Similarly,
each output node has a free output edge. The out-
put nodes are numbered from 1 to n—in order from
left to right on an incomplete stabilizer tableau or
top to bottom on Cliﬀord circuit output wires. For
convenience, we refer to the node v connected to an
output edge numbered i as the output node num-
bered i.
The design of the encoder-respecting form graphi-
cally illustrates how information propagates from in-
put to output (which edges connect I to O) as well
as the entanglement structure (which edges connect
O to O) of the underlying encoder. Note that the
structure of D gives rise to a natural binary “partial
adjacency matrix” MD of size (n −k) × n, which
describes the edges between I and O like a usual
graph adjacency matrix representation.
Given a good structure, all that remains in a com-
piler is to ensure a canonical form, so that the map
from encoder to ZX diagrams is well-deﬁned.
We
constrain an encoder-respecting form into a ZXCF
via four additional rules.
1. Edge Rule: The ZXCF must have exactly one
Z node per free edge and every internal edge
in our ZXCF must have a Hadamard gate on
it.
2. Hadamard Rule: No output node v may both
have a Hadamard gate on its output edge and
have edges connecting v to lower-numbered
nodes or input nodes.
3. RREF Rule:
MD must be in reduced row-
echelon form (RREF).
4. Cliﬀord Rule: Let P ⊆O be the nodes associ-
ated with the pivot columns of the RREF ma-
trix MD, so that |P| = n−k. There can be no
local Cliﬀord operations {I, S, Z, SZ, H, HZ}

3
FIG. 1.
Example of an encoder-respecting form and
some ways it might violate the 4 rules.
on input or pivot nodes, or their free edges.
There can be no input-input edges or pivot-
pivot edges.
To provide some intuition on these 4 rules, Fig. 1
depicts a generic example of some possible violations
to the rules.
In the graphical representation of the ZXCF, pivot
nodes correspond to a subset of nodes in O that con-
nect to exactly one input; the subset is such that P
is in one-to-one correspondence with I. The Cliﬀord
rule extends the semi-bipartite constraint on edges
by disallowing connections between pivots.
These four rules are suﬃcient to produce a ZXCF;
we will show the following.
Theorem D. Any Cliﬀord ZX encoder has a unique
equivalent ZXCF satisfying the Edge, Hadamard,
RREF, and Cliﬀord rules. There is an eﬃcient al-
gorithm to canonicalize the ZX encoder.
We will ﬁrst describe the transform to a ZXCF.
First, we will apply the following lemma.
Lemma E. There exists an eﬃcient transformation
of a ZX encoder diagram with n −k input edges and
n output edges into a corresponding ZX presentation
of a stabilizer state in HK form, with n + (n −k) =
2n −k output edges.
The proof of this lemma is relegated to the Ap-
pendix.
Application of Lemma E results in a HK form,
which resembles the diagrammatics in Backens [33].
In particular, there is one Z node per vertex of the
graph in the HK form, with any internal edge hav-
ing a Hadamard gate on it. Free edges can only have
Hadamard gates on them if their phase is a multi-
ple of π, corresponding to the local Cliﬀord gates H
and HZ in HK form, and if the associated node is
not connected to any lower-numbered nodes. Nodes
whose free edges have no Hadamard gate are free to
have any multiple of π
2 as a phase, corresponding to
local Cliﬀord operations I, S, Z, or SZ, respectively.
We are now equipped with a HK ZX diagram that
represents a state.
This diagram has only output
edges.
To return it into an encoder diagram, we
turn the appropriate n −k output edges back into
input edges.
In the circuit representation, this is
equivalent to turning bra’s into ket’s and vice versa
to map between an operator and a state. For exam-
ple, |00⟩⟨1|−|11⟩⟨0| ↔|001⟩−|110⟩. This operation
gives us an equivalent encoder diagram in HK form.
Note that HK form by deﬁnition is in encoder-
respecting form. It also satisﬁes the Edge rule and
an analogous Hadamard rule—there are no input
edges in HK form so the analogous rule is enforced
only on lowered-numbered nodes, but if we number
the nodes from the beginning such that the input
nodes are lowered-numbered than all output nodes,
then the transformed encoder-HK will satisfy our
ZXCF Hadamard rule.
So, all that remains is to
simplify the diagram to obey the RREF and Cliﬀord
rules. The former is given by the following theorem,
which is proven in the Appendix.
Theorem F. An encoder diagram in HK form can
be eﬃciently transformed to satisfy the RREF rule,
while continuing to satisfy the Edge and Hadamard
rules.
The only remaining task is to enforce the Clif-
ford rule. First, if there are any edges between in-
put nodes (those in I), we can simply remove them.
(They correspond to controlled-Z operations, and
we can take oﬀany unitary operation on the input
by the encoder deﬁnition.) The same goes for local
Cliﬀords on I.
All that is left to manipulate are the nodes in P.
For any pivot node with a non-zero phase, we use
Eq. (9) in Hu and Khesin [34] and apply it to the
input node vin associated with that pivot node. As
shown there, this operation identically applies a lo-
cal complementation about the input node, which
notably does not change the entries of MD. How-
ever, this operation also increases the phase of each
neighbors of vin by π
2 (due to multiplication by S)
so we repeat this process until the phase vanishes.
Lastly, if there are any edges between pivots p1
and p2, we can remove them by applying Eq. (10)
from Hu and Khesin [34] to their pair of associated
input nodes v1 and v2. This swaps the sets of neigh-
bours of v1 and v2, denoted N1 and N2 (which we
could always swap back at will). This will also tog-
gle (i.e.
if there were an edge, now there is not,

4
and vice versa) any edge connected to N1 × N2,
which will include exactly the one pivot-pivot edge
we wish to ﬂip. (We deﬁne an edge between a node
v∗∈N1 ∩N2 and itself to be a Z gate, which adds
a phase of π to v∗.) Note that this operation does
not violate the RREF rule because once this process
is complete we can simply swap the neighbors back
(without any toggling) via a row operation. It also
does not violate the Hadamard rule as there cannot
be Hadamard gates on the output edges of nodes
in either N1 or N2; they were removed earlier via
Eq. (10) of Hu and Khesin [34]. We repeat until no
pivot-pivot edges are found.
With that step, the ZXCF transformation to
ZXCF is complete. Although this process may seem
lengthy, all of these steps can be done systematically
in an eﬃcient manner, without having to go back
to ﬁx earlier rules. While the algorithm as stated is
polynomial time, we believe it is possible to add opti-
mizations that further improve the time complexity
for practical implementation.
Compilation Process — With the canonical form
in hand, we proceed to describe a method for com-
piling down the three representations we consider
in in this letter (ZX encoder diagram, circuit, and
tableau) into a ZXCF.
In the previous sections we showed how to compile
a ZX encoder diagram into a ZXCF. Moreover, in the
Appendix proof of Lemma E, we showed that this
compilation is actulaly done by ﬁrst transforming
into a circuit representation, so that step is covered
as well. All that remains is the incomplete stabilizer
tableau.
The most direct method of compilation is to trans-
form the tableau into a Cliﬀord circuit representa-
tion, and then apply the above. We will construct
our circuit in reverse, going from outputs to inputs.
If our tableau has n columns and k rows, we begin
by drawing n output wires. We then apply the fol-
lowing procedure for each row of the tableau. Apply
a Cliﬀord operation U that turns the ﬁrst stabilizer
into Z1 = Z ⊗I ⊗· · · ⊗I, using the technique of the
Gottesman-Knill theorem.
We multiply the remaining rows by the ﬁrst until
the entire ﬁrst column of the tableau has only I, with
the exception of the ﬁrst row. We then post-select on
the +1 result of a computational basis measurement
by applying ⟨0|.
When reading the circuit in the
forward direction, this is equivalent to initializing a
work qubit in the |0⟩state. The eﬀect of U and the
measurement is equivalent to applying I+P
2 , where
P is the ﬁrst row of the stabilizer tableau. This is
equivalent to post-selecting on the +1 measurement
result of that stabilizer. Having measured the qubit,
we remove its corresponding row and column from
the tableau, and repeat on a tableau of n −1 qubits
and k −1 rows, until there are no rows left, at which
point the remaining n −k wires that have not been
capped by measurements become our inputs.
Proof of Canonicity — We next prove that our
proposed ZXCF is indeed canonical. In other words,
two equivalent stabilizer tableaus—generators of the
same subspace of the n-qubit Hilbert space—will
map to the same ZXCF. We proceed by a counting
argument. Since any incomplete stabilizer tableau
can be turned into a ZXCF, it suﬃces to prove that
there are an equal number of incomplete stabilizer
tableaus as there are possible ZXCF diagrams.
Lemma G. The number of stabilizer tableaus on n
qubits with k rows is equal to the number of ZXCF
diagrams with n outputs and n −k inputs.
First, the number of incomplete stabilizer tableaus
with k stabilizers on n qubits is
kQ
i=1
2 · 4n/2i−1 −2 · 2i−1
kQ
i=1
2k −2i−1
=
k
Y
i=1
22n−i+2 −2i
2k −2i−1
.
(1)
For each row i, there are 2 · 4n possible Pauli strings
(including the sign), but the requirement that they
commute with previous rows divides the count by
2i−1. Of these 2 · 4n/2i−1 valid strings, 2i−1 strings
are linear combinations of previous strings, with a
factor of 2 for strings that diﬀer by a sign from pre-
vious strings.
We have overcounted, however, since any two
tableaus that generate the same subspace are equiv-
alent.
Thus, we need to divide by the number of
choices of k generators for a given subspace of char-
acteristic 2,
kQ
i=1
2k −2i−1.
Next, the number of ZXCF diagrams for the same
n and k is given by the following function evaluated
at p = o = 0.
f(n, k, p, o) =
(
1
if n = k = 0
An,k,p,o + Bn,k,p,o
else
(2)
where
An,k,p,o = 2of(n −1, k, p + 1, o)
(3)
if n ̸= k and An,k,p,o = 0 if n = k and where
Bn,k,p,o = (22p+o+2 + 2)f(n −1, k −1, p, o + 1) (4)
if k ̸= 0 and Bn,k,p,o = 0 if k = 0.

5
This function is computed with a base case of an
empty tableau when n = k = 0. To derive f, imag-
ine that, starting with two empty bins, we must
assign the n −k output nodes to be pivots (case
A) or non-pivots (case B), where pivots need to be
matched with input nodes. The current number of
pivots is tracked by p and the number of non-pivot
outputs is tracked by o.
Suppose we want the next output node to be a
pivot (in P). Since there is a one-to-one correspon-
dence between pivots and inputs, we can add pivots
only if n > k. The matching between pivots and
input nodes is fully constrained by the RREF rule,
which sorts the inputs and pivots together. The Clif-
ford rule says that no pivot nodes may have local
Cliﬀord operations, so we just need to choose the
edges connecting them to nodes we have already as-
signed. Since there are no pivot-pivot edges and the
pivot connects to only one input, we have exactly
2o possibilities. Having made an assignment, p in-
creases by 1, and n decreases by 1 (both input and
output are decremented since the pivot matches with
an input).
Suppose instead we want the next output node
to be a non-pivot (in O). Then we have to choose
the local Cliﬀord operation as well as its edges to
previously assigned vertices. If we choose to connect
the node to none of the p assigned inputs, p assigned
pivots, or o assigned vertices, then we are allowed to
place any of the 6 local Cliﬀords on the node.
If
any of those edges are present, however, we cannot
apply a Hadamard to the output edge due to the
Hadamard rule. Hence, 4 choices remain for the local
Cliﬀord operation. This works out to a total of 4 ·
(22p+o −1)+6 = 22p+o+2 +2 possibilities. To ﬁnish,
we decrement the number of output qubits without
changing the number of inputs.
We can check that the recursion is solved by
f(n, k, p, o) =
2o(n−k)
k
Y
i=1
(2n+1 −2i)(2n−i+1+2p+o + 1)
2k −2i−1
.
(5)
One
can
verify
by
standard
induction
that
f(n, k, 0, 0) gives the same expression as Eq. (1),
proving that ZXCF is indeed canonical.
Application to Quantum Codes — Consider, for
example of a ZXCF, the nine-qubit error-correcting
code, due to Shor [24], which uses 9 physical qubits
to encode 1 logical qubit. The Shor code may be
represented by the stabilizer tableau


Z
Z
I
I
I
I
I
I
I
Z
I
Z
I
I
I
I
I
I
I
I
I
Z
Z
I
I
I
I
I
I
I
Z
I
Z
I
I
I
I
I
I
I
I
I
Z
Z
I
I
I
I
I
I
I
Z
I
Z
X X X X X X
I
I
I
X X X
I
I
I
X X X


.
(6)
Application of our compilation method yields the
ZXCF given in Fig. 2(a). There are three identical
sectors of the outputs, two with Hadamarded out-
puts and one without. This resembles our expecta-
tions from examination of the un-normalized qubit
representation of the Shor code, (|000⟩± |111⟩)⊗3.
We may compare this to a relatively simple but un-
canonical form in Fig. 2(b) which one might heuristi-
cally construct. We created Fig. 2(b) by using a ZX
rule wherein a Z node with two Hadamarded edges
can be replaced with a single non-Hadamarded edge.
This diagram has some similar visualization—and is
in some senses simpler—but has no obvious associa-
tion of nodes with the qubits, which blurs interpre-
tations about information propagation or entangle-
ment structure.
FIG. 2.
A ZXCF of the nine-qubit code (a) versus a
simpler (but not canonical) form (b).
There is an additional simpliﬁcation we can make
to our ZXCF when the encoder in question is for
error correction. In particular, when one transmits

6
encoded qubits, the set of errors that can be cor-
rected does not change if we apply local Cliﬀord op-
erations to the encoding, since the space of p-qubit
Pauli errors is preserved. As a result, we can disre-
gard the Hadamarded output edges and the phases
on the output nodes oﬀerror-correcting encoders.
Any code thus has an equivalent representation up
to local Cliﬀords whose ZXCF consists of nothing
more than a semi-bipartite graph. We have there-
fore proven:
Theorem H. For any stabilizer code, there exists
at least one equivalent code that has a presentation
as a semi-bipartite graph with no local Cliﬀord oper-
ations.
Further examples are provided in the Appendix.
Conclusion and Outlook — In this letter, we
introduced
a
quantum
compiler
mapping
Clif-
ford encoders (or equivalently incomplete stabilizer
tableaus) into a canonical ZX-calculus form.
The
representation of our canonical form as a semi-
bipartite graph between input and output qubits ex-
plicitly visualizes information propagation from in-
put to output, as well as entanglement structure of
the output.
We then proved the algorithmic eﬃ-
ciency and correctness of the compiler.
Our compilation technique takes a ﬁrst step to-
wards the use of ZX-calculi as representations for a
useful (in terms of information and entanglement)
visualization of quantum operations. Whether the
ZXCF technique can be generalized beyond Cliﬀord
gates—as our construction relies crucially on them—
is an important next step in the exploration of ZX-
based quantum compilers. An interesting direction
of further research is the possibility of applying our
ZXCF to the decomposition of magic states into lin-
ear combinations of stabilizer states. Another pos-
sible direction is the analysis of the correspondence
between the quality of a code and its properties in
the ZXCF representation. A better understanding
of such a correspondence may inform better ways to
design new quantum codes.
Acknowledgments — ABK was supported by the
National Science Foundation (NSF) under Grant No.
CCF-1729369. PWS was supported by the NSF un-
der Grant No. CCF-1729369, by the NSF Science
and Technology Center for Science of Information
under Grant No. CCF-0939370, by the U.S. Depart-
ment of Energy, Oﬃce of Science, National Quantum
Information Science Research Centers, Co-design
Center for Quantum Advantage (C2QA) under con-
tract number DE-SC0012704., and by NTT Re-
search Award AGMT DTD 9.24.20.
∗khesin@mit.edu
† lujz@mit.edu
‡ shor@math.mit.edu
[1] L. K. Grover, A fast quantum mechanical algorithm
for database search, in Proceedings of the twenty-
eighth annual ACM symposium on Theory of com-
puting (1996) pp. 212–219.
[2] P. W. Shor, Polynomial-time algorithms for prime
factorization and discrete logarithms on a quantum
computer, SIAM review 41, 303 (1999).
[3] U. Mahadev, U. Vazirani, and T. Vidick, Eﬃcient
certiﬁable randomness from a single quantum de-
vice, arXiv preprint arXiv:2204.11353 (2022).
[4] E. Farhi, D. Gosset, A. Hassidim, A. Lutomirski,
and P. Shor, Quantum money from knots, in Pro-
ceedings of the 3rd Innovations in Theoretical Com-
puter Science Conference (2012) pp. 276–289.
[5] I. M. Georgescu, S. Ashhab, and F. Nori, Quan-
tum simulation, Reviews of Modern Physics 86, 153
(2014).
[6] H.-Y. Huang, R. Kueng, and J. Preskill, Predicting
many properties of a quantum system from very few
measurements, Nature Physics 16, 1050 (2020).
[7] A. Harrow, P. Hayden, and D. Leung, Superdense
coding of quantum states, Physical review letters
92, 187901 (2004).
[8] M. A. Nielsen and I. Chuang, Quantum computa-
tion and quantum information (2002).
[9] A. Kandala, K. Temme, A. D. C´orcoles, A. Mezza-
capo, J. M. Chow, and J. M. Gambetta, Error mit-
igation extends the computational reach of a noisy
quantum processor, Nature 567, 491 (2019).
[10] M. V. Larsen,
X. Guo,
C. R. Breum,
J. S.
Neergaard-Nielsen, and U. L. Andersen, Determin-
istic generation of a two-dimensional cluster state,
Science 366, 369 (2019).
[11] F. Arute, K. Arya, R. Babbush, D. Bacon, J. C.
Bardin, R. Barends, R. Biswas, S. Boixo, F. G.
Brandao, D. A. Buell, et al., Quantum supremacy
using a programmable superconducting processor,
Nature 574, 505 (2019).
[12] H. Wang, J. Qin, X. Ding, M.-C. Chen, S. Chen,
X. You, Y.-M. He, X. Jiang, L. You, Z. Wang, et al.,
Boson sampling with 20 input photons and a 60-
mode interferometer in a 1 0 14-dimensional hilbert
space, Physical review letters 123, 250503 (2019).
[13] C. K. Andersen, A. Remm, S. Lazar, S. Krinner,
N. Lacroix, G. J. Norris, M. Gabureac, C. Eichler,
and A. Wallraﬀ, Repeated quantum error detection
in a surface code, Nature Physics 16, 875 (2020).
[14] A. Bouland and T. Giurgica-Tiron, Eﬃcient univer-
sal quantum compilation: An inverse-free solovay-
kitaev algorithm, arXiv preprint arXiv:2112.02040
(2021).
[15] V. Kliuchnikov, D. Maslov, and M. Mosca, Asymp-
totically optimal approximation of single qubit uni-
taries by cliﬀord and t circuits using a constant num-
ber of ancillary qubits, Physical review letters 110,
190502 (2013).

7
[16] V. Kliuchnikov, D. Maslov, and M. Mosca, Fast
and eﬃcient exact synthesis of single qubit unitaries
generated by cliﬀord and t gates, arXiv preprint
arXiv:1206.5236 (2012).
[17] N. J. Ross and P. Selinger, Optimal ancilla-free clif-
ford+ t approximation of z-rotations., Quantum Inf.
Comput. 16, 901 (2016).
[18] V. Kliuchnikov, D. Maslov, and M. Mosca, Practi-
cal approximation of single-qubit unitaries by single-
qubit quantum cliﬀord and t circuits, IEEE Trans-
actions on Computers 65, 161 (2015).
[19] P.
Selinger,
Eﬃcient
cliﬀord+t
approxima-
tion
of
single-qubit
operators,
arXiv
preprint
arXiv:1212.6253 (2012).
[20] D. Gottesman, Stabilizer codes and quantum er-
ror correction (California Institute of Technology,
1997).
[21] A. Y. Kitaev, Quantum error correction with imper-
fect gates, in Quantum communication, computing,
and measurement (Springer, 1997) pp. 181–188.
[22] S. B. Bravyi and A. Y. Kitaev, Quantum codes
on a lattice with boundary, arXiv preprint quant-
ph/9811052 (1998).
[23] A. G. Fowler, M. Mariantoni, J. M. Martinis, and
A. N. Cleland, Surface codes:
Towards practical
large-scale quantum computation, Physical Review
A 86, 032324 (2012).
[24] P. W. Shor, Scheme for reducing decoherence in
quantum computer memory, Physical review A 52,
R2493 (1995).
[25] D. Gottesman, An introduction to quantum error
correction and fault-tolerant quantum computation.
april 2009, arXiv preprint arXiv:0904.2557 (2009).
[26] B. Coecke and R. Duncan, Interacting quantum
observables, in International Colloquium on Au-
tomata, Languages, and Programming (Springer,
2008) pp. 298–310.
[27] T. Peham, L. Burgholzer, and R. Wille, Equivalence
checking of quantum circuits with the zx-calculus,
IEEE Journal on Emerging and Selected Topics in
Circuits and Systems 12, 662 (2022).
[28] A. Cowtan and S. Majid, Quantum double aspects
of surface code models, Journal of Mathematical
Physics 63, 042202 (2022).
[29] J. van de Wetering, Constructing quantum cir-
cuits with global gates, New Journal of Physics 23,
043015 (2021).
[30] R. D. East, J. van de Wetering, N. Chancellor,
and A. G. Grushin, Aklt-states as zx-diagrams:
diagrammatic reasoning for quantum states, PRX
Quantum 3, 010302 (2022).
[31] N. de Beaudrap and D. Horsman, The zx calculus is
a language for surface code lattice surgery, Quantum
4, 218 (2020).
[32] A. Kissinger and J. van de Wetering, Reducing the
number of non-cliﬀord gates in quantum circuits,
Physical Review A 102, 022406 (2020).
[33] M. Backens, The zx-calculus is complete for stabi-
lizer quantum mechanics, New Journal of Physics
16, 093021 (2014).
[34] A. T. Hu and A. B. Khesin, Improved graph formal-
ism for quantum circuit simulation, Physical Review
A 105, 022432 (2022).
[35] S. Aaronson and D. Gottesman, Improved simula-
tion of stabilizer circuits, Physical Review A 70,
052328 (2004).
[36] A. Steane, Multiple-particle interference and quan-
tum error correction, Proceedings of the Royal So-
ciety of London. Series A: Mathematical, Physical
and Engineering Sciences 452, 2551 (1996).
[37] E. Knill, R. Laﬂamme, R. Martinez, and C. Ne-
grevergne, Benchmarking quantum computers: The
ﬁve-qubit error correcting code, Physical Review
Letters 86, 5811 (2001).
Additional Proofs
We begin with the proof of Lemma E. Generally,
an operator can be transformed into a state by writ-
ing the operator as a linear combination of projectors
|φ⟩⟨ψ|, and then ﬂipping the bra’s into ket’s. This
process is known as the Choi–Jamio lkowski isomor-
phism. We describe how to perform an analogous
transformation in the ZX calculus, along with the
canonicalization into HK form.
Proof. We will turn the encoder diagram into a Clif-
ford circuit, and then map the output of that circuit
(with input the all-|+⟩state) to HK form. Any X
(red) nodes in the ZX encoder diagram can be trans-
formed into Z (green) nodes with the same phase
surrounded by Hadamard gates. Now, we can inter-
pret the ZX encoder diagram as a state by treating
the input edges as output edges (the ZX version of
the Choi–Jamio lkowski isomorphism).
Our ZX diagram now computes a state, so we can
express it entirely in terms of the following elemen-
tary operations and their circuit analogs. First, we
could have a Z node with only one output or only
one output. In a circuit, this is a |+⟩qubit or a post-
selected ⟨+| measurement, respectively. We can also
have a Hadamarded edge or a node with π
2 phase,
which are represented as H or S gates in circuits,
respectively. Lastly, we can have a Z node of degree
3, with either 2 inputs and 1 output or 1 input and
2 outputs that acts as a merge or a split. This is
equivalent to applying a CX operation between two
qubits where the second qubit is either initialized
to |0⟩before the CX gate or post-selected by the
measurement ⟨0| after the CX gate, respectively.
Any ZX diagram can be expressed in terms of
these operations [33]. Furthermore, as we apply each
of these operations we can keep track of the current
HK form for our state. (The Hu and Khesin [34]
method shows us how to keep a diagram in HK form
as each operation is applied.) All of these steps can

8
be done eﬃciently [34], so this gives us an eﬃcient
procedure for turning a ZX diagram into a corre-
sponding stabilizer state in HK form.
We next give the proof of Theorem F.
Proof. The key step is to show that the operations
corresponding to row operations on the partial adja-
cency matrix MD can be done without violating the
Edge and Hadamard rules. To do so, let us examine
the action of a stabilizer on the encoder diagram.
The stabilizer is a Pauli matrix. Suppose we ap-
ply any row—a Pauli string that stabilizes the out-
put of the encoder. (The row can be a string of X’s
and Z’s with a global phase.) That is, this string is
sent through the output edges of the diagram. As
the operators pass through the local Cliﬀord opera-
tions on the output vertices, they turn into diﬀerent
operators. For example, consider a X operator (rep-
resented by a X node with a π phase) that passes
through a free output edge of an output node v. (It
may be useful to draw an example to follow along.)
By the π rule of ZX calculus, this results in a global
phase, negation of the local phase on v, as well as a X
node on each internal neighboring edge connected to
v. As each X node moves along the internal edge, it
will be conjugated past the internal Hadamard gate,
arriving as a Z on the other side of the edge.
In sum, the total action of the entire stabilizer
will visually look a choreographed dance where the
nodes act out the following steps.
1. Pauli matrices commute past the H gates on
the output edges, with some of them changing
colour (X ↔Z).
2. Z nodes from the stabilizer simply add their
phase to the nodes in the diagram, while the
X nodes split into one X node for every inter-
nal edge connected to the output node v, and
result in a phase ﬂip on every neighbour of v.
Once this dance is complete, all the added phases
necessarily cancel and the added global phase re-
turns to 1, since the string is a stabilizer.
But note that any single X (or Y represented as
iXZ) sent through an output node v (after it has
already passed through a Hadamard on the output
edge if one exists) may result in some operators (rep-
resented as X or Z nodes) that hit an input node via
an internal edge connected to the input node. But at
the end of the day, all of the operators on the input
edges must cancel out due to stabilization. This im-
plies that each input node must be connected to an
even number of nodes on which the stabilizers apply
X or Y gates after passing through the Hadamard
gates on the free output edges.
Consequently, for any pair of input nodes, we are
free to connect all of the neighbors of one to the other
via (Hadamarded) internal edges without changing
the parity eﬀect of the stabilizers described above.
This corresponds to adding two rows in MD.
Finally, we note that since any pair of internal
edges have Hadamard gates on them, if we have two
edges between the same pair of Z nodes, we can re-
move them both by the rules of ZX calculus.
In
other words, we are eﬀectively free to perform arbi-
trary row operations on MD mod 2.
This allows us to row-reduce MD to satisfy the
RREF rule.
Further Examples
We provide some additional examples of our ZX-
CFs, speciﬁcally on the most well-known quantum
error-correcting codes. The ZXCFs are obtained by
applying the procedure applied in the main text. As
with our main-text notation, the blue edges have
Hadamard operations on them. Our ﬁrst example is
the seven-qubit code, due to Steane [36]. The code
is represented by an incomplete stabilizer matrix


I
I
I
X X X X
I
X X
I
I
X X
X
I
X
I
X
I
X
I
I
I
Z
Z
Z
Z
I
Z
Z
I
I
Z
Z
Z
I
Z
I
Z
I
Z


.
(7)
In our ZXCF, this takes the form given in Figure 3.
The nodes of the code are simply the corners of a
cube.
FIG. 3. ZXCF of the seven-qubit code. The 8 nodes in
the diagram form the vertices of a boolean cube.
Note that the stabilizers of the 7-qubit code are
positioned at exactly the 1-indices in the binary rep-
resentation of a node label. We can see elegant sym-
metries in Fig. 3 with the positions of the nodes

9
and their expressions in binary. The reason for why
the basis vectors adjacent to 0 are not 1, 2, and 4,
which are 001, 010, and 100 in binary, is because
the rules of the ZXCF require that the output edges
with Hadamard gates not be connected to lower-
numbered nodes, placing nodes 1, 2, and 4 in the
same column in the diagram.
We next consider the ﬁve-qubit code, which is the
smallest code one can achieve for correction of an
arbitrary single-qubit error and has been studied ex-
perimentally [25, 37]. Its incomplete stabilizer rep-
resentation is given by


X Z
Z X
I
I
X Z
Z X
X
I
X Z
Z
Z X
I
X Z

.
(8)
Our procedure produces the ZXCF shown in Fig. 4.
FIG. 4. ZXCF of the ﬁve-qubit code.
Note that the stabilizer tableau is just 4 cyclic
permutations of the ﬁrst row.
the ZXCF reﬂects
this cyclic structure in the output explicitly.

