3
Sequential algorithms as bistable maps
Pierre-Louis Curien
CNRS – Universit´e Paris 7
En guise de prologue
Gilles Kahn, pour moi, ce fut d’abord un article, en fran¸cais s’il vous
plait, texte qui fut le point de d´epart de ma recherche:
G. Kahn et G. Plotkin, Domaines concrets, TR IRIA-Laboria 336
(1978), paru en version anglaise en 1993 – signe de son inﬂuence dans le
temps – dans le volume d’hommage `a Corrado B¨ohm [14].
On ne pouvait imaginer un meilleur appˆat pour le jeune homme que
j’´etais, arriv´e `a l’informatique par le fruit d’une h´esitation entre math´e-
matiques (intimidantes) et langues (les vraies). Un autre coll`egue trop
tˆot disparu, Maurice Gross, m’avait aid´e `a choisir une tierce voie et
m’avait guid´e vers le DEA d’Informatique Th´eorique de Paris 7. Les
cours de Luc Boasson et de Dominique Perrin m’avaient d´ej`a bien ferr´e,
mais la rencontre des domaines concrets m’a d´eﬁnitivement “attrap´e”, et
parce qu’il s’agissait de structures ressemblant aux treillis – rencontr´es
assez tˆot dans ma scolarit´e grˆace aux Le¸cons d’Alg`ebre Moderne de Paul
Dubreil et Marie-Louise Dubreil Jacotin que m’avait conseill´ees mon
professeur de math´ematiques –, et parce que G´erard Berry qui m’avait
mis ce travail entre les mains avait une riche id´ee pour bˆatir sur cette
pierre.
L’id´ee directrice de cet article ´etait de donner une d´eﬁniton
g´en´erale de structure de donn´ees, comprenant les listes, les arbres, les
enregistrements, les enregistrements avec variantes, etc..., et, comme l’on
fait dans toute bonne math´ematique, une bonne notion de morphisme
entre ces structures: Cette d´eﬁnition ´etait donn´ee sous deux facettes
´equivalentes et reli´ees par un th´eor`eme de repr´esentation: l’une concr`ete,
en termes de cellules (nœuds d’arbres, champs d’enrigistrements, . . . ) et
de valeurs, l’autre abstraite, en termes d’ordres partiels. Ce th´eor`eme,
From Semantics to Computer Science Essays in Honour of Gilles Kahn,
eds Yves
Bertot, G´erard Huet, Jean-Jacques L´evy and Gordon Plotkin. Published by Cambridge
University Press.
c
⃝Cambridge University Press 2009.
51
https://doi.org/10.1017/CBO9780511770524.004 Published online by Cambridge University Press

52
P.-L. Curien
le premier du genre, a servi de mod`ele `a des travaux ult´erieurs (ceux de
Winskel sur les structures d’´ev´enements en particulier).
S’agissant
des
morphismes,
la
contribution
n’´etait
pas
moins
importante. Apr`es celles de Vuillemin et de Milner qui ne s’apppliquaient
bien qu’au premier ordre, la d´eﬁnition de fonction s´equentielle de
Kahn–Ploktin ´etait “la bonne”. Cette notion, coupl´ee au th´eor`eme de
s´equentialit´e de Berry obtenu `a la mˆeme ´epoque, ouvrait la voie `a la
construction d’un mod`ele s´equentiel du λ-calcul, et c’est ici qu’intervint
l’id´ee de Berry: passer des fonctions (s´equentielles) `a une notion plus
concr`ete de morphisme.
Les algorithmes s´equentiels [3], n´es de cette intuition initiale, et que
nous revisitons ici, sont, je l’esp`ere, rest´es ﬁd`eles `a l’esprit des domaines
concrets, qui se voulaient formaliser des structures donn´ees observables.
Dans un langage comme CAML, les types fonctionnels ne sont pas
observables, mais dans le langage CDS (concrete data structure) que
Berry a propos´e et qui a ´et´e d´evelopp´e sur les fondements th´eoriques
´etablis dans ma th`ese, ils le sont [4]. Last but not least, la premi`ere
s´emantique op´erationnelle du langage (d´ecrite dans ma th`ese d’Etat
[9]) bien que s´equentielle, s’inspire beaucoup du mod`ele des coroutines,
pr´esent´e dans autre article fondateur de Gilles Kahn [13].
Sur un plan plus pratique, c’est sur la table tra¸cante du (mythique)
bˆatiment 8 de l’INRIA Rocquencourt que j’ai pu sortir les beaux
transparents (je ne crois pas en avoir r´ealis´e, sans eﬀort particulier, de
plus esth´etiques depuis) de ma soutenance de Th`ese d’Etat, ´ecrits en
FLIP.
El´egance, profondeur, et sens pratique, cela ne r´esume pas Gilles
Kahn, mais c’est ce dont je puis t´emoigner ici. De sa voix aussi, joviale et
imp´erieuse, voire imp´eriale, qui m’a sauv´e la mise lors d’une pr´esentation
de mes travaux dans un colloque franco-am´ericain `a Fontainebleau. Je
m’apprˆetais `a ´ecrire au feutre, non sur le transparent, mais sur la table
du projecteur...
Abstract
We describe the Cartwright–Curien–Felleisen model of observably
sequential algorithms as a full subcategory of Laird’s bistable biorders,
thereby reconciling two views of functions: functions-as-algorithms
(or programs), and functions-as-relations. We then characterize aﬃne
sequential algorithms as aﬃne bistable functions in the full subcategory
of locally boolean orders.
https://doi.org/10.1017/CBO9780511770524.004 Published online by Cambridge University Press

Sequential algorithms as bistable maps
53
3.1 Introduction
This paper reconciles two views of functions: functions-as-algorithms (or
programs), and functions-as-relations. Our functions-as-algorithms are
the observably sequential algorithms on sequential data structures of
Cartwright, Curien and Felleisen [5–7], and our functions-as-relations are
Laird’s bistable and pointwise monotonic functions on bistable biorders
[15]. We exhibit a full embedding from the former to the latter.
Since the moment when the ﬁrst version of these notes was circulated
privately (2002), Laird has further improved the understanding of the
connection by deﬁning a full sub-category of bistable biorders, the
category of locally boolean domains, whose intensional behaviour may
be “synthesized” through decomposition theorems. A consequence of
these theorems is that every locally boolean domain is isomorphic to a
sequential data structure. Hence the results presented here actually yield
an equivalence of categories (and another one between the respective
subcategories of aﬃne morphisms).
In order to make the paper relatively self-contained, we provide the
necessary deﬁnitions in Sections 3.2 and 3.3. The main full embedding
result is proved in Section 3.4, and the aﬃne case is addressed in
Section 3.5.
3.2 Sequential data structures
We deﬁne sequential data structures, which are concrete descriptions
of partial orders whose elements are called strategies (there is indeed a
game semantical reading of these structures, see e.g. [7]).
Deﬁnition 3.1 A sequential data structure (sds) [1] is a triple S =
(C, V, P), where
• C is a set of cells,
• V is a set of values (C and V disjoint),
• P
is a preﬁx-closed set of non-empty alternating sequences
c1v1c2 . . . (with the ci’s in C and the vi’s in V ), which are called
positions.
We denote by Q (resp. R) the subset of sequences of odd (resp. even)
length of P, which are called queries (resp. responses).
One moreover assumes two special values ⊥and ⊤, not in V (nor in
C) (in earlier work [6], ⊤was called error, and in ludics [12] it is called
demon). We let w range over V ∪{⊥, ⊤}.
https://doi.org/10.1017/CBO9780511770524.004 Published online by Cambridge University Press

54
P.-L. Curien
Here are a few examples of sds’s (described by their forest of positions):
bool
bool × bool
?
 tt
ﬀ







?1
 tt
ﬀ
?2
 tt
ﬀ
Thus, bool has one cell ? and two values tt and ﬀ, while bool × bool is
made of two copies of bool, tagged by 1 and 2, respectively.
Our last example is the sds of terms over a signature, say, Σ =
{f 2, g1, a0}:
ϵ





























f





















1

















f







11 · · ·
12



f · · ·
g

121 · · ·
a
g

11 · · ·
a
2 · · ·
g

1 · · ·
a
Here, the cells are words over the alphabet {1, 2} (occurrences!) and the
values are the function symbols.
Deﬁnition 3.2 An observable strategy (or strategy for short) is a set
x ⊆R ∪{q⊤| q ∈Q} ∪{q⊥| q ∈Q} which satisﬁes the following
properties:
• x is closed under (even length) preﬁxes,
• whenever qw1, qw2 ∈x, then w1 = w2,
• whenever r ∈x, then for all c such that rc ∈Q, there exists w
such that rcw ∈x.
The second condition is the crucial one: it tells us that queries are
answered uniquely in a strategy. The other conditions are there for
technical convenience.
https://doi.org/10.1017/CBO9780511770524.004 Published online by Cambridge University Press

Sequential algorithms as bistable maps
55
A typical strategy, represented as a forest, i.e. as a set of branches,
looks like this:



































...
c0 v0























c1 v1















c3 ⊥
...
c4 ⊤
...
c5 {
c2 v2
 ...
...
Here are some concrete strategies (below each strategy, we give the
corresponding boolean, pair of booleans, or term):
bool
?⊥
?tt
?ﬀ
?⊤
⊥
tt
ﬀ
⊤
bool × bool
 ?1⊥
?2⊥
 ?1⊥
?2tt
 ?1ﬀ
?2⊥
· · ·
(⊥, ⊥)
(⊥, tt)
(ﬀ, ⊥)
· · ·
ϵ f



1 f
 11 a
12 g

121 a
2 a
f(f(a, g(a)), a)
The above deﬁnition of strategy does not do justice to the arborescent
structure of strategies, as in the examples just given. We now give a
syntax of strategies-as-terms.
rc ∈Q
c⊥:strat(rc)
rc ∈Q
c⊤:strat(rc)
https://doi.org/10.1017/CBO9780511770524.004 Published online by Cambridge University Press

56
P.-L. Curien
rc0v0 ∈R
xc:strat(rc0v0c)
(rc0v0c ∈Q)
c0v0 ˙{xc | rc0v0c ∈Q}:strat(rc0)
xc:strat(c)
(c ∈Q)
{xc | c ∈Q}:strat
A strategy is a set x = {xc | c ∈Q} : strat. The strategy-as-set-of-
responses associated to a strategy-as-term is deﬁned as {r | r ∈x},
where r ∈x is deﬁned by the following rules:
c⊥∈c⊥
c⊤∈c⊤
r1 ∈xc1
c0v0r1 ∈c0v0 ˙{xc | rc0v0c ∈Q}
c0v0 ∈c0v0 ˙{xc | rc0v0c ∈Q}
r ∈xc
r ∈{xc | c ∈Q}
This deﬁnes an injection, whose image is easily seen to be the set of
strategies x that do not have any inﬁnite branch, in the sense that there
is no sequence
c1 v1 c2 v2 . . . cn vn . . .
whose even preﬁxes all belong to x. We shall call such strategies ﬁnitary.
Hence we have two alternative deﬁnitions of ﬁnitary strategies: one by
extension, and a “procedural” one.
We denote the set of strategies by D⊤(S), and we use D(S) for the set
of strategies obtained by removing the rule introducing c⊤. We write:
• q ∈A(x) if q⊥∈x,
• q ∈F(x) if qv ∈x for some v ∈V or if q⊤∈x, and
• x <q y when q ∈A(x) and q ∈F(y).
If q1 = r1c1, . . . , qn = rncn ∈A(x), we denote by x[q1 ←x1, . . . , qn ←
xn] the strategy obtained by replacing ci⊥by xi:strat(qi), for all i, in x.
https://doi.org/10.1017/CBO9780511770524.004 Published online by Cambridge University Press

Sequential algorithms as bistable maps
57
We shall abbreviate q = rc ←c⊥as q ←⊥, and similarly with ⊤. We
shall use the convention that writing
x = x[q0 ←⊥, . . . , qn ←⊥]
means that A(x) = {q0, . . . , qn}.
Deﬁnition 3.3 We deﬁne four orders ≤s (stable), ≤c (costable), ≤
(bistable), and ⊑(pointwise) as the congruence closures of, respectively:
for ≤s:
rc ∈Q
x ∈strat(rc)
c⊥≤s x
for ≤c:
x ∈strat(rc)
x ≤c c⊤
for ≤:
rc ∈Q
c⊥≤c⊤
for ⊑:
rc ∈Q
x ∈strat(rc)
c⊥⊑x
rc ∈Q
x ∈strat(rc)
x ⊑c⊤
By congruence closure, we mean, say for ⊑, the following rules:
rc0v0 ∈R
xc ⊑yc
(rc0v0c ∈Q)
c0v0 ˙{xc | rc0v0c ∈Q} ⊑c0v0 ˙{yc | rc0v0c ∈Q}
xc ⊑yc
(c ∈Q)
{xc | c ∈Q} ⊑{yc | c ∈Q}
In words, replacing a ⊥by a (correctly typed) tree results in a stable
increase, while removing a subtree and replacing it by ⊤results in a
costable increase. The bistable order is the intersection of the stable and
the costable order: an increase in this order consists only in changing ⊥’s
https://doi.org/10.1017/CBO9780511770524.004 Published online by Cambridge University Press

58
P.-L. Curien
to ⊤’s. The bistable order turns out to play a crucial role in the axiomat-
ization (see Section 3.3). The pointwise order is the order generated by
the union of the stable and the costable orders.
Streicher has remarked that ⊑and ≤make an sds a bistable biorder.
This is an easy check left to the reader (after reading Section 3.3). Here,
we extend this to a full and faithful embedding of the category of sds’s
and sequential algorithms into the category of bistable and ⊑-monotonic
maps. Therefore, we now move on to deﬁne the relevant categories [1, 15].
Deﬁnition 3.4 Given sets A, B ⊆A, for any word w ∈A∗, we deﬁne
w⌈B as follows:
ϵ⌈B= ϵ
(wm)⌈B=
 w⌈B
if m ∈A\B
(w⌈B)m
if m ∈B .
Deﬁnition 3.5 Given two sds’s S = (C, V, P) and S′ = (C′, V ′, P ′),
we deﬁne S ⊸S′ = (C′′, V ′′, P ′′) as follows. The sets C′′ and V ′′ are
disjoint unions:
C′′
=
C′ ∪V
V ′′
=
V ′ ∪C .
P ′′ consists of the alternating positions s starting with a c′, and which
are such that:
s⌈S′∈P ′, (s⌈S= ϵ or s⌈S∈P), and
shas no preﬁx of the form scc′.
The strategies of S ⊸S′ are called observably aﬃne sequential
algorithms from S to S′.
https://doi.org/10.1017/CBO9780511770524.004 Published online by Cambridge University Press

Sequential algorithms as bistable maps
59
A typical aﬃne sequential algorithm looks like this:













































...
c′
1 c1

































...
v1 c2



















...
v2 v′
1







...
c′
2 · · ·
...
...
...
...
The initial query c′
1 of the output prompts a query c1 to the input. If the
answer to this query is v1, then the strategy wants to further explore the
input and asks the query c1v1c2, and so on, until enough of the input is
known to answer the query c′
1 with v′
1, and then the output may launch
a new query c′
2, etc...
We next move on to deﬁne observably sequential algorithms (not
necessarily aﬃne). Our model follows linear logic’s decomposition S →
S′ = (!S) ⊸S′ [11]. The decomposition for sequential algorithms on
sequential data structures was discovered by Lamarche [17, 7].
Deﬁnition 3.6 (exponential – sds) Let S = (C, V, P) be a sds. The
following recursive clauses deﬁne a set P! of alternating words over Q ∪
R = P:
(r = ϵ or r ∈P!)
q ∈A(state(r))
rq ∈P!
q ∈P! and state(qr) ∈D(S)
qr ∈P!
where state is the following function mapping responses (or ϵ) of P! to
strategies of M:
state(ϵ) = {c⊥| c initial}
q = r1c1
r = qv1
state(rqr) = state(r)[q ←c1v1{c⊥| rc ∈Q}]
The sds (Q, R, P!) is called !S.
https://doi.org/10.1017/CBO9780511770524.004 Published online by Cambridge University Press

60
P.-L. Curien
The above deﬁnition looks technical, but it just amounts to saying
that the cells and values of !S are the queries and the responses of S,
and that the queries and responses of !S are sequences obtained from
some tree traversal of the strategies of S. This is in spirit similar to the
coherence space semantics of linear logic [11].
Deﬁnition 3.7 Given two sds’s S and S′, the strategies of !S ⊸S′ are
called observably sequential algorithms from S to S′.
Despite their appearance, observably sequential algorithms are (in
bijection with) functions: this key insight did not wait for Laird’s work,
and was indeed one of the contributions of Cartwright and Felleisen
[5, 6, 1] to the older work of Berry and Curien on sequential algorithms
on concrete data structures [3].
Deﬁnition 3.8 Let f be an observably sequential algorithm from S to S′
and x a strategy of S. We deﬁne f · x (also written f(x)) as the normal
form of ⟨f || x ⟩for the following rewriting system, which is easily seen
to be conﬂuent (no critical pairs) and terminating on ﬁnitary strategies.
⟨c′v′{x′′
i | i ∈I} || x ⟩
→
c′v′{⟨x′′
i || x ⟩| i ∈I}
⟨c′⊥|| x ⟩
→
c′⊥
⟨c′⊤|| x ⟩
→
c′⊤
⟨c′q{x′′
r | r′′c′qr ∈Q′′} || x ⟩
→
c′?(⟨x′′
r0 || x ⟩) (r0 ∈x)
(in strat(r′′c′))
⟨c′q || x ⟩
→
c′⊥
(q⊥∈x)
(in strat(r′′c′))
⟨c′q || x ⟩
→
c′⊤
(q⊤∈x)
in strat(r′′c′))
⟨r0q{x′′
r | r′′r0qr ∈Q′′} || x ⟩
→
⟨x′′
r1 || x ⟩
(r1 ∈x)
(in strat(r′′r0))
?(⟨r0q{x′′
r | r′′r0qr ∈Q′′} || x ⟩)
→
⊥
(q⊥∈x)
(in strat(r′′r0))
?(⟨r0q{x′′
r | r′′r0qr ∈Q′′} || x ⟩)
→
⊤
(q⊤∈x)
(in strat(r′′r0))
?(⟨rv′{x′′
i | i ∈I} || x ⟩)
→
v′{⟨x′′
i || x ⟩| i ∈I}
?(⟨r⊥|| x ⟩)
→
⊥
?(⟨r⊤|| x ⟩)
→
⊤
For example, if c′ c1 v1 . . . cn vn v′ c′
1 c v v′
1 ∈f and c1 v1 . . . cn vn c v ∈
x, then c′ v′ c′
1 v′
1 ∈f · x. (The reader should have in mind here that
potentially f (resp. x) branches after c1, . . . , cn, c (resp. after v1, . . . , vn),
and that the choice of strategies determine alternately which branch to
choose.)
Deﬁnition 3.9 Let S and S′ be two sds’s. A ≤s-monotonic function
f:D⊤(S) →D⊤(S′) is called sequential at x if for any q′ ∈A(f(x))
one of the following properties hold:
https://doi.org/10.1017/CBO9780511770524.004 Published online by Cambridge University Press

Sequential algorithms as bistable maps
61
(i) ∀y ≥s x q′ ̸∈F(f(y)).
(ii) ∃q ∈A(x)
∀y > x (f(x) <q′ f(y) ⇒x <q y).
A query q satisfying condition (2) is called a sequentiality index of f at
(x, q′). The index is called strict if (1) does not hold. If (1) holds, then
any q in A(x) is a (vacuous) sequentiality index.
If q is a sequentiality index at (x, q′) and if moreover q′⊤∈f(x[q ←
⊤]), then we say that f is observably sequential at x, q′, with index q (note
then that the index is strict and that there can be no other sequentiality
index).
The function f is called sequential (resp. observably sequential) from
S to S′ if it is sequential (resp. observably sequential) at all points.
With the notation introduced above and using the ≤s monotonicity,
we can rephrase the deﬁnition of observably sequential function more
symmetrically as follows, at x = x[q1 ←⊥, . . . , qn ←⊥]:
∀x1, . . . , xi−1, xi+1, . . . , xn
q′⊥∈x[q1 ←x1, . . . qi−1 ←xi−1, qi ←⊥, qi+1 ←xi+1, . . . , qn ←xn]
∀x1, . . . , xi−1, xi+1, . . . , xn
q′⊤∈x[q1 ←x1, . . . qi−1 ←xi−1, qi ←⊤, qi+1 ←xi+1, . . . , qn ←xn]
Or, alternatively, using instead the ⊑-monotonicity (which is established
below), we get the following quantiﬁer-free deﬁnition:
q′⊥∈x[q1 ←⊤, . . . qi−1 ←⊤, qi ←⊥, qi+1 ←⊤, . . . , qn ←⊤]
q′⊤∈x[q1 ←⊥, . . . qi−1 ←⊥, qi ←⊤, qi+1 ←⊥, . . . , qn ←⊥]
Theorem
3.10
Observably
sequential
algorithms
and
observably
sequential functions are in one-to-one correspondence, and under the
bijection, the pointwise (resp. the stable) (resp. the bistable) ordering
deﬁned above indeed becomes the pointwise ordering (resp. Berry’s stable
ordering [2]) (resp. Laird’s bistable ordering [15]):
f ⊑g
⇔
(∀x f(x) ⊑g(x))
f ≤s g
⇔
(f ⊑g and (∀x, y (x ≤s y ⇒f(x) = f(y) ∧s g(x))))
f ≤g
⇔
(f ⊑g and (∀x, y (x ≤y ⇒f(x) = f(y) ∧g(x)) and
g(y) = f(y) ∨g(x)))
The notation ∧s denotes the greatest lower bound with respect to the
stable ordering, while ∧and ∨refer to the bistable ordering (all these
bounds exist, because f(y), g(x) ⊑g(y)).
https://doi.org/10.1017/CBO9780511770524.004 Published online by Cambridge University Press

62
P.-L. Curien
Proof Except for the last equivalence, the theorem is proved in [6]. We
check here only that if f, g are observably sequential, f ≤g, and x ≤y,
then g(y) = g(x)∨f(y). Suppose that g(y) > g(x)∨f(y). Let q′ be ﬁlled
in g(y) and accessible from g(x) ∨f(y). It follows that q′ is accessible
from g(x) and from f(y). The only way for g to make the diﬀerence
w.r.t. f on input y is to use one of its additional ⊤’s, say, q′⊤, in the
interaction with y. More precisely, one of the ⊤’s of g is responsible for
the ﬁlling of q′. But the interaction of g with y is the same as with x.
Hence q′ must be ﬁlled in g(x), contrary to our assumption.
As an illustration of what is going on, suppose that f1, f2:S →S′ are
≤s-minimal observably sequential algorithms such that
c′ c1 (c1v1) c2 (c2v2) c ∈f1
c′ c2 (c2v2) c1 (c1v1) c ∈f2
It looks like f1 and f2 deﬁne the same function (and indeed they do
deﬁne the same function from D(S) to D(S′)), but on x = {c1⊥, c2⊤}
we have:
f1 · x = {c′⊥}
f2 · x = {c′⊤}
Here, both ⊥and ⊤act very much like colours used in chemical
experiments: they track the presence of a proper value in c1 and c2,
respectively. The special values ⊥and ⊤play entirely symmetric roles
as long as no inﬁnite computations take place.
If we allow general, non-ﬁnitary strategies, the abstract machine of
Deﬁnition 3.8 may well diverge (i.e. not terminate). Following Scott-
Ershov’s tradition, a non-terminating computation receives ⊥as value,
and then ⊥and ⊤cease to be symmetrical, since ⊥has become
overloaded: it is both a symbol for non-termination, and an explicit
symbol for a special error value that could be called “stop by lack of
information”. The other error value ⊤could be called “deliberate stop”
(see [10, 12, 8]).
3.3 Bistable biorders
So far, so good: we have a characterization of our notion of functions-
as-algorithms as functions-as-relations. But still, the deﬁnition of
sequential function (originally due to Kahn and Plotkin [14]) requires
a rather concrete, “algorithmic” deﬁnition of domain (here, sequential
data structures). We can get rid of this too, using Laird’s notion of
https://doi.org/10.1017/CBO9780511770524.004 Published online by Cambridge University Press

Sequential algorithms as bistable maps
63
bistability, which can be deﬁned more abstractly. In this section, we
recall Laird’s deﬁnitions [15].
Deﬁnition 3.11 A bistable biorder is a set (D, ≤, ⊑) equipped with two
partial orders, such that whenever x, y have a lower or an upper bound
for ≤then x ∨y and x ∧y exist (for ≤), and then x ∨y = x ⊔y and
x∧y = x⊓y, hence the two orders coincide for ≤-connected components.
Moreover ∧and ∨distribute over each other in each component. One
writes x ↕y when x, y have a ≤-upper bound (or equivalently a ≤-lower
bound). A bistable function is a ≤-monotonic function such that for any
x ↕y:
f(x ∧y) = f(x) ∧f(y)
f(x ∨y) = f(x) ∨f(y)
(we refer to the two halves of this property as ∧-bistability and ∨-
bistability, respectively).
We observe (for the reader with some linear logic culture) that the preser-
vation of ∨in the above deﬁnition is not a requirement of linearity, as
it is taken with respect to ≤, not ≤s.
In [15], the following theorem is proved:
Proposition 3.12 The category of bistable biorders and bistable and
⊑-monotonic functions is cartesian closed.
3.4 Full embedding
In this section, we show that the category of observably sequential
algorithms embeds fully in Laird’s category of bistable biorders and
bistable and ⊑-monotonic functions. This amounts to the following
proposition:
Theorem 3.13 Given two sds’s S and S′, a function f:D⊤(S) to D⊤(S′)
is observably sequential if and only if it is bistable and ⊑-monotonic.
Proof The proof of (f ⊑-monotonic and bistable ⇒f sequential) follows
the steps of (and generalizes) Laird’s proof of this property at x = ⊥[15].
Suppose that q′ is accessible from f(x) (with x = x[q0 ←⊥, . . . , qn ←
⊥]), and suppose moreover that none of the qi’s is a sequentiality index.
Then by ⊑monotonicity we have that q′ is ﬁlled in all of the f(x[q0 ←
https://doi.org/10.1017/CBO9780511770524.004 Published online by Cambridge University Press

64
P.-L. Curien
⊤, . . . , qi−1 ←⊤, qi ←⊥, qi+1 ←⊤, . . . , qn ←⊤]). By ≤-monotonicity
it is also ﬁlled in f(x[q0 ←⊤, . . . , qn ←⊤]), and hence it is ﬁlled with
the same value in all of the f(x[q0 ←⊤, . . . , qi−1 ←⊤, qi ←⊥, qi+1 ←
⊤, . . . , qn ←⊤]). Now, by ∧-bistability, it should also be ﬁlled in f(x)
since
x =

i=1...n
x[q0 ←⊤, , . . . , qi−1 ←⊤, qi ←⊥, qi+1 ←⊤, . . . , qn ←⊤] .
We show that if f is ⊑-monotonic and bistable, then it is observably
sequential. That is, we have to show that if f has, say, q0 as sequentiality
index at (x, q′), then q′⊤∈f(x[q0 ←⊤]). Suppose not. Then, if y is
such that x ≤s y and q′ is ﬁlled in f(y), we have y ⊑y[q0 ←⊤] and
x[q0 ←⊤] ≤y[q0 ←⊤]. Since by pointwise monotonicity q′ is ﬁlled
in f(y[q0 ←⊤]), there exists a sequentiality index q1 for f at (x[q0 ←
⊤], q′). Continuing in this way, we would exhaust all the ⊥’s of x. So we
get that q′ is ﬁlled in, say, f(x[q0 ←⊤, q1 ←⊤, . . . , qn ←⊤]), and hence
by ∨-bistability in one of the f(x[qi ←⊤]). But it cannot be an i > 0
since q0 is a sequentiality index at x, hence it is i = 0, which contradicts
the assumption.1
Conversely, if f observably sequential, we ﬁrst show that f is ⊑-
monotonic. It is enough to check that if x ≤c y then f(x) ≤c f(y). To
show this – actually, the natural thing to show is that more generally
if f ≤c g and x ≤c y then f(x) ≤c f(y) –, we extend the deﬁnition of
≤c by congruence to all the terms involved in the rewriting system of
Deﬁnition 3.8. It is straightforward to show, for each of the rules of the
rewriting system, that if t ≤c t′ and t′ →t′
1 then there exists t1 such
that t →t1. Informally, the only diﬀerence of behaviour is that ⟨g || y ⟩
might terminate before ⟨f || x ⟩, because of a new ⊤in g or y. Notice that
1 Here, and also in the next section, we make the simplifying assumption that the
strategies are ﬁnite. We sketch here what adjustments have to be made to remove
the ﬁniteness restriction. This is rather standard domain theory: bistable biorders
have to be directed complete, and bistable functions have to be Scott-continuous.
We refer to [15] for the relevant deﬁnitions. With a little care, all our arguments
go through, making use of the continuity assumption. For example, to prove
observable sequentiality, we used the ﬁniteness assumption when writing x =
x[q0 ←⊥, . . . , qn ←⊥], with n ﬁnite. If instead we have
x = x[q0 ←⊥, . . . , qn ←⊥, . . . , ] ,
then the proof of sequentiality goes through because by continuity the ∧-bistability
extends to preservation of greatest lower bounds of arbitrary subsets of a ↕-
component. For the proof of observable sequentiality, the ﬁniteness of n was
essential. But continuity saves us again: by continuity, we can take x, y ﬁnite, and
we need only care about the qj’s that are ﬁlled in y, which are ﬁnitely many.
https://doi.org/10.1017/CBO9780511770524.004 Published online by Cambridge University Press

Sequential algorithms as bistable maps
65
this argument is the same as the one used in the separation theorem of
ludics (and, by the way, Girard’s designs also form a bistable biorder)
[12, 8].
Finally, we show that if f is observably sequential then it is bistable.
One proves that f is ≤-monotonic much in the same way as for ⊑-
monotonicity. The argument for ∧-bistability is standard. One proves
actually the preservation of all ≤s compatible binary ≤s greatest lower
bounds (glb). Suppose that x, y ≤s z and f(x ∧s y) <s f(x) ∧s f(y).
Let q′ be accessible from f(x ∧s y) and ﬁlled in f(x) and f(y). Let q
be a sequentiality index at x ∧s y, c′. Then by sequentiality q is ﬁlled
in both x and y, and with the same value since x, y have a ≤s upper
bound. But then q is also ﬁlled in x ∧s y, contrary to the assumption.
This shows a fortiori ∧-bistability since x ↕y implies a fortiori that x, y
have a ≤s-upper bound, and that x ∧y = x ∧s y.
As for ∨-bistability, suppose that f(x) ∨f(y) < f(x ∨y). Let q′ be
accessible from f(x)∨f(y) and ﬁlled in f(x∨y). Then q′ must be already
accessible from f(x ∧y), as the order ≤does not add new queries. Let
q be the sequentiality index for q′ at x ∧y. Then we have that q is ﬁlled
in x ∨y by sequentiality, i.e. it is ﬁlled in either x or y, say, in x. By
deﬁnition of ≤, since q is accessible from x ∧y, q must be ﬁlled with ⊤
in x. But then q′ is ﬁlled with ⊤in f(x) (and a fortiori in f(x ∨y)), by
observable sequentiality: contradiction.
Proposition 3.14 The category of sds’s and observably sequential
algorithms is cartesian closed.
Proof This is an easy corollary of Theorem 3.13, Proposition 3.12, and
Theorem 3.10. Indeed, all we have to check for a full subcategory of a
cartesian closed category to be itself cartesian-closed is that the (product
and) function space construction of the larger category, when applied to
objects of the smaller, yields an object of the smaller. Laird’s function
space D⊤(S) →D⊤(S′) is the set of bistable and ⊑-monotonic functions,
equipped with the pointwise and bistable orderings, which is isomorphic
to D⊤(S →S′).
A direct proof of Proposition 3.14 is given in [6], but it is more
complicated than the proof of Proposition 3.12.
https://doi.org/10.1017/CBO9780511770524.004 Published online by Cambridge University Press

66
P.-L. Curien
3.5 Aﬃne decomposition
In this section, we prove that aﬃne sequential algorithms can also be
deﬁned as observably sequential functions that are aﬃne with respect to
the stable order, and hence as aﬃne bistable and ⊑-monotonic functions
(provided this makes sense, see below).
Deﬁnition 3.15 An aﬃne function is a function that preserves stable
upper bounds of stably compatible elements.
(The diﬀerence with linear functions, which may be more familiar to
the linear logic oriented reader, is that preservation of ⊥is not required.)
Proposition 3.16 Aﬃne sequential algorithms are in order-isomorphic
correspondence with aﬃne observably sequential functions.
Proof
Let f be a sequential algorithm which is not aﬃne. It contains
at least a query of the form r c′q1 r1 q2, where r1 is not a preﬁx of q2.
Let x be the input strategy read oﬀalong the path from the root up
to q2. Formally, x = state(r), where r is the projection of r c′ q1 r1 on
the input sds. Let y = (x \ {r1}) ∪{q2⊤}. Let q′ be the projection of
rc′ on the output sds. Then q′ is ﬁlled neither in f(x) nor in f(y), but
is ﬁlled (with ⊤) in f(x ∨s y). Conversely, suppose that f is an aﬃne
sequential algorithm, and let q′w′ ∈f(x ∨s y). Let s be the position
of f visited along the normalization against x ∨s y towards q′w′ (it is
obtained by travelling in f from the root starting with the initial move
of q′, and solving ambiguities using x ∨s y and q′w′ when going up after
a player’s move, cf. Deﬁnition 3.8). Consider the last input response r on
this position of f. Then r belongs to either x or y, say x. But all other
responses along the path are preﬁxes of r, by the constraint of aﬃnity,
hence all belong to x. Therefore q′w′ ∈f(x) (or q′w′ ∈f(y)).
However, bistable biorders are too poor to express the stable ordering.
In further work, Laird [16] has deﬁned the full subcategory of locally
boolean domains in which not only the pointwise and bistable orders can
be deﬁned, but also the stable one [16] (we refer to this paper for the
deﬁnition, which takes as primitive an operation ¬ of involution which in
terms of sds’s consists in exchanging ⊥′s with ⊤′s). In fact, Laird shows
a representation theorem, by means of elegant abstract decompositions:
every locally boolean domain is isomorphic to the set of strategies of
some sds (and every such set is a locally boolean domain). Summing up,
we end up with an equivalence (actually two equivalences) of categories.
https://doi.org/10.1017/CBO9780511770524.004 Published online by Cambridge University Press

Sequential algorithms as bistable maps
67
Proposition 3.17 The categories of sds’s and (observably) sequential
algorithms and of locally boolean domains and ⊑-monotonic and bistable
functions are equivalent. This equivalence cuts down to an equivalence
between the respective subcategories of aﬃne morphisms (Deﬁnitions 3.5
and 3.15).
Proof
Propositions 3.13 and 3.16 have established full embeddings.
The equivalence of categories follows from the fullness on objects of the
functors co-restricted to locally boolean domains.
Since both in [17, 7] and [16] the comonads leading to models of
(aﬃne, intuitionistic) linear logic are deﬁned as adjoint to an inclusion
functor from the aﬃne subcategory, the two decompositions are the
same up to isomorphism. In other words, Laird’s work provides a
completely traditional domain-theoretic account of Berry–Cartwright–
Curien–Felleisen–Lamarche’s sequential algorithms model.
Finally, we mention two properties which add to the ambient
symmetry:
Proposition 3.18
(i) Observably sequential functions are costable, i.e.:
∀x, y
(∃z z ≤c z and z ≤c y) ⇒f(x ∨c y) = f(x) ∨c f(y)
(ii) Aﬃne observably sequential functions are coaﬃne, i.e.:
∀x, y
(∃z z ≤c z and z ≤c y) ⇒f(x ∧c y) = f(x) ∧c f(y)
The proofs are not diﬃcult and are in the same vein as the ones given
above.
However, observably sequential functions fail to be cocontinuous, i.e.
they fail to preserve costable glbs of costable ﬁlters (see [18], Example
3.5.8,
for
a
counter-example):
this
demonstrates
the
operational
dissymmetry between ⊤and ⊥, since the latter is also used to denote
non-termination.
We end the section with a brief sketch of how the concrete structure
of sds’s can be “abstracted” to that of a locally boolean domain. More
precisely, we exhibit Laird’s decomposition ﬁrst in concrete terms, and
then more abstractly, thus suggesting some of the ideas underlying
Laird’s representation theorem mentioned above.
First, we observe that the compact primes (i.e. the elements x such
that, for any Y , x ≤s  Y implies x ≤s y for some y ∈Y ) of D⊤(S)
https://doi.org/10.1017/CBO9780511770524.004 Published online by Cambridge University Press

68
P.-L. Curien
are in one-to-one correspondence with the queries and the responses
of S:
r





c1 ⊥
...
cn ⊥
r















c1 ⊥
...
c ⊤
...
cn ⊥
response
(x = x ∩¬x)
query
(x ̸= x ∩¬x)
Next, any sds S can be written as
D⊤(S) ≈

i
Di
where
Di = {x | x ≤c {ci⊤} ∪{c⊥| c ∈Q and c ̸= ci}
Abstractly:
D⊤(S) ≈

{p|p ≤c−maximal compact prime}
{x | x ≤c p}
Each Di is represented by an sds Si (i.e., Di ≈D⊤(Si)) that has a
unique initial cell ci. This property can be captured abstractly as:
⊤is prime (and ̸= ⊥)
The next step in the decomposition is to write
Di = D′
i ∪{⊥, ⊤} def
= (D′
i)↑
with D′
i = D⊤(S′i), where S′i is obtained from Si by stripping oﬀthe
unique initial cell ci.
Finally, we decompose D′
i as follows:
D′
i ≈ΣjDij
where
Dij = {x ∈Di | x starts with vj} = {x | x ≥s {vj⊥}}
or, abstractly:
D′
i ≈

{m|m ≤s−minimal}
{x | x ≥s m}
https://doi.org/10.1017/CBO9780511770524.004 Published online by Cambridge University Press

Sequential algorithms as bistable maps
69
Summing up, we have:
D⊤(S)
≈

i Di
(product of domains indexed
over ≤c −maximal prime elements)
Di
=
(D′
i)↑
(lifting of predomain)
D′
i
≈

j Dij
(sum of domains indexed
over ≤s −minimal elements)
3.6 Conclusion
We should note that a (weaker) version of the full embedding was proved
indirectly in Laird’s paper [15]: he proves that the bistable model is fully
abstract for the language Λ⊤
⊥(the simply typed λ-calculus with a single
base type, and two constants ⊥and ⊤of base type). This calculus is
essentially the same as Cartwright–Curien–Felleisen’s language SPCF
with respect to which the model of sequential algorithms is fully abstract
[6]. Hence, by uniqueness up to isomorphism of fully abstract models,
the two models are isomorphic on the simply typed hierarchy. Our result
is more general and does not refer to (the interpretation of) types.
As for every correspondence result, there are mutual beneﬁts in the
equivalence that we have proved. The algorithmic side provides an
operational explanation of the various orders. The abstract domain-
theoretic side provides simpler proofs sometimes (for example, of
cartesian closedness,2 and opens the way to extend the coverage
of standard domain-theoretic tools for reasoning about sequential
languages. Laird’s current work goes in that direction.
Bibliography
[1]
R. Amadio and P.-L. Curien, Domains and Lambda-calculi, Cambridge
University Press (1998).
[2]
G. Berry, Stable models of typed lambda-calculi. In Proc. ICALP 1978,
Lecture Notes in Computer Science 62 Springer-Verlag (1978).
[3]
G. Berry and P.-L. Curien, Sequential algorithms on concrete data
structures, Theoretical Computer Science 20:265–321 (1982).
2 Note however that it is not known whether the subcategory of locally boolean
domains is cartesian closed. We have used here the cartesian closedness of the
larger category of bistable biorders.
https://doi.org/10.1017/CBO9780511770524.004 Published online by Cambridge University Press

70
P.-L. Curien
[4]
G. Berry and P.-L. Curien, Theory and practice of sequential algorithms:
the kernel of the applicative language CDS. In Algebraic Methods in
Semantics, M. Nivat, J. Reynolds (eds), Cambridge University Press, pp.
35–87 (1985).
[5]
R. Cartwright and M. Felleisen, Observable sequentiality and full
abstraction. In Proc. POPL 1992 (1992).
[6]
R. Cartwright, P.-L. Curien and M. Felleisen, Fully abstract semantics for
observably sequential languages, Information and Computation 111(2):297–
401 (1994).
[7]
P.-L. Curien, On the symmetry of sequentiality. In Proceedings of
Mathematical Foundations of Programming Semantics 1993, Lecture Notes
in Computer Science 802, Springer-Verlag, pp. 29–71 (1994).
[8]
P.-L. Curien, Introduction to Linerar logic and ludics, parts I and II,
Advances of Mathematics (China) 34(5):513–544 (2005) and 35(1):1–44
(2006).
[9]
P.-L. Curien, Combinateurs Cat´egoriques, Algorithmes S´equentiels et
Programmation Fonctionnelle, Th`ese d’Etat, Universit´e Paris 7 (1983);
English
version:
Categorical
Combinators,
Sequential
Algorithms
and
Functional Programming, Research Notes in Theoretical Computer Science,
Pitman (1986); second, revised edition, Birkha¨user (1993).
[10]
P.-L. Curien, Symmetry and interactivity in programming, Bulletin of
Symbolic Logic 9(2):169–180 (2003).
[11]
J.-Y. Girard, Linear logic, Theoretical Computer Sciences 50:1–102
(1987).
[12]
J.-Y. Girard, Locus Solum, Mathematical Structures in Computer
Science (2001).
[13]
G. Kahn and D. MacQueen, Coroutines and networks of parallel
processes. In Proc. IFIP 1977, B. Gilchrist (ed.), North-Holland, pp. 993–
998 (1977).
[14]
G. Kahn and G. Plotkin, Concrete domains, Theoretical Computer
Science 12:187–277 (1993).
[15]
J. Laird, Bistability: an extensional characterization of sequentiality. In
Proc. Computer Science and Logic 2003, Lecture Notes in Computer Science
2803, Springer-Verlag (2003).
[16]
J. Laird, Locally boolean domains, Theoretical Computer Science
342:132–248 (2005).
[17]
F. Lamarche, Sequentiality, games and linear logic. In Proc. CLICS
Workshop, Aarhus University, DAIMI-397-II (1992).
[18]
T. Loew, Locally Boolean Domains and Universal Models for Inﬁnitary
Sequential Languages, PhD Thesis, Technische Universit¨at Darmstadt
(2006).
[19]
T. Streicher, Laird domains, draft (2002).
https://doi.org/10.1017/CBO9780511770524.004 Published online by Cambridge University Press

