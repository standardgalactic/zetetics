 
 
 
 
 
Python:  
Comprehensive Python Programming 
From The Ground Up 
 
 
 
 

 
© Copyright 2018 by Keith Dvorjak - All rights reserved. 
The transmission, duplication, or reproduction of any of the 
following work including specific information will be considered 
an illegal act irrespective of if it is done electronically or in 
print. This extends to creating a secondary or tertiary copy of 
the work or a recorded copy and is only allowed with express 
written consent from the Publisher. All additional right 
reserved. 
The information in the following pages is broadly considered to 
be a truthful and accurate account of facts and as such any 
inattention, use or misuse of the information in question by the 
reader will render any resulting actions solely under their 
purview. There are no scenarios in which the publisher or the 
original author of this work can be in any fashion deemed liable 
for any hardship or damages that may befall them after 
undertaking information described herein.  
Additionally, the information in the following pages is intended 
only for informational purposes and should thus be thought of 
as universal. As befitting its nature, it is presented without 
assurance regarding its prolonged validity or interim quality. 
 
 
 

 
Table of Contents 
 
Chapter 1: What is Python? .................................................. 1 
Important facts about Python: ............................................... 1 
About Python .......................................................................... 3 
Chapter 2: Setting up the Python Environment ..................... 5 
Getting Python and installing it .............................................. 5 
Setting up the Path at Windows ............................................. 6 
File Menu ................................................................................ 7 
Edit Menu ............................................................................... 8 
Format Menu in Editor ........................................................... 9 
Run Menu ............................................................................. 10 
Options Menu ....................................................................... 11 
Chapter 3: Getting Started with Python basics .................... 12 
Python Identifiers ................................................................. 14 
Some important Features in Python ..................................... 17 
Introduction to Types and Functions in Python ................... 19 
Finding data type .................................................................. 19 
Working with list() ................................................................ 20 
Finding the length of a variable ............................................ 20 
Finding Maximum and Minimum values .............................. 21 
Conversion from one data type to another .......................... 22 
Arithmetic operations in Python .......................................... 23 
Concatenation of Strings using ‘+’ operator ......................... 27 
print() command ................................................................... 29 
Escape Codes in Python ........................................................ 31 
input() function for making things interactive ...................... 34 
How braces{} work ................................................................ 39 
Defining a function ............................................................... 41 
Using Comments in Python .................................................. 46 

Chapter 4: Python Variable Types ....................................... 49 
Working with  Variable Types – I ( Numbers and Strings) .... 49 
‘=’ for assigning values .......................................................... 49 
Numeric data types ............................................................... 51 
Strings in Python ................................................................... 53 
Concatenation Example ........................................................ 53 
Repetition Example ............................................................... 54 
Working with subsets of strings using slice operator[] ........ 54 
Chapter 5: Decision Making ................................................ 56 
The if Statement ................................................................... 57 
If …Else Statement ................................................................ 59 
Chapter 6: Working with Loops ........................................... 70 
For Loop ................................................................................ 70 
Nested for loops ................................................................... 75 
While Loop ............................................................................ 77 
Statements to Control a Loop ............................................... 84 
Chapter 7: Data Types in Detail ........................................... 91 
Python Numbers in Detail ..................................................... 91 
Strings in Detail ..................................................................... 96 
Python List in Detail ............................................................ 104 
Python Tuples in Detail ....................................................... 118 
Python Dictionary in Detail ................................................. 126 
Chapter 8: Functions ........................................................ 135 
Defining a function ............................................................. 135 
Chapter 9: Python Classes and Objects .............................. 142 
Conclusion ....................................................................... 147 
 
 

1 
Chapter 1 
What is Python? 
 
Welcome to the world of Python! Before we get started with 
Python, it is important to know why Python has become so 
popular, and what the benefits are of learning Python coding. 
Python is very easy to learn, and lots of fun as well. If you have 
a basic programming background, you will be able to master 
the language within no time.  
Important facts about Python: 
1. Developed by Guido Van Rossum in late 80s and early 
90s 
2. It is derived from many other languages 
3. It is copyrighted and Python source code is now 
available under GNU General Public License 
Python is an interpreted, interactive, high-level programming 
language, which is now being considered the best for general-
purpose programming. “Python is interpreted” means that 
Python can be processed at runtime by the interpreter. There is 
no need to compile it before executing the code, unlike other 
popular languages such as Java and C#. Python is interactive 
because when you write programs on the Python prompt, you 
can interact with the interpreter directly. Python focuses on 
code readability. Programmers can create what they need with 
fewer lines of code. Python is object-oriented by nature, which 
means that it has the ability to encapsulate code within an 
object. Some of Python’s most important features are:  

2 
1. Python is easy to learn, read and maintain. 
2. It has a vast standard library. 
3. It is a portable language that can run on a wide variety 
of hardware platforms. 
4. Python is extendable, which means that low level 
modules can be added to the Python interpreter. This 
allows programmers to customize their tools to be 
most efficient. 
5. It provides interfaces to most of the available 
commercial databases. 
6. Python supports GUI applications. 
7. It is scalable because it can provide better structure 
and support for bigger programs. 
8. Python offers support for object-oriented, functional 
and structured programming. 
9. It allows usage of high-level dynamic data types and 
supports dynamic type checking.  
10. Python supports automatic garbage collection. 
11. Python provides great support and structure for large 
program as compared to shell scripting. 
High level computer programming means giving instructions in 
a manner that is easier for humans to understand. So, if you 
want to take a value stored at location ‘a’, another value stored 
at location ‘b’, and multiply them and assign the new value to 
location ‘c’, it can be simply written as follows: 
 a*b = c 
This instruction is converted to machine language for the 
computer to understand what needs to be done. There are 
several high level languages but Python emerged as an 
extremely simple to understand, yet very powerful 

3 
programming language. While working with Python programs, 
you should know how to break down the problem into 
manageable parts to create a solution. Ensure that the solution 
you create is not only easy to read but also works correctly on 
the computer. 
Python is available on a wide variety of platforms – Unix, 
Windows, OS/2, Linux, DOS, PalmOS, etc. 
About Python 
Python provides full support to object-oriented, as well as 
structured programming. It is for this reason that it is called 
multi-paradigm programming language. It can be used for 
function, as well as aspect-oriented programming. 
Python has a great memory management system. For this, it 
uses a combination of dynamic typing, reference counting and 
a cycle-detecting garbage collector. One of the most amazing 
features of Python is dynamic name resolution. Unlike other 
programming languages, it can bind method and variable 
names at the time of program execution. 
Instead of keeping all the functionality at the core, Python has 
been designed to be highly extensible. This allows addition of 
programmable interfaces to the existing application. The 
coding methodology followed in Python is quite simple, you 
would never find things getting cluttered up. The language gets 
its name from the British comedy group – Monty Python, which 
reflects that Python developers wanted it to be complete fun 
for coders. The tutorials and reference materials too uses 
playful approaches. 

4 
So, what do I mean when I say Python is simple? Well, it is an 
easily readable language. You won’t find any need to use curly 
brackets, semicolons or any delimit blocks. Off-side rule is a 
very interesting feature of Python. It uses whitespace 
indentation instead of curly brackets. The indentation increases 
after certain statements (you will notice as you start working 
on it) and the indentation decreases when the block is about to 
end. Some expressions in python are similar to C and Java 
whereas some are not. The way of calling a function is same as 
object_name.function_name(arg1,arg2..). However, unlike 
other object-oriented languages that implicit self parameters, 
python has an explicit self parameter to access instance data. 
You would learn more about the language as we proceed with 
programming concepts. 
 
 
 
 

5 
Chapter 2 
Setting up the Python Environment 
 
In this chapter, I am going to tell you about the essential things 
that you need to do in order to get started with Python. 
Installing Python is very simple. I have mentioned the steps to 
install Python on windows 8. However, if you go to the link 
mentioned below, you will find options to install it on other 
operating systems as well. 
Getting Python and installing it 
So, let’s learn how to install Python and get started with the 
basics. 
The official site for Python is: https://www.python.org/ 
You can get the docs from: https://www.python.org/doc/ 
Installing 3.6,4 on windows 8 
1. Google for Python download or straight away, go to 
https://www.python.org/downloads/. 
2. Click on Python 3.6.2. A file by the name python-
33.6.4.exe will be downloaded on your system. Click on 
install now. 
3. The set up progress window will be displayed. This 
window will give you an indication of installation. 
4. Once it is installed, go to the directory and check if the 
file exists at the location. If you have not given any 
location and have gone with the default settings, you 

6 
will be able to find it at 
C:\Users\MYPC\AppData\Local\Programs\Python\Pyth
on36-32. 
5. In this folder, you will find a python.exe file. Double-
click on it and a pop-up window will appear. It will 
display the version, date and it will also mention 32 bit. 
6. In front of the prompt  ‘>>>’ type ‘exit()’ and press 
enter to exit the window. 
7. Now, go to start button and look for python IDLE. 
When you click on it and Window will open .4 shell for 
Python 3.6, 
Setting up the Path at Windows 
To add the Python directory to the path for a particular session 
at the command prompt, type- path %path%;C:\Python and 
press Enter. You can give this command if C:\Python is the path 
for the Python directory. 
IDLE is Integrated Development and Learning Environment for 
Python. It is purely written in Python. It is suitable for 
beginners, it has multi-window text editor, the syntax is 
highlighted and auto completion and smart indent are some 
very important features of IDLE. It has an integrated debugger 
with stepping, persistent breakpoints. 
Let’s have a look at the Menus available in the window. 
To start Python, you can do either of the three things given 
below: 
1. You can start the interactive interpreter by starting it 
from the command line 
2. You can execute script form the command line 

7 
3. The simplest way is to use the GUI environment or the 
Integrated Development Environment. We would be 
trying our example code on this environment. 
File Menu 
New File: Click here for creating a new file editing window. 
Open: Click here to open an existing file. 
Open Module: Click here to open an existing module. 
Recent files: On clicking this option, a list of recent files will be 
displayed. You can click on the name you want to open. 
Module browser: Enter the name of a python module to 
search on sys.path and open. 
Path browser: On clicking on this menu, you will see sys.path 
directories, modules, functions, classes and methods in a tree 
structure. 
Save: Save the work to an associated file and if there is no 
associated file, then perform Save As function. 
Save As: Click here to associate your work to a new file name. 
Save Copy As: Save a copy of your work to a new file without 
changing the content. 
Print window: Pass on the print command to the default 
printer. 
Close: Close the window. 
Exit: Close all the windows and quit IDLE. 

8 
Edit Menu 
Undo: This option allows you to undo the last change that you 
have made in the current window. 
Redo : This allows us to redo what we have just undone in the 
current window. 
Cut: Copy the selection to a clipboard and delete it. 
Copy: Copy selection to the clipboard. 
Paste: Place the content available on the clipboard into the 
current window. 
Select All: Select all the contents of the window. 
Find: Open the search dialog box. 
Find Again: Repeat the last search. 
Find Selection: Search the selected string if there is any. 
Find in Files: Opens a search dialog box and results are 
displayed in a new window. 
Replace: This will open a Search and Replace dialogue box. 
Go to line: This option helps you to move the cursor to the 
requested line number. 
Show Completions: When you click on this option, a scrollable 
list will be displayed allowing you to select keywords and 
attributes 

9 
Expand Word: If you have written one or two letters and you 
want to know which keyword starts with that prefix, then you 
can click on this option to match a full word. 
Show call Tip: Allows you to enable call tips for a module. SO, if 
you are working on a function that your IDLE is aware of, then 
after an unclosed parenthesis, a small window pop-up appears 
to give you suggestions or tips that can help you. 
Show surrounding parens: Highlight the surrounding 
parenthesis. 
Format Menu in Editor 
Indent Region: Shifts the selected lines to the right by the 
indent width which has the default value of 4 spaces. 
Dedent Region: Shifts the selected lines to the left by the 
indent width which has the default value of 4 spaces. 
Comment out Region: This places a ### in front of the selected 
lines. 
Uncomment Region: Uncomments the selected lines by 
removing ### that is placed in front of each line. 
Tabify Region: Turn leading stretches of spaces into tabs. 
Untabify Region: Turn all tabs into correct number of spaces. 
Toggle Tabs: On clicking on this button, you will be prompted 
to tell if you want to turn tabs on. If you say yes, then the 
indent width will become equal to 8 column which is equal to 
one tab. 
 

10 
New Indent Width: The accepted indent width in Python is 4 
spaces, however, you can change the default value by using 
this option. 
Strip Trailing Whitespace: As the name suggests, this option 
allows to remove any space after the last non-space character 
of a line. 
Format Paragraph: Used to format all lines of the paragraph. 
Run Menu 
Python Shell: Opens python shell window  
Check Module: This option will check the syntax for the 
module that is presently open in the Editor. If your work is not 
yet saved, then you will be prompted. 
Run Module: Executes the module and the output is displayed 
on the shell editor. 
Shell Menu 
View Last Restart: Allows you to scroll the shell window to the 
last shell restart. 
Restart Shell: Restarts the shell. 
Interrupt Execution: Running program interrupted and 
stopped immediately. 
Debug Menu 
Go to File/Line: Look for the file name or the line number and 
open the file or show the line. 

11 
Open stack viewer: Displays stack trace back of the last 
exception in a tree widget. 
Auto-open stack viewer: Automatically opens the stack viewer 
on an unhandled exception. 
Options Menu 
Configure IDLE: Allows you to change the preferences such as 
font, text color, themes, etc. When you click on this option, a 
configuration box will open that will allow you to make changes 
to the configuration of shell and editor window. 
Code Context: When you click on this option, an overlay 
appears in the editor window which shows which class or 
function you are in. 
 
 
 
 

12 
Chapter 3 
Getting Started with Python basics 
 
When you start the Python IDLE, you will see the following 
symbol: 
 “>>>”  
This is where I want you to type the following statement: 
>>> print ("Hi! This is my first Python Command") 
So, your screen would look something like this: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> print ("Hi! This is my first Python Command") 
When you press “Enter” key, the following will be displayed: 
Hi! This is my first Python Command 
The older version of Python does not require parentheses for 
print command so if your version is 2.4.3, you may be required 
to write the print command as shown below: 
>>> print  "Hi! This is my first Python Command"; 
When you press “Enter” key, the following will be displayed: 

13 
Hi! This is my first Python Command 
We have tried this example on the interactive mode but in 
reality, the requirement is for scripts. You would be trying code 
on shell but in order to save your code so that it can be reused 
as when there is a requirement, you will have to save your 
work in scripts. This means that we write a Python program 
and save it in a script so that it call be called whenever there is 
a need. For this, you can go to the File Menu in the IDLE> New -
> this would open a new window. Now, type the following code 
in it. 
print ("Hi! This is my first Python Command"); 
Save this file with ‘.py’ extension. I am saving this file by the 
name of firstProgram.py in my directory. ‘.py’ is the extension 
used for saving Python script files. Now, press F5 or go to Run> 
Run Module. This would open the shell window and the output 
would be displayed as follow: 
= = = = = = = = = = = RESTART: 
your_directory_path/firstProgram.py = = = = = = = = = = =  
Hi! This is my first Python Command 
>>> 
Note: there are lots of exercises in this book. When you see the 
following statement before an exercise, it means that I tried it 
on IDLE: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 

14 
Type "copyright", "credits" or "license()" for more 
information. 
and if you see the following before the output result, then it 
means that I wrote a separate code and saved it as .py file: 
= = = = = = = = = = = RESTART: 
your_directory_path/firstProgram.py = = = = = = = = = = =  
Python Identifiers 
As the name suggests, Identifiers are keywords that are used to 
identify python objects such as variable, function, class or an 
object. An identifier can start with a _ or any alphabet between 
A to Z or a to z. The name can have letters, underscores and 
digits(0 to 9). It cannot have special characters like @, $ and %. 
Python is also case-sensitive. 
Here are some rules for following naming identifiers in Python 
1. While naming a class, the name should start with a 
capital letter followed by small letters. 
2. Private identifiers should have their name starting with 
a single leading underscore. 
3. If the name of the identifier starts with two 
underscores, then it means that it is strongly private. 
4. Language defined identifiers have two trailing 
underscores at the end. 
5. Name of an identifier cannot start with a digit. 
6. Words reserved by Python cannot be used as an 
identifier. 
7. When you have to use multiple words in the name of 
the identifier, it is better to use underscore between 
the words (bank_account_number) or keep no space 

15 
between the words and start the second and the latter 
words with capital letters (bankAccountNumber). 
8. An identifier used to name Python data is called a 
variable. 
 
Certain words are reserved in Python which means 
they cannot be used as identifiers.  
 
A 
And 
Assert 
As 
B 
Break 
C 
Class 
Continue 
D 
Def 
Del 
E 
Elif 
Else 
Except 
Exec 
F 
False 
Finally 
For 
From 
G 
Global 

16 
I 
If 
Import 
In 
Is 
L 
Lambda 
N 
Not 
None 
Nonlocal 
O 
Or 
P 
Pass 
Print 
R 
Raise 
Return 
T 
Try 
W 
While 
With 
Y 
Yield 
 
 
 

17 
Some important Features in Python 
1. The best feature about Python is that the code is very 
easy to read and understand. It is plain simple English 
with elegant syntax. 
2. Since it is readable, it is easy to learn as well. 
3. It can run anywhere; Mac OS X, Windows, Linux and 
Unix. 
4. It is free and open source which means that you can 
distribute the copy of this software, make changes to it 
and also use the new free programs. You can download 
it for free and you can also modify and redistribute it 
because it is copyrighted and available under an open 
source license. 
5. While coding in Python, you need not worry about the 
low-level details of programming such as how to 
manage memory used by your program. 
6. It does not require complilation. In languages such as 
C++, the code is first converted to binary code with the 
help of a compiler and then this compiled code is 
stored in the computer’s memory and then executed 
but that is not the case with Python. When you execute 
the code in Python, it is converted to bytecodes and 
then it is converted to a native language for the 
computer to understand and the program is executed. 
This is another reason why Python becomes easy to 
use because as a developer, you are able to focus just 
on the source code and you need not bother about 
linking and loading libraries. 
7. You can implement both procedure-oriented (offering 
reusable pieces of programs) and object-oriented 
programming with multiple inheritance (offering data 

18 
and functionality) concepts in Python. This feature 
offers flexibility, this also makes Python the simplest, 
yet the most powerful language. It is simpler than C++ 
and Java. The code can be grouped into modules and 
packages. 
8. The standard library of Python is vast.  
9. The interactive mode of Python is great for checking 
small sections of code before adding it to the main 
script. 
10. For increasing speed, you can write separate piece of 
code in C and then combine it with Python program. 
11. Python code can b embedded in C and C++ programs. 
12. It has a variety of basic data types. 
13. The language offers good way of error handling as it 
supports raising and catching exceptions. 
14. Data types are strongly and dynamically typed. It is not 
possible to mix incompatible data types as this type of 
exception will be raised very soon. 
15. Python offers advanced programming features such as 
generators and comprehensions. 
16. It has automatic memory management which takes 
away the burden of having to manually allocate and 
free memory in code. 
 
So, finally, we know all that is required to get started with 
Python. It is time to now start with some basic exercise so that 
you realize how simple this language is. We start with 
introduction to types and functions in Python. 
 

19 
Introduction to Types and Functions in Python 
Python has different types of data types. Such as: 
1. Numbers: 3.8, -9,0.06, etc. 
2. Strings are defined in single quotes: ‘Hi! I am a string’. 
3. Lists can include any type of objects in square brackets: 
[‘apples’,mangoes,’grapes’] 
4. ‘None’ is a special data type meaning nothing. 
Python also has a number of inbuilt functions that take 
different types of data as arguments and produce the desired 
result. The syntax for defining a function is as follows: 
functionName(parameter_name) 
Finding data type 
‘type’ is a name of a function that defines what type of value 
will be returned by the function.’ 
Let’s try working with the ‘type’ function 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
> >> type(8.4) 
<class 'float'> 
>>> type('Hi') 
<class 'str'> 

20 
>>> type(-7) 
<class 'int'> 
>>> type(['mango', 'apple', 'grapes']) 
<class 'list'> 
Working with list() 
Same way, function list() provides the details about the list 
objects that it consists of: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> list() 
[] 
>>> list ( [ 'mango' ,  'apple' ,  'grapes' ] ) 
[ 'mango' ,  'apple' ,  'grapes' ] 
Finding the length of a variable 
To find the length of any data type, we can use the len() 
function. 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 

21 
>>> len("Hi there") 
8 
>>> len(['mango', 'apple', 'grapes']) 
3 
>>> 
len() function cannot be applied to object type such as float. 
Finding Maximum and Minimum values 
There are functions that can take more than one parameter as 
argument. For example: we need to find out which out of the 
four numbers 6,10,76 and 46 is the biggest and the smallest. 
For this, we can utilise the max() function. 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> max(6,10,76,46) 
76 
The above function retrieves the maximum value out of the 
four values given. 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 

22 
>>> min(6,10,76,46) 
6 
>>> 
The above function retrieves the minimum value out of the 
four values given. 
Conversion from one data type to another 
I will now demonstrate how to convert an integer value to 
string and vice versa. An integer can be converted to string 
datatype using str() function as shown below: 
Note : ‘#’ is used for commenting and will be explained in detail 
at the end of the chapter. While trying the code, you don’t 
have to write what follows after ‘#’. 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> a = 1 #a has the value of 1 
>>> type(a) #Checking the type of variable a 
<class 'int'> 
>>> b = str(a) # a is converted to string and the string value is 
appointed to variable b 
>>> type(b) #Checking the type of variable b 
<class 'str'> 

23 
Same way, a string value can be converted to integer as shown 
below: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> a = '123' # a is assigned a string value 
>>> type(a) # check data type for a 
<class 'str'> 
>>> b = int(a) # a is converted to integer value and assigned to 
b. 
>>> type(b) # Now if we check value of b, it will be int type 
<class 'int'> 
Arithmetic operations in Python 
Now, let’s try to work on some arithmetic operations as no 
application can be deprived of these operations. We are now 
going to try simple addition, subtraction, multiplication and 
division problems. 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> a = 1 # variable a has been assigned value of 1 

24 
>>> b = 2 # variable b has been assigned value of 2 
>>> a + b #Add a and b and press enter to see the results 
3 
>>> a = 1 # variable a has been assigned value of 1 
>>> b = 2 # variable b has been assigned value of 2 
>>> a- b # Subtract b from a and press enter to see the results 
-1 
>>> a = 1  
>>> b = -4 
>>> c = -18 
>>> d = 2 
>>> a*b*c*d # multiplication of four numbers 
144 
>>> 
Another interesting feature of Python is that in a mathematical 
expression, it will go for multiplication and division functions 
before addition and subtraction. Have a look at the examples 
given below: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 

25 
>>> 5+1*6 # checking out difference between 5 + 1 * 6 and (5 
+ 1) * 6 
11 
>>> 
>>> (5+1)*6 
36 
>>> 
All parentheses should be properly closed. If you leave a 
parenthesis open, then the cursor will just move on to the next 
line. 
1+(8 * 7 
       | 
In this case, just close the parenthesis as shown below: 
>>> 1+(8 * 7 
       ) 
57 
>>> 
 
There are three symbols associated with division: 
‘/’, ‘//’ and ‘%’ 
>>> 16/2  # float point division 

26 
8.0 
>>> 16//2 # integer division 
8 
>>> 16%2 # remainder 
0 
>>> 6 % 7 # remainder for 6 divided by 7 
6 
>>> 6 / 7  # float division for 6 divided by 7 
0.8571428571428571 
>>> 6//7 #integer division for 6 divided by 7 
0 
>>> 
Coming to Strings, you can define a string in double quotes or 
single quotes but Python will always return a string in single 
quotes. 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> a = " hello python" 
>>> a 

27 
' hello python' 
>>> a = 'hello python' 
>>> a 
'hello python' 
>>> 
Concatenation of Strings using ‘+’ operator 
Two strings can be concatenated with the help of  ‘+’ operator. 
Try this on IDLE: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> 'hello'+'python' 
'hellopython' 
>>> 'hello'+' '+'python' 
'hello python' 
>>> 
>>> 4*('hello'+' '+'python') # for repetition of a string value we 
make use of * operator 
'hello pythonhello pythonhello pythonhello python' 
>>> 'wish you a '+3*'very '+'Happy New Year' 

28 
'wish you a very very very Happy New Year'  
>>> 'wish you a '+3+'very '+'Happy New Year' # you cannot use 
‘+’ operator between an int and a string object 
Traceback (most recent call last): 
  File "<pyshell#6>", line 1, in <module> 
    'wish you a '+3+'very '+'Happy New Year' 
TypeError: must be str, not int 
Defining variables and assigning them values. 
An equal sign(‘=’) is used to assign a value on its right to the 
variable on the left. We have already done this before but now 
I will explain. Look at the following statement: 
>>> HappyBirthday = 'wish you a '+3*'very '+'Happy  Birthday' 
>>> 
 In the above statement, an expression of 'wish you a '+3*'very 
'+'Happy Birthday' is assigned to a variable by the name 
HappyBirthday. Whenever we want this string, we can simply 
use the variable: 
>>> 'My dear friend '+ HappyBirthday 
'My dear friend wish you a very very very Happy  Birthday' 
Or 
>>> HappyBirthday +' My dear friend ' 
'wish you a very very very Happy  Birthday My dear friend ' 

29 
Now, let’s try out an example. 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> length = 6 
>>> breadth = 5 
>>> perimeter = 2*(length + breadth) 
>>> perimeter 
22 
>>> print(HappyBirthday+' My dear friend ') 
wish you a very very very Happy  Birthday My dear friend 
>>> print(HappyBirthday,' My dear friend ') 
wish you a very very very Happy  Birthday  My dear friend  
print() command  
print() command will display result in string form. You can 
provide mixed parameters, print will display the results with 
single blanks ) If you just give a simple print() command with no 
parameters in between, it will just advance to the next line. 
Triple quotes allow a variable to have multiple lines of text. 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 

30 
Type "copyright", "credits" or "license()" for more 
information. 
>>> print('I have', 3,'very special','friends') 
I have 3 very special friends 
>>> AboutMe = '''Hi ! 
I have Three friends. 
All three are special and I have no favorites.''' # assigning 
multiple lines of text to a variable 
>>> AboutMe 
'Hi !\nI have Three friends.\nAll three are special and I have no 
favorites.' 
>>> AboutMe = '''Hi ! 
I have Three friends. 
All  three are special and I have no favorites.''' # let’s try the 
same thing using the print() command. 
>>> print(AboutMe) 
 Hi ! 
I have Three friends. 
All  three are special and I have no favorites. 
>>> 
 

31 
Escape Codes in Python 
There are escape codes that allow you to embed characters 
that are otherwise not possible. 
For example: Let’s take a statement – ‘I’m the greatest.’ 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> a = 'I'm the greatest' 
SyntaxError: invalid syntax 
>>> 
You will get an error of invalid syntax. This happens because 
Python is looking at ‘I’ as one string, then the rest of the 
statement is unidentified with a single quote at the end. 
To insert a single quote within two single quotes we make use 
of escape character - \’ 
Have a look at the following exercise: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> a = 'I\'m the greatest' 
>>> a 

32 
"I'm the greatest" 
>> a = "I'm the greatest" # In 3.6.4 version of Python this 
would also work for you 
> 
>>> a 
"I'm the greatest" 
>>> 
>>> a = " I'm not sure but I don't want to discuss this anymore" 
>>> a 
" I'm not sure but I don't want to discuss this anymore" 
>>> 
The escape character \n enters a new line. It works well with 
the print() command. 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> a = " I'm not sure \n but I don't want to discuss this 
anymore" # This would not insert a new line 
>>> a 
" I'm not sure \n but I don't want to discuss this anymore" 

33 
>>> a = " I'm not sure \n but I don't want to discuss this 
anymore" # new line will be inserted if you put\n with print() 
command 
>>> print(a) 
 I'm not sure  
 but I don't want to discuss this anymore 
>>> 
>>> print('I\'m not sure', '\n', "I don't want to talk about it") # 
Another way of doing the same 
I'm not sure  
 I don't want to talk about it. 
We will now learn how to add character ‘\’ (backslash) in a 
string. 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> a= "I stay in house no. 1\\3" # Adding \ in a string 
>>> a 
'I stay in house no. 1\\3' 
>>> print(a) 
I stay in house no. 1\3 

34 
>>> 
input() function for making things interactive 
Till now, you have seen simple examples of working with static 
data. Now, let’s try our hands on simple dynamic 
programming. 
Let’s start with a simple exercise. We want a program that asks 
a user to enter his or her name and on doing so, it should 
display a personalized “happy New Year” message. 
Here we will make use of the input() function. A program may 
receive inputs from a user, another database or another 
computer. This information is read by the help of input() 
function and is converted into a string by removing  the trailing 
new line and returns it. 
Look at the following statement: 
name = input('Please enter your first name:') 
This statement will prompt the user to enter his/her name and 
once that is done, the value will be passed on to the variable 
‘name’ and then we can give the desired print command. 
I open a new file and the content of my file is as shown below: 
#!/usr/bin/python 
name = input('Please enter your first name:') 
print('hi', name,'!!','Wish you a very happy new year.','\n', 
'Have a great day and a wonderful year ahead') 

35 
After typing this code, I save my file by the name 
‘inputfunction.py’ 
So when I run the program, the output on the shell is as 
follows: 
Please enter your first name:  
It waits for the user’s response. I type the name ‘Justin’ and 
press “Enter”. After that, a personalised message “hi  Justin !! 
Wish you a very happy new year. ”  is displayed as shown 
below: 
= = = = = = = = = = = RESTART: 
your_directory_path/firstProgram.py = = = = = = = = = = =  
Please enter your first name: Justin  
hi  Justin !! Wish you a very happy new year.  
 Have a great day and a wonderful year ahead 
Adding two numbers provided by the user 
Now can you try a simple example of asking the user to enter 
two numbers and then adding them? 
Look at the following code. Can you tell if this code would work 
properly? 
#!/usr/bin/python 
firstnumber = input('Please enter your first number:') 
secondnumber = input('Please enter your second number:') 
sumvalue = firstnumber + secondnumber  

36 
print(sumvalue) 
When I run this program the following result is displayed: 
= = = = = = = = = = = RESTART: 
your_directory_path/firstProgram.py = = = = = = = = = = =  
Please enter your first number:2 
Please enter your second number:4 
24 
Even a child would know that 2 + 4 = 6. However, this program 
gives the answer as 24. Can you guess what is wrong with the 
code? 
As already mentioned earlier, the input function reads a value 
and converts it to string before assigning it to a variable. 
Hence, both values ‘2’ and ‘4’ are actually stored as strings and 
not integers. The print command thus concatenates the two 
strings and does not add two numbers. We need to convert the 
two values back to integer before adding them. So the actual 
value of sumvalue is: 
sumvalue=’2’+’4’=’24’ 
Now, look at the modified code: 
#!/usr/bin/python 
firstnumber = input('Please enter your first number:') 
secondnumber = input('Please enter your second number:') 
sumvalue = int(firstnumber) + int(secondnumber)  

37 
print(sumvalue) 
when we execute this program, following output is displayed: 
= = = = = = = = = = = RESTART: 
your_directory_path/firstProgram.py = = = = = = = = = = =  
Please enter your first number:5 
Please enter your second number:6 
11 
>>> 
There is another way of writing the same piece of code: 
#!/usr/bin/python 
firstnumber = int(input('Please enter your first number:')) 
secondnumber = int(input('Please enter your second 
number:')) 
sumvalue = firstnumber + secondnumber  
print(sumvalue) 
= = = = = = = = = = = RESTART: 
your_directory_path/firstProgram.py = = = = = = = = = = =  
Please enter your first number:45 
Please enter your second number:09 
54 

38 
 In this example, we convert the values obtained by the input 
function to integer value before they are assigned to a variable. 
sep parameter 
Another interesting parameter that I would like to introduce 
here is the sep parameter. This parameter can be used in the 
print command. When you give a print command and there is 
more than one argument, then by default, Python will add 
space within the arguments before printing. The sep character 
allows you to convert that space into any character. 
So, let’s suppose there is a company by the name ‘xyz’ and you 
need to create emails for new employees by putting an hyphen 
‘-‘ between the first name and the last name. Here is the code 
for it: 
#!/usr/bin/python 
firstname = input('Please enter the first name of the 
employee:') 
lastname = input('Please enter the last name of the employee:') 
print('The email id assigned is: '+firstname+'-
'+lastname,'xyz.com',sep='@',) 
= = = = = = = = = = = RESTART: 
your_directory_path/firstProgram.py = = = = = = = = = = =  
Please enter the first name of the employee:michelle 
Please enter the last name of the employee:middler 
The email id assigned is: michelle-middler@xyz.com 

39 
>>> 
Here is another example: 
#!/usr/bin/python 
day = input('which day of the month is it?:') 
month = input('which month is it?:') 
year = input('which year is it?:') 
print('The date is: '+day,month,year,sep='-') 
print('The date is: '+day,month,year,sep='/') 
= = = = = = = = = = = RESTART: 
your_directory_path/firstProgram.py = = = = = = = = = = =  
which day of the month is it?:25 
which month is it?:06 
which year is it?:2018 
The date is: 25-06-2018 
The date is: 25/06/2018 
>>> 
How braces{} work 
Now, let’s try to achieve the same result with the help of {}. 
Braces are used when there is a need to insert value in a string 
same way as fill in the blanks. This is done with the help of 

40 
format() function which is called using the ‘.’ dot operator. 
Look at the code given below: 
#!/usr/bin/python 
firstname = input('Please enter the first name of the 
employee:') 
lastname = input('Please enter the last name of the employee:') 
print('The email id assigned is: '+firstname+'-
'+lastname,'xyz.com',sep='@') 
print('The email id assigned is: {}-{}@xyz.com 
'.format(firstname,lastname)) 
= = = = = = = = = = = RESTART: 
your_directory_path/firstProgram.py = = = = = = = = = = = 
Please enter the first name of the employee:alex 
Please enter the last name of the employee:jackson 
The email id assigned is: alex-jackson@xyz.com 
The email id assigned is: alex-jackson@xyz.com  
>>> 
In this example, the format method takes two parameters and 
when it is called by a string object, it inserts the first parameter 
value when it encounters the first {} and the second parameter 
when it encounters the second{}. 
Here is another example for you: 
#!/usr/bin/python 

41 
firstname = input('Please enter the first name of the 
employee:') 
lastname = input('Please enter the last name of the employee:') 
print('Hello {}{}!! wish you a very happy and prosperous new 
year'.format(firstname+' ',lastname)) 
= = = = = = = = = = = RESTART: 
your_directory_path/firstProgram.py = = = = = = = = = = = 
Please enter the first name of the employee:Alex 
Please enter the last name of the employee:Jackson 
Hello Alex Jackson!! wish you a very happy and prosperous 
new year 
>>> 
You will read more about {} in detail in the later sections. 
Let’s now move ahead and get an idea about what the need for 
a function is and how we define a function. 
Defining a function 
Function is nothing but block of reusable code which is written 
to perform a specific function and can be called whenever 
there is a need. So far, we have been using functions defined 
by Python such as print(), str(), int(), format() etc. However, we 
can write our own functions and call them whenever there is a 
need. 
The Syntax for defining  a function is as follows: 

42 
def function_name(param): 
     statements 
     return [if there is any value] 
As you can see, the function definition starts with the keyword 
‘def’, after that, you provide the function name. So, whenever 
we have to call a function, we can call it by that name. The first 
statement of the function can be a documentation string of the 
function or docstring but that is optional and we may not be 
using it in our examples. After the function name comes the 
parenthesis(). So, if the function requires any parameters, then 
those should be given here or else the parenthesis can be left 
blank. 
So, I have defined the following function, to wish hello: 
#!/usr/bin/python 
# function definition to call a function 
def sayHello(str1, str2): 
    print('Hello {}{}!! wish you a very happy and prosperous new 
yeasr'.format(firstname+' ',lastname)) 
firstname = input('Please enter the first name of the 
employee:') 
lastname = input('Please enter the last name of the 
employee:')If I execute this file. I would get no output. Can you 
tell why?? 
= = = = = = = = = = = RESTART: 
your_directory_path/firstProgram.py = = = = = = = = = = = 

43 
Please enter the first name of the employee: Michael 
Please enter the last name of the employee:Jackson 
>>> 
This happens because although we have defined a function, we 
have not yet made a call to it. The statements written within a 
function definition will be executed only if the function is 
called. 
!/usr/bin/python 
# function definition to call a function 
def sayHello(str1, str2): 
    print('Hello {}{}!! wish you a very happy and prosperous new 
year'.format(firstname+' ',lastname)) 
 
firstname = input('Please enter the first name of the 
employee:') 
lastname = input('Please enter the last name of the employee:') 
#call the function 
sayHello(firstname, lastname) 
The output will be as follows: 
= = = = = = = = = = = RESTART: 
your_directory_path/firstProgram.py = = = = = = = = = = = 
Please enter the first name of the employee:Michael 

44 
Please enter the last name of the employee:Jackson 
Hello Michael Jackson!! wish you a very happy and prosperous 
new year 
>>> 
There can be functions that don’t take any parameters. 
I am going to make changes in the code given above and get 
the same results. 
#!/usr/bin/python 
# function definition to call a function 
def sayHello(): 
    print('wish you a very happy and prosperous new yeasr') 
firstname = input('Please enter the first name of the 
employee:') 
lastname = input('Please enter the last name of the employee:') 
#call the function 
print("Hello!!",firstname,lastname) 
sayHello() 
= = = = = = = = = = = RESTART: 
your_directory_path/firstProgram.py = = = = = = = = = = = 
#!/usr/bin/python 
# function definition to call a function 

45 
def sayHello(): 
    print('wish you a very happy and prosperous new yeasr') 
firstname = input('Please enter the first name of the 
employee:') 
lastname = input('Please enter the last name of the employee:') 
#call the function 
print("Hello!!",firstname,lastname) 
sayHello() 
Now, I have will make another modification in the code. Have a 
look: 
#!/usr/bin/python 
# function definition returns a string value for wishing  happy 
new year 
def sayHello(): 
    happyNewYear = 'wish you a very happy and prosperous new 
year' 
    return happyNewYear 
firstname = input('Please enter the first name of the 
employee:') 
lastname = input('Please enter the last name of the employee:') 
#call the function sayHello() and pass the string value that it 
returns to the print() function 

46 
print("Hello!!",firstname,lastname,sayHello()) 
Here, the function does not print anything, rather it returns a 
string with the value ‘wish you a happy and prosperous new 
year’ 
So, this value can be passed directly to the print command as 
shown in the code above. 
The output is the same: 
= = = = = = = = = = = RESTART: 
your_directory_path/firstProgram.py = = = = = = = = = = = 
Please enter the first name of the employee:Michael 
Please enter the last name of the employee:Jackson 
Hello!! Michael Jackson wish you a very happy and prosperous 
new year 
>>> 
Using Comments in Python 
While developing a code for any application, it is a common 
practice to include comments in the code. While developing 
any project, the lines of code may exceed from hundreds to 
thousands of lines of code and in such vast applications, if 
there is any sort of error rectification or update required, 
sometimes, it can become hard to track where the changes 
need to be done. All organization encourage developers to 
include comments in the code so that if a new developer joins 
a team or an old developer is replaced, it is not too difficult for 

47 
them to understand the code as the comments help them 
understand the idea behind the code.  
Statement following a hastag ‘#’ is called a comment. It is used 
for single line comments.  
Have a look at the code that we just tried, I am again giving it 
below. The comment section is marked in bold. 
 #!/usr/bin/python 
# function definition returns a string value for wishing  happy 
new year 
def sayHello(): 
    happyNewYear = 'wish you a very happy and prosperous new 
year' 
    return happyNewYear 
firstname = input('Please enter the first name of the 
employee:') 
lastname = input('Please enter the last name of the employee:') 
#call the function sayHello() and pass the string value that it 
returns to the print() function 
print("Hello!!",firstname,lastname,sayHello()) 
I have put all comments statement in bold. You can see before 
the function definition and when it is called, I have put a 
comment so that those who read this code can make out why 
this function was created and where this function was 
ultimately called. With this much of information, any Python 

48 
coder can make modification to the code and add his 
comments that describe what changes he has done and why. 
Sometimes, while adding new code to a file, developers simply 
comment the old code instead of deleting it so that in case 
there is a need to revert back to the old code, it can be done 
easily. 
Multiple line comments 
Sometimes, a coder may have a lot to say about the code and 
adding a # at every new line may not seem to be a convenient 
option. So, for scenarios where a comment may consist of 
multiple lines of code, triple quotes (“””) can be used at the 
beginning and the end of the code. 
#I am a single line comment 
""" I am a multiple line comment 
I am needed when the coder has a lot to say and single line 
comments following a # may not seem very convenient""" 
So, in this chapter, you have seen a brief overview of how 
things work in Python. We will now look at all these aspects in 
more detail in the coming chapters. 
 
 
 

49 
Chapter 4 
Python Variable Types 
 
Working with  Variable Types – I ( Numbers and 
Strings) 
The standard data types in Python are: 
• 
Numbers 
• 
Strings 
• 
Lists 
• 
Tuples 
• 
Python Dictionaries 
In this chapter, we will work with Numbers and Strings. 
‘=’ for assigning values 
Unlike other programming languages, in Python, there is no 
need to explicitly define or declare a variable. You can just 
write the name of the variable and assign a value to it using ‘=’ 
operator. 
So, the moment you write  
a =” Hello” 
‘a’ becomes a string variable having the value “Hello” 
Let’s try it out in IDLE: 

50 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> a = "Hello" 
>>> a 
'Hello' 
>>> type(a) 
<class 'str'> 
>>> 
In Python, you can assign same value to multiple variables in 
one single go. 
Have a look at the example given below: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> x = y = z = "Hello" 
>>> x 
'Hello' 
>>> y 
'Hello' 

51 
>>> z 
'Hello' 
>>> type(x) 
<class 'str'> 
>>> type(y) 
<class 'str'> 
>>> type(z) 
<class 'str'> 
>>> 
Numeric data types 
Whenever you assign a numeric value to a variable, it becomes 
number data type. 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> a = 1 
>>> b = -5 
>>> c = 12.8 
>>> type(a) 
<class 'int'> 

52 
>>> type(b) 
<class 'int'> 
>>> type(c) 
<class 'float'> 
>>> 
To delete a reference to a variable, we can use the ‘del’ 
keyword. 
>>> del a 
>>> type(a) 
Traceback (most recent call last): 
  File "<pyshell#7>", line 1, in <module> 
    type(a) 
NameError: name 'a' is not defined. 
 The numerical data types can be of four types: 
signed integers are of type  int 
long  integers are of type long 
floating point real values are of type  float 
complex numbers are of type complex 
 
 

53 
Strings in Python 
A String is text that is put in single or double quotes. 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> str1 = "hi I am a python String" 
>>> str1 
'hi I am a python String' 
>>> type(str1) 
<class 'str'> 
>>> 
We have already seen concatenation and repetition of Strings 
Concatenation Example 
 Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> a = "Hi " 
>>> b = "I am Python" 
>>> c = a + b 

54 
>>> c 
'Hi I am Python' 
Repetition Example 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> a =" Hi " 
>>> b = "I am Python" 
>>> d = 3*a + b 
>>> d 
' Hi  Hi  Hi I am Python' 
>>> 
Working with subsets of strings using slice 
operator[] 
Look at the python code given below: 
#!/usr/bin/python 
# Here We Will Show Working with Strings 
#string definition 
string1 = 'Hi I am Python' 

55 
#The following statement prints the value of string 
print ('the value of string is ',string1) 
#The following statement prints the first character of the 
string, using string1[0] 
print('the first character of the string is ',string1[0]) 
#The following statement prints the characters from 2nd to 
6th character 
print ('the second to sixth characters are', string1[1:6]) 
#The following statement prints the string from 5th character 
onwards 
print('the string value from 5th character onwards is ', 
string1[4:]) 
= = = = = = = = = = = RESTART: 
your_directory_path/firstProgram.py = = = = = = = = = = = 
the value of string is  Hi I am Python 
the first character of the string is  H 
the second to sixth characters are i I a 
the string value from 5th character onwards is   am Python 
>>> 
 
 

56 
Chapter 5 
Decision Making 
 
Decision making is the most important aspect of any software 
development process. A program should be able to work 
smartly and take the right decision. A simple process like 
accessing your online account. The website would display your 
information regarding your account only and for that, you have 
to provide your username and password. If the username and 
password that you provide does not match, then you cannot 
access your account and if you provide the wrong password 
three times consecutively, then your account will be locked. 
How does that happen? How is it decided when to let the user 
access the account, when to deny and when to lock the 
account? All this is achieved with the help of decision-making 
statements. 
So, basically, all decision making happens on the basis of true 
or false values as shown below: 
Do Username and Password Match? If Yes – Grant Access. 
Do Username and Password Match? If No – Try again. 
Do Username and Password Match? If No – Try again. 
Do Username and Password Match? If No – Try again. 
Do Username and Password Match? If No – Lock Account. 
This is just one simple example. Any software program would 
have many such decision-making points and this is why we call 

57 
modern day software programs 'smart'. So now coming to the 
Decision-making process in Python, we are going to learn about 
the following statements: 
 
The if statement. 
 
The if…else statement. 
 
Nested if statement. 
The difference between the three statements mentioned 
above is that in case of a simple if statement, one Boolean 
expression is followed by one or more statements. However, in 
the case of if…else statements, steps are defined for both true 
and false outcome. Nested if statement is very interesting; if 
one decision is based on another, you may find yourself in a 
situation where you have to put one if statement into the 
other. 
The if Statement 
The syntax for if statement is as shown below: 
if condition(s): 
   statements 
So, let’s have a look at this small, funny example. 
I have created a if.py file for which the code is as follows: 
Example: 
a = input(" How do you feel today? Press H for Happy and S for 
Sad:   ") 

58 
if (a=='H'): 
    print("Laugh Ha Ha Ha Ha") 
Now, let’s execute this file and see the result: 
Output 1: 
= = = = = = = = = = = = = = = = RESTART: my_directory/if.py = = = 
= = = = = = = = = = = = = = = = = = = = 
 How do you feel today? Press H for Happy and S for Sad:   H 
Laugh Ha Ha Ha Ha 
>>> 
What happens if I write S? Let’s execute the file once again: 
Output 2: 
= = = = = = = = = = = = = = = = RESTART: my_directory/if.py = = = 
= = = = = = = = = = = = = = = = = = = = How do you feel today? 
Press H for Happy and S for Sad:   S 
>>> 
Now, let’s change the if condition from a==‘H’ to a!= ‘H’ and 
see what happens. 
a = input(" How do you feel today? Press H for Happy and S for 
Sad:   ") 
if (a!='H'): 
    print("Laugh Ha Ha Ha Ha") 
>>> 

59 
Output 3: 
= = = = = = = = = = = = = = = = RESTART: my_directory/if.py = = = 
= = = = = = = = = = = = = = = = = = = = How do you feel today? 
Press H for Happy and S for Sad:   S 
Laugh Ha Ha Ha Ha 
>>> 
What happens if I write H? 
Output 4: 
= = = = = = = = = = = = = = = = RESTART: my_directory/if.py = = = 
= = = = = = = = = = = = = = = = = = = = 
 How do you feel today? Press H for Happy and S for Sad:   H 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
If …Else Statement 
In the above examples, we have seen that if a condition is true, 
then we can execute some commands. In reality, however, 
there are scenarios where you perform a certain set of 
commands if a condition is true and if the condition is not true, 
then you may like to perform other set of functions. 
The syntax for if…else statement is as shown below: 
if condition(s): 
   statements 

60 
else condition(s): 
   statements 
Now, have a look at the following piece of code. Here, we have 
modified the previous example: 
Example: 
a = input(" How do you feel today? Press H for Happy and S for 
Sad:   ") 
if (a =='H'): 
    print("Laugh Ha Ha Ha Ha") 
else : 
    print(" Please stop feeling sad") 
Let’s execute the program and see the output: 
Output 1: 
= = = = = = = = = = = = = = = = RESTART: my_directory/if.py = = = 
= = = = = = = = = = = = = = = = = = = = 
How do you feel today? Press H for Happy and S for Sad:   S 
 Please stop feeling sad 
>>> 
Output 2: 
= = = = = = = = = = = = = = = = RESTART: my_directory/if.py = = = 
= = = = = = = = = = = = = = = = = = = = 

61 
How do you feel today? Press H for Happy and S for Sad:   H 
Laugh Ha Ha Ha Ha 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Let’s have a look at another piece of code: 
Example: 
a = input(" Welcome to the college website !! Are you a 
professor? Type Y for yes and N for no : ")   
if(a=='Y'): 
   print("Welcome to the Teacher's section") 
else: 
    print(" Welcome to the Student's section") 
Output 1: 
= = = = = = = = = = = = = = = = RESTART: my_directory/if.py = = = 
= = = = = = = = = = = = = = = = = = = = 
Welcome to the college website!! Are you a professor? Type Y 
for yes and N for no : Y 
Welcome to the Teacher's section 
>>> 
 
 

62 
Output 2: 
= = = = = = = = = = = = = = = = RESTART: my_directory/if.py = = = 
= = = = = = = = = = = = = = = = = = = = 
Welcome to the college website !! Are you a professor? Type Y 
for yes and N for no : N 
 Welcome to the Student's section 
>>> 
However, there is a flaw here what if You type X for an answer? 
Output 3: 
= = = = = = = = = = = = = = = = RESTART: my_directory/if.py = = = 
= = = = = = = = = = = = = = = = = = = = 
Welcome to the college website !! Are you a professor? Type Y 
for yes and N for no : X 
 Welcome to the Student's section 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
For anything other than ‘Y’, the code will take the visitor to the 
Student’s section. 
Let’s make some more modifications to the code. 
Example: 
a = input(" Welcome to the college website !! Are you a 
professor? Type Y for yes, N for no, G for General : ")   

63 
if(a=='Y'): 
   print("Welcome to the Teacher's section") 
elif(a == 'N'): 
    print(" Welcome to the Student's section") 
elif(a =='G'): 
    print(" Welcome to the website") 
else: 
    print(" Invalid Input") 
Output 1: 
= = = = = = = = = = = = = = = = RESTART: my_directory/if.py = = = 
= = = = = = = = = = = = = = = = = = = = 
Welcome to the college website !! Are you a professor? Type Y 
for yes, N for no, G for General : Y 
Welcome to the Teacher's section 
Output 2: 
= = = = = = = = = = = = = = = = RESTART: my_directory/if.py = = = 
= = = = = = = = = = = = = = = = = = = = 
 Welcome to the college website !! Are you a professor? Type Y 
for yes, N for no, G for General : N 
 Welcome to the Student's section 
>>> 

64 
Output 3: 
= = = = = = = = = = = = = = = = RESTART: my_directory/if.py = = = 
= = = = = = = = = = = = = = = = = = = = 
 Welcome to the college website !! Are you a professor? Type Y 
for yes, N for no, G for General : G 
 Welcome to the website 
>>> 
Output 4: 
= = = = = = = = = = = = = = = = RESTART: my_directory/if.py = = = 
= = = = = = = = = = = = = = = = = = = = 
 Welcome to the college website !! Are you a professor? Type Y 
for yes, N for no, G for General : D 
 Invalid Input 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
In the example given below, there are few more modifications 
done to the code in order to explain the concept of nested if 
statement. Here, if the user is a teacher, he is taken to a 
teacher’s section but if he is not a teacher, he is taken through 
nested if statement block where it is judged if he is a student or 
not. 
This is how we write down this code: 
 

65 
Step 1: First, write the outer body of the code. 
# Ask the user to enter ‘Y’ if he is a professor, N if he is not a 
Professor and G if he is a General #user. Any values out of 
these three inputs should be considered invalid.  
a = input(" Welcome to the college website !! Are you a 
professor? Type Y for yes, N for no, G for General : ")   
# If user enters Y, then take him to teacher’s section. 
if(a=='Y'): 
   print("Welcome to the Teacher's section") 
# if he enters N, then take him to nested if #statement to 
check if he is a student or not. 
elif(a == 'N'): 
# This is where code for nested if will come. 
elif(a =='G'): 
    print(" Welcome to the website") 
else: 
    print(" Invalid Input") 
Step 2: Now take the block where you would put the nested if 
statement. 
elif(a == 'N'): 
# This is where code for nested if will come. 

66 
Step 3: Now, write the code for Nested if statement. Make 
sure your indentation is correct. 
elif(a == 'N'): 
   b = input("Are you a student? Press Y for Yes and N for No :") 
# If the user enters ‘ Y ‘, take him to student’s section. 
   if(b== 'Y'): 
      print("I am now in Nested if") 
      print(" Welcome to the Student's section") 
# If he enters ‘ N ‘, take him to General section and for any 
other value, consider the input invalid. 
   elif(b == 'N'): 
      print(" Welcome to General Section") 
   else: 
      print("Invalid input") 
So, this is how the final code will look: 
# Ask the user to enter ‘Y’ if he is a professor, N if he is not a 
Professor and G if he is a General #user. Any values out of 
these three inputs should be considered invalid.  
a = input(" Welcome to the college website !! Are you a 
professor? Type Y for yes, N for no, G for General : ")   

67 
# If user enters Y, then take him to teacher’s section, if he 
enters N, then take him to nested if #statement to check if he 
is a student or not. 
if(a=='Y'): 
   print("Welcome to the Teacher's section") 
elif(a == 'N'): 
   b = input("Are you a student? Press Y for Yes and N for No :") 
# If the user enters ‘ Y ‘, take him to student’s section 
   if(b== 'Y'): 
      print("I am now in Nested if") 
      print(" Welcome to the Student's section") 
# If he enters ‘ N ‘, take him to General section and for any 
other value, consider the input invalid. 
   elif(b == 'N'): 
      print(" Welcome to General Section") 
   else: 
      print("Invalid input") 
elif(a =='G'): 
    print(" Welcome to the website") 
else: 
    print(" Invalid Input") 

68 
Output 1: 
= = = = = = = = = = = = = = = = RESTART: my_directory/if.py = = = 
= = = = = = = = = = = = = = = = = = = = 
Welcome to the college website !! Are you a professor? Type Y 
for yes, N for no, G for General : Y 
Welcome to the Teacher's section 
>>> 
Output 2: 
= = = = = = = = = = = = = = = = RESTART: my_directory/if.py = = = 
= = = = = = = = = = = = = = = = = = = = 
 Welcome to the college website !! Are you a professor? Type Y 
for yes, N for no, G for General : G 
 Welcome to the website 
>>> 
Output 3: 
= = = = = = = = = = = = = = = = RESTART: my_directory/if.py = = = 
= = = = = = = = = = = = = = = = = = = = 
 Welcome to the college website !! Are you a professor? Type Y 
for yes, N for no, G for General : N 
Are you a student? Press Y for Yes and N for No :Y 
I am now in Nested if 
 Welcome to the Student's section 

69 
>>> 
Output 4: 
= = = = = = = = = = = = = = = = RESTART: my_directory/if.py = = = 
= = = = = = = = = = = = = = = = = = = = 
 Welcome to the college website !! Are you a professor? Type Y 
for yes, N for no, G for General : N 
Are you a student? Press Y for Yes and N for No :N 
 Welcome to General Section 
>>> 
Output 5: 
= = = = = = = = = = = = = = = = RESTART: my_directory/if.py = = = 
= = = = = = = = = = = = = = = = = = = =  
 Welcome to the college website !! Are you a professor? Type Y 
for yes, N for no, G for General : N 
Are you a student? Press Y for Yes and N for No :D 
Invalid input 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
 
 
 

70 
Chapter 6 
Working with Loops 
 
Welcome to the world of Loops in Python. We are going to 
discuss the following topics in this section: 
• 
The for Loop 
• 
While Loop 
• 
Nested Loops in for Loop 
• 
Statements to Control a Loop 
• 
The ‘break’ statement 
• 
The 'continue' statement 
• 
The ‘pass’ statement 
For Loop 
‘For’ loop is used to iteration over elements of an object. It can 
be applied on sequences like list, string, arrays, etc. The syntax 
for the ‘for’ loop is as follows: 
Example: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> countries = ['United States of America','Canada','Morocco', 
'France','Turkey','China','India'] 

71 
>>> for country in countries: 
 
print("Hey now I am in "+country) 
Output: 
= = = = = = = = = = = = = = = = RESTART: my_directory/if.py = = = 
= = = = = = = = = = = = = = = = = = = = 
Hey now I am in United States of America 
Hey now I am in Canada 
Hey now I am in Morocco 
Hey now I am in France 
Hey now I am in Turkey 
Hey now I am in China 
Hey now I am in India 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Now, let’s try to print the same list countries in reverse order. 
Have a look at the code carefully: 
Example: 
# Create a list of country names. 
countries = ['United States of America','Canada','Morocco', 
'France','Turkey','China','India'] 

72 
# Find the length of the countries list. The index of the last 
element will be one less than the #length. 
index = len(countries)-1 
# Since here we are accessing list with index number, every 
time an element is accessed, reduce #the index by one.   
for country in countries: 
 
print("Hey now I am in "+countries[index]) 
 
index = index-1 
Output: 
= = = = = = = = = = = = = = = = RESTART: my_directory/if.py = = = 
= = = = = = = = = = = = = = = = = = = = 
Hey now I am in India 
Hey now I am in China 
Hey now I am in Turkey 
Hey now I am in France 
Hey now I am in Morocco 
Hey now I am in Canada 
Hey now I am in United States of America 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 

73 
The following example will show how to embed ‘if’ statement 
in a for loop. 
Example: 
countries = ['United States of AmeriPrint all countries except 
Turkey. 
ca','Canada','Morocco','France','Turkey','China','India'] 
for country in countries: 
    if(country != 'Turkey'): 
        print("Hey now I am in "+country) 
Output: 
= = = = = = = = = = = = = = = = RESTART: my_directory/if.py = = = 
= = = = = = = = = = = = = = = = = = = = Hey now I am in United 
States of America 
Hey now I am in Canada 
Hey now I am in Morocco 
Hey now I am in France 
Hey now I am in China 
Hey now I am in India 
>>> 
* * * * * * * * * * * * * * * * * * * *  End Of Example * * * * * * 
* * * * * * * * * * * * * * * *  * * * * In the following example, 
we will attempt to print table of two using a for loop: 

74 
Example: 
print(" We will use for loop to print table of 2") 
numbers = [1,2,3,4,5,6,7,8,9,10] 
for index in numbers : 
    answer = 2* index 
    print("2 * "+str(index)+" = "+ str(answer)) 
Output: 
= = = = = = = = = = = = = = = = RESTART: my_directory/if.py = = = 
= = = = = = = = = = = = = = = = = = = =  We will use for loop to 
print table of 2 
2 * 1 = 2 
2 * 2 = 4 
2 * 3 = 6 
2 * 4 = 8 
2 * 5 = 10 
2 * 6 = 12 
2 * 7 = 14 
2 * 8 = 16 
2 * 9 = 18 
2 * 10 = 20 

75 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Nested for loops 
If you have understood how nested if loops work, then you will 
not have a problem in understanding the working of Nested 
For loops. 
Let’s try to print tables for 3, 4 and 5 using nested for loop. 
Example: 
for x in range(3,6): 
    print("table of "+str(x)) 
    for y in range(1,11): 
        answer = x * y 
        print(str(x)+ " * " +str(y)+" = "+ str(answer)) 
= = = = = = = = = = = = = = = = RESTART: my_directory/if.py = = = 
= = = = = = = = = = = = = = = = = = = =  
table of 3 
3 * 1 = 3 
3 * 2 = 6 
3 * 3 = 9 
3 * 4 = 12 
3 * 5 = 15 

76 
3 * 6 = 18 
3 * 7 = 21 
3 * 8 = 24 
3 * 9 = 27 
3 * 10 = 30 
table of 4 
4 * 1 = 4 
4 * 2 = 8 
4 * 3 = 12 
4 * 4 = 16 
4 * 5 = 20 
4 * 6 = 24 
4 * 7 = 28 
4 * 8 = 32 
4 * 9 = 36 
4 * 10 = 40 
table of 5 
5 * 1 = 5 
5 * 2 = 10 
5 * 3 = 15 

77 
5 * 4 = 20 
5 * 5 = 25 
5 * 6 = 30 
5 * 7 = 35 
5 * 8 = 40 
5 * 9 = 45 
5 * 10 = 50 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
While Loop 
While loop considers a condition given in parenthesis and 
keeps on executing the instructions as long as the condition is 
true. 
Syntax for while loop is as follows: 
while(expression): 
statements 
We now try to write the same code using while loop. 
Example: 
countries = ['United States of 
America','Canada','Morocco','France','Turkey','China','India'] 
i = len(countries) 

78 
count = 0 
while(count<i): 
    print("Hey now I am in "+countries[count]) 
    count = count+1 
Output: 
= = = = = = = = = = = = = = = = RESTART: my_directory/if.py = = = 
= = = = = = = = = = = = = = = = = = = =  
Hey now I am in United States of America 
Hey now I am in Canada 
Hey now I am in Morocco 
Hey now I am in France 
Hey now I am in Turkey 
Hey now I am in China 
Hey now I am in India 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Example: 
countries = ['United States of 
America','Canada','Morocco','France','Turkey','China','India'] 
i = len(countries) 

79 
count = i-1 
while(count>-1): 
    print("Hey now I am in "+countries[count]) 
    count = count – 1 
Output: 
 = = = = = = = = = = = = = = = = RESTART: my_directory/if.py = = = 
= = = = = = = = = = = = = = = = = = = = 
Hey now I am in India 
Hey now I am in China 
Hey now I am in Turkey 
Hey now I am in France 
Hey now I am in Morocco 
Hey now I am in Canada 
Hey now I am in United States of America 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Example: 
Print all countries except Turkey. 
countries = ['United States of 
America','Canada','Morocco','France','Turkey','China','India'] 

80 
i = len(countries) 
count = 0 
while(count<i): 
    if(countries[count] != 'Turkey'): 
        print("Hey now I am in "+countries[count]) 
    count = count + 1 
Output: 
= = = = = = = = = = = = = = = = RESTART: my_directory/if.py = = = 
= = = = = = = = = = = = = = = = = = = = = 
Hey now I am in United States of America 
Hey now I am in Canada 
Hey now I am in Morocco 
Hey now I am in France 
Hey now I am in China 
Hey now I am in India 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Example: 
Print table of two using a while loop: 
print(" We will use while loop to print table of 2") 

81 
numbers = [1,2,3,4,5,6,7,8,9,10] 
count = 1 
index = len(numbers) 
while(count <= index): 
    answer = 2* count 
    print("2 * "+str(count)+" = "+ str(answer)) 
    count = count + 1 
Output: 
= = = = = = = = = = = = = = = = RESTART: my_directory/if.py = = = 
= = = = = = = = = = = = = = = = = = = = = 
 We will use while loop to print table of 2 
2 * 1 = 2 
2 * 2 = 4 
2 * 3 = 6 
2 * 4 = 8 
2 * 5 = 10 
2 * 6 = 12 
2 * 7 = 14 
2 * 8 = 16 
2 * 9 = 18 

82 
2 * 10 = 20 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Example: 
Write tables of 3, 4 and 5 
x = 3 
y = 1 
while(x < 6): 
    print("table of "+str(x)) 
    y = 1 
    while(y < 11): 
        answer = x * y 
        print(str(x)+ " * " +str(y)+" = "+ str(answer)) 
        y = y + 1 
    x = x + 1 
Output: 
= = = = = = = = = = = = = = = = RESTART: my_directory/if.py = = = 
= = = = = = = = = = = = = = = = = = = table of 3 
3 * 1 = 3 
3 * 2 = 6 

83 
3 * 3 = 9 
3 * 4 = 12 
3 * 5 = 15 
3 * 6 = 18 
3 * 7 = 21 
3 * 8 = 24 
3 * 9 = 27 
3 * 10 = 30 
table of 4 
4 * 1 = 4 
4 * 2 = 8 
4 * 3 = 12 
4 * 4 = 16 
4 * 5 = 20 
4 * 6 = 24 
4 * 7 = 28 
4 * 8 = 32 
4 * 9 = 36 
4 * 10 = 40 
table of 5 

84 
5 * 1 = 5 
5 * 2 = 10 
5 * 3 = 15 
5 * 4 = 20 
5 * 5 = 25 
5 * 6 = 30 
5 * 7 = 35 
5 * 8 = 40 
5 * 9 = 45 
5 * 10 = 50 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Statements to Control a Loop 
There are three statements that can be used for control 
statement. 
The ‘break’ statement immediately terminates the loop 
operation and transfers execution to the statement 
immediately after the loop. 
Example: 
for x in range(3,6): 
    print("table of "+str(x)) 

85 
    for y in range(1,11): 
        answer = x * y 
        print(str(x)+ " * " +str(y)+" = "+ str(answer)) 
        if (y == 5): 
            break 
Output: 
= = = = = = = = = = = = = = = = RESTART: my_directory/if.py = = = 
= = = = = = = = = = = = = = = = = = = = table of 3 
3 * 1 = 3 
3 * 2 = 6 
3 * 3 = 9 
3 * 4 = 12 
3 * 5 = 15 
table of 4 
4 * 1 = 4 
4 * 2 = 8 
4 * 3 = 12 
4 * 4 = 16 
4 * 5 = 20 
table of 5 

86 
5 * 1 = 5 
5 * 2 = 10 
5 * 3 = 15 
5 * 4 = 20 
5 * 5 = 25 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
The 'continue' statement skips the rest of the statements in 
the loop and tests the condition prior to reiterating. 
Example: 
for x in range(3,6): 
    print("table of "+str(x)) 
    for y in range(1,11): 
        if y==5: 
            continue 
        answer = x * y 
        print(str(x)+ " * " +str(y)+" = "+ str(answer)) 
Output: 
= = = = = = = = = = = = = = = = RESTART: my_directory/if.py = = = 
= = = = = = = = = = = = = = = = = = = =          

87 
table of 3 
3 * 1 = 3 
3 * 2 = 6 
3 * 3 = 9 
3 * 4 = 12 
3 * 6 = 18 
3 * 7 = 21 
3 * 8 = 24 
3 * 9 = 27 
3 * 10 = 30 
table of 4 
4 * 1 = 4 
4 * 2 = 8 
4 * 3 = 12 
4 * 4 = 16 
4 * 6 = 24 
4 * 7 = 28 
4 * 8 = 32 
4 * 9 = 36 
4 * 10 = 40 

88 
table of 5 
5 * 1 = 5 
5 * 2 = 10 
5 * 3 = 15 
5 * 4 = 20 
5 * 6 = 30 
5 * 7 = 35 
5 * 8 = 40 
5 * 9 = 45 
5 * 10 = 50 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
The ‘pass’ statement is a null statement. It does nothing when 
executed. It is generally used while developing a program. You 
can use it in functions for which the code is not ready or you 
may use them in future. 
Example: 
for x in range(3,6): 
    print("table of "+str(x)) 
    for y in range(1,11): 
        answer = x * y 

89 
        print(str(x)+ " * " +str(y)+" = "+ str(answer)) 
        if y==5: 
            pass 
= = = = = = = = = = = = = = = = RESTART: my_directory/if.py = = = 
= = = = = = = = = = = = = = = = = = = =  table of 3 
3 * 1 = 3 
3 * 2 = 6 
3 * 3 = 9 
3 * 4 = 12 
3 * 5 = 15 
3 * 6 = 18 
3 * 7 = 21 
3 * 8 = 24 
3 * 9 = 27 
3 * 10 = 30 
table of 4 
4 * 1 = 4 
4 * 2 = 8 
4 * 3 = 12 
4 * 4 = 16 

90 
4 * 5 = 20 
4 * 6 = 24 
4 * 7 = 28 
4 * 8 = 32 
4 * 9 = 36 
4 * 10 = 40 
table of 5 
5 * 1 = 5 
5 * 2 = 10 
5 * 3 = 15 
5 * 4 = 20 
5 * 5 = 25 
5 * 6 = 30 
5 * 7 = 35 
5 * 8 = 40 
5 * 9 = 45 
5 * 10 = 50 
>>>        
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
 
 

91 
Chapter 7 
Data Types in Detail 
 
You have already learnt the basics of data types. In this 
chapter, we will go through them in detail. The topics covered 
in this chapter are as follows: 
• 
Python Numbers in Detail 
• 
Python Strings in Detail 
• 
Python List in Detail 
• 
Python Tuples in Detail 
• 
Python Dictionary in Detail 
 
Python Numbers in Detail 
The following example shows working with numbers in Python. 
Example: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> a = 5 
>>> type(a) 
<class 'int'> 

92 
>>> a = 8.4 
>>> type(a) 
<class 'float'> 
>>> a = 2+3j 
>>> type(a) 
<class 'complex'> 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Numeric Data Types 
Types of numeric data types: 
Python supports four data types: 
1. Signed integers 
Signed integers are represented as int. They can be 
positive or negative. Decimal values are not allowed, 
only whole numbers. 
2. Long integers 
 
Long integers as the name suggests are integers with 
unlimited size. Long integer values are followed by 
letter ‘L’. ‘L’ can be in upper or lower case, but it is 
always better to use the uppercase letter ‘L’. This 
would not work on new version of Python. 
 

93 
3. Float 
 
Floats are real numbers and have decimal values. 
 
4. Complex numbers 
 
Complex numbers have real and imaginary parts and 
are written in the format x+iy. 
 
Numeric function conversion 
 
Function name: int(x) 
Description: convert x to integer value. 
 
Example: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) 
[MSC v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
 
>>> # 1 
>>> a = '2' 
>>> type(a) 
<class 'str'> 
>>> b = int(a) 
>>> type(b) 
<class 'int'> 
 
>>> # 2 
>>> a = 1.34 
>>> type(a) 
<class 'float'> 

94 
>>> b = int(a) 
>>> b 
1 
>>> type(b) 
<class 'int'> 
 
>>> # 3 
>>> a = 2-9j 
>>> b = int(a) 
Traceback (most recent call last): 
  File "<pyshell#14>", line 1, in <module> 
    b = int(a) 
TypeError: can't convert complex to int 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Function name: float(x) 
Description: 
Example: 
 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) 
[MSC v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
 
>>> a = -87 
>>> b = float(a) 
>>> type(b) 
<class 'float'> 
>>> b 
-87.0 
>>> 

95 
>>> b = float(a) 
>>> type(b) 
<class 'float'> 
>>> b 
98.0 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Description: converts x to complex number 
Example: 
>>> a = 4 
>>> b = complex(a) 
>>> type(b) 
<class 'complex'> 
>>> b 
(4+0j) 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Function name: complex(a,b) 
Description: creates a complex number having the real 
part as a and imaginary part as b. 
Example: 
>>> a = complex(3,8) 
>>> a 
(3+8j) 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 

96 
Strings in Detail 
String data type is text or character data. A string type is always 
in single or double quotation marks. So, basically, a string is a 
sequence of characters and each of this character has an index 
value and can be accessed by the index value. The index of the 
first character is 0, second character has an index of 1, third 
character has an index of 2 and so on. Have a look at the 
example given below: 
Example: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> a = 'Python' 
>>> a[0] 
'P' 
>>> # length of string 
>>> len(a) 
6 
>>> # since the length of the string is 6, the index of the last 
character is 5 
>>> a[5] 
'n' 

97 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
 The length of a string can be found out using len() function. 
Slices of string 
This section talks about how to access a section of string by 
slicing. 
Example: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> string_py = 'Python' 
>>> # print the string 
>>> print(string_py) 
Python 
>>> # print the first character of the string 
>>> print(string_py[0]) 
P 
>>> # print characters 1 to 4 
>>> print(string_py[0:3]) 
Pyt 

98 
>>> print(string_py[0:4]) 
Pyth 
>>> # print string after second character 
>>> print(string_py[1:]) 
ython 
>>> # print the string 6 times 
>>> print(string_py *6) 
PythonPythonPythonPythonPythonPython 
>>> # concatenate the string 
>>> print("this is "+string_py) 
this is Python 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Conversion function 
Function name: str(x) 
Description: converts x to string data type 
Example: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 

99 
Type "copyright", "credits" or "license()" for more 
information. 
>>> # convert integer to string 
>>> a = -90 
>>> b = str(a) 
>>> type(b) 
<class 'str'> 
>>> b 
'-90' 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Since we are now aware of how ‘for’ loop works, let’s try to 
print all the characters in the string 1 by 1. 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> for item in string_py: 
print(item) 
P 
y 

100 
t 
h 
o 
n 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
The split() method 
This method converts String into list of sub strings. 
Example: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
 
>>> string_py = "Python is a great language" 
>>> string_py.split() 
['Python', 'is', 'a', 'great', 'language'] 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
 

101 
Join() method – Opposite of split() 
This method converts elements of list in one string. 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> string_py = "Python is a great language" 
>>> string_py 
'Python is a great language' 
>>> a = string_py.split() 
>>> a 
['Python', 'is', 'a', 'great', 'language'] 
>>> ' '.join(a) 
'Python is a great language' 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Appending string to list 
Strings can be appended to a list as shown below: 
Example: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 

102 
Type "copyright", "credits" or "license()" for more 
information. 
>>> fruits = list() 
>>> fruits.append("Mango") 
>>> fruits 
['Mango'] 
>>> fruits.append("grapes") 
>>> fruits 
['Mango', 'grapes'] 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
This is the final example for Strings. Write a code that takes a 
string as input and returns the first and last letter of the string. 
Code: 
a = input(" type in your string :") 
length = len(a) 
print("first character of the string is : "+a[0]) 
print("last character: "+a[length-1]) 
 
 

103 
output 1: 
= = = = = = = = = = = = = = = = RESTART: my_directory/if.py = = = 
= = = = = = = = = = = = = = = = = = = =  type in your string 
:lqwdvliuouwtei2u3oiigd9eqtdo2i2n2o322 
first character of the string is : l 
last character: 2 
>>> 
Output 2: 
= = = = = = = = = = = = = = = = RESTART: my_directory/if.py = = = 
= = = = = = = = = = = = = = = = = = = = 
 type in your string :hat 
first character of the string is : h 
last character: t 
>>> 
Output 3: 
= = = = = = = = = = = = = = = = RESTART: my_directory/if.py = = = 
= = = = = = = = = = = = = = = = = = = = 
type in your string :A big hello to PYTHON WORLD 
first character of the string is : A 
last character: D 
>>> 

104 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Python List in Detail 
Lists are one of the best sequence data type in Python. It can 
have elements of different data types. Here is an example of 
how a list can be created: 
Example: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
# Slicing and Indexing 
>>> fruits = ["Apple", "Mango", "Banana", "Grapes", "Kiwi", 
"Strawberry"] 
>>> fruits[1:] 
['Mango', 'Banana', 'Grapes', 'Kiwi', 'Strawberry'] 
>>> fruits[0] 
'Apple' 
>>> fruits[1:5] 
['Mango', 'Banana', 'Grapes', 'Kiwi'] 
>>> fruits[-3] 
'Grapes' 

105 
>>> fruits[3] 
'Grapes' 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Accessing Values in a List 
Values of a list can be accessed as shown below: 
Example: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
Values can be accessed by the index values: 
fruits = ["Apple", "Mango", "Banana", "Grapes", "Kiwi", 
"Strawberry"] 
#print first element 
print("First element is : "+ fruits[0]) 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Lists can have elements of different data types: 
Example:  
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 

106 
Type "copyright", "credits" or "license()" for more 
information. 
# Create a list  
>>> fruits = ["Apple", "Mango", "Banana", "Grapes", "Kiwi", 
"Strawberry"] 
# Create a number 
>>> number = 23 
# Create a string 
>>> string1 = "Python" 
>>> flexi_list = list() 
#Add list to list 
>>> flexi_list.append(fruits) 
#Add number to List 
>>> flexi_list.append(number) 
#Add String to list 
>>> flexi_list.append(string1) 
>>> flexi_list 
[['Apple', 'Mango', 'Banana', 'Grapes', 'Kiwi', 'Strawberry'], 23, 
'Python'] 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 

107 
Updating  a value in list 
Values of the list can be updated as shown below: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
# Create a list  
>>> fruits = ["Apple", "Mango", "Banana", "Grapes", "Kiwi", 
"Strawberry"] 
# Create a number 
>>> number = 23 
# Create a string 
>>> string1 = "Python" 
>>> flexi_list = list() 
#Add list to list 
>>> flexi_list.append(fruits) 
#Add number to List 
>>> flexi_list.append(number) 
#Add String to list 
>>> flexi_list.append(string1) 
>>> flexi_list 

108 
[['Apple', 'Mango', 'Banana', 'Grapes', 'Kiwi', 'Strawberry'], 23, 
'Python'] 
# Changing the value of second element of list 
>>> flexi_list[1]=32 
>>> flexi_list 
[['Apple', 'Mango', 'Banana', 'Grapes', 'Kiwi', 'Strawberry'], 32, 
'Python'] 
# We know that the first element of the list flexi_list is 
another list. We want to change the #first element of the list 
which is at index 0. 
>>> flexi_list[0][0]='Orange' 
>>> flexi_list[0] 
['Orange', 'Mango', 'Banana', 'Grapes', 'Kiwi', 'Strawberry'] 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Delete elements from list 
Elements of a list can be deleted as shown below: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
# Delete first element from flexi list 

109 
>>> flexi_list[0] 
['Orange', 'Mango', 'Banana', 'Grapes', 'Kiwi', 'Strawberry'] 
>>> del flexi_list[0] 
>>> flexi_list 
[32, 'Python'] 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Find length of the list 
Length of a list can be found as shown below: 
Example: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> fruits = ["Apple", "Mango", "Banana", "Grapes", "Kiwi", 
"Strawberry"] 
>>> len(fruits) 
6 
>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
 

110 
Concatenation of two lists 
The following example shows how to concatenate two strings: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> numbers = [1 , 2 , 3 , 4 , 5 , 6, 7 , 8 , 9 , 10] 
>>> decimals = [1.1 , 2.2 , 3.3 , 4.4 , 5.5 , 6.6 , 7.7 , 8.8 , 9.9 , 
10.10] 
>>> number_system = numbers + decimals 
>>> number_system 
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 
9.9, 10.1] 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Repeat a list 4 times 
You can repeat a list any number of times by using * followed 
by the number. 
Example: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 

111 
Type "copyright", "credits" or "license()" for more 
information. 
>>> numbers = [1 , 2 , 3 , 4 , 5 , 6, 7 , 8 , 9 , 10] 
>>> numbers * 4 
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 
6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 
>>> 
* * * * * * * * * * * * * * * * * * * *  End Of Example * * * * * * 
* * * * * * * * * * * * * * * *  * * * * 
Check if an element exists in a list using ‘in’ 
Example: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> decimals = [1.1 , 2.2 , 3.3 , 4.4 , 5.5 , 6.6 , 7.7 , 8.8 , 9.9 , 
10.10] 
>>> 1.1 in decimals 
True 
>>> 1.2 in decimals 
False 
>>> 

112 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Iteration with lists 
Example: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
 
>>> for i in decimals: 
 
print(i) 
1.1 
2.2 
3.3 
4.4 
5.5 
6.6 
7.7 
8.8 
9.9 
10.1 

113 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Minimum value of list: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> numbers = [19 , 78 , 16 , 86 , 10.3 , 76] 
>>> min(numbers) 
10.3 
>>> fruits = ["Orange" , "Apple", "Mango", "Banana", "Grapes", 
"Kiwi", "Strawberry"] 
>>> min(fruits) 
'Apple' 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Find Maximum value of a list using max() function 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> numbers = [19 , 78 , 16 , 86 , 10.3 , 76] 

114 
>>> max(numbers) 
86 
>>> fruits = ["Orange" , "Apple", "Mango", "Banana", "Grapes", 
"Kiwi", "Strawberry"] 
>>> max(fruits) 
'Strawberry' 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Convert sequence to list 
Example: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
 
>>> string_py = "python" 
>>> list(string_py) 
[ 'p' ,  'y' ,  't' ,  'h' ,  'o' ,  'n' ] 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Count how many times an element occur in a list 

115 
Example:  
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> numbers = [19 , 78 , 16 , 86 , 10.3 , 76 , 16 , 10.3 , 87 , 56, 
10.3] 
>>> numbers.count(10.3) 
3 
>>> 
* * * * * * * * * * * * * * * * * * * *  End Of Example * * * * * * 
* * * * * * * * * * * * * * * *  * * * * 
List index of object 
Example: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> numbers = [19 , 78 , 16 , 86 , 10.3 , 76 , 16 , 10.3 , 87 , 56, 
10.3] 
>>> numbers.index(10.3) 
4 

116 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Inserting a number at an index. 
Example: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> numbers = [19 , 78 , 16 , 86 , 10.3 , 76] 
>>> numbers[4] 
10.3 
>>> numbers.insert(4, 10.4) 
>>> numbers.index(10.3) 
5 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Remove object from a list 
Example: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 

117 
Type "copyright", "credits" or "license()" for more 
information. 
>>> numbers = [19 , 78 , 16 , 86 , 10.3 , 76 , 16 , 10.3 , 87 , 56, 
10.3] 
>>> numbers.remove(10.3) 
>>> numbers 
[19, 78, 16, 86, 76, 16, 10.3, 87, 56, 10.3] 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Reverse order of a list 
Example: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> numbers = [19 , 78 , 16 , 86 , 10.3 , 76 , 16 , 10.3 , 87 , 56, 
10.3] 
>>> numbers.reverse() 
>>> numbers 
[10.3, 56, 87, 10.3, 16, 76, 10.3, 86, 16, 78, 19] 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 

118 
Sort elements in a list 
Example: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
 
>>> numbers = [19 , 78 , 16 , 86 , 10.3 , 76 , 16 , 10.3 , 87 , 56, 
10.3] 
>>> numbers.sort() 
>>> numbers 
[10.3, 10.3, 10.3, 16, 16, 19, 56, 76, 78, 86, 87] 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Python Tuples in Detail 
A Tuple is enclosed in parenthesis and each element is 
separated by a comma 
Creating Tuple 
Example:  
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 

119 
Type "copyright", "credits" or "license()" for more 
information. 
>>> fruits_tuple = ("Orange", "Apple", "Mango", "Banana", 
"Grapes", "Kiwi", "Strawberry") 
>>> fruits_tuple 
('Orange', 'Apple', 'Mango', 'Banana', 'Grapes', 'Kiwi', 
'Strawberry') 
>>> 
>>> fruits_tuple[0] 
'Orange' 
>>> type(fruits_tuple) 
<class 'tuple'> 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Find Length of a Tuple 
Examples: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
 

120 
>>> fruits_tuple = ("Orange" , "Apple", "Mango", "Banana", 
"Grapes", "Kiwi", "Strawberry") 
>>> len(fruits_tuple) 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Concatenation of Tuples 
Example: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> fruits_tuple = ("Orange" , "Apple", "Mango", "Banana", 
"Grapes", "Kiwi", "Strawberry") 
>>> numbers_tuple = (19 , 78 , 16 , 86 , 10.3 , 76 , 16 , 10.3 , 87 
, 56 , 10.3) 
>>> fruits_tuple + numbers_tuple 
('Orange', 'Apple', 'Mango', 'Banana', 'Grapes', 'Kiwi', 
'Strawberry', 19, 78, 16, 86, 10.3, 76, 16, 10.3, 87, 56, 10.3) 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Repeating tuple 3 times 
 
 

121 
Example: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> numbers_tuple = (19 , 78 , 16 , 86 , 10.3 , 76 , 16 , 10.3 , 87 
, 56 , 10.3) 
>>> numbers_tuple * 4 
(19, 78, 16, 86, 10.3, 76, 16, 10.3, 87, 56, 10.3, 19, 78, 16, 86, 
10.3, 76, 16, 10.3, 87, 56, 10.3, 19, 78, 16, 86, 10.3, 76, 16, 
10.3, 87, 56, 10.3, 19, 78, 16, 86, 10.3, 76, 16, 10.3, 87, 56, 
10.3) 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Find element in Tuple 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> fruits_tuple = ("Orange" , "Apple", "Mango", "Banana", 
"Grapes", "Kiwi", "Strawberry") 
>>> "Guava" in fruits_tuple 
False 

122 
>>> "Mango" in fruits_tuple 
True 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
For Loop iteration 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> fruits_tuple = ("Orange", "Apple", "Mango", "Banana", 
"Grapes", "Kiwi", "Strawberry") 
>>> for element in fruits_tuple: 
print(element) 
 
Orange 
Apple 
Mango 
Banana 
Grapes 
Kiwi 
Strawberry 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
 

123 
Example: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> fruits_tuple = ("Orange" , "Apple", "Mango", "Banana", 
"Grapes", "Kiwi", "Strawberry") 
>>> fruits_tuple[1] 
'Apple' 
>>> fruits_tuple[-1] 
'Strawberry' 
>>> fruits_tuple[2:] 
('Mango', 'Banana', 'Grapes', 'Kiwi', 'Strawberry') 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
If  There is a set of objects that are separated by comma but 
written without any brackets or parenthesis, then by default, 
they are considered as tuple. 
Example: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 

124 
Type "copyright", "credits" or "license()" for more 
information. 
>>> x = "Mango",4, 9.0,89 
>>> x 
('Mango', 4, 9.0, 89) 
>>> type(x) 
<class 'tuple'> 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Minimum value of tuple 
Example: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> fruits_tuple = ("Orange" , "Apple", "Mango", "Banana", 
"Grapes", "Kiwi", "Strawberry") 
>>> min(fruits_tuple) 
'Apple' 
>>> numbers_tuple = (19 , 78 , 16 , 86 , 10.3 , 76 , 16 , 10.3 , 87 
, 56 , 10.3) 
>>> min(numbers_tuple) 

125 
10.3 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Maximum value in Tuple 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> fruits_tuple = ("Orange" , "Apple", "Mango", "Banana", 
"Grapes", "Kiwi", "Strawberry") 
>>> max(fruits_tuple) 
'Strawberry' 
>>> numbers_tuple = (19 , 78 , 16 , 86 , 10.3 , 76 , 16 , 10.3 , 87 
, 56 , 10.3) 
>>> max(numbers_tuple) 
87 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Deleting a tuple 
Example: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 

126 
Type "copyright", "credits" or "license()" for more 
information. 
>>> fruits_tuple = ("Orange" , "Apple", "Mango", "Banana", 
"Grapes", "Kiwi", "Strawberry") 
>>> fruits_tuple 
('Orange', 'Apple', 'Mango', 'Banana', 'Grapes', 'Kiwi', 
'Strawberry') 
>>> del fruits_tuple 
>>> fruits_tuple 
Traceback (most recent call last): 
  File "<pyshell#21>", line 1, in <module> 
    fruits_tuple 
NameError: name 'fruits_tuple' is not defined 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Python Dictionary in Detail 
A dictionary object is enclosed in curly braces. Every item in a 
dictionary object has a key. Each item is separated from its key 
with a colon( : ). 
Creating a dictionary object 
 

127 
Example: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> fruits_dict = {"fruit1" : "Orange" , "fruit2" : "Apple", "fruit3" 
: "Mango", "fruit4" : "Banana", "fruit5" : "Grapes", "fruit6" : 
"Kiwi", "fruit7" : "Strawberry"} 
>>> fruits_dict 
{'fruit1': 'Orange', 'fruit2': 'Apple', 'fruit3': 'Mango', 'fruit4': 
'Banana', 'fruit5': 'Grapes', 'fruit6': 'Kiwi', 'fruit7': 'Strawberry'} 
>>> fruits_dict['fruit1'] 
'Orange' 
>>>  
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Updating a dictionary 
Example: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 

128 
>>> fruits_dict = {"fruit1" : "Orange" , "fruit2" : "Apple", "fruit3" 
: "Mango", "fruit4" : "Banana", "fruit5" : "Grapes", "fruit6" : 
"Kiwi", "fruit7" : "Strawberry"} 
>>> fruits_dict 
{'fruit1': 'Orange', 'fruit2': 'Apple', 'fruit3': 'Mango', 'fruit4': 
'Banana', 'fruit5': 'Grapes', 'fruit6': 'Kiwi', 'fruit7': 'Strawberry'} 
>>> fruits_dict['fruit1'] 
'Orange' 
>>> fruits_dict['fruit3'] = 'Apricot' 
>>> fruits_dict 
{'fruit1': 'Orange', 'fruit2': 'Apple', 'fruit3': 'Apricot', 'fruit4': 
'Banana', 'fruit5': 'Grapes', 'fruit6': 'Kiwi', 'fruit7': 'Strawberry'} 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Delete a dictionary item 
Example: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> fruits_dict 

129 
{'fruit1': 'Orange', 'fruit2': 'Apple', 'fruit3': 'Apricot', 'fruit4': 
'Banana', 'fruit5': 'Grapes', 'fruit6': 'Kiwi', 'fruit7': 'Strawberry'} 
>>> del fruits_dict['fruit6'] 
>>> fruits_dict 
{'fruit1': 'Orange', 'fruit2': 'Apple', 'fruit3': 'Apricot', 'fruit4': 
'Banana', 'fruit5': 'Grapes', 'fruit7': 'Strawberry'} 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Remove all elements of a dictionary 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> fruits_dict = {"fruit1" : "Orange" , "fruit2" : "Apple", "fruit3" 
: "Mango", "fruit4" : "Banana", "fruit5" : "Grapes", "fruit6" : 
"Kiwi", "fruit7" : "Strawberry"} 
>>> fruits_dict.clear() 
>>> fruits_dict 
{} 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
You cannot use the same key for more than one entry. 

130 
Example: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
In the following example two entries have the key ‘fruit1’ but 
only one is printed. 
>>> fruits_dict = {"fruit1" : "Orange" , "fruit1" : "Apple", "fruit3" 
: "Mango", "fruit4" : "Banana", "fruit5" : "Grapes", "fruit6" : 
"Kiwi", "fruit7" : "Strawberry"} 
>>> fruits_dict['fruit1'] 
'Apple' 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Find length of a dictionary 
Example: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> fruits_dict = {"fruit1" : "Orange" , "fruit1" : "Apple", "fruit3" 
: "Mango", "fruit4" : "Banana", "fruit5" : "Grapes", "fruit6" : 
"Kiwi", "fruit7" : "Strawberry"} 

131 
>>> len(fruits_dict) 
6 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Get the string representation of a dictionary. 
Example: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
 
>>> fruits_dict = {"fruit1" : "Orange" , "fruit1" : "Apple", "fruit3" 
: "Mango", "fruit4" : "Banana", "fruit5" : "Grapes", "fruit6" : 
"Kiwi", "fruit7" : "Strawberry"} 
>>> str(fruits_dict) 
"{'fruit1': 'Apple', 'fruit3': 'Mango', 'fruit4': 'Banana', 'fruit5': 
'Grapes', 'fruit6': 'Kiwi', 'fruit7': 'Strawberry'}" 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Clear a dictionary 
 
 

132 
Example: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> fruits_dict = {"fruit1" : "Orange" , "fruit1" : "Apple", "fruit3" 
: "Mango", "fruit4" : "Banana", "fruit5" : "Grapes", "fruit6" : 
"Kiwi", "fruit7" : "Strawberry"} 
>>> fruits_dict.clear() 
>>> fruits_dict 
{} 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Create a copy of dictionary 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> fruits_dict = {"fruit1" : "Orange" , "fruit1" : "Apple", "fruit3" 
: "Mango", "fruit4" : "Banana", "fruit5" : "Grapes", "fruit6" : 
"Kiwi", "fruit7" : "Strawberry"} 
>>> fruits2_dict = fruits_dict.copy() 
>>> fruits2_dict 

133 
{'fruit1': 'Apple', 'fruit3': 'Mango', 'fruit4': 'Banana', 'fruit5': 
'Grapes', 'fruit6': 'Kiwi', 'fruit7': 'Strawberry'} 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Return all the key of a dictionary 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
>>> fruits_dict = {"fruit1" : "Orange" , "fruit1" : "Apple", "fruit3" 
: "Mango", "fruit4" : "Banana", "fruit5" : "Grapes", "fruit6" : 
"Kiwi", "fruit7" : "Strawberry"} 
>>> fruits_dict.keys() 
dict_keys(['fruit1', 'fruit3', 'fruit4', 'fruit5', 'fruit6', 'fruit7']) 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Example: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
Get values of a dictionary 

134 
>>> fruits_dict.values() 
dict_values(['Apple', 'Mango', 'Banana', 'Grapes', 'Kiwi', 
'Strawberry']) 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
List items of a dictionary 
Example: 
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC 
v.1900 32 bit (Intel)] on win32 
Type "copyright", "credits" or "license()" for more 
information. 
 
>>> fruits_dict = {"fruit1" : "Orange" , "fruit1" : "Apple", "fruit3" 
: "Mango", "fruit4" : "Banana", "fruit5" : "Grapes", "fruit6" : 
"Kiwi", "fruit7" : "Strawberry"} 
>>> fruits_dict.items() 
dict_items([('fruit1', 'Apple'), ('fruit3', 'Mango'), ('fruit4', 
'Banana'), ('fruit5', 'Grapes'), ('fruit6', 'Kiwi'), ('fruit7', 
'Strawberry')]) 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
 
 

135 
Chapter 8 
Functions 
 
Functions are block or reusable code that is coded to perform a 
specific job. Functions are one of the most important aspect of 
programming. It makes the job lot easier. In the last chapter on 
Data types, you got to work on a lot of exercises and you used 
in-built functions to understand all that can be achieved with 
the help of these data types. In this chapter, you will create 
your own functions. The first thing that you need to know is 
how to define a function. 
Defining a function 
def name_of_function(args): 
  statements 
  return statement 
In Python,  
To define a function, you need to use the keyword def and the 
function name is followed by the function body. Whatever 
parameters you want to pass to the function are defined in the 
parenthesis following the function name. A colon ( : ) is very 
important after the function name. 
Example 
def hello_function(hello_string): 

136 
    print("Hello "+hello_string+ " !! HAVE A GREAT DAY !!") 
hello_string = input(" Whom would you like to wish Hello today 
? ") 
hello_function(hello_string) 
Output 1: 
= = = = = = = = = = = = = = = = RESTART: my_directory/if.py = = = 
= = = = = = = = = = = = = 
Whom would you like to wish Hello today ? World 
Hello World !! HAVE A GREAT DAY !! 
>>> 
Output 2: 
= = = = = = = = = = = = = = = = RESTART: my_directory/if.py = = = 
= = = = = = = = = = = = = 
Whom would you like to wish Hello today ? Pamela 
Hello Pamela !! HAVE A GREAT DAY !! 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Functions can have four types of arguments: 
1. Required arguments 
As the name suggests, required arguments are ones 
that are required to execute a function. 
Look at the following code: 

137 
Example: 
 
def hello_function(hello_string): 
    print("Hello "+hello_string+ " !! HAVE A GREAT DAY 
!!") 
 
hello_function() 
 
Output: 
= = = = = = = = = = = = = = = = RESTART: my_directory/if.py = = = 
= = = = = = = = = = = = = = = = = = = = 
Traceback (most recent call last): 
  File " my_directory/if.py ", line 4, in <module> 
    hello_function() 
TypeError: hello_function() missing 1 required 
positional argument: 'hello_string' 
>>> 
* * * * * * * * * * * * * * * * * * * *  End Of Example * * 
* * * * * * * * * * * * * * 
Since the function requires an argument , you will have 
to pass a value when it’s called 
As shown in the following Example: 
Example: 
def hello_function(hello_string): 
    print("Hello "+hello_string+ " !! HAVE A GREAT DAY 
!!") 
 
hello_function('WORLD') 
 
 

138 
Output: 
= = = = = = = = = = = = = = = = RESTART: 
my_directory/if.py = = = = = = = = = = = = = = = = 
Hello WORLD !! HAVE A GREAT DAY !! 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
2. Keyword arguments 
 
Keyword arguments are used while calling a function. 
Here, when the function is called, the caller identifies 
the argument by the name of the parameter. 
Example: 
def hello_function(hello_string): 
    print("Hello "+hello_string+ " !! HAVE A GREAT DAY 
!!") 
 
hello_function(hello_string='WORLD') 
Output: 
= = = = = = = = = = = = = = = = RESTART: 
my_directory/if.py = = = = = = = = = = = = = = = = 
Hello WORLD !! HAVE A GREAT DAY !! 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
If there are more than one parameters then, it does 
not matter in which order the keyword arguments are 
used. 
 
 

139 
Example: 
def hello_function(hello_string, expression): 
    print("Hello "+hello_string+ " !! HAVE A GREAT DAY 
!! " +  expression) 
 
hello_function(expression = "It's a Beautiful 
Day!!",hello_string='WORLD') 
 
Output: 
= = = = = = = = = = = = = = = = RESTART: 
my_directory/if.py = = = = = = = = = = = = = = = = 
Hello WORLD !! HAVE A GREAT DAY !! It's a Beautiful 
Day!! 
>>> 
* * * * * * * * * * * * * * * * * * * *  End Of Example * * 
* * * * * * * * * * * * * * 
3. Default arguments 
If you provide a default value for one of the arguments 
in the function, then it will use that value if no value is 
provided when you call the function. 
Example: 
def hello_function(hello_string, expression = "Although 
Every thing seems boring"): 
    print("Hello "+hello_string+ " !! HAVE A GREAT DAY 
!! " +  expression) 
 
hello_function(expression = "It's a Beautiful 
Day!!",hello_string='WORLD') 
Output1: 
= = = = = = = = = = = = = = = = RESTART: 
my_directory/if.py = = = = = = = = = = = = = = = = 

140 
Hello WORLD !! HAVE A GREAT DAY !! It's a Beautiful 
Day!! 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
Example: 
def hello_function(hello_string, expression = "Although 
Everything seems boring"): 
    print("Hello "+hello_string+ " !! HAVE A GREAT DAY 
!! " +  expression) 
 
hello_function(hello_string='WORLD') 
Output 1: 
= = = = = = = = = = = = = = = = RESTART: 
my_directory/if.py = = = = = = = = = = = = = = = = 
Hello WORLD !! HAVE A GREAT DAY !! Although 
Everything seems boring 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
4. Variable – length arguments 
 
Again, variable length arguments mean that a user may 
try to pass any number of arguments to the functions. 
Variable argument is identified by a * before its name 
in the function parenthesis. Have a look at how * 
hello_string works in the example given below. 
Example: 
def hello_function(*hello_string): 
    for item in hello_string: 
        print("Hello "+item+ " !! HAVE A GREAT DAY !! ") 

141 
hello_function('Pamela', 'Alex', 'WORLD', 'Richie') 
 Output: 
= = = = = = = = = = = = = = = = RESTART: my_directory/if.py = = = 
= = = = = = = = = = = = = 
Hello Pamela !! HAVE A GREAT DAY !!  
Hello Alex !! HAVE A GREAT DAY !!  
Hello WORLD !! HAVE A GREAT DAY !!  
Hello Richie !! HAVE A GREAT DAY !!  
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
 
 
 
 

142 
Chapter 9 
Python Classes and Objects 
 
Python is an Object-oriented language, and in this chapter, we 
are going to learn about classes and objects. A brief 
introduction to Object oriented programming (OOP) concept. 
An object or an instance is a data structure and it is defined by 
its class. A class would tell about the characteristics of the 
object. A class consists of attributes, data members and 
methods that can be accessed by the dot(.) notation. Class 
variables are variables that are defined in a class but outside 
any of its methods and hence, can be shared by all instances of 
the class. Data members hold data associated with class and its 
objects. Instance variables are defined inside the methods of 
the class and are associated only with the current instance of 
the class. Methods are functions that are defined within a 
class. Now, let’s move on to creating classes. 
The syntax for creating a class is: 
class Class_Name: 
       Statements 
class Students: 
    #Assume there are already 100 students in the course and 
set counter to 100 
    student_id = 100 
 

143 
    # This is a special function that Python calls when you 
create new instance of the class 
    def __init__(self, name, age): 
        self.name = name 
        self.age = age 
        Students.student_id = Students.student_id + 1 
   # This method keeps a count of total number of students 
    def Total_no_of_students(self): 
        print("Total Number of students in the school 
are"+str(Students.student_id)) 
    # Displays details of the student 
    def student_details(self): 
        print("Name : "+ self.name) 
        print("Age: " + str(self.age)) 
# Create ten objects of Students and check count after each 
student is created 
student1 = Students("Mary", 10) 
student1.student_details() 
student1.Total_no_of_students() 
student2 = Students("Michael", 11) 
student2.student_details() 

144 
student2.Total_no_of_students() 
student3 = Students("Alex", 15) 
student3.student_details() 
student3.Total_no_of_students() 
student4 = Students("Tina", 7) 
student4.student_details() 
student4.Total_no_of_students() 
student5 = Students("Val", 7) 
student5.student_details() 
student5.Total_no_of_students() 
student6 = Students("Jennifer", 10) 
student6.student_details() 
student6.Total_no_of_students() 
student7 = Students("Jim", 12) 
student7.student_details() 
student7.Total_no_of_students() 
student8 = Students("Kathy", 11) 
student8.student_details() 
student8.Total_no_of_students() 
student9 = Students("Rachael", 12) 

145 
student9.student_details() 
student9.Total_no_of_students() 
student10 = Students("John", 13) 
student10.student_details() 
student10.Total_no_of_students() 
= = = = = = = = = = = = = = = = RESTART: my_directory/if.py = = = 
= = = = = = = = = = = = = = = = = = = = Name : Mary 
Age: 10 
Total Number of students in the school is 101 
Name : Michael 
Age: 11 
Total Number of students in the school is 102 
Name : Alex 
Age: 15 
Total Number of students in the school is 103 
Name : Tina 
Age: 7 
Total Number of students in the school is 104 
Name : Val 
Age: 7 

146 
Total Number of students in the school is 105 
Name : Jennifer 
Age: 10 
Total Number of students in the school is 106 
Name : Jim 
Age: 12 
Total Number of students in the school is 107 
Name : Kathy 
Age: 11 
Total Number of students in the school is 108 
Name : Rachael 
Age: 12 
Total Number of students in the school is 109 
Name : John 
Age: 13 
Total Number of students in the school is 110 
>>> 
* * * * * *  *  * * * *  End Of Example * * * * * * ** * * * * * * * 
 
 

147 
Conclusion 
 
 
Thank you very much for downloading Python: 
Comprehensive Python Programming From The 
Ground Up! I hope you have gotten as much out of 
reading it as I have out of writing it. If you have 
enjoyed this book, please leave a positive review on 
Amazon to show your support. Your feedback is 
greatly appreciated! 
 
 

