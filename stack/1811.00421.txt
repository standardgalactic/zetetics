Bayesim: A tool for adaptive grid
model fitting with Bayesian inference
The MIT Faculty has made this article openly available. Please share 
how this access benefits you. Your story matters.
Citation
Kurchin, Rachel et al., "Bayesim: A tool for adaptive grid model
fitting with Bayesian inference." Computer Physics Communications
239 (June 2019): p. 161-65 doi. 10.1016/j.cpc.2019.01.022 ©2019
Authors
As Published
https://dx.doi.org/10.1016/J.CPC.2019.01.022
Publisher
Elsevier BV
Version
Original manuscript
Citable link
https://hdl.handle.net/1721.1/126028
Terms of Use
Creative Commons Attribution-NonCommercial-NoDerivs License
Detailed Terms
http://creativecommons.org/licenses/by-nc-nd/4.0/

Bayesim: a tool for adaptive grid model ﬁtting with Bayesian inference
Rachel Kurchin,∗Giuseppe Romano, and Tonio Buonassisi†
Massachusetts Institute of Technology, 77 Massachusetts Avenue, Cambridge, MA 02139, USA
Bayesian inference is a widely used and powerful analytical technique in ﬁelds such as astronomy
and particle physics but has historically been underutilized in some other disciplines including
semiconductor devices. In this work, we introduce bayesim, a Python package that utilizes adaptive
grid sampling to eﬃciently generate a probability distribution over multiple input parameters to a
forward model using a collection of experimental measurements. We discuss the implementation
choices made in the code, showcase two examples in photovoltaics, and discuss general prerequisites
for the approach to apply to other systems.
INTRODUCTION
There are a plethora of examples across diverse scientiﬁc and engineering ﬁelds of mathematical models used to
simulate the results of experimental observations. In many cases, there are input parameters to these models which
are diﬃcult to determine via direct measurement, and it is desirable to invert the numerical model – that is, use the
experimental observations to determine values of the input parameters. Bayesian inference, or Bayesian parameter
estimation (BPE) is a fruitful framework within which to do such ﬁtting, since the resulting posterior probability
distribution over the parameters of interest can give rich insights into not just the most likely values of the parameters,
but also uncertainty about these values and the potentially complicated ways in which they can covary to give equally
good ﬁts to observations. It has been widely used for decades in ﬁelds such as cosmology [17], particle physics [3, 18],
and biology [6, 20], with well-developed and widely used code packages specialized to these purposes. [5, 16] However,
the use of Bayesian inference in materials science and related contexts is much more recent, having only emerged in
the past few years. [1, 19, 21]
We have previously demonstrated the value of a BPE approach in using automated high-throughput temperature-
and illumination-dependent current-voltage measurements (JV Ti) to ﬁt material/interface properties and defect
recombination parameters in photovoltaic (PV) absorbers [1, 9], i.e. as a replacement for direct experimental charac-
terization via probabilitistic inversion of a forward model. In cases such as these, when the data model is not a simple
analytical equation but rather a computationally intensive numerical model, eﬃcient, nonredundant sampling of the
parameter space when computing likelihoods becomes critical to making the ﬁt feasible.
In this work, we introduce bayesim, a Python-based code that utilizes adaptive grid sampling to perform BPE.
It is designed to be easy to use by anyone with basic familiarity with Python.
We discuss the structure of the
code, its implementation, and provide several examples of its usage. While the authors’ expertise is in the realm
of semiconductor physics and thus the examples herein are drawn from that space, we also discuss the general
characteristics of a problem amenable to this approach so that researchers from other ﬁelds might adopt it as well.
TECHNICAL BACKGROUND
Bayes’ Theorem is a relationship between conditional probabilities. It states
P(H|E) = P(H)P(E|H)
P(E)
,
(1)
where the notation P(A|B) indicates the probability of A being true given that B is true. H is a hypothesis and
E the observed evidence. P(H) is termed the prior, P(E|H) the likelihood, P(H|E) the posterior, and P(E) is a
normalizing constant. If there are n pieces of evidence, this can generalize to an iterative process where
P(H|{E1, E2, ...En}) = P(H|{E1, E2...En−1})P(En|H)
P(En)
,
(2)
i.e. as each new piece of evidence is fed in, the posterior probability distribution is updated to accommodate it and
should in general become more concentrated into one region of parameter space. In a multidimensional parameter
estimation problem, each hypothesis H is a tuple of possible values for the ﬁtting parameters, i.e. a point in the
arXiv:1811.00421v1  [physics.data-an]  10 Oct 2018

2
FIG. 1. a) High-level ﬂowchart of inputs and outputs to bayesim. Observed data as a function of experimental conditions
and modeled data over those same conditions as well as ﬁtting parameters are fed in, and the code produces a probability
distribution over the ﬁtting parameter values. b) 2D schematic of adaptive grid sampling approach, illustrating progressive
subdivision in higher-probability regions of parameter space.
parameter space, while the evidence E is an observed output of a measurement as a function of various experimental
conditions.
In order to compute a likelihood, a model capable of simulating that observed output as a function of both the
ﬁtting parameters and the experimental conditions is required. In bayesim, likelihoods are calculated for each point in
parameter space using a Gaussian where the argument is the diﬀerence between observed and simulated output at that
point, and the standard deviation is the sum of experimental uncertainty and model uncertainty. The experimental
uncertainty is a number provided by the user that quantiﬁes any noise/irreproducibility inherent to the measurement,
while the model uncertainty is calculated by bayesim and reﬂects the sparseness of the parameter space grid, i.e. how
much simulated output changes from one grid point to another.
A high-level summary of what bayesim does is shown in Figure 1a. The ﬂowchart shows that observed (as a function
of experimental conditions {C} and simulated (as a function of ﬁtting parameters {P} and experimental conditions
{C}) outputs are compared to produce a probability distribution over {P}.
Figure 1b schematically indicates the
adaptive grid sampling approach for a hypothetical two-dimensional parameter space, wherein grid boxes exceeding
some threshold probability are subdivided and lower-probability regions discarded, allowing attainment of a high
ﬁtting precision without needing to sample the entire parameter space at the same high density.
SOFTWARE ARCHITECTURE AND INTERFACE
The basic structure of bayesim is shown in Figure 2a. Detailed and up-to-date documentation of classes, functions,
and example applications is maintained online. [11] The top-level object with which users interact is implemented in
the Model class. The params module deﬁnes classes to store information about the various types of parameters (ﬁtting
parameters, experimental conditions, and measured output) while the Pmf class stores the probability distribution
and implements the manipulations required for Bayesian updates.
Figure 2b is a ﬂowchart of using the code, with the main inference loop surrounded by a dotted line. One ﬁrst
needs to provide the observed and modeled data. Observed data is accepted in HDF5 format, while modeled data
can be an HDF5 ﬁle (in which case bayesim will determine the ﬁtting parameter space grid from this ﬁle), or if the

3
FIG. 2. a) bayesim software structure. b) Detailed ﬂowchart of use of bayesim, with calculation steps and various levels of
iteration indicated. Boxes in blue indicate steps that can or must be done explicitly by the user, grey steps that are done by
the code with behavior tunable by the user, orange diamonds control points for staying in or leaving a loop, and green the ﬁnal
output.
ﬁtting parameter space has been predeﬁned, one can also attach a Python function that computes the model data
(e.g. an interface to a numerical model). Observed data should have associated experimental uncertainties, or the
user can indicate a ﬁxed value of uncertainty to use for all observations upon attaching the data.
Once modeled data is attached, model uncertainty can be computed. At each point in the space of experimental
conditions, a matrix of the simulated output variable as a function of the ﬁtting parameters is constructed and at
each point in this matrix, the largest diﬀerence along any index is computed. This is set as the model uncertainty for
this set of experimental conditions at this point in parameter space.
At this point, the Bayesian inference loop can proceed. We start with a bounded uniform prior distribution over
the entire parameter space grid and the observed data in a randomized order. We feed in one piece of evidence
(i.e. one observed data point) and compute the likelihood using a Gaussian. The standard deviation for each point
in the parameter space is the sum of the experimental uncertainy of that observation and the model uncertainty
at that point. The posterior distribution is computed as a Bayesian update on the prior. Next, we check whether
the threshold condition for concentration of probability (deﬁned as at least some percentage (by default 90%) of the
probability mass residing in at most some percentage (by default 5%) of the parameter space volume. If this threshold
is satisﬁed, the current posterior is stored and the prior reset to a uniform distribution. If not, the next observation is
fed in. This procedure is repeated until the requisite number (by default, 80%) of observed data points has been used,
with the ﬁnal posterior being the average of every stored posterior. The posterior is calculated in this way (rather
than a Bayesian multiplication through every single observed point) to avoid numerical errors that can arise if very
small numbers are multiplied together. This procedure of running the Bayesian loop multiple times until the desired
number of pieces of evidence are used is encapsulated in the Model.run() function.
Now the grid can be subdivided. The user deﬁnes a threshold probability (by default 0.001) for a grid box to possess,
and all boxes with greater than this probability, as well as all their immediate neighbors, are divided in two along
every parameter. bayesim saves a list of the new model calculations that need to be done for inference to proceed
again, and the user provides these, again either as a callable or an HDF5 ﬁle. For the next round of inference, the
user can also deﬁne a “relaxation” parameter from 0 to 1.0 (default 0) that will mix in some fraction of the posterior
from the previous step with the uniform distribution over this new grid.
This overall procedure can be repeated as many times as the user wishes to get a more precise ﬁt – eventually, the
concentration of probability becomes limited by experimental rather than model uncertainty. There is also an option
to deﬁne a minimum width for a box along any parameter direction, and if a box is already less than this width,
bayesim will not subdivide in that direction.

4
The most ﬂexible way to interact with bayesim is via Python scripting or through literate programming in a Jupyter
notebook. There is also a command line interface (CLI) for users less familiar with coding in Python planned for
future release.
bayesim relies on a variety of external open-source packages. These include numpy [15] and scipy [8] for a variety
of mathematical functions and vectorized implementations, joblib [4] for simple parallelism, deepdish [13] for saving
and loading HDF5 ﬁles, pandas [14] for data manipulation, and matplotlib [7] for visualization.
APPLICATION EXAMPLES
Ideal Diode Model
As a ﬁrst example, we ﬁt a simple two-parameter model of solar cell current density J (as a function of voltage V
and temperature T) known as the ideal diode model:
J(V, T) = JL + J0

exp qV
nkT −1

,
(3)
where k = 8.61733 × 10−5 eV/K is Boltzmann’s constant, by convention JL (the light current) is negative and J0
(the saturation current) is positive but strongly dependent on temperature, a dependence we can approximate as:
J0 ≈B′T 3/n exp
−Eg0
nkT

,
(4)
where Eg0 is the zero-temperature bandgap of the material. For this example, we will set this to 1.2 eV and JL to
-0.03 mA/cm2. There are thus two parameters to be ﬁt, the coeﬃcient B′ (which can range over a wide variety of
values) and the ideality factor n (which is by deﬁnition between 1 and 2).
As validation, we generate the “observations” using the same model we’ll use for ﬁtting, with parameter values of
n = 1.36 and B′ = 258, and four temperature values of 150, 200, 250, and 300 K. These “observations” are shown
in Figure 3a. When bayesim imports observed data, it can optionally discard data points that are very close by to
each other in order to reduce computational load on modeling less informative points – the observed points that were
actually imported (59 out of 305 total “observations”) are shown as overlaid scatter dots.
Figure 3b shows the posterior distributions after the ﬁrst inference run and after each round of subdivision,
demonstrating that bayesim gets progressively closer to the “true” values as the loop continues iterating. In addition,
on the ﬁrst inference run (prior to any subdivision), an average of 45% of grid points had larger model uncertainty
than experimental uncertainty, while after the second subdivision, only 1.9% did, while the average absolute error of
the highest-probability model decreased from 0.03 after the ﬁrst run to 0.007 after the second subdivision.
In addition, the initial grid had 400 boxes, the singly subdivided grid 164, and the ﬁnal grid (4x initial resolution)
had 144, meaning the overall additional computational eﬀort to quadruple the ﬁt precision was less than producing the
initial simulation set. In comparison, using a “brute-force” grid approach, reaching 4x precision would take 4n times
the computational load in n dimensions, i.e. 16x for this case. The exact factor of improvement is problem-dependent,
but in all cases the load is signiﬁcantly less than the exponential scaling of the prior approach.
SnS Solar Cell
This example demonstrates a more realistic application of bayesim, i.e. when the model being used to compute
likelihoods is more computationally expensive. In this case, we will repeat the analysis from Ref. [1], using SCAPS [2]
(a coupled drift-diﬀusion/Poisson solver) as the model, which takes 10-15 core-seconds for a single J-V sweep.
We start on a signiﬁcantly coarser grid than Ref. [1] and show only one level of subdivision to make the example
feasible to run on a personal computer.
Figure 4 shows the results from this ﬁt done in bayesim compared to
the higher-resolution grid analysis done previously. Note that the inference step in full-resolution grid took a few
hours, while the adaptive grid ﬁt takes a few minutes. While the ﬁt precision is of course lower at only one level
of subdivision, the extracted values are generally in agreement and more importantly, the relationship between the
mobility and lifetime (namely, that the product, i.e. the diﬀusion length), is constrained, emerges just as clearly. The

5
FIG. 3. a) “Observations” generated by ideal diode model, Equation 3, with overlaid scatter to show which points were actually
imported and used by bayesim, b) PMF’s after the ﬁrst inference run, second (one subdivision), and third (two subdivision),
in blue, orange, and green, respectively. Values used to generate data indicated in red.

6
FIG. 4. PMFs produced by bayesim, after initial run and after one subdivision (blue and green, respectively). In red, PMF
from Reference [1]. Inset: device structure (illuminated from above) with bulk SnS (µ,τ ﬁt) and SnS/Zn(O,S) interface (∆Ec,
Seﬀﬁt) indicated.
diﬀerences in ﬁtted values stem from the fact that the prior published analysis didn’t account for model uncertainty,
while this feature is included in bayesim.

7
CONCLUSIONS
We have introduced bayesim, a Python-based adaptive grid sampled Bayesian inference code which is ﬂexible to
the model used to calculated likelihood as well as the parameter space over which to ﬁt. We provided two examples of
application of the code in the space of characterizing PV devices using JVT(i) measurements, as this is the authors’
area of expertise. However, nothing about the code or the approach limits it to application in PV materials. Any
situation where there is:
• a forward model that captures the relevant physics (particularly one that is relatively expensive to evaluate),
and
• a set of measurements of the output of that model as a function of several experimental conditions
would be amenable to bayesim. The online documentation page [11] maintains a list of examples which will grow
as the authors become aware of/implement more. The latest version of the code can always be found in the Github
repository [10], and the most recent stable and thoroughly-tested version is installable via PyPI [12]. The online
documentation also hosts other useful information, such as detailed documentation of every class and function in
bayesim, a more extensive technical background section than is included here, a list of planned future features, and
an updated manual for usage of the code.
ACKNOWLEDGEMENTS
R.C.K. acknowledges the funding of a Blue Waters Graduate Fellowship. This work was supported by a TOTAL
SA research grant funded through MITei, the MIT Energy Initiative.
∗rachel.kurchin@gmail.com
† buonassi@mit.edu
[1] Riley E Brandt, Rachel C Kurchin, Vera Steinmann, Daniil Kitchaev, Chris Roat, Sergiu Levcenco, Gerbrand Ceder,
Thomas Unold, Tonio Buonassisi, and Helmholtz Zentrum Berlin. Rapid semiconductor device characterization through
Bayesian parameter estimation. Joule, 1(4):843–856, 2017. doi:10.1016/j.joule.2017.10.001.
[2] Marc Burgelman, P Nollet, and S Degrave. Modelling polycrystalline semiconductor solar cells. Thin Solid Films, 361–
362:527–532, 2000. doi:10.1016/S0040-6090(99)00825-1.
[3] Jorge de Blas, Marco Ciuchini, Enrico Franco, Diptimoy Ghosh, Satoshi Mishima, Maurizio Pierini, Laura Reina, and
Luca Silvestrini. Global bayesian analysis of the higgs-boson couplings. Nuclear and Particle Physics Proceedings, 273-
275:834 – 840, 2016. 37th International Conference on High Energy Physics (ICHEP). doi:https://doi.org/10.1016/
j.nuclphysbps.2015.09.128.
[4] Joblib developers. Joblib. https://joblib.readthedocs.io/en/latest/.
[5] F.
Feroz,
M.
P.
Hobson,
and
M.
Bridges.
Multinest:
an
eﬃcient
and
robust
bayesian
inference
tool
for
cosmology
and
particle
physics.
Monthly
Notices
of
the
Royal
Astronomical
Society,
398(4):1601–1614,
2009.
arXiv:/oup/backfile/content public/journal/mnras/398/4/10.1111/j.1365-2966.2009.14548.x/2/mnras0398-
1601.pdf, doi:10.1111/j.1365-2966.2009.14548.x.
[6] John P. Huelsenbeck, Fredrik Ronquist, Rasmus Nielsen, and Jonathan P. Bollback. Bayesian inference of phylogeny and its
impact on evolutionary biology. Science, 294(5550):2310–2314, 2001. arXiv:http://science.sciencemag.org/content/
294/5550/2310.full.pdf, doi:10.1126/science.1065889.
[7] J. D. Hunter. Matplotlib: A 2d graphics environment. Computing In Science & Engineering, 9(3):90–95, 2007. doi:
10.1109/MCSE.2007.55.
[8] Eric Jones, Travis Oliphant, Pearu Peterson, et al. SciPy: Open source scientiﬁc tools for Python, 2001. URL: http:
//www.scipy.org/.
[9] Rachel C. Kurchin, Jeremy R. Poindexter, Daniil Kitchaev, Ville V¨ah¨anissi, Carlos del Ca˜nizo, Liu Zhe, Hannu S. Laine,
Chris Roat, Sergiu Levcenco, Gerbrand Ceder, and Tonio Buonassisi. Semiconductor parameter extraction via current-
voltage characterization and bayesian inference methods. In Proceedings of the 2018 7th World Conference on Photovoltaic
Energy Conversion. IEEE, 6 2018.
[10] Rachel C. Kurchin and Giuseppe Romano. Bayesim. https://github.com/pv-lab/bayesim.
[11] Rachel C. Kurchin and Giuseppe Romano. bayesim. https://pv-lab.github.io/bayesim/ build/html/index.html, 2018.
[12] Rachel C. Kurchin and Giuseppe Romano. bayesim. https://pypi.org/project/bayesim, 2018.
[13] Gustav Larsson and Mark Stoehr. deepdish. https://github.com/uchicago-cs/deepdish.
[14] Wes McKinney. Data structures for statistical computing in python. In Proceedings of the 9th Python in Science Conference,
pages 51–56, 2010.

8
[15] Travis E. Oliphant. A guide to NumPy. Trelgol Publishing, 2006.
[16] Sjors H.W. Scheres.
Relion: Implementation of a bayesian approach to cryo-em structure determination.
Journal of
Structural Biology, 180(3):519 – 530, 2012. doi:https://doi.org/10.1016/j.jsb.2012.09.006.
[17] Roberto Trotta. Bayes in the sky: Bayesian inference and model selection in cosmology. Contemporary Physics, 49(2):71–
104, 2008. arXiv:https://doi.org/10.1080/00107510802066753, doi:10.1080/00107510802066753.
[18] Roberto Trotta, Farhan Feroz, Mike Hobson, Leszek Roszkowski, and Roberto Ruiz de Austri. The impact of priors and
observables on parameter inferences in the constrained mssm. Journal of High Energy Physics, 2008(12):024, 2008. URL:
http://stacks.iop.org/1126-6708/2008/i=12/a=024.
[19] Tsuyoshi Ueno, Trevor David Rhone, Zhufeng Hou, Teruyasu Mizoguchi, and Koji Tsuda.
Combo:
An eﬃcient
bayesian optimization library for materials science. Materials Discovery, 4:18 – 21, 2016. doi:https://doi.org/10.1016/
j.md.2016.04.001.
[20] Darren J. Wilkinson. Bayesian methods in bioinformatics and computational systems biology. Brieﬁngs in Bioinformatics,
8(2):109–116, 2007. arXiv:/oup/backfile/content public/journal/bib/8/2/10.1093/bib/bbm007/2/bbm007.pdf, doi:
10.1093/bib/bbm007.
[21] Dezhen Xue, Prasanna V. Balachandran, Ruihao Yuan, Tao Hu, Xiaoning Qian, Edward R. Dougherty, and Turab Look-
man. Accelerated search for batio3-based piezoelectrics with vertical morphotropic phase boundary using bayesian learning.
Proceedings of the National Academy of Sciences, 113(47):13301–13306, 2016. arXiv:http://www.pnas.org/content/113/
47/13301.full.pdf, doi:10.1073/pnas.1607412113.

