Accelerating active contour algorithms with the Gradient Diffusion Field
Chris Kiser ∗†
Chris Musial †
Pradeep Sen ∗
Advanced Graphics Lab ∗
Boeing-SVS †
University of New Mexico
Albuquerque, NM
Abstract
Active contours were proposed by Kass et al. as a
way to represent the contours of an image. Although
the method is simple, one of its shortcomings is its in-
ability to converge into concave structures. The Gra-
dient Vector Flow (GVF) algorithm was put forth by
Xu and Prince to succesfully address the concave struc-
ture problem. Although there has been much research
into GVF, little has been done to reduce its computa-
tion time, which makes it unsuitable for applications
requiring real-time processing of images. In this pa-
per, we propose a method for computing an approxi-
mation of the GVF, called the Gradient Diffusion Field
(GDF), which exhibits the same useful properties of
the GVF but converges faster and requires less re-
sources for implementation. Our proposed method is
also more amenable for real-time hardware and we out-
line a method for implementing an active contour algo-
rithm in FPGA hardware using the GDF.
1. Introduction
An active contour (also known as a “snake”) is a col-
lection of points that lie along the contour edge of an
image that is found through an iterative solution [4]. As
its name implies, the contour is active and dynamic in
behavior; the model is constantly trying to ﬁnd a mini-
mum energy state and will therefore continually adjust
itself to ﬁnd it. However, the active contour algorithm
exhibits problems with local minima when the salient
feature of the image creates a concave edge. Xu and
Prince have proposed a method called the Gradient Vec-
tor Field (GVF) to help resolve the local minima prob-
lem by generating a 2-D vector ﬁeld that guides the con-
tour inside the problematic concave regions [8].
Although the GVF improves the robustness of the
active contour algorithm, it is impractical to com-
pute for real-time systems. In this paper, we present
a novel method called the Gradient Diffusion Field
(GDF) which emulates the behavior of the GVF but is
faster and easier to compute. We begin with a review
of the active contour as well as its GVF extension. We
then describe our proposed algorithm and present con-
vergence results to compare GVF and GDF approaches.
Finally, we describe an active contour algorithm based
on GDF implementated on a Field Programmable Gate
Array (FPGA) for operation at real-time rates.
2. Active Contours
The seminal paper in the ﬁeld of active contours is
by Kass et al., where they deﬁne the active contour to
be “a controlled continuity spline under the inﬂuence of
image forces and external constraint forces” [4]. Here,
the image forces are a function of the image itself and
include gradients, lines, edges and contrasts. The ex-
ternal forces are constraints applied by either control-
ling mechanisms (e.g. smoothness, roundness, “springi-
ness”) or human interface requirements. The goal is to
minimize the energy of the active contour given by
E =
Z 1
0
Eint(v(s))+Eim(v(s))+Econ(v(s))ds (1)
where Eint is the internal energy of the contour due to
mechanical forces, Eim is the energy added by the im-
age, Econ is the forces given by external constraints,
and v(s) = (x(s), y(s)) is the parametric representa-
tion of the contour. The internal contour energy, Eint,
of Eq. 1 is given by
Eint = 1
2(α(s)|v′(s)|2 + β(s)|v′′(s)|2)
(2)
Here, the ﬁrst order term v′(s) controls the spacing be-
tween points while the second order term v′′(s) controls
the amount of bend centered at each point, with α(s)
and β(s) as weighting coefﬁcients. The second term of
Eq. 1, Eim, expands to
Eim = wlineEline + wedgeEedge
(3)
The term Eline causes attraction to light or dark lines
according to wline. The term Eedge causes attraction
the edges in the image I and can be written as
Eedge = −|∇I(x, y)|2
(4)
where the ∇operator is the 2-D gradient of image I.
In their work, Kass et al. ﬁnd the solution to the
minimization of Eq. 1 through a semi-implicit, itera-
tive method for solving a set of simultaneous equa-
tions [4].
The approach uses variational calculus to
derive the minimizing equations in the Euler-Lagrange
format.
The coefﬁcients of these equations are then
formed as a matrix which is inverted to ﬁnd the min-
imum energy of the contour equation.
Other meth-
ods have been proposed for ﬁnding the active contour,
such as dynamic programming [1], gradient descent [3],
and greedy search [6]. The greedy method minimizes
Eq. 1 over a small neighborhood for each contour point

and then moves it to the lowest energy location. This
method is susceptible to local minima but is more suit-
able for high-performance, real-time systems. There-
fore, we will use the greedy method as the active con-
tour iteration algorithm for the remainder of the paper.
Since their introduction, active contours have been
used for a wide variety of applications. However, the
failure of the algorithm to converge correctly for con-
cave features led researchers to develop modiﬁcations
to the active contour, such as the GVF.
3. Gradient Vector Flow
The Gradient Vector Flow (GVF) algorithm was pro-
posed by Xu et al. to aid the convergence of the active
contour into concave regions [8]. The traditional active
contour algorithm uses the gradient in its minimization
formula given in Eqs. 1 and 3 to pull the contour toward
its minimum value. As Fig. 1c shows, the greedy search
gets stuck in a local minimum and fails to converge to
the concave region of the image. However, the GVF al-
gorithm provides the magnitude of the vector ﬂow ﬁeld
(Fig. 1d) for the minimization algorithm, allowing the
active contour to converge correctly (Fig. 1e). Formally,
the GVF proposed by Xu et al. can be written as
b(x, y)
=
fx(x, y)2 + fy(x, y)2
(5)
c1(x, y)
=
b(x, y)fx(x, y)
c2(x, y)
=
b(x, y)fy(x, y)
un+1
i,j
=
(1 −bi,j∆t)un
i,j + r(un
i+1,j + un
i,j+1
+un
i−1,j + un
i,j−1 −4un
i,j) + c1
i,j∆t
vn+1
i,j
=
(1 −bi,j∆t)vn
i,j + r(vn
i+1,j + vn
i,j+1
+vn
i−1,j + vn
i,j−1 −4vn
i,j) + c2
i,j∆t
The terms fx(x, y)2 and fy(x, y)2 are gradient edge
maps in the x and y directions. The term ∆t is a time
constant and r is a scaling constant. These equations
present an iterative method for calculating the GVF. Al-
though the GVF makes active contours more robust, a
large number of iterations of Eq. 5 are required to spread
the magnitude of the GVF enough so that the active con-
tour can converge into concave regions.
We deﬁne the reach of the GVF to be the distance
from the edge to the ﬁrst point where the magnitude of
the GVF has zero value. For the example of Fig. 2, the
reach of the GVF is 41 pixels after 200 iterations. This
limits the maximum distance from the original edge that
the GVF can affect the active contour. While more iter-
ations of Eq. 5 wwould increase the reach of the GVF,
the large number of iterations typically required is what
makes it impractical for real-time applications.
Applications of the GVF are as diverse as the active
contour itself. Wu in [7] used the GVF and active con-
tours for tracking lip movements in human speech to aid
Figure 1. Comparison of GVF to tradi-
tional active contour using greedy search.
(a) Test image and (b) the magnitude of its
gradient. (c) 30 iterations of greedy algo-
rithm using gradient magnitude. (d) Mag-
nitude of GVF after 200 iterations. (e) 30
iterations of greedy algorithm using GVF.
Figure 2. Visualization of the GVF spread.
(a) Test image. (b) Magnitude of GVF after
200 iterations. (c) Cross section of GVF.
in MPEG-4 compression. Paragios in [5] used the GVF
and a form of the active contour for boundary extraction
in medical and satellite images. Yu-Tai in [9] even ex-
panded the GVF to 3 dimensions to form a 3-D model of
a human urethra from a series of images. These are only
a sample of many applications of the GVF, however to
date no work has been uncovered which addresses re-
ducing the computation time of the GVF.
4. The Gradient Diffusion Field
The address the problem of the large number of iter-
ations required by the GVF algorithm, we introduce an
approximation of the magnitude of the GVF we call the
Gradient Diffusion Field (GDF). The GDF is computed
by applying a Gaussian of Gradient operator [2] recur-
sively to diffuse or “smear” the gradient away from its
corresponding edge. The formulation for the GDF is
GDFi+1 = max(||α(i) · GoG ∗GDFi||, GDFi) (6)
where
α(i) = α(i −1) −1
k ,
α(0) = 1
(7)
and
GDF0 = ||GoG ∗I||
(8)

Figure 3. Visualization of spread of GDF.
(a) Magnitude of GDF. (b) Cross section of
the GDF at the line indicated.
The last equation shows that the starting point GDF0
is the Gaussian Gradient of the image I. We then ap-
ply Eq. 6 recursively to ﬁnd the pixel-by-pixel maxi-
mum between the previous GDF iteration and the cur-
rent GDF iteration. Effectively, this equation is a re-
cursive gradient that ﬁnds derivatives to the ith order.
This term will tend to add noise into the GDF, however
the Gaussian portion of the Gaussian Gradient will help
reduce noise effects. The term α(i) in Eq. 6 is added
to further reduce the contribution of the higher order
derivatives and thus help to reduce the noise effects.
The term k is the number of iterations to perform.
5. Results
In order to compare our GDF algorithm with the
GVF, we ﬁrst measure the increase in capture range.
Fig. 3 shows the computation of the GDF after 14 itera-
tions. The peak of the GDF is maintained at the position
of the edge in the original image and the reach was set
to be 41 pixels, which allows us to compare it with the
GVF approach of Fig. 2. The overall shape is similar to
the GVF, but the number of iterations required to com-
pute it was much less (14 vs. 200).
We show a plot of the reach vs. number of iterations
for both the GVF and GDF in Fig. 4. We note that the
GDF grows at a much larger rate, increasing its reach
in a smaller number of iterations than the GVF. The re-
sult of applying the GDF algorithm to the test image of
Fig. 1 is shown in Fig. 5.
Figure 4. Increase in GDF capture range
compared to GVF as a function of the
number of iterations.
Our measure for successful approximation of the
GVF is not accurately expressed with mathematical
measurements such as Mean Square Error (MSE). Since
Figure 5. The cross sections of the mag-
nitude of GDF and GVF for the test im-
age. The shapes and peaks of the curves
match.
our method is trying to approximate the impact of the
GVF on the contour, the measure of success is whether
the GDF can obtain the same increase in capture range
and have the same effect on the active contour as the
GVF. Fig. 6 shows successive stages of an active con-
tour algorithm applied to our test image using the GDF.
The active contour required 30 iterations to converge us-
ing the GVF in Fig. 1e and a comparable 33 iterations
to converge in Fig. 6. We also tested the GDF with a re-
alistic image that might be used with an active contour
algorithm (Fig. 7). The GDF achieved the same quality
as the GVF in a smaller number of iterations.
Figure 6. Convergence of active contour
in 33 steps using the GDF.
6. FPGA Implementation
The GDF is also more efﬁcient than the GVF in
its implementation in Field Programmable Gate Arrays
(FPGAs). Hardware implementations of the GVF or
GDF can be realized by implementing each iteration of
Eq. 5 or Eq. 6, respectively, in separate pipelined stages.
Fig. 8 shows one of the stages of the GVF implemen-
tation, while Fig. 9 shows a stage of the GDF. The re-
source requirements for each of the GDF and GVF is
shown in Table 1. We assume that inputs to each stage
have been normalized to ﬁt within a single hardware
multiplier 18 bits wide.

Figure 7. GDF applied to real-world test
image (a). (b) result of GVF with cross-
section (c). (d) result of GDF with cross-
section (e). The GDF algorithm took 33 it-
erations, compared to 30 for the GVF for a
comparable reach.
Figure 8. First stage of GVF
Although the GDF can be realized in real time hard-
ware through a series of stages, the active contour algo-
rithm is still an iterative algorithm. We can implement
the Greedy active contour algorithm in a real time sys-
tem using a discrete ﬁlter kernel method, which imple-
ments Eq. 1 on each cell of the kernel ﬁlter. This ﬁnds
the energy at each pixel surrounding the contour point
then moves the contour point to the location of mini-
mum energy. The kernel size determines the maximum
distance in pixels per iteration that each active contour
point can move. For example, a 5 × 5 kernel can move
each contour point a maximum of 2 pixels per iteration
while a 7 × 7 kernel can move it by 3 pixels.
7. Conclusions
We have presented a novel method called the Gra-
dient Diffusion Field that efﬁciently approximates the
magnitude of the Gradient Vector Flow of an image and
can be used to guide active contour algorithms when
the image has concave regions. Although the method
is practical for only for small movements in the active
contour, the target application is for tracking objects us-
ing a high frame-rate video stream where the object has
small shifts from image to image. Further study of this
method is left for later work.
Figure 9. First stage of GDF
1 GVF
1 GDF
200 GVF
14 GDF
Kernel Line Buffers
4
4
800
56
Kernel Multipliers
0
25
0
350
Kernel Adders
8
25
1600
350
Term Multipliers
4
0
800
0
Term Adders
6
0
1200
0
Term Line Buffers
2
1
400
14
Table 1. Resources required in the FPGA
implementation of the GDF and GVF. The
ﬁrst two columns show resources for
a single stage, the others for the full
pipeline required for sufﬁcient reach. Re-
call that 200 GVF iterations are approxi-
mately equivalent to 14 GDF iterations.
References
[1] A. A. Amini, S. Tehrani, and T. E. Weymouth. Using
dynamic programming for minimizing the energy of ac-
tive contours in the presence of hard constraints. Second
International Conference on Computer Vision, pages 95–
99, 1988.
[2] J. Canny. A computational approach to edge detection.
IEEE Trans. Pattern Anal. Mach. Intell., 8(6):679–698,
1986.
[3] J. Ivins and J. Porrill. Everthing you always wanted to
know about snakes.
AIVRU Technical Memo 86, July
1993 (Revised June 1995; March 2000), 2000.
[4] M. Kass, A. Witkin, and D. Terzopoulos. Snakes: Ac-
tive contour models.
Int. Journal of Computer Vision,
1(4):321–331, 1987.
[5] N. Paragios, O. Mellina-Gottardo, and R. Visvanathan.
Gradient vector ﬂow fast geodesic active contours. ICCV
2001. Proceedings. Eighth IEEE International Confer-
ence on Computer Vision, 1:67–73, 2001.
[6] D. Williams and M. Shah. A fast algorithm for active
contours and curvature estimation. CVGIP: Image Un-
derstanding, 55(1):14–26, 1992.
[7] Z. Wu, P. Aleksic, and A. Katsaggelos. Lip tracking for
mpeg-4 facial animation. Proceedings. Fourth IEEE In-
ternational Conference on Multimodal Interfaces, pages
293–298, 2002.
[8] C. Xu and J. L. Prince.
Snakes, shapes, and gradient
vector ﬂow.
IEEE Transactions on Image Processing,
7(3):359–369, 1998.
[9] C. Yu-Tai, C. Lin, K. Tan, and K. Lau.
Rectangular
meshes construction of the human urethra using 3-d gvf
snakes. Proceedings of SPIE, 5369:539–549, 2004.

