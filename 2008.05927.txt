End-to-end Contextual Perception and Prediction
with Interaction Transformer
Lingyun (Luke) Li1
Bin Yang1,2
Ming Liang1
Wenyuan Zeng1,2
Mengye Ren1,2
Sean Segal1,2
Raquel Urtasun1,2
Abstract— In this paper, we tackle the problem of detecting
objects in 3D and forecasting their future motion in the context
of self-driving. Towards this goal, we design a novel approach
that explicitly takes into account the interactions between
actors. To capture their spatial-temporal dependencies, we
propose a recurrent neural network with a novel Transformer
[1] architecture, which we call the Interaction Transformer.
Importantly, our model can be trained end-to-end, and runs in
real-time. We validate our approach on two challenging real-
world datasets: ATG4D [2] and nuScenes [3]. We show that our
approach can outperform the state-of-the-art on both datasets.
In particular, we signiﬁcantly improve the social compliance
between the estimated future trajectories, resulting in far fewer
collisions between the predicted actors.
I. INTRODUCTION
Self-driving vehicles (SDVs) have the potential to change
the way we live by providing safe, reliable and cost-effective
transportation for everyone everywhere. In order to plan a
safe maneuver, SDVs have to not only understand the past
and the present but also predict the potential future for at
least the duration of the motion planning horizon.
Traditional software engineering stacks for self-driving are
composed of a set of processes which are executed serially.
Objects are ﬁrst perceived in 3D via object detection to
explain the current frame. These objects are then associated
with detections from previous frames, and the trajectories
are reﬁned typically using a probabilistic ﬁlter. The future
positions and velocities of these objects are estimated by
unrolling the state for the next few seconds, where a dynam-
ical model (e.g., the bicycle model) is typically employed
to produce physically realistic trajectories. An alternative
approach is to associate an actor with a lane to form a
goal (e.g., going straight, turning) and then predict its future
trajectory towards that goal. These models are, however,
simplistic and have very little information as input. As a
consequence, their estimates are often not very accurate.
More sophisticated approaches based on deep learning
representations have been developed [4]–[6] to increase the
accuracy of the predictions. These approaches assume that
the vehicle is localized and rasterize in bird’s-eye view
(BEV) both a high-deﬁnition map (HD map) as well as the
past and current detections. A convolutional neural network
then learns to produce future trajectories from these rasters.
However, all these approaches are slow as computation is
1Uber Advanced Technologies Group
2University of Toronto
not shared between the detection and motion forecasting
networks. Instead, the forecasting network takes the raster
images as input and performs many layers of computation.
As a consequence real-time inference is very hard under this
setting. Moreover, as the prediction network does not have
access to raw data, errors in the detection phase are very
hard if not impossible to recover from due to information
loss.
In contrast, FAF [2] developed a single network to jointly
perform detection and motion forecasting. This results in
better trajectories as the prediction module has access to the
raw data. Furthermore, faster inference is achieved as the
computation is shared between tasks. IntentNet [7] proposed
to output additionally a probability distribution over driving
intentions (e.g., stopping, parked, lane change). [8] took
this a step further and jointly perform detection, forecasting
and motion planning. This resulted in the ﬁrst end-to-end
trainable motion planner that also produces interpretable
intermediate representations. While effective, all the afore-
mentioned approaches ignore the statistical dependencies
between actors, and instead predict each trajectory (or its
probability) independently given the features.
Various approaches have been proposed to model inter-
actions between trafﬁc actors and forecast motion given
object detections. Ma et al. [9] formulated the interaction
between pedestrians under a game-theoretic framework with
ﬁctitious play [10]. [11] introduced a courtesy term to an
inverse reinforcement learning (IRL) objective, which better
explains real-world human behavior. Other approaches model
the interaction implicitly by message passing between actors
[12]–[14]. However, these methods use past ground truth
trajectories of all actors as input. Self-driving cars do not
have access to ground truth object trajectories and thus need
to handle the uncertainty and noise of perception systems.
Therefore, we tackle the end-to-end setting, i.e., from raw
sensor data to detection and motion forecasting.
Towards this goal, we design a multi-sensor detector
followed by an efﬁcient interaction module that is inspired
by the Transformer [1]. We adapt the original architecture,
which was developed for sequence modeling, to our problem
domain by incorporating a novel pairwise attention mech-
anism with spatial reasoning via relative positions of the
actors. We also observe that the evolution of a trajectory
largely depends on the behaviors of other actors in the recent
past. To model this fact we propose a recurrent structure with
arXiv:2008.05927v1  [cs.CV]  13 Aug 2020

per-time-step reﬁnement to capture temporal dependencies
between different prediction time steps. Importantly, our
architecture is very scalable since most of the computation
scales linearly with the number of trafﬁc actors. As a conse-
quence, our end-to-end model runs at 10 FPS on a 1080Ti
GPU. We demonstrate the effectiveness of our approach on
the challenging ATG4D [2] and nuScenes [3] datasets. Our
experiments show that we outperform the state-of-the-art by
a large margin in detection, trajectory accuracy and collision
rate.
II. RELATED WORK
In this section we review previous research on 3D object
detection, trajectory prediction and interaction modeling.
1) 3D Object Detection: Camera-based approaches take
either monocular or stereo images [15]–[17] as input. How-
ever, their performance is limited due to the difﬁculty of
inferring depth. Recent 3D detectors rely on LiDAR. Dif-
ferent data representations have been developed: 3D voxels
[18], bird’s-eye view (BEV) [19]–[22], range view [19], [23],
and point-wise operators [24]–[26]. Approaches that exploit
multiple sensors [19], [22], [25], [27]–[29] achieve superior
performance compared to single-sensor ones. Besides sen-
sors, HD maps provide useful priors [21], [29].
2) Trajectory Prediction: Dynamic models have been
used to estimate the future states by propagating the current
state over time [30], [31]. However, these approaches are
usually too simple to handle complexities in longer hori-
zon prediction. Recent data-driven approaches have shown
promising results in generating realistic future trajectories.
[32] feeds the past vehicle locations in BEV into an LSTM
network. [4]–[6] generates BEV raster images that encode
surrounding vehicle states and HD maps, and then feeds
them into a CNN. These approaches are however slow as
the computation is not shared with the perception module.
3) Joint Perception and Prediction: End-to-end models,
on the contrary, are trained from raw sensor data and the
perception and forecasting modules share features. Existing
models [2], [7], [8] take multi-sweep LiDAR data and HD
maps as input, and solve the two tasks using a single network.
In addition, IntentNet [7] further reasons about semantic
intentions. NeuralMP [8] further estimates jointly motion
planning. However, these methods do not explicitly take
into account the interaction between actors, which plays an
important role in real-world trafﬁc.
4) Interaction Modeling: Various frameworks have been
proposed to model multi-actor interactions, e.g., game theory
[9], Graph Neural Networks [14], [33]. An alternative ap-
proach is feature aggregation between multiple actors. [34]
encodes the pedestrians in a 2D map and uses a CNN to
capture the local interactions. [12], [35] propose a fully-
connected layer (SocialPool) to aggregate information of
neighboring pedestrians, while [13] further modiﬁes the layer
to be convolutional (ConvSocialPool). [36]–[41] propose
explicit attention modules to identify important physical
constraints and social neighbors. In contrast, we propose
to capture both temporal and spatial dependencies between
actors by incorporating a Transformer-like [1] module into a
recurrent neural network. Towards this goal, we propose sev-
eral important architecture modiﬁcations of the Transformer
to handle our problem domain.
III. INTERACTION TRANSFORMER
In this paper, we propose an end-to-end model to solve the
tasks of detection and motion forecasting from raw sensor
data. Importantly, our model reasons about the interactions
between the actors in the scene. We refer the reader to
Fig. 1 for the overall model architecture. Our model has
two main components: 1) a detection network that fuses
information from multi-sensor data (i.e., LiDAR, images, HD
maps) and outputs a set of bounding boxes, and 2) a recur-
rent interactive prediction module that processes interactions
between actors and predicts their future trajectories. In the
subsequent sections, we ﬁrst explain our model’s input and
output parameterizations, then describe each component of
the model in detail, including our learning procedure.
A. Input and Output Parameterizations
1) Input Representation: Given a LiDAR sweep, we vox-
elize the point cloud into a 3D occupancy grid in BEV
with a ﬁxed resolution, centered at the ego vehicle. We
deﬁne each LiDAR point feature to be 1, and compute
the voxel feature by summing all nearby point features
weighted by their relative positions to the voxel center.
This helps preserve ﬁne-grained information. To capture past
motion for the task of motion forecasting, we aggregate
multiple past LiDAR sweeps (registered to the current frame
by ego-motion compensation) by concatenating their voxel
representations along the Z axis. Following [21], we exploit
both geometric and semantic map priors for better reasoning.
In particular, we subtract the ground height from the Z value
of each LiDAR point before voxelization. In this way, we can
remove the variation caused by the ground slope. We also
extract semantic priors in the form of road and lane masks.
Each of them is a one-channel raster image in BEV depicting
the drivable surface and all the lanes respectively (see Fig.
1 left). We augment the LiDAR voxel representation with
semantic map priors by simple concatenation.
2) Output Representation: We deﬁne the output space in
BEV as it enables efﬁcient feature sharing between percep-
tion and forecasting. We parameterize the detection as a set
of oriented bounding boxes. A detection box is represented
with (x, y, w, l, θ), where (x, y) is the box center, (w, l) is
the box size, and θi is its orientation. Note that the missing Z
dimension can be recovered from the ground prior in the HD
map. Additionally, we represent the trajectory as a sequence
of boxes at future time steps, denoted as {(x(t)
i , y(t)
i , θ(t)
i )},
with t = 1, ..., T. We assume that the objects are rigid
and thus their sizes are kept the same across all time steps.
Below we use the terms of trajectory prediction and motion
forecasting interchangeably.
B. Object Detection from Multi-Sensors
1) Backbone Network Architecture:
The sensor-fusion
backbone network follows the two-stream architecture of

Fig. 1.
Model architecture of our contextual end-to-end perception and prediction model. We highlight one actor in the prediction module for clarity,
while in practice all actors are predicted in parallel.
[29]. The BEV stream is a customized 2D CNN that ex-
tracts features in BEV space from joint LiDAR and map
representation. Inception-like blocks are stacked sequentially
with residual connections to extract multi-scale feature maps.
The image stream is a ResNet-18 [42] pre-trained on Im-
ageNet [43], and receives RGB camera images as input.
We aggregate multi-scale image feature maps from each
ResNet-18 residual block with a feature pyramid network
[44], and fuse the aggregated feature map with the BEV
stream via a continuous fusion layer [22], providing dense
fusion. Speciﬁcally, image features are ﬁrst back-projected
to BEV space according to the existing LiDAR observation.
At BEV locations with no LiDAR points, the image features
are interpolated from nearby occupied locations via an MLP.
The image and BEV features are then fused by element-
wise addition in BEV space. The output feature map from
the BEV stream is used to provide multi-sensor features for
the detection and prediction modules.
2) Dense BEV Object Detection: As vehicles are rel-
atively similar and do not overlap in BEV space, fol-
lowing RetinaNet [45], we formulate object detection as
dense prediction without any object anchors. We apply
several 1 × 1 convolutions on top of the BEV feature map,
which outputs an 8-channel vector per voxel, representing
a conﬁdence score s and a bounding box parameterized
as (dx, dy, w, l, sin 2θ, cos 2θ, clsθ), where (dx, dy) are the
relative position offsets from the voxel center to the box
center, (w, l) are the box size, and (sin 2θ, cos 2θ, clsθ) are
used to decode the orientation. Following [21], we regress to
(sin 2θ, cos 2θ) to get the orientation without distinguishing
ﬂips. To effectively model interaction we need to understand
which direction each vehicle is facing. We use an additional
classiﬁcation step clsθ to classify whether the orientation
is in ( 1
4π, 3
4π] [46]. This classiﬁcation target is better than
(0, π] since orientations of many vehicles are similar or
opposite to the orientation of the ego vehicle, which are
at the boundaries of (0, π]. We ﬁnally apply oriented non-
maximum suppression (NMS) to remove the duplicates and
keep all remaining boxes whose score is above a threshold.
C. Recurrent Interactive Motion Forecasting
We based our design on two observations. First, the be-
haviors of actors heavily depend on each other. For example,
drivers control the vehicle speed to keep a safe distance to
the vehicle ahead. At intersections, drivers typically wait for
those that have the right of way. Second, the output at each
time step depends on the outputs at previous time steps.
We thus propose a recurrent interactive motion forecasting
model that 1) jointly reasons about all actors modeling their
interactions and 2) iteratively infers the trajectory to capture
its sequential nature. Our interaction module is inspired by
the Transformer [1], an architecture developed for machine
translation. We adapt it to our motion forecasting task. Below
we ﬁrst review the Transformer module, then describe the
differences with our novel Interaction Transformer module,
and ﬁnally explain the recurrent inference process.
1) A Review on the Transformer: Sequence to sequence
models with an encoder-decoder architecture have been pre-
dominant in natural language processing. In this context, the
Transformer [1] was proposed as an attention mechanism
that can be used to draw global dependencies between inputs
and outputs, especially for long sequences. The Transformer
projects each feature to a query and a key-value pair, which
are all vectors. For each query, it computes a set of attentional
weights using a compatibility function between the query
and the set of keys. The output feature is then the sum
of values weighted by the attention, plus some nonlinear
transformations.
More formally, we denote the input sequence as F in ∈
Rn×df , each row of which is a feature vector. The Trans-
former uses linear projections to get the set of queries, keys
and values as follows
Q = F inW Q, K = F inW K, V = F inW V ,
(1)
where W Q ∈Rdf ×dk, W K ∈Rdf ×dk and W V ∈Rdf ×dv
are matrices of weights. It then uses scaled dot products
between the queries and keys to compute the attentional
weights, and then aggregates the values for each query
A = softmax
QKT
√dk

V,
(2)
where a softmax function is used to add a sum-to-one
normalization to the attentional weights of a query (each
row of QKT ). The scaling factor
1
√dk is used to prevent the
dot product from being numerically too large. Finally, the
Transformer uses a set of non-linear transformations with
shortcut connections to get the output features:
F out = ResBlock(MLP(A) + Fin),
(3)

where MLP is a Multi-Layer Perception applied to each row
of A, and ResBlock is a residual block [42] also applied on
each row. The output F out has the same shape as F in.
2) Our Interaction Transformer: The Transformer was
designed to process an input sequence. In our task, the input
is a set of actors and their representations. We represent the
state of each actor with features extracted from the BEV
feature map as well as the actor’s spatial information, which
contains the center location, size, and orientation of the actor.
In our task, the queries Q represent the actors we want to
forecast their motion of, and keys K and values V represent
neighbor contextual information from other actors. Fig. 2
shows a diagram of our Interaction Transformer.
We denote the input actor features as F in, where each
row is the feature vector of an actor. We use Eq. (1)
to compute the queries Q. However, there are signiﬁcant
differences in computing the keys and values due to the
spatial nature of our problem. In the Transformer, location
information is encoded as absolute positional embeddings
which are fused into the input features. In our task, absolute
locations provide little information about the interactions
between actors, yet relative locations and orientations are
crucial. Thus for each target actor i, we transform other
actors into the local coordinate system centered on the i-
th actor with the x-axis aligned with the orientation of the
actor. This transformation ensures learning of the interaction
to be translation and rotation invariant, which results in
better performance. We then encode the relative location
information with the relative location embedding R, where
R ∈Rn×n×16 is a 3-dimensional matrix:
Rij = MLP(|xi
j|, |yi
j|, sgn(xi
j), sgn(yi
j), wj, lj, θi
j).
(4)
xi
j, yi
j, and θi
j are the locations and orientation of actor j
after it has been transformed into actor i’s local coordinate
system, sgn is the sign function, and (wj, lj) encode the
actor’s size. A two-layer MLP transforms the 7-channel input
to the 16-channel embedding.
We use actor features F in and the relative location em-
bedding R to compute K and V . As R cannot be fused into
the single actor feature, we cannot use a shared set of keys
and values for different queries. In this case, both K and
V become 3-dimensional matrices, i.e., K ∈Rn×n×dk and
V ∈Rn×n×dv. We compute K and V using:
Ki = MLP(Concat(F inW K1, RiW K2)),
(5)
Vi = Concat(F inW V1, RiW V2).
(6)
where Concat denotes concatenation along the second di-
mension, and an MLP is applied on each row vector. We
then compute the attention as:
Ai = sigmoid
QiKT
i
√dk

Vi.
(7)
Note that we change the softmax function in Eq. (2) to a
sigmoid function. For each prediction target, the softmax
function forces the attention scores of all other actors to sum
to 1, which is not a reasonable assumption in our context, as
this sum is expected to be low when the target actor is not
interacting with others, and high when the target actor has
strong interactions. Finally, we compute the output features
following Eq. (3).
3) Recurrent Temporal Prediction: To capture the sequen-
tial nature of the trajectory outputs, we use a recurrent model
to predict the motion in an autoregressive fashion (see Fig. 1
right), where the number of recurrent steps equals the number
of predicted time steps. At time step t, the relative location
embedding R(t) is computed from the output waypoints at
t−1, and the input actor feature is denoted as F in(t). We use
detection bounding boxes to compute R(0), and set F in(0) to
be the bi-linearly interpolated output BEV features extracted
at the detection box centers. The Interaction Transformer
takes F in(t) and R(t) as input and outputs F out(t), which
is then fed into a two-layer MLP to compute the next set of
output waypoints. We then use F out(t) as F in(t+1).
4) Per-Time-Step reﬁnement: For each time step, we use
an extra reﬁnement step to obtain more accurate waypoints.
The Interaction Transformer ﬁrst takes F t−1
in
and relative
location embedding Rt−1 to compute F t−1
out
and predict a
waypoint proposal P t
proposal. The updated feature F t
in (same as
F t−1
out ) and Rt (computed from P t
proposal) are then fed into the
Interactive Transformer again to obtain the reﬁned waypoints
P t
reﬁne as our ﬁnal motion forecasting output. Compared to
the proposal step, the reﬁnement step encodes more up-
to-date spatial relations between actors. For computational
efﬁciency, Preﬁne and Pproposal are computed in parallel by
a single forward pass of the Interaction Transformer. i.e.,
we obtain both P t
reﬁne and P t+1
proposal from F t
out, by two dif-
ferent MLPs. Both Preﬁne and Pproposal are parameterized as
(dx, dy, sin 2θ, cos 2θ, clsθ), where (dx, dy) are relative to
the detection box center, and (sin 2θ, cos 2θ, clsθ) are deﬁned
in the same way as the detection output parameterizations.
D. Learning
Our model is fully differentiable and can be trained end-
to-end by minimizing the weighted sum of detection and
prediction losses
Ltotal = Ldetect + α(Lproposal
predict + Lreﬁne
predict),
where α is a scalar. For detection loss we use the weighted
sum of three losses: object classiﬁcation loss, ℓ2 loss for
the box regression, and orientation classiﬁcation loss for the
orientation ﬂip. Similarly, we use the sum of three losses as
our motion forecasting loss: the ℓ2 loss for the trajectory and
future heading, the classiﬁcation loss for the orientation ﬂip,
and a collision loss that computes the negative ℓ2 distance
between two vehicles only in the case that there is a collision.
This collision loss pushes colliding vehicles away from each
other.
For object detection, we use the distance between BEV
voxels and their closest ground-truth box center to determine
positive and negative samples. Samples whose distance is
smaller than a threshold are considered as positive, and
negative otherwise. As a large proportion of the samples
are negative in dense object detection, we adopt online hard

Fig. 2.
Interaction Transformer module. The ﬁgure shows the computation of contextual feature for actor i. We use actor i’s feature F in
i
to compute
the query. We use all n actors’ features F in and actor i’s location embedding Ri relative to all actors to compute the keys and values. We use the query
and keys to obtain the attentional weights, which are then used to aggregate the values to F in
i . We apply a residual block to get the updated contextual
feature F out
i
for actor i.
negative mining, where we only keep the most difﬁcult
negative samples (with the largest loss) and ignore the
easy negative ones. Classiﬁcation loss is computed over
both positive and negative samples while regression loss is
computed over positive samples only.
We perform online associations between detection results
and ground-truth labels to compute the motion forecast loss.
For each detection, we assign the ground-truth box with the
maximum (oriented) IoU. If a ground truth box is assigned to
multiple detections, only the detection with maximum IoU is
kept while other detections are ignored. Regression on future
motion is then averaged over those detections with associated
ground-truth. Compared to regression on all ground truth
actors, our motion forecast loss will not be dominated by
actors which are not detected.
IV. EXPERIMENTAL EVALUATION
1) Datasets: We evaluate our approach on two large-scale
real-world driving datasets: ATG4D [2] and nuScenes [3].
ATG4D was collected by driving in multiple North American
cities with a multi-sensor kit mounted on top of a ﬂeet
of vehicles. In total it contains 5,500 video snippets of 25
seconds each with a frame sampling rate of 10 Hz. We use
5,000 snippets for training and 500 snippets for evaluation.
Although scenario diversity has already been considered
when creating the ATG4D dataset, interactions between
trafﬁc actors still happen relatively rarely. To address this
problem, we also sample an additional evaluation subset
ATG4D-interact from ATG4D-eval which contains interact-
ing actors. Speciﬁcally, we focus on blocking interactions
by deﬁning actors that: 1) are not parked 2) have a velocity
smaller than 0.2 m/s; 3) and have another vehicle nearby
(<5m) in front and in the same lane. We search in the
whole dataset for keyframes when there is a vehicle entering
or leaving the blocking status. We extend each keyframe
temporally by 5 seconds from the past or into the future
depending on whether the actor is entering or leaving the
blocking status. Using these heuristics, we collect around 800
5-second snippets that are considered interactive. nuScenes
contains 850 scenes of 20 seconds of driving data, with a
frame sampling rate of 20 Hz. Positions of all actors are
labeled at 2Hz. We follow the ofﬁcial splits.
2) Evaluation Metrics: Detection Average Precision (AP)
is deﬁned as the area under the IoU based Precision-Recall
curve. Note that AP measures the performance on the
object detection task alone. For a comprehensive analysis,
we compute AP at 0.5 and 0.7 IoUs respectively. Average
Displacement Error (ADE) is deﬁned as the mean of ℓ2
distances between the predicted future trajectory and the
ground-truth trajectory at all time steps within the prediction
horizon. Final Displacement Error (FDE) is deﬁned as the ℓ2
distance between the predicted and ground-truth trajectories
at the end of the prediction horizon. Trajectory Collision
Rate (TCR) is deﬁned as the collision rate between the future
trajectories of object detections, where collision is deﬁned
as > 0.05 IoU between two detections at any time-step
within the prediction horizon. ADE measures the overall
accuracy of trajectory prediction, whereas FDE highlights
the performance in long-term prediction. TCR measures the
social compliance of the actors and therefore is used to
evaluate the effectiveness of the proposed interaction module.
ADE, FDE, and TCR are evaluated on all vehicles, regardless
of whether they are moving or not. For a fair comparison
between models with different detections, we compute ADE,
FDE, and TCR at a ﬁxed 70% and 90% recall rates (with
0.1 IoU threshold) respectively.
3) Implementation Details: We use a voxel resolution
of 0.156m for the input BEV representation. We aggregate
the past 5 LiDAR sweeps for ATG4D and 10 sweeps for
nuScenes to encode a 0.5-second history. We train our model
end-to-end using the Adam optimizer [47]. We ignore object
labels that are not observable by the LiDAR (i.e., 0 points
inside the box). We apply NMS with 0.05 IoU threshold to
the detection results to avoid object collision at t = 0. We
also remove detections with < 0.1 conﬁdence score. The
prediction horizon of our model is 3 seconds, with a time-
step interval of 0.5 second (therefore T = 6). For ATG4D,
we train and evaluate the model in the front region of the
ego-car within a 100m range. For nuScenes, we follow the
ofﬁcial evaluation range, which is 50m around the ego-car.
We do not use images or maps in nuScenes because not

TABLE I
Comparison with state-of-the-art on ATG4D-eval testset. AP means Average Precision as object detection metric. ADE and FDE mean Average
Displacement Error and Final Displacement Error as trajectory prediction metrics. TCR means Trajectory Collision Rate that measures social compliance
between actors. ↑means the higher the better, ↓means the lower the better.
Method
AP (%) ↑
ADE (cm) ↓
FDE (cm) ↓
TCR(%) ↓
IoU0.5
IoU0.7
recall0.7
recall0.9
recall0.7
recall0.9
recall0.7
recall0.9
FAF [2]
90.20
72.93
72.8
82.5
131.1
145.2
0.729
1.242
NeuralMP [8]
89.83
76.15
63.1
74.4
114.7
129.0
0.408
0.656
SocialPool [12]
94.60
82.02
55.4
63.8
97.7
109.2
0.288
0.403
ConvSocialPool [13]
94.47
81.98
55.0
63.5
96.5
108.1
0.207
0.310
Ours, no collision loss
94.62
82.18
52.6
61.1
92.1
104.1
0.080
0.126
Ours, with collision loss
94.68
82.09
52.6
61.3
92.0
104.4
0.041
0.055
TABLE II
Comparison with state of the art on nuScenes validation set. We follow the same evaluation metrics as SpAGNN [33], which reports L2 error of actor’s
center, at 0s, 1s, and 3s, and uses IoU threshold 0.1 for NMS and collision rate. They use IoU threshold 0.5 to associate detections with ground truth, and
shows results with recall threshold of 60%. Since recall is lower under this high-association-IoU setting, we show additional results at recall 80% instead
of 90%.
Method
AP (%)↑
L2 @ 0s (cm) ↓
L2 @ 1s (cm) ↓
L2 @ 3s (cm) ↓
TCR IoU0.1 (%)↓
IoU0.5
IoU0.7
recall0.6
recall0.8
recall0.6
recall0.8
recall0.6
recall0.8
recall0.6
recall0.8
SpAGNN [33]
-
-
22
-
58
-
145
-
0.222
-
SocialPool [12]
82.53
70.11
20.1
23.1
39.2
44.0
119.9
127.6
0.158
0.881
ConvSocialPool [13]
82.16
69.55
21.2
24.2
39.3
44.2
117.6
124.5
0.174
0.722
Ours, no collision loss
82.72
70.29
19.6
22.5
38.2
42.7
112.7
118.3
0.057
0.269
Ours, with collision loss
82.66
70.12
20.1
22.9
38.4
43.0
112.4
117.9
0.016
0.058
TABLE III
Ablation study of motion prediction architecture and collision loss.
2nd-stage
prediction
collision
loss
Transformer recurrent reﬁne
ATG4D-interact
nuScenes
AP (%) ↑
ADE (cm) ↓
FDE (cm) ↓
TCR (%) ↓
AP (%) ↑
ADE (cm) ↓
FDE (cm) ↓
TCR (%) ↓
IoU0.7
recall0.9
recall0.9
recall0.9
IoU0.5
recall0.9
recall0.9
recall0.9





79.13
89.8
159.6
2.094
81.43
80.5
134.5
2.004





80.31
87.9
157.7
1.893
82.45
80.3
135.1
2.052





80.40
89.7
159.9
1.701
82.55
80.8
135.2
1.667





80.44
85.1
152.4
0.885
82.88
78.4
130.1
1.314





80.51
83.9
149.3
0.529
82.76
77.0
126.0
0.941





80.46
83.7
147.4
0.354
82.72
76.6
125.2
0.909





80.37
84.0
147.9
0.157
82.66
76.8
124.9
0.122
TABLE IV
Ablation study of the Interaction Transformer.
actor
feature
relative
location
embedding
attention
normalization
ATG4D-interact
nuScenes
AP (%) ↑
ADE (cm) ↓
FDE (cm) ↓
TCR (%) ↓
AP (%) ↑
ADE (cm) ↓
FDE (cm) ↓
TCR (%) ↓
IoU0.7
recall0.9
recall0.9
recall0.9
IoU0.5
recall0.9
recall0.9
recall0.9


softmax
80.40
86.9
155.1
1.439
82.56
79.9
134.1
1.923

global
softmax
80.33
85.0
150.8
0.853
82.88
77.9
127.1
1.137

actor
softmax
80.27
84.6
149.0
0.476
82.94
77.5
126.3
1.043

actor
sigmoid
80.46
83.7
147.4
0.354
82.72
76.6
125.2
0.909
every frame has well-aligned images and some map data
has large alignment error with LiDAR. Due to the limited
number of labels in nuScenes, we also conduct augmentation
during training. Since labels are only available at 2Hz, we use
linear interpolation to estimate actors’ bounding boxes for
frames without labels. We also conduct spatial augmentation
by randomly scaling (uniformly sampling from [0.95, 1.05]),
rotating the ground plane between

−π
6 , π
6

, and translating
in the range [1.0, 1.0, 0.2] m for x, y, and z axes respectively.
4) Comparison with State-of-the-Art: Table I and II show
the comparison with the state-of-the-art on object detection,
trajectory prediction and interaction modeling. Since none of
the compared methods uses any form of collision loss, for
fair comparison, we show results of our method both with
and without collision loss. We ﬁrst compare with previous
methods that solve the same end-to-end joint perception and
prediction task as ours, i.e., FAF [2] and NeuralMP [8],
on the ATG4D dataset. As shown in Table I, our model
outperforms both approaches by a large margin in all metrics.
Speciﬁcally, compared to the previous best joint detection
and prediction model NeuralMP [8], we achieve 4.8%/6.0%
AP gain at 0.5/0.7 IoU, and 17.9%/19.3% relative reduction
in ADE/FDE at 90% recall. In terms of the interaction spe-
ciﬁc metric TCR, we show that by introducing the Interaction
Transformer, we achieve 80.8% relative reduction at 90%
recall. Adding collision loss further reduces TCR by 56.3%
on a relative basis. We then compare to SpAGNN [33],
which is the state-of-the-art end-to-end motion forecasting
model on nuScenes. SpAGNN takes LiDAR and map as
input, and models interaction with graph neural networks,
while our model only uses LiDAR as input for nuScenes.
For fair comparisons, in Table II, we follow the same metrics
as SpAGNN, and demonstrate 34.1%/22.3%/74.3% relative
gains on L2@1s, L2@3s, and TCR with IoU 0.1, even

Fig. 3.
Qualitative results of the baseline model without interaction (1st row) and the proposed model (2nd row). We highlight actors with
interactions in red. With the proposed method, the highlighted vehicles are able to react to other actors and adjust their future trajectory to avoid collision.
without using collision loss.
We also compare with other state-of-the-art interaction
modeling approaches, SocialPooling [12] and its convolu-
tional variant [13] on both ATG4D and nuScenes, by replac-
ing our Interaction Transformer with these modules. Note
that we exploit our powerful multi-sensor fusion backbone
on all these baselines. As shown in Table I and II, on ATG4D,
even without collision loss, our method is 3.8%/3.7%/59.4%
better compared to ConvSocialPool in ADE/FDE/TCR at
90% detection recall. On nuScenes, at 80% detection recall,
our method is 4.2%/5.0%/62.7% better on L2@1s, L2@3s
and TCR with IoU 0.1. For detection, in addition to the
IoU-AP metrics, we also evaluate with the ofﬁcial nuScenes
metrics. Our detection model achieves an mAP of 81.4% on
car detection, which is on par with the state-of-the-art.
5) Ablation Studies: To further analyze the contribution
of each module proposed in the paper, we conduct several
ablation studies on both the ATG4D-interact testset and the
full nuScenes dataset. We ﬁrst provide an ablation study
on the high-level model architecture. Towards this goal,
our baseline model has the same single-stage structure as
previous end-to-end models [2], [8], with the only differ-
ence being the multi-sensor backbone network. We then
add our two-stage architecture, the Interaction Transformer,
recurrent prediction, and additional reﬁnement on top of
the baseline model sequentially. As shown in Table IV-
.1, using a two-stage architecture with more specialized
feature representation and loss computation for each task
brings over 1% gain in detection AP. Adding the Interaction
Transformer improves the detection performance slightly,
but signiﬁcantly improves all prediction metrics on both
datasets. The recurrent architecture further pushes the predic-
tion performance; this gain is largely from updated relative
location embedding in each prediction time step. Finally,
we add the additional reﬁnement step to recover our full
model (without collision loss). This allows the Interaction
Transformer to be aware of the spatial relations at the current
prediction time step. Compared to the baseline with the same
backbone network, our model achieves 6.8%/7.6%/83.1%
relative reduction on ADE/FDE/TCR on the ATG4D-interact
testset. On nuScenes, we also achieved 4.9%/7.0%/54.6%
relative gain on ADE/FDE/TCR.
Next, we analyze the collision loss. The 2nd and 3rd
rows of Table IV-.1 show results of using collision loss
without the Interaction Transformer. Collision loss reduces
TCR slightly, but at the same time also harms ADE and FDE.
In particular, ADE and FDE on ATG4D-interact are 2.0%
and 1.3% worse compared to the baseline without collision
loss. On the other hand, as shown in the last two rows of
Table IV-.1, adding collision loss to our recurrent Interaction
Transformer achieves much better results. TCR is further
reduced by 55.7% and 86.6% on the two datasets, while ADE
and FDE are almost unaffected. This indicates that collision
loss works better if the network understands spacial relations
between actors, as in our Interaction Transformer.
Our last ablation focuses on the design of the Interaction
Transformer. For a fair comparison, collision loss is not
used here because it harms the baseline model. Our baseline
model follows the original Transformer’s architecture, which
uses a softmax function to normalize the pairwise attention
over all other actors. We ﬁrst add a relative location feature
branch to the attention computation, and then improve it by
reasoning spatially in each actor’s own coordinate system at
each prediction time step, instead of the global coordinate
system. Finally, we replace the softmax function from the
original Transformer with the sigmoid function to remove
the constraint that attention scores on all actors must sum
to 1. As shown in Table IV-.1, each modiﬁcation provides
signiﬁcant gains on all prediction metrics on both datasets.
6) Qualitative Results: Fig. 3 shows qualitative results of
ﬁve driving scenarios, comparing the proposed model and the
one-stage baseline without the interaction module (baseline
in Table IV-.1). For fair comparison, neither method uses
collision loss. We visualize both detection bounding boxes
and estimated future trajectories, and highlight the actors
undergoing interactions in red. With our approach, the target
vehicle in the ﬁrst four scenarios successfully senses the

existence of the front vehicle and adjusts its future motion
accordingly to avoid collisions. In contrast, for the baseline,
the future prediction of the target vehicle is similar to a
simple extrapolation of its past states. As a result, this leads
to a collision with the front vehicle. In the last scenario, we
show that the target vehicle reacts to the parked vehicle and
makes a sharper turn to avoid collision.
V. CONCLUSION
We have proposed a novel approach to joint detection
and future motion forecasting that takes into account the
interactions among the actors. We validate our approach on
the challenging ATG4D [2] and nuScene [3] datasets and
show very signiﬁcant improvements over the state-of-the-art.
In the future, we plan to investigate interactions involving
other types of actors such as bicyclists and pedestrians, as
well as an extension of our approach to jointly perform
motion planning in a similar spirit to NeuralMP [8].
REFERENCES
[1] A. Vaswani, N. Shazeer, N. Parmar, J. Uszkoreit, L. Jones, A. N.
Gomez, Ł. Kaiser, and I. Polosukhin, “Attention is all you need,” in
NeurIPS, 2017.
[2] W. Luo, B. Yang, and R. Urtasun, “Fast and furious: Real time end-
to-end 3d detection, tracking and motion forecasting with a single
convolutional net,” in CVPR, 2018.
[3] H. Caesar, V. Bankiti, A. H. Lang, S. Vora, V. E. Liong, Q. Xu,
A. Krishnan, Y. Pan, G. Baldan, and O. Beijbom, “nuscenes: A
multimodal dataset for autonomous driving,” in CVPR, 2020.
[4] N. Djuric, V. Radosavljevic, H. Cui, T. Nguyen, F.-C. Chou, T.-H.
Lin, N. Singh, and J. Schneider, “Uncertainty-aware short-term motion
prediction of trafﬁc actors for autonomous driving,” WACV, 2020.
[5] H. Cui, V. Radosavljevic, F.-C. Chou, T.-H. Lin, T. Nguyen, T.-K.
Huang, J. Schneider, and N. Djuric, “Multimodal trajectory predictions
for autonomous driving using deep convolutional networks,” in ICRA,
2019.
[6] M. Bansal, A. Krizhevsky, and A. Ogale, “Chauffeurnet: Learning to
drive by imitating the best and synthesizing the worst,” arXiv preprint
arXiv:1812.03079, 2018.
[7] S. Casas, W. Luo, and R. Urtasun, “Intentnet: Learning to predict
intention from raw sensor data,” in CoRL, 2018.
[8] W. Zeng, W. Luo, S. Suo, A. Sadat, B. Yang, S. Casas, and R. Urtasun,
“End-to-end interpretable neural motion planner,” in CVPR, 2019.
[9] W.-C. Ma, D.-A. Huang, N. Lee, and K. M. Kitani, “Forecasting
interactive dynamics of pedestrians with ﬁctitious play,” in CVPR,
2017.
[10] G. W. Brown, “Iterative solution of games by ﬁctitious play,” Activity
analysis of production and allocation, vol. 13, no. 1, pp. 374–376,
1951.
[11] L. Sun, W. Zhan, M. Tomizuka, and A. D. Dragan, “Courteous
autonomous cars,” in IROS, 2018.
[12] A. Alahi, K. Goel, V. Ramanathan, A. Robicquet, L. Fei-Fei, and
S. Savarese, “Social lstm: Human trajectory prediction in crowded
spaces,” in CVPR, 2016.
[13] N. Deo and M. M. Trivedi, “Convolutional social pooling for vehicle
trajectory prediction,” in CVPRW, 2018.
[14] Y. Ma, X. Zhu, S. Zhang, R. Yang, W. Wang, and D. Manocha,
“Trafﬁcpredict: Trajectory prediction for heterogeneous trafﬁc-agents,”
AAAI, 2019.
[15] X. Chen, K. Kundu, Z. Zhang, H. Ma, S. Fidler, and R. Urtasun,
“Monocular 3d object detection for autonomous driving,” in CVPR,
2016.
[16] X. Chen, K. Kundu, Y. Zhu, A. G. Berneshawi, H. Ma, S. Fidler, and
R. Urtasun, “3d object proposals for accurate object class detection,”
in NeurIPS, 2015.
[17] P. Li, X. Chen, and S. Shen, “Stereo r-cnn based 3d object detection
for autonomous driving,” in CVPR, 2019.
[18] M. Engelcke, D. Rao, D. Z. Wang, C. H. Tong, and I. Posner,
“Vote3deep: Fast object detection in 3d point clouds using efﬁcient
convolutional neural networks,” in ICRA, 2017.
[19] X. Chen, H. Ma, J. Wan, B. Li, and T. Xia, “Multi-view 3d object
detection network for autonomous driving,” in CVPR, 2017.
[20] B. Yang, W. Luo, and R. Urtasun, “Pixor: Real-time 3d object
detection from point clouds,” in CVPR, 2018.
[21] B. Yang, M. Liang, and R. Urtasun, “Hdnet: Exploiting hd maps for
3d object detection,” in CoRL, 2018.
[22] M. Liang, B. Yang, S. Wang, and R. Urtasun, “Deep continuous fusion
for multi-sensor 3d object detection,” in ECCV, 2018.
[23] G. P. Meyer, A. Laddha, E. Kee, C. Vallespi-Gonzalez, and C. K.
Wellington, “Lasernet: An efﬁcient probabilistic 3d object detector
for autonomous driving,” in CVPR, 2019.
[24] Y. Zhou and O. Tuzel, “Voxelnet: End-to-end learning for point cloud
based 3d object detection,” in CVPR, 2018.
[25] C. R. Qi, W. Liu, C. Wu, H. Su, and L. J. Guibas, “Frustum pointnets
for 3d object detection from rgb-d data,” in CVPR, 2018.
[26] S. Shi, X. Wang, and H. Li, “Pointrcnn: 3d object proposal generation
and detection from point cloud,” in CVPR, 2019.
[27] J. Ku, M. Moziﬁan, J. Lee, A. Harakeh, and S. L. Waslander, “Joint
3d proposal generation and object detection from view aggregation,”
in IROS, 2018.
[28] G. P. Meyer, J. Charland, D. Hegde, A. Laddha, and C. Vallespi-
Gonzalez, “Sensor fusion for joint 3d object detection and semantic
segmentation,” in CVPRW, 2019.
[29] M. Liang, B. Yang, Y. Chen, R. Hu, and R. Urtasun, “Multi-task multi-
sensor fusion for 3d object detection,” in CVPR, 2019.
[30] A. Cosgun, L. Ma, J. Chiu, J. Huang, M. Demir, A. M. Anon, T. Lian,
H. Taﬁsh, and S. Al-Stouhi, “Towards full automated drive in urban
environments: A demonstration in gomentum station, california,” in
2017 IEEE Intelligent Vehicles Symposium (IV), 2017.
[31] J. Ziegler, P. Bender, M. Schreiber, H. Lategahn, T. Strauss, C. Stiller,
T. Dang, U. Franke, N. Appenrodt, C. G. Keller, et al., “Making bertha
drivean autonomous journey on a historic route,” IEEE Intelligent
Transportation Systems Magazine, vol. 6, no. 2, pp. 8–20, 2014.
[32] B. Kim, C. M. Kang, J. Kim, S. H. Lee, C. C. Chung, and J. W. Choi,
“Probabilistic vehicle trajectory prediction over occupancy grid map
via recurrent neural network,” in ITSC, 2017.
[33] S. Casas, C. Gulino, R. Liao, and R. Urtasun, “Spatially-aware graph
neural networks for relational behavior forecasting from sensor data,”
in ICRA, 2020.
[34] S. Yi, H. Li, and X. Wang, “Pedestrian behavior understanding and
prediction with deep neural networks,” in ECCV, 2016.
[35] A. Gupta, J. Johnson, L. Fei-Fei, S. Savarese, and A. Alahi, “Social
gan: Socially acceptable trajectories with generative adversarial net-
works,” in CVPR, 2018.
[36] A. Sadeghian, F. Legros, M. Voisin, R. Vesel, A. Alahi, and
S. Savarese, “Car-net: Clairvoyant attentive recurrent network,” in
ECCV, 2018.
[37] A. Sadeghian, V. Kosaraju, A. Sadeghian, N. Hirose, H. Rezatoﬁghi,
and S. Savarese, “Sophie: An attentive GAN for predicting paths
compliant to social and physical constraints,” in CVPR, 2019.
[38] Y. Huang, H. Bi, Z. Li, T. Mao, and Z. Wang, “Stgat: Modeling spatial-
temporal interactions for human trajectory prediction,” in ICCV, 2019.
[39] C. Choi and B. Dariush, “Looking to relations for future trajectory
forecast,” in ICCV, 2019.
[40] V. Kosaraju, A. Sadeghian, R. Mart´ın-Mart´ın, I. D. Reid, S. H.
Rezatoﬁghi, and S. Savarese, “Social-bigat: Multimodal trajectory
forecasting using bicycle-gan and graph attention networks,” ArXiv,
vol. abs/1907.03395, 2019.
[41] B. Ivanovic and M. Pavone, “The trajectron: Probabilistic multi-agent
trajectory modeling with dynamic spatiotemporal graphs,” in ICCV,
2019.
[42] K. He, X. Zhang, S. Ren, and J. Sun, “Deep residual learning for
image recognition,” in CVPR, 2016.
[43] J. Deng, W. Dong, R. Socher, L.-J. Li, K. Li, and L. Fei-Fei,
“Imagenet: A large-scale hierarchical image database,” in CVPR, 2009.
[44] T.-Y. Lin, P. Doll´ar, R. Girshick, K. He, B. Hariharan, and S. Belongie,
“Feature pyramid networks for object detection,” in CVPR, 2017.
[45] T.-Y. Lin, P. Goyal, R. Girshick, K. He, and P. Doll´ar, “Focal loss for
dense object detection,” in CVPR, 2017.
[46] B. Zhu, Z. Jiang, X. Zhou, Z. Li, and G. Yu, “Class-balanced Grouping
and Sampling for Point Cloud 3D Object Detection,” arXiv e-prints,
p. arXiv:1908.09492, Aug 2019.
[47] D. P. Kingma and J. Ba, “Adam: A method for stochastic optimiza-
tion,” ICLR, 2015.

