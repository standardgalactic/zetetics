Strategic Voting in the Context of
Stable-Matching of Teams⋆
Leora Schmerler1, Noam Hazon1, and Sarit Kraus2
1 Department of Computer Science, Ariel University, Israel
{leoras,noamh}@ariel.ac.il
2 Department of Computer Science, Bar-Ilan University, Israel
sarit@cs.biu.ac.il
Abstract. In the celebrated stable-matching problem, there are two sets
of agents M and W, and the members of M only have preferences over the
members of W and vice versa. It is usually assumed that each member of
M and W is a single entity. However, there are many cases in which each
member of M or W represents a team that consists of several individuals
with common interests. For example, students may need to be matched
to professors for their ﬁnal projects, but each project is carried out by a
team of students. Thus, the students ﬁrst form teams, and the matching
is between teams of students and professors.
When a team is considered as an agent from M or W, it needs to have a
preference order that represents it. A voting rule is a natural mechanism
for aggregating the preferences of the team members into a single prefer-
ence order. In this paper, we investigate the problem of strategic voting
in the context of stable-matching of teams. Speciﬁcally, we assume that
members of each team use the Borda rule for generating the preference
order of the team. Then, the Gale-Shapley algorithm is used for ﬁnding
a stable-matching, where the set M is the proposing side. We show that
the single-voter manipulation problem can be solved in polynomial time,
both when the team is from M and when it is from W. We show that the
coalitional manipulation problem is computationally hard, but it can be
solved approximately both when the team is from M and when it is from
W.
1
Introduction
Matching is the process in which agents from diﬀerent sets are matched with
each other. The theory of matching originated with the seminal work of Gale
and Shapley [9], and since then intensive research has been conducted in this
ﬁeld. Notably, the theory of matching has also been successfully applied to many
real-world applications including college admissions and school matching [1],
matching residents to hospitals [16], and kidney exchange [17]. A very common
⋆This research has been partly supported by the Israel Science Foundation under grant
1958/20, by the EU Project TAILOR under grant 952215, and by the Ministry of
Science, Technology & Space (MOST), Israel.

matching problem, which is also the problem that was studied by Gale and
Shapley in their original paper, is the stable-matching problem. In this problem
there are two equally sized disjoint sets of agents, M and W, and the members
of M have preferences over only the members of W, and vice versa. The goal
is to ﬁnd a stable bijection (i.e., matching) from the agents of M to the agents
of W, where the stability requirement is that no pair of agents prefers a match
with each other over their matched partners. Many works have analyzed this
setting, and they assume that each member of the sets M and W represents a
single agent. However, there are many cases in which each member of M or W
represents more than one individual [13].
For example, suppose that teams of students need to be matched with pro-
fessors who will serve as their advisors in their ﬁnal projects. It is common
that students form their teams based on friendship connections and common
interests and then approach the professors. Therefore, each team is considered
to be a single agent for the matching process: the professors may have diﬀer-
ent preferences regarding which team they would like to mentor, and the teams
may have preferences regarding which professor they would like as their men-
tor. Clearly, even though the team is considered to be a single agent for the
matching process, it is still composed of several students, and they may have
diﬀerent opinions regarding the appropriate mentor for their team. Thus, every
team needs a mechanism that aggregates the students’ opinions and outputs a
single preference order that represents the team for the matching process, and a
voting rule is a natural candidate.
Indeed, voters might beneﬁt from reporting rankings diﬀerent from their true
ones, and this problem of manipulation also exists in the context of matching.
For example, suppose that there are 4 possible professors, denoted by p1, p2, p3
and p4 and 4 teams. Now, suppose that one of the students, denoted r, who
is a member of one of the teams, prefers p1 over p2, p2 over p3, and p3 over
p4. It is possible that r will gain an (unauthorized) access to the preferences
of the professors and to the preferences of the other teams. Since the matching
algorithm is usually publicly known, r might be able to reason that p3 is matched
with his team, but if r votes strategically and misreports his preferences then p2
will be matched with his team.
In this paper, we investigate the problem of strategic voting in the context
of stable-matching of teams. We assume that the members of each team use
the Borda rule as a social welfare function (SWF), which outputs a complete
preference order. This preference order represents the team for the matching
process. The agents then use the Gale-Shapley (GS) algorithm for ﬁnding a
stable-matching. In the GS algorithm, one set of agents makes proposals to the
other set of agents, and it is assumed that M is the proposing side and W is the
proposed-to side. The proposing side and proposed-to side are commonly referred
to as men and women, respectively. Note that the GS algorithm treats the men
and women diﬀerently. Therefore, every manipulation problem in the context of
stable-matching has two variants: one in which the teams are from the men’s
side, and another one in which the teams are from the women’s side. Moreover,

we analyze both manipulation by a single voter and coalitional manipulation.
In a single voter manipulation, the goal is to ﬁnd a preference order for a single
manipulator such that his team will be matched by the GS algorithm with a
speciﬁc preferred agent. In the coalitional manipulation setting, there are several
voters who collude and coordinate their votes so that an agreed upon agent will
be matched with their team.
We begin by studying manipulation from the men’s side, and show that the
single voter manipulation problem can be solved in polynomial time. We then
analyze the coalitional manipulation problem, and show that the problem is
computationally hard. However, we provide a polynomial-time algorithm with
the following guarantee: given a manipulable instance with |R| manipulators,
the algorithm ﬁnds a successful manipulation with at most one additional ma-
nipulator. We then study manipulation from the women’s side. Manipulation
here is more involved, and we propose diﬀerent algorithms, but with the same
computational complexity as in manipulation from the men’s side.
The contribution of this work is twofold. First, it provides an analysis of a
voting manipulation in the context of stable-matching of teams, a problem that
has not been investigated to date. Second, our work concerns the manipulation
of Borda as an SWF, which has scarcely been investigated.
2
Related Work
The computational analysis of voting manipulation has been vastly studied in
diﬀerent settings. We refer the reader to the survey provided by Faliszewski and
Procaccia [8], and the more recent survey by Conitzer and Walsh [4]. However,
most of the works on voting manipulation analyze the problem with no actual
context, and where a voting rule is used to output one winning candidate or a
set of tied winning candidates (i.e., a social choice function). In this work, we in-
vestigate manipulation of Borda as a SWF, which outputs a complete preference
order of the candidates, and analyze it within the context of stable-matching.
Indeed, there are a few papers that investigate the manipulation of SWFs.
The ﬁrst work that directly deals with the manipulation of SWF was by Bossert
and Storcken [3], who assumed that a voter prefers one order over another if
the former is closer to her own preferences than the latter according to the
Kemeny distance. Bossert and Sprumont [2] assumed that a voter prefers one
order over another if the former is strictly between the latter and the voter’s
own preferences. Built on this deﬁnition, their work studies three classes of SWF
that are not prone to manipulation (i.e., strategy-proof). Dogan and Lainé [6]
characterized the conditions to be imposed on SWFs so that if we extend the
preferences of the voters to preferences over orders in speciﬁc ways, the SWFs
will not be prone to manipulation. Our work also investigates the manipulation
of SWF, but we analyze the SWF in the speciﬁc context of stable-matching.
Therefore, unlike all of the above works, the preferences of the manipulators are
well-deﬁned and no additional assumptions are needed. The work that is closest
to ours is that of Schmerler and Hazon [18]. They assume that a positional

scoring rule is used as a SWF, and study the manipulation of the SWF in the
context of negotiation.
The strategic aspects of the GS algorithm have previously been studied in
the literature. It was ﬁrst shown that reporting the true preferences is a weakly
dominant strategy for men, but women may have an incentive to misreport
their preferences [7, 15]. Teo et al. [21] provided a polynomial-time algorithm for
computing the optimal manipulation by a woman. Shen et al. [20] generalized
this result to manipulation by a coalition of women. For the proposing side,
Dubins and Freedman [7] investigated the strategic actions of a coalition of
men, and proved that there is no manipulation that is a strict improvement
for every member of the coalition. Huang [12] studied manipulation that is a
weak improvement for every member of a coalition of men. Hosseini et al. [10]
introduced a new type of strategic action: manipulation through an accomplice.
In this manipulation, a man misreports his preferences in behalf of a woman, and
Hosseini et al. provided a polynomial time algorithm for computing an optimal
accomplice manipulation, and they further generalized this model in [11]. All of
these works consider the manipulation of the GS algorithm, while we study the
manipulation of Borda as a SWF. Indeed, the output of the SWF is used (as
part of the input) for the GS algorithm. As an alternative to the GS algorithm,
Pini et al. [14] show how voting rules which are NP-hard to manipulate can
be used to build stable-matching procedures, which are themselves NP-hard to
manipulate.
3
Preliminaries
We assume that there are two equally sized disjoint sets of agents, M and W.
Let k = |M| = |W|. The members of M have preferences over only the members
of W, and vice versa. The preference of each m ∈M, denoted by ≻m, is a
strict total order over the agents in W. The preference proﬁle ≻M is a vector
(≻m1, ≻m2, . . . , ≻mk). The preference order ≻w and the preference proﬁle ≻W
are deﬁned analogously. We will refer to the agents of M as men and to the
agents of W as women.
A matching is a mapping µ : M ∪W →M ∪W, such that µ(m) ∈W for
all m ∈M, µ(w) ∈M for all w ∈W, and µ(m) = w if and only if µ(w) = m.
A stable-matching is a matching in which there is no blocking pair. That is,
there is no man m and woman w such that w ≻m µ(m) and m ≻w µ(w).
The GS algorithm ﬁnds a stable-matching, and it works as follows. There are
multiple rounds, and each round is composed of a proposal phase followed by
a rejection phase. In a proposal phase, each unmatched man proposes to his
favorite woman from among those who have not yet rejected him (regardless of
whether the woman is already matched). In the rejection phase, each woman
tentatively accepts her favorite proposal and rejects all of the other proposals.
The algorithm terminates when no further proposals can be made. Let o(w) be
the set of men that proposed to w in one of the rounds of the GS algorithm.

In our setting, (at least) one of the agents of M (W) is a team that runs an
election for determining its preferences. That is, there is a man ˆm (woman ˆw),
which is associated with a set of voters, V . The preference of each v ∈V , denoted
by ℓv, is a strict total order over W (M). The preference proﬁle L is a vector
(ℓv1, ℓv2, . . . , ℓv|V |). The voters use the Borda rule as a SWF, denoted by F, which
is a mapping of the set of all preference proﬁles to a single strict preference order.
Speciﬁcally, in the Borda rule, each voter v awards the candidate that is placed
in the top-most position in ℓv a score of k−1, the candidate in the second-highest
position in ℓv a score of k −2, etc. Then, for the output of F, the candidate with
the highest aggregated score is placed in the top-most position, the candidate
with the second-highest score is placed in the second-highest position, etc. Since
ties are possible, we assume that a lexicographical tie-breaking rule is used. Note
that the output of F is the preference order of ˆm ( ˆw). That is, ≻ˆm= F(L), and
≻ˆ
w is deﬁned analogously.
Recall that the GS algorithm ﬁnds a stable matching, given ≻M and ≻W .
Given a man m ∈M, let ≻M−m be the preference proﬁle of all of the men besides
m, and ≻W −w is deﬁned analogously. We consider a setting in which the input
for the GS algorithm is ≻M−ˆm, ≻ˆm, and ≻W , and thus µ( ˆm) is the spouse that
is the match of ˆm according to the output of the GS algorithm. We also consider
a setting in which the input for the GS algorithm is ≻W −ˆ
w, ≻ˆ
w and ≻M, and
thus µ( ˆw) is the spouse that is the match of ˆw according to the output of the
GS algorithm. In some circumstances, we would like to examine the output of
the GS algorithm for diﬀerent possible preference orders that represent a man
m ∈M. We denote by µx(m, ≻) the spouse that is the match of m when the
input for the GS algorithm is ≻M−m, ≻(instead of ≻m), and ≻W . We deﬁne
µx(w, ≻) and ox(w, ≻) similarly.
We study the setting in which there exists a manipulator r among the voters
associated with a man ˆm (woman ˆw), and her preference order is ℓr. The prefer-
ence order that represents ˆm ( ˆw) is thus F(L ∪{ℓr}). We also study the setting
in which there is a set R = {r1, ..., rn} of manipulators, their preference proﬁle
is LR = {ℓr1, ℓr2, . . . , ℓrn}, and preference order that represents ˆm ( ˆw) is thus
F(L ∪LR). For clarity purposes we slightly abuse notation, and write µ( ˆm, ℓr)
for denoting the spouse that is the match of ˆm according to the output of the
GS algorithm, given that its input is ≻M−ˆm, F(L ∪{ℓr}), and ≻W . We deﬁne
µ( ˆw, ℓr), o( ˆw, ℓr), µ( ˆm, LR), µ( ˆw, LR) and o( ˆw, LR) similarly.
Let s(c, ℓv) be the score of candidate c from ℓv. Similarly, let s(c, L) be
the total score of candidate c from L, i.e., s(c, L) = P
v∈V s(c, ℓv). Simi-
larly, s(c, L, ℓr) = P
v∈V s(c, ℓv) + s(c, ℓr), and s(c, L, LR) = P
v∈V s(c, ℓv) +
P
r∈R s(c, ℓr). Since we use a lexicographical tie-breaking rule, we write that
(c, ℓ) > (c′, ℓ′) if s(c, ℓ) > s(c′, ℓ′) or s(c, ℓ) = s(c′, ℓ′) but c is preferred over c′
according to the lexicographical tie-breaking rule. We deﬁne (c, L, ℓ) > (c′, L, ℓ′)
and (c, L, LR) > (c′, L, L′
R) similarly.
Due to space constraint, many proofs are deferred to the full version of the
paper [19].

4
Men’s Side
We begin by considering the variant in which a speciﬁc voter, or a coalition of
voters, are associated with an agent ˆm, and they would like to manipulate the
election so that a preferred spouse w∗will be the match of ˆm.
4.1
Single Manipulator
With a single manipulator, the Manipulation in the context of Matching from
the Men’s side (MnM-m) is deﬁned as follows:
Deﬁnition 1 (MnM-m). We are given a man ˆm, the preference proﬁle L of the
honest voters that associate with ˆm, the preference proﬁle ≻M−ˆm, the preference
proﬁle ≻W , a speciﬁc manipulator r, and a preferred woman w∗∈W. We are
asked whether a preference order ℓr exists such that µ( ˆm, ℓr) = w∗.
We show that MnM-m can be decided in polynomial time by Algorithm 1,
which works as follows. The algorithm begins by verifying that a preference
order exists for ˆm, which makes w∗the match of ˆm. It thus iteratively builds a
temporary preference order for ˆm, ≻x in lines 4-7. Moreover, during the iterations
in lines 4-7 the algorithm identiﬁes a set B, which is the set of women that might
prevent w∗from being ˆm’s match. Speciﬁcally, ≻x, is initialized as the original
preference order of ˆm, ≻ˆm. In each iteration, the algorithm ﬁnds the woman
b, which is the match of ˆm given that ≻x is the preference order of ˆm. If b is
placed higher than w∗in ≻x, then b is added to the set B, it is placed in ≻x
immediately below w∗, and the algorithm proceeds to the next iteration (using
the updated ≻x).
Now, if b = µx( ˆm, ≻x) is positioned lower than w∗in ≻x, then no preference
order exists that makes w∗the match of ˆm, and the algorithm returns false.
If b = w∗, then the algorithm proceeds to build the preference order for the
manipulator, ℓr. Clearly, w∗is placed in the top-most position in ℓr. Then,
the algorithm places all the women that are not in B in the highest available
positions. Finally, the algorithm places all the women from B in the lowest
positions in ℓr, and they are placed in a reverse order with regard to their order
in F(L).
For proving the correctness of Algorithm 1 we use the following known results:
Theorem 1 (due to [15]). In the Gale-Shapley matching procedure which al-
ways yields the optimal stable outcome for the set of the men agents, M, truthful
revelation is a dominant strategy for all the agents in that set.
Lemma 1 (due to [12]). For man m, his preference list is composed of
(PL(m), µ(m), PR(m)), where PL(m) and PR(m) are respectively those women
ranking higher and lower than µ(m). Let A ⊆W and let πr(A) be a random
permutation from all |A|! sets. For a subset of men S ⊆M, if every member
m ∈S submits a falsiﬁed list of the form (πr(PL(m)), µ(m), πr(PR(m))), then
µ(m) stays m’s match.

ALGORITHM 1: Manipulation by a single voter from the men’s side
1 B ←∅
2 set ≻x to be ≻ˆ
m
3 b ←µx( ˆm, ≻x)
4 while b ≻x w∗do
5
add b to B
6
move b in ≻x immediately below w∗
7
b ←µx( ˆm, ≻x)
8 if b ̸= w∗then
9
return false
10 ℓr ←empty preference order
11 place w∗in the highest position in ℓr
12 for each w ∈W \ (B ∪{w∗}) do
13
place w in the next highest available position in ℓr
14 while B ̸= ∅do
15
b ←the least preferred woman from B according to F(L)
16
place b in the highest available position in ℓr
17
remove b from B
18 if µ( ˆm, ℓr) = w∗then
19
return ℓr
20 return false
We begin by showing that the set B, which is identiﬁed by the algorithm in
lines 4-7, is a set of woman that might prevent w∗from being ˆm’s match. The
intuition is as follows. If b = µx( ˆm, ≻x) in a given iteration does not equal w∗,
then changing the order of the women ranking higher (or lower) than w∗in ≻t
will not make w∗the match of ˆm due to Lemma 1. Moreover, moving a woman
that is above b to a position below w∗(or moving a woman that is below w∗to
a position above b) will not make w∗the match of ˆm, due to Theorem 1.
Lemma 2. Given a preference order ≻t for ˆm, if there exists b ∈B such that
b ≻t w∗then µx( ˆm, ≻t) ̸= w∗.
Using Lemma 2, we show that it is possible to verify (in polynomial time)
whether a preference order exists for ˆm, which makes w∗the match of ˆm. We
do so by showing that it is suﬃcient to check whether w∗= µx( ˆm, ≻x), where
≻x is the preference order that is built by Algorithm 1 in lines 4-7.
Lemma 3. A preference order ≻t for ˆm exists such that w∗= µx( ˆm, ≻t) if and
only if w∗= µx( ˆm, ≻x).
That is, if Algorithm 1 returns false in line 9 then there is no preference order
for ˆm that makes w∗the match of ˆm (and thus no manipulation is possible for
r).
Theorem 2. Algorithm 1 correctly decides the MnM-m problem in polynomial
time.

Proof. Clearly, the algorithm runs in polynomial time since there are three loops,
where the three loops together iterate at most 2k times, and the running time
of the GS matching algorithm is in O(k2). In addition, if the algorithm returns
a preference order, which is a manipulative vote for the manipulator r, then w∗
will be the match of ˆm by the GS algorithm. We need to show that if there exists
a preference order for the manipulator r that makes w∗the match of ˆm, then our
algorithm will ﬁnd such a preference order for r. Assume that a manipulative
vote, ℓt, exists, which makes w∗the match of ˆm. That is, µ( ˆm, ℓt) = w∗. Then,
by Lemma 3, the algorithm ﬁnds a preference order for ˆm that makes w∗his
match (i.e., the preference order ≻x), and thus it does not return false in line 9.
We show that Algorithm 1 returns ℓr in line 19.
We now proceed to build the preference order ℓr. By Theorem 1, since each
man should be truthful, then r should position w∗as high as possible, and thus
w∗is positioned in the highest position in ℓr. Therefore, s(w∗, ℓr) ≥s(w∗, ℓt),
and consequently, w∗is positioned higher in F(L ∪{ℓr}) than in F(L ∪{ℓt}) or
in the same position. That is, after line 11, µ( ˆm, ℓr) = w∗.
Note that ≻x is diﬀerent from ≻ˆm= F(L), but ≻x does not change the
position of all w ∈W \ B. Now, let w ∈W \ B be such that w∗≻x w. w is
not preferred over w∗in F(L ∪{ℓr}), since w∗≻ˆm w and s(w∗, ℓr) > s(w, ℓr).
According to the GS algorithm, the women that are positioned below µ(m) for
some man m do not aﬀect m’s match. Thus, placing w in ℓr does not change ˆm’s
match, which is w∗. Let w ∈W \ B be such that w ≻x w∗, but w∗is preferred
over w in F(L ∪{ℓr}). Due to Theorem 1, placing w in ℓr does not change ˆm’s
match, which is w∗. Finally, let w ∈W \ B be such that w ≻x w∗, and w is also
preferred over w∗in F(L ∪{ℓr}). Due to Lemma 1, placing w in ℓr does not
change ˆm’s match, which is w∗.
According to Lemma 2, if b ∈B is positioned higher than w∗in F(L ∪
{ℓr}), w∗will not be ˆm’s match. We thus show that Algorithm 1 (lines 14-
17) can assign scores to all the women w ∈B such that ℓr is a successful
manipulation. According to Lemma 1 the order of the set B in ˆm’s preference
order does not prevent w∗being the match (as long as each woman of the set B is
placed below w∗in ˆm’s preference order). For any w ∈B, if s(w, ℓr) ≤s(w, ℓt)
then s(w, L, ℓr) ≤s(w, L, ℓt). Since (w∗, L, ℓt) > (w, L, ℓt) then (w∗, L, ℓr) >
(w, L, ℓr). Otherwise, let w ∈B be a woman such that s(w, ℓr) > s(w, ℓt) and
let s = s(w, ℓr). There are s women from B below w in ℓr. According to the
pigeonhole principle, at least one of the women from B, denoted w′, gets a score of
at least s from ℓt. That is, s(w′, ℓt) ≥s(w, ℓr). By the algorithm construction, all
of the women w′′ ∈B that are positioned lower than w in ℓr are positioned higher
than w in F(L). That is, (w′, L) > (w, L). However, (w′, L, ℓt) < (w∗, L, ℓt) and
thus (w, L, ℓr) < (w∗, L, ℓr). Overall, after placing the women from B in ℓr,
∀w ∈B, (w, L, ℓr) < (w∗, L, ℓr). That is, µ( ˆm, ℓr) = w∗.
⊓⊔
4.2
Coalitional Manipulation
We now study manipulation by a coalition of voters. The coalitional manipula-
tion in the context of matching from the men’s side is deﬁned as follows:

Deﬁnition 2 (coalitional MnM-m). We are given a man ˆm, the prefer-
ence proﬁle L of the honest voters that associate with ˆm, the preference proﬁle
≻M−ˆm, the preference proﬁle ≻W , a coalition of manipulators R, and a preferred
woman w∗∈W. We are asked whether a preference proﬁle LR exists such that
µ( ˆm, LR) = w∗.
We show that the coalitional MnM-m problem is computationally hard. The
reduction is from the Permutation Sum problem (as deﬁned by Davies et al. [5])
that is NP-complete [23].
Deﬁnition 3 (Permutation Sum). Given q integers X1 ≤. . . ≤Xq where
Pq
i=1 Xi = q(q + 1), do two permutations σ and π of 1 to q exist such that
σ(i) + π(i) = Xi for all 1 ≤i ≤q?
Theorem 3. Coalitional MnM-m is NP-Complete.
Even though coalitional MnM-m is NP-complete, it might still be possible to
develop an eﬃcient heuristic algorithm that ﬁnds a successful coalitional ma-
nipulation. We use Algorithm 2, which is a generalization of Algorithm 1, that
works as follows. Similar to Algorithm 1, Algorithm 2 identiﬁes a set B, which
ALGORITHM 2: Manipulation by a coalition of voters from the men’s side
1 B ←∅
2 set ≻x to be ≻ˆ
m
3 b ←µx( ˆm, ≻x)
4 while b ≻x w∗do
5
add b to B
6
place b in ≻x immediately below w∗
7
b ←µx( ˆm, ≻x)
8 if b ̸= w∗then
9
return false
10 for each r ∈R do
11
ℓr ←empty preference order
12
place w∗in the highest position in ℓr
13
for each w ∈W \ (B ∪{w∗}) do
14
place w in the next highest available position in ℓr
15
B′ ←B
16
while B′ ̸= ∅do
17
b ←the least preferred woman from B′ according to F(L ∪LR)
18
place b in the highest available position in ℓr
19
remove b from B′
20
add ℓr to LR
21 if µ( ˆm) = w∗then
22
return LR
23 return false
is the set of women that might prevent w∗from being ˆm’s match. In addition,

it veriﬁes that a preference order for ˆm exists, which makes w∗the match of ˆm.
Then, Algorithm 2 proceeds to build the preference order of every manipulator
r ∈R similarly to how Algorithm 1 builds the preference order for the single
manipulator. Indeed, Algorithm 2 builds the preference order of each manip-
ulator r in turn, and the order in which the woman in B are placed depends
on their order according to F(L ∪LR). That is, the order in which the woman
in B are placed in each ℓr is not the same for each r, since LR is updated in
each iteration. We refer to each of the iterations in Lines 10-20 as a stage of
the algorithm. We now show that Algorithm 2 is an eﬃcient heuristic that also
has a theoretical guarantee. Speciﬁcally, the algorithm is guaranteed to ﬁnd a
coalitional manipulation in many instances, and we characterize the instances in
which it may fail. Formally,
Theorem 4. Given an instance of coalitional MnM-m,
1. If there is no preference proﬁle making w∗the match of ˆm, then Algorithm 2
will return false.
2. If a preference proﬁle making w∗the match of ˆm exists, then for the same in-
stance with one additional manipulator, Algorithm 2 will return a preference
proﬁle that makes w∗the match of ˆm.
That is, Algorithm 2 will succeed in any given instance such that the same
instance but with one less manipulator is manipulable. Thus, it can be viewed
as a 1-additive approximation algorithm (this approximate sense was introduced
by Zuckerman et al. [24] when analyzing Borda as a social choice function (SCF)).
5
Women’s Side
We now consider the second variant, in which a speciﬁc voter, or a coalition
of voters, are associated with an agent ˆw, and they would like to manipulate
the election so that a preferred spouse m∗will be the match of ˆw. This variant
is more involved, since manipulation of the GS algorithm is also possible by
a single woman or a coalition of women. Indeed, there are notable diﬀerences
between manipulation from the women’s side and manipulation from the men’s
side. First, the manipulators from the women’s side need to ensure that two
men are positioned “relatively” high. In addition, the set B, which is the set
of agents that are placed in low positions, is deﬁned diﬀerently, and it is not
built iteratively. Finally, in manipulation from the women’s side, it is not always
possible to place all the agents from B in the lowest positions.
5.1
Single Manipulator
With a single manipulator, the Manipulation in the context of Matching from
the Women’s side (MnM-w) is deﬁned as follows:
Deﬁnition 4 (MnM-w). We are given a woman ˆw, the preference proﬁle L of
the honest voters that associate with ˆw, the preference proﬁle ≻M, the preference

proﬁle ≻W −ˆ
w, a speciﬁc manipulator r, and a preferred man m∗∈M. We are
asked whether a preference order ℓr exists such that µ( ˆw, ℓr) = m∗.
ALGORITHM 3: Manipulation by a single voter from the women’s side
1 for each mnd ∈M \ {m∗} do
// stage 1:
2
ℓr ←empty preference order
3
place mnd in the highest position in ℓr
4
place m∗in the second-highest position in ℓr
5
if (mnd, L, ℓr) > (m∗, L, ℓr) then
6
place m∗in the highest position in ℓr
7
place mnd in ℓr in the highest position such that
(m∗, L, ℓr) > (mnd, L, ℓr), if such position exists
8
if no such position exists then
9
continue to the next iteration
10
if µ( ˆw, ℓr) ̸= m∗or mnd /∈o( ˆw, ℓr) then
11
continue to the next iteration
// stage 2:
12
for each m /∈o( ˆw, ℓr) do
13
place m in the highest available position in ℓr
// stage 3:
14
B ←o( ˆw, ℓr) \ {m∗, mnd}
15
while B ̸= ∅do
16
b ←the least preferred man from B according to F(L)
17
place b in the highest available position in ℓr
18
remove b from B
19
if µ( ˆw, ℓr) = m∗then
20
return ℓr
21 return false
Clearly, if µ( ˆw) = m∗then ﬁnding a preference order ℓr such that µ( ˆw, ℓr) = m∗
is trivial. We thus henceforth assume that µ( ˆw) ̸= m∗. The MnM-w problem
can be decided in polynomial-time, using Algorithm 3. The algorithm tries to
identify a man mnd ∈M, and to place him and m∗in ℓr such that mnd is
ranked in F(L ∪{ℓr}) as high as possible while m∗is still preferred over mnd
according to F(L∪{ℓr}). In addition, the algorithm ensures (at the end of stage
1) that µ( ˆw, ℓr) = m∗and mnd ∈o( ˆw, ℓr). Note that we compute F(L ∪{ℓr})
even though ℓr is not a complete preference order, since we assume that all the
men that are not in ℓr get a score of 0 from ℓr. If stage 1 is successful (i.e.,
µ( ˆw, ℓr) = m∗and mnd ∈o( ˆw, ℓr)), the algorithm proceeds to stage 2, where it
ﬁlls the preference order ℓr by placing all the men that are not in o( ˆw, ℓr) in the
highest available positions. Finally, in stage 3, the algorithm places all the men
from o( ˆw, ℓr) (except for m∗and mnd that are already placed in ℓr) in the lowest
positions in ℓr, and they are placed in a reverse order with regard to their order

in F(L). If µ( ˆw, ℓr) = m∗then we are done; otherwise, the algorithm iterates
and considers another man.
For proving the correctness of Algorithm 3 we need the following result.
Lemma 4 (Swapping lemma, due to [22]). Given a woman w ∈W, let ≻′
w
be a preference order that is derived from ≻w by swapping the positions of an
adjacent pair of men (mi, mj) and making no other changes. Then,
1. if mi /∈o(w) or mj /∈o(w), then µx(w, ≻′
w) = µ(w).
2. if both mi and mj are not one of the two most preferred proposals among
o(w) according to ≻w, then µx(w, ≻′
w) = µ(w).
3. if mi is the second preferred proposal among o(w) according to ≻w and mj
is the third preferred proposal among o(w) according to ≻w, then µx(w, ≻′
w)
∈{µ(w), mj}.
4. if mi = µ(w) and mj is the second preferred proposal among o(w) according
to ≻w, then the second preferred proposal among o(w) according to ≻′
w is mi
or mj.
If we use the swapping lemma sequentially, we get the following corollary.
Corollary 1. Given a woman w ∈W, let ≻′
w be a preference order for w such
that ≻w̸=≻′
w. Let m∗∈M be the most preferred man among o(w) according to
≻w. That is, µ(w) = m∗. Let mnd ∈M be the second most preferred man among
o(w) according to ≻w. If mnd is the most preferred man among o(w) \ {m∗}
according to ≻′
w, and m∗≻′
w mnd, then o(w) = ox(w, ≻′
w) and thus µx(w, ≻′
w)
= µ(w) = m∗.
Proof. We construct the preference order ≻′
w by starting from ≻w and perform-
ing a sequence of swaps of two adjacent men till the resulting preference order is
≻′
w. We show that each swap does not change the set of proposals, by repeatedly
invoking Lemma 4.
We begin by positioning the most preferred man according to ≻′
w, using
swaps of two adjacent men. That is, if mst is the most preferred man according
to ≻′
w, we swap pairs (m, mst), m ∈M, until mst is placed in the ﬁrst position
in ≻′
w. We call these swaps the swaps of mst. We then position the second
preferred man using his swaps, and so on. Clearly, this process terminates since
the number of men is ﬁnite. Let ≻(t)
w be ≻w after t swaps. That is, ≻(0)
w is ≻w, ≻(1)
w
is ≻w after one swap, and ≻(t+1)
w
is ≻(t)
w after one swap. We show that for every
t ≥0, ox(w, ≻(t)
w ) = ox(w, ≻(t+1)
w
) and thus o(w) = ox(w, ≻(0)
w ) = ox(w, ≻′
w).
Let (mi, mj) be the pair of adjacent men that swap their positions when moving
from ≻(t)
w
to ≻(t+1)
w
. That is, mi ≻(t)
w
mj and mj ≻(t+1)
w
mi. Recall that for
every m1, m2 ∈M, if m1 ≻′
w m2, then all the swaps of m1 are executed before
all the swaps of m2. In addition, since mnd is the most preferred man among
o(w) \ {m∗} according to ≻′
w and m∗≻′
w mnd, then the following cases are not
possible:
1. mi = m∗and mj ∈ox(w, ≻(t)
w ).

2. mi ∈ox(w, ≻(t)
w ) and mj = m∗.
3. mi = mnd and mj ∈ox(w, ≻(t)
w ).
4. mi ∈ox(w, ≻(t)
w ) and mj = mnd.
5. mi = m∗and mj = mnd.
We thus need to consider only the following two cases:
1. mi /∈ox(w, ≻(t)
w ) or mj /∈ox(w, ≻(t)
w ). According to the GS algorithm, a swap
of such mi and mj cannot change the response of w (either an acceptance
or rejection). Therefore, ox(w, ≻(t)
w ) = ox(w, ≻(t+1)
w
).
2. mi, mj ∈ox(w, ≻(t)
w ) \ {m∗, mnd}. We use case 2 of Lemma 4 for this case.
Assume to contradiction that ox(w, ≻(t)
w ) ̸= ox(w, ≻(t+1)
w
). There are two
possible cases:
(a) There exists a man o ∈ox(w, ≻(t)
w ) such that o /∈ox(w, ≻(t+1)
w
). By
case 2 of Lemma 4, m∗= µx(w, ≻(t)
w ) = µx(w, ≻(t+1)
w
). Let ≻o be ≻(t+1)
w
such that o is positioned above m∗. We can construct ≻o from ≻(t+1)
w
by swaps of o. Since o /∈ox(w, ≻(t+1)
w
), then by case 1 of Lemma 4,
µx(w, ≻(t+1)
w
) = µx(w, ≻o). We now swap mj and mi in ≻o, and thus
mi ≻o mj as in ≻(t)
w . Let Preo ⊂ox(w, ≻(t)
w ) be the set of proposals
that w receives before she receives the proposal o. Note that all the
men o ∈Preo are in the same order in ≻(t)
w and in ≻o. Therefore, the
response of woman w is the same for all the proposals o ∈Preo and thus
o ∈ox(w, ≻o). Therefore, m∗̸= µx(w, ≻o), which is a contradiction.
(b) There exists a man o /∈ox(w, ≻(t)
w ) such that o ∈ox(w, ≻(t+1)
w
). Using a
similar argument to case (a) above (i.e., we now construct ≻o from ≻(t)
w )
we get that in this case also ox(w, ≻(t)
w ) = ox(w, ≻(t+1)
w
)
⊓⊔
Corollary 1 is the basis of our algorithm. Intuitively, the manipulator needs to
ensure that m∗is among the set of proposals o( ˆw, ℓr), and that m∗is the most
preferred men, according to F(L∪{ℓr}), among this set. That is, m∗= µ( ˆw, ℓr).
Thus, the algorithm searches for a man, denoted by mnd, that serves as the
second-best proposal. If such a man exists, then, according to Corollary 1, the
position of every man m ∈o( ˆw, ℓr) does not change ˆw’s match (which is currently
m∗) if mnd is preferred over m in F(L ∪{ℓr}). In addition, the position of every
man m /∈o( ˆw, ℓr) does not change ˆw’s match at all.
Theorem 5. Algorithm 3 correctly decides the MnM-w problem in polynomial
time.
Proof. Clearly, the algorithm runs in polynomial time since there are three loops,
where the three loops together iterate at most k2 times, and the running time
of the GS matching algorithm is in O(k2). In addition, if the algorithm returns
a preference order, which is a manipulative vote for the manipulator r, then m∗
will be the match of ˆw by the GS algorithm. We need to show that if there exists

a preference order for the manipulator r that makes m∗the match of ˆw, then our
algorithm will ﬁnd such a preference order for r. Assume that a manipulative
vote, ℓt, exists, which makes m∗the match of ˆw. That is, µ( ˆw, ℓt) = m∗. We
show that Algorithm 3 returns ℓr in line 20. Let ℓr(1) be the preference order
ℓr after stage 1 of the algorithm. ℓr(2) and ℓr(3) are deﬁned similarly. Note that
ℓr(3) is the preference order ℓr that is returned by the algorithm in line 20.
Algorithm 3 iterates over all mnd ∈M \ {m∗}, and thus there exists an
iteration in which mnd is the second preferred proposal among o( ˆw, ℓt) according
to F(L∪{ℓt}). Let ℓt(1) be the preference order ℓt where m∗and mnd are placed
in the same positions as in ℓr(1). Note that m∗and mnd are placed in ℓr(1)
such that m∗is preferred over mnd according to F(L ∪{ℓr(1)}), and thus m∗is
preferred over mnd according to F(L ∪{ℓt(1)}). In addition, mnd is positioned
in F(L ∪{ℓt(1)}) not lower than in F(L ∪{ℓt}). Therefore, mnd is the most
preferred man among o( ˆw, ℓt)\{m∗} according to F(L∪{ℓt(1)}). By Corollary 1,
o( ˆw, ℓt) = o( ˆw, ℓt(1)) and µ( ˆw, ℓt(1)) = m∗. Thus, mnd is the second preferred
proposal among o( ˆw, ℓt(1)) according to F(L ∪{ℓt(1)}).
Let ℓt(2) be the preference order ℓt(1) where the men m ̸∈o( ˆw, ℓt(1)) are
placed in the highest positions in ℓt(2) without changing the positions of m∗and
mnd (similar to the positioning of the men m ̸∈o( ˆw, ℓr(2)) after stage 2 of the
algorithm). That is, m∗is preferred over mnd according to F(L∪{ℓt(2)}) and mnd
is the most preferred man among o( ˆw, ℓt(1)) \ {m∗} according to F(L ∪{ℓt(2)}).
We can thus use (again) Corollary 1 to get that o( ˆw, ℓt(1)) = o( ˆw, ℓt(2)) and
µ( ˆw, ℓt(2)) = m∗.
Recall that at the end of stage 1 of Algorithm 3, m∗and mnd are placed in
ℓr(1) such that m∗is preferred over mnd according to F(L∪{ℓr(1)}). In addition,
mnd is positioned in F(L∪{ℓr(1)}) not lower than in F(L∪{ℓt(2)}), since they are
placed in the same position in ℓr(1) and ℓt(2) and the other men in ℓr(1) get a score
of 0 from ℓr(1). Speciﬁcally, the men m ∈o( ˆw, ℓt(2)) also get a score of 0 from
ℓr(1) and thus mnd is the most preferred man among o( ˆw, ℓt(2))\{m∗} according
to F(L ∪{ℓr(1)}). By Corollary 1, o( ˆw, ℓt(2)) = o( ˆw, ℓr(1)) and µ( ˆw, ℓr(1)) = m∗.
Since in stage 2 of Algorithm 3 we place only men m /∈o( ˆw, ℓr(1)), then, we
can (again) use Corollary 1 to show that o( ˆw, ℓt(2)) = o( ˆw, ℓr(2)), µ( ˆw, ℓr(2)) =
m∗, and mnd is the second preferred proposal among o( ˆw, ℓr(2)) according to
F(L ∪{ℓr(2)}).
We now show that Algorithm 3 (lines 14-18) can assign scores to all the men
m ∈B such that ℓr is a successful manipulation. For any m ∈B, if s(m, ℓr(3)) ≤
s(m, ℓt(2)) then s(m, L, ℓr(3)) ≤s(m, L, ℓt(2)). Since (mnd, L, ℓt(2)) > (m, L, ℓt(2))
and s(mnd, L, ℓt(2)) = s(mnd, L, ℓr(3)) then (mnd, L, ℓr(3)) > (m, L, ℓr(3)). Oth-
erwise, let m ∈B be a man such that s(m, ℓr(3)) > s(m, ℓt(2)) and let
s = s(m, ℓr(3)). By the algorithm construction, there are s men from B be-
low m in ℓr(3). According to the pigeonhole principle, at least one of the
men from B, denoted m′, gets a score of at least s from ℓt(2). That is,
s(m′, ℓt(2)) ≥s(m, ℓr(3)). By the algorithm construction, all the men m′′ ∈B
that are positioned lower than m in ℓr(3) are positioned higher than m in
F(L). That is, (m′, L) > (m, L). However, (m′, L, ℓt(2)) < (mnd, L, ℓt(2)) and

thus (m, L, ℓr(3)) < (mnd, L, ℓr(3)). Overall, after placing the men from B in
ℓr(3), ∀m ∈B, (m, L, ℓr(3)) < (mnd, L, ℓr(3)). That is, mnd is the most pre-
ferred man among o( ˆw, ℓr(2)) \ {m∗} according to F(L ∪{ℓr(2)}). In addition
(mnd, L, ℓr(3)) < (m∗, L, ℓr(3)) and thus by Corollary 1, µ( ˆw, ℓr(3)) = m∗.
⊓⊔
5.2
Coalitional Manipulation
Finally, We study manipulation by a coalition of voters from the women’s side.
Deﬁnition 5 (coalitional MnM-w). We are given a woman ˆw, the preference
proﬁle L of the honest voters that associate with ˆw, the preference proﬁle ≻M,
the preference proﬁle ≻W −ˆ
w, a coalition of manipulators R, and a preferred
man m∗∈M. We are asked whether a preference proﬁle LR exists such that
µ( ˆw, LR) = m∗.
Similar to the single manipulator setting, if µ( ˆw) = m∗then ﬁnding a pref-
erence proﬁle LR such that µ( ˆw, ℓR) = m∗is trivial. We thus henceforth assume
that µ( ˆw) ̸= m∗. The coalitional MnM-w problem is computationally hard, and
we again reduce from the Permutation Sum problem (Deﬁnition 3).
Theorem 6. Coalitional MnM-w is NP-Complete.
Similar to the coalitional MnM-m, the coalitional MnM-w also has an eﬃcient
heuristic algorithm that ﬁnds a successful manipulation. We use Algorithm 4,
which works as follows. Similar to Algorithm 3, Algorithm 4 needs to identify a
man mnd ∈M, such that mnd is ranked in F(L ∪LR) as high as possible while
m∗is still preferred over mnd according to F(L∪LR). In addition, the algorithm
needs to ensure that µ( ˆw, LR) = m∗and mnd ∈o( ˆw, LR), which is done at the
end of stage 1. Indeed, ﬁnding such a man mnd ∈M, and placing him and m∗in
every ℓr ∈LR is not trivial. The algorithm considers every m ∈M \ {m∗}, and
computes the diﬀerence between the score of m from L and the score of m∗from
L. Clearly, if this gap is too big, m cannot be mnd (line 6). Otherwise, there
are two possible cases. If there are many manipulators, speciﬁcally, |R| ≥gap,
then the algorithm places m∗and m in the two highest positions in every ℓr
(lines 8-10). On the other hand, if |R| < gap, then the algorithm places m∗in
the highest position in every ℓr. The algorithm places m in the second highest
position or in the lowest position in every ℓr, except for ℓ|R|; in this preference
order the algorithm places m in the highest position such that m∗is preferred
over m according to F(L ∪LR). If stage 1 is successful, the algorithm proceeds
to ﬁll the preference orders of LR iteratively in stage 2. In every ℓr ∈LR, the
algorithm places all the men that are not in o( ˆw, LR) in the highest available
positions. The algorithm places all the men from o( ˆw, LR) (except for m∗and
mnd that are already placed in LR) in the lowest positions in LR, and they are
placed in a reverse order in each manipulator with regard to their current order
in F(L ∪LR). Note that since LR is updated in every iteration, the men from
o( ˆw, LR) \ {m∗, mnd} may be placed in diﬀerent order in each ℓr.

ALGORITHM 4: Manipulation by a coalition of voters from the women’s side
1 for each mnd ∈M \ {m∗} do
// stage 1:
2
gap ←s(mnd, L) −s(m∗, L)
3
if mnd is preferred over m∗according to the lexicographical tie breaking rule
then
4
gap = gap + 1
5
if |R| · (k −1) < gap then
6
continue to the next iteration
7
LR ←{ℓr1, ..., ℓr|R|} where each preference order is an empty one
8
if |R| ≥gap then
9
place m∗in in the highest position and mnd in the second highest
position, in max(gap + ⌈(|R| −gap)/2⌉, 0) preference orders of LR
10
place m∗in the second highest position and mnd in the highest position in
all of the other preference orders of LR
11
else
12
place m∗in the highest position in each ℓr ∈LR
13
place mnd in the lowest position in ⌊(gap −|R|)/(k −2)⌋preference orders
of LR \ {ℓr|R|}
14
place mnd in the second-highest position in all of the other preference
orders of LR \ {ℓr|R|}
15
in ℓr|R|, place mnd in the highest position such that
(m∗, L ∪LR) > (mnd, L ∪LR)
16
if µ( ˆw, LR) ̸= m∗or m /∈o( ˆw, LR) then
17
continue to the next iteration
// stage 2:
18
B ←o( ˆw, LR) \ {m∗, mnd}
19
for each r ∈R do
20
for each m /∈B do
21
place m in the next highest available position in ℓr
22
M B ←B
23
while M B ̸= ∅do
24
b ←the least preferred man from M B according to F(L ∪LR)
25
place b at the highest available position in ℓr
26
remove b from M B
27
if µ( ˆw, LR) = m∗then
28
return LR
29 return false

We now show that Algorithm 4 will succeed in any given instance such that
the same instance but with one less manipulator is manipulable. That is, the
coalitional MnM-w admits also a 1-additive approximation algorithm. Formally,
Theorem 7. Given an instance of coalitional MnM-w,
1. If there is no preference proﬁle making m∗the match of ˆw exists, then Al-
gorithm 4 will return false.
2. If a preference proﬁle making m∗the match of ˆw, then for the same instance
with one additional manipulator, Algorithm 4 will return a preference proﬁle
that makes m∗the match of ˆw.
6
Conclusion
In this paper, we initiate the analysis of strategic voting in the context of sta-
ble matching of teams. Speciﬁcally, we assume that the Borda rule is used as a
SWF, which outputs an order over the agents that is used as an input in the GS
algorithm. Note that in the standard model of manipulation of Borda, the goal
is that a speciﬁc candidate will be the winner. In our setting, the algorithms
need also to ensure that a speciﬁc candidates will not be ranked too high. Sim-
ilarly, in the standard model of manipulation of the GS algorithm, the goal is
simply to achieve a more preferred match. In our setting, the algorithms for
manipulation need also to ensure that a less preferred spouse is matched to a
speciﬁc agent. Therefore, even though the manipulation of the Borda rule and
the manipulation of the GS algorithm have already been studied, our analysis of
the manipulation of Borda rule in the context of GS stable matching provides a
better understanding of both algorithms.
Interestingly, our algorithms for the single manipulator settings are quite
powerful. They provide exact solutions for the single manipulator case, and their
generalizations provide approximate solutions to the coalitional manipulation
settings, both when the manipulators are on the men’s side or on the women’s
side.
References
1. Abdulkadiroğlu, A., Pathak, P.A., Roth, A.E.: The new york city high school
match. American Economic Review 95(2), 364–367 (2005)
2. Bossert, W., Sprumont, Y.: Strategy-proof preference aggregation: Possibilities and
characterizations. Games and Economic Behavior 85, 109–126 (2014)
3. Bossert, W., Storcken, T.: Strategy-proofness of social welfare functions: the use
of the kemeny distance between preference orderings. Social Choice and Welfare
9(4), 345–360 (1992)
4. Conitzer, V., Walsh, T.: Barriers to manipulation in voting. In: Brandt, F.,
Conitzer, V., Endriss, U., Lang, J., Procaccia, A.D. (eds.) Handbook of Com-
putational Social Choice, pp. 127–145. Cambridge University Press (2016)

5. Davies, J., Katsirelos, G., Narodytska, N., Walsh, T.: Complexity of and algorithms
for borda manipulation. In: The Twenty-Fifth AAAI Conference on Artiﬁcial In-
telligence. pp. 657–662 (2011)
6. Dogan, O., Lainé, J.: Strategic manipulation of social welfare functions via strict
preference extensions. In: The 13th Meeting of the Society for Social Choice and
Welfare. p. 199 (2016)
7. Dubins, L.E., Freedman, D.A.: Machiavelli and the gale-shapley algorithm. The
American Mathematical Monthly 88(7), 485–494 (1981)
8. Faliszewski, P., Procaccia, A.D.: Ai’s war on manipulation: Are we winning? AI
Magazine 31(4), 53–64 (2010)
9. Gale, D., Shapley, L.S.: College admissions and the stability of marriage. The
American Mathematical Monthly 69(1), 9–15 (1962)
10. Hosseini, H., Umar, F., Vaish, R.: Accomplice manipulation of the deferred ac-
ceptance algorithm. In: The Thirtieth International Joint Conference on Artiﬁcial
Intelligence. pp. 231–237 (2021)
11. Hosseini, H., Umar, F., Vaish, R.: Two for one & one for all: Two-sided manipula-
tion in matching markets. arXiv preprint arXiv:2201.08774 (2022)
12. Huang, C.C.: Cheating by men in the gale-shapley stable matching algorithm. In:
European Symposium on Algorithms. pp. 418–431. Springer (2006)
13. Perach, N., Anily, S.: Stable matching of student-groups to dormitories. European
Journal of Operational Research (2022)
14. Pini, M.S., Rossi, F., Venable, K.B., Walsh, T.: Manipulation complexity and gen-
der neutrality in stable marriage procedures. Autonomous Agents and Multi-Agent
Systems 22(1), 183–199 (2011)
15. Roth, A.E.: The economics of matching: Stability and incentives. Mathematics of
operations research 7(4), 617–628 (1982)
16. Roth, A.E.: The nrmp as a labor market: understanding the current study of the
match. Journal of the American Medical Association 275(13), 1054–1056 (1996)
17. Roth, A.E., Sönmez, T., Ünver, M.U.: Kidney exchange. The Quarterly journal of
economics 119(2), 457–488 (2004)
18. Schmerler, L., Hazon, N.: Strategic voting in negotiating teams. In: International
Conference on Algorithmic Decision Theory. pp. 209–223. Springer (2021)
19. Schmerler, L., Hazon, N., Kraus, S.: Strategic voting in the context of stable-
matching of teams. arXiv preprint arXiv:2207.04912 (2022)
20. Shen, W., Deng, Y., Tang, P.: Coalitional permutation manipulations in the gale-
shapley algorithm. Artiﬁcial Intelligence 301, 103577 (2021)
21. Teo, C.P., Sethuraman, J., Tan, W.P.: Gale-shapley stable marriage problem re-
visited: Strategic issues and applications. Management Science 47(9), 1252–1267
(2001)
22. Vaish, R., Garg, D.: Manipulating gale-shapley algorithm: Preserving stability and
remaining inconspicuous. In: The Twenty-Sixth International Joint Conference on
Artiﬁcial Intelligence. pp. 437–443 (2017)
23. Yu, W., Hoogeveen, H., Lenstra, J.K.: Minimizing makespan in a two-machine ﬂow
shop with delays and unit-time operations is NP-hard. Journal of Scheduling 7(5),
333–348 (2004)
24. Zuckerman, M., Procaccia, A.D., Rosenschein, J.S.: Algorithms for the coalitional
manipulation problem. Artiﬁcial Intelligence 173(2), 392–412 (2009)

