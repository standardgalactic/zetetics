Theoretical Computer Science 259 (2001) 1–61
www.elsevier.com/locate/tcs
Fundamental Study
Theory of genetic algorithms
Lothar M. Schmitt
School of Computer Science and Engineering, The University of Aizu, Aizu-Wakamatsu City,
Fukushima Prefecture, 965-8580, Japan
Received April 1999; revised September 2000; accepted October 2000
Communicated by M. Ito
This work is dedicated to Axel T. Schreiner in Osnabr.uck
Abstract
(i) We investigate spectral and geometric properties of the mutation-crossover operator in a
genetic algorithm with general-size alphabet.
By computing spectral estimates, we show how
the crossover operator enhances the averaging procedure of the mutation operator in the random
generator phase of the genetic algorithm. By mapping our model to the multi-set model often
investigated in the literature, we compute corresponding spectral estimates for mutation-crossover
in the multi-set model.
(ii) Various types of unscaled or scaled 5tness selection mechanisms are considered such as
proportional 5tness selection, rank selection, and tournament 5tness selection. We allow 5tness
selection mechanisms where the 5tness of an individual or creature depends upon the popula-
tion it resides in. We investigate contracting properties of these 5tness selection mechanisms
and combine them with the crossover operator to obtain a model for genetic drift. This has
applications to the study of genetic algorithms with zero or extremely low mutation rate.
(iii) We discuss a variety of convergent simulated-annealing-type algorithms with mutation-
crossover as generator matrix.
(iv) The theory includes proof of strong ergodicity for various types of scaled genetic algo-
rithms using common 5tness selection methods. If the mutation rate converges to a positive value,
and the other operators of the genetic algorithm converge, then the limit probability distribution
over populations is fully positive at uniform populations whose members have not necessarily
optimal 5tness.
(v) In what follows, suppose the mutation rate converges to zero su6ciently slow to assure
weak ergodicity of the inhomogeneous Markov chain describing the genetic algorithm, unbounded
power-law scaling for the 5tness selection is used, mutation and crossover commute, and the
5tness function is injective which is a minor restriction in regard to function optimization.
(va) If a certain integrable convergence condition is satis5ed such that the selection pressure
increases fast, then there is essentially no other restriction on the crossover operation, and the
algorithm asymptotically behaves as the following take-the-best search algorithm: (1) mutate
E-mail address: lothar@u-aizu.ac.jp (L.M. Schmitt).
0304-3975/01/$ - see front matter c⃝2001 Elsevier Science B.V. All rights reserved.
PII: S0304-3975(00)00406-0

2
L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
in every step with rate decreasing to zero, and (2) map any population to the uniform population
with the best creature. The take-the-best search algorithm is investigated, and its convergence
is shown. Depending upon population-size, the take-the-best search algorithm does or does not
necessarily converge to the optimal solution.
(vb) If population size is larger than length of genome, and a certain logarithmic convergence
condition is satis5ed such that the selection pressure increases slowly but su6ciently fast, then
the algorithm asymptotically converges to the optimal solution.
c⃝2001 Elsevier Science B.V.
All rights reserved.
Keywords: Non-binary genetic algorithms; Spectral analysis of mutation-crossover; Convergent
simulated annealing-type genetic algorithm; Genetic drift; Scaled proportional 5tness selection;
Convergence in the zero-mutation limit case
Contents
1. Introduction : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
3
2. Notation and preliminaries : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
9
2.1. Scalars : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
9
2.2. Vectors : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
9
2.3. Matrices : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
10
2.4. The alphabet : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
10
2.5. The basic vector space : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
11
2.6. The vector space underlying the model : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
11
2.7. Matrices acting on the vector space underlying the model : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
12
2.8. Maximal-entropy distributions : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
12
2.9. Identi5cation with the multi-set model for populations : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
13
2.10. Means : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
13
2.11. Hardy–Weinberg spaces : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
14
2.12. The diagonal spaces : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
14
3. Mutation : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
15
3.1. The basic mutation matrix : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
15
3.2. Single-spot mutation : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
16
3.3. Multiple-spot mutation : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
20
4. Applications of contraction properties of mutation : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
23
4.1. Weak ergodicity of genetic algorithms : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
24
4.2. Contraction towards uniform populations : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
25
5. Crossover : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
26
5.1. Generalized crossover : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
27
5.2. Regular crossover : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
27
5.3. Unrestricted crossover : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
28
5.4. On Geiringer’s theorem : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
29
6. The mutation-crossover proposal matrix : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
32
6.1. Contraction properties of combined mutation-crossover : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
32
6.2. Convergent simulated annealing type algorithms : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
34
7. Selection : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
36
7.1. Proportional 5tness selection for population-dependent 5tness functions : : : : : : : : : : : : : : : : : : :
37
7.2. Tournament 5tness selection : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
38
7.3. Rank selection : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
39
7.4. Generalized 5tness selection scaling : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
39
7.5. A short note on the eGect of genetic drift : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
41

L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
3
8. Ergodic behavior of genetic algorithms : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
42
8.1. Non-zero limit mutation rate : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
44
8.2. Zero limit mutation rate and strong 5tness scaling : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
49
8.3. Examples for non-optimal convergence : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
55
9. Discussion of applicability : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
55
10.Conclusion : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
56
Acknowledgements : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
58
References : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : :
58
1. Introduction
The purpose of this exposition is to give a comprehensive theory of genetic algo-
rithms that use a general-size alphabet with the following major goals:
• Establish mutation as the main thriving force in the random generator phase of a
genetic algorithm which assures ergodicity of the (inhomogeneous) Markov chain
describing the algorithm. This point of view is, in particular, in accordance with
experimental results as in [7]. See Theorems 4.1, 4.2, Lemmas 4.3, 4.4, the discussion
in Section 5.1, Theorems 6.1 and 8.3.
• Put the crossover operation in proper perspective by showing:
◦The crossover operation assists mutation in the random generator phase of the al-
gorithm by adding to the contraction process over the state space S. See
Theorem 6.1.
◦The crossover operation combined with 5tness selection under no mutation shows
a convergence eGect for the algorithm, called genetic drift, which is not ergodic
in nature, i.e., depends upon the initial population. See Section 7.5.
◦The crossover operation does not play a signi5cant role in the asymptotic behavior
of genetic algorithms, if the mutation rate stays positive and 5tness scalings such
as unbounded power-law scaling are used. See Theorem 8.3.
• Discuss a variety of convergent simulated annealing-type algorithms with mutation-
crossover as generator matrix, including algorithms that allow dynamic bursts of
mutation and crossover rate. See Section 6.2.
• Show that genetic algorithms using the most widely used 5tness evaluation methods
do not necessarily converge to populations that contain only optimal creatures. See
Theorems 8.1, 8.2, 8.5 and Section 8.3.
• Show convergence to optima for genetic algorithms using unbounded power-law
scaling. (The main result in [65, 66] is not correct, cf., Section 8.3.) See
Theorems 8.5 and 8.6.
Genetic algorithms, introduced by Holland in [33], have been used by many re-
searchers as a tool for search and optimization. A given optimization task is
encoded in such a way that instances such as a path in a weighted graph are un-
derstood as elements in a 5nite collection C of creatures (candidate solutions) in

4
L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
a model “world”, and a 5tness function f : C →R+ exists, which has to be maxi-
mized. Usually, the number of elements in C is very large prohibiting a complete
search of C. Genetic algorithms provide a probabilistic way to conduct a search in
C for arbitrary f given a suitable encoding of creatures or instances into strings of
symbols.
A genetic algorithm comprises three phases (operations): mutation, crossover and
5tness selection. These are applied cyclically and iteratively to 5xed-size, 5nite popula-
tions consisting of elements of C until a saturation condition, or another boundary con-
dition is satis5ed. A genetic algorithm is called simple, if all three operations stay con-
stant over the course of the algorithm. Mutation models random change in the genetic
information of creatures, and is inspired by random change of genetic information in
living organisms, e.g., through the eGects of radiation or chemical mismatch. Crossover
models the exchange of genetic information of creatures, and is inspired by exchange
of genetic information in living organisms, e.g., during the process of sexual repro-
duction. Fitness selection models reproductive success of adapted organisms in their
environment.
Theoretical investigations of genetic algorithms have previously been undertaken by
many authors (see, e.g., [14–16, 25, 29, 34, 50, 54, 57, 61, 62, 65, 66, 68–70]). The model
most commonly investigated is the genetic algorithm with a binary alphabet, multiple-
bit mutation, one-point crossover, and proportional 5tness selection. These genetic al-
gorithms are modeled almost exclusively – with the exception of work by Rudolph
[57], or Fujii, Nehaniv and the author [61, 62] – by (inhomogeneous) Markov chains
acting on probability distributions over populations which are understood as unordered
multi-sets. This may have some advantages such as a smaller state space, but the price
to pay is a non-negligible combinatorial burden. In the work of Davis and Principe
[14–16], the main point of consideration is whether or not annealing the mutation rate
to zero in the simple genetic algorithm implies convergence to global optima. It does
not. However, Davis and Principe established strong ergodicity of the resulting inho-
mogeneous Markov chain describing the algorithm. The results established below, in
particular Theorem 8.5 and the examples in Section 8.3, generalize the results by Davis
and Principe [14–16] to genetic algorithms using scaled 5tness selection. Notably an-
other comprehensive model for the simple genetic algorithm based upon Markov chain
analysis can be found in the work of Vose, Liepins, and Nix [50, 68–70], which is the
basis for many subsequent investigations.
A number of authors have investigated non-binary genetic algorithms theoretically
(see, e.g. [3, 9, 37, 42, 71, 72]) which have been used successfully in applications [13].
Bhattacharyya and Koehler [9] as well as Leung et al. [42] investigate non-binary
genetic algorithms with cardinality 2. However, it is clear that this is essentially the
binary model with a diGerent crossover operator that 5ts the de5nition of a generalized
crossover operator in [61]. Thus, this situation is for the most part covered by results
in [61] except for Theorems 8.5 and 8.6 presented here. Koehler et al. [37] present a
generalization of the multi-set model for arbitrary non-binary alphabets, and show that
a theory analogous to the binary case holds to a very large extent.

L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
5
The starting point in [61, 62] and in this exposition is to represent populations as
strings of characters in the underlying alphabet A. This corresponds to what ac-
tually happens in computer memory in an application of genetic algorithms. The
state space is consequently the set of probability distributions over 5xed-length words
over A. This approach frees the initial description from clumsy combinatorial co-
e6cients, which may hinder a subsequent detailed analysis. It also has the advan-
tage of allowing to model spatial structure on an evolving population. The study
of evolution of spatially structured populations is an area of active interest for both
computer scientists (see Mitchell’s book [48]) and evolutionary ecologists and pop-
ulation geneticists (see Roughgarden’s book [55], and the publication by Peck
et al. [53]). This represents a substantial advantage of the model presented here over
the multi-set-based models, which do not capture any spatial structure. The models
for genetic algorithms using unordered multi-sets can be obtained as projections of the
model presented here by simply by forgetting the order of creatures within popula-
tions (see Section 2.9). As an example of an application for this projection mecha-
nism, we compute spectral estimates for the non-binary mutation-crossover matrix in
the multi-set model in Theorem 6.2. This yields a canonical correspondence to sim-
ilar bounds for eigenvalues implied by the Vose–Liepins conjecture (see Koehler’s
proof [36, p. 421], and [70]).
The next major step in the approach presented in [61, 62] and here is to separately
describe and analyze the three phases mutation, crossover, and 5tness selection of the
genetic algorithm. This allows to apply spectral theory and other techniques to the
matrices that arise. In particular, mutation and crossover can be analyzed conveniently
in our model using the fact that the underlying vector space can be obtained by a
suitable tensor product construction (see Section 2.6). The linear model for binary
genetic algorithms, which was developed in [62], was found independently by Rudolph
[57], who proves a part of Theorem 8.2 in the binary case, and analyses a convergent
variant of the simple genetic algorithm by extending all linear operators to keep track
of a best-so-far individual seen by the algorithm. The analysis [61, 62] and also the
analysis presented here does not treat recording the best-so-far individual, but otherwise
extends Rudolph’s 5ndings for simple genetic algorithms.
The model presented here for genetic algorithms is a Markov chain model. In this
model, the basis vectors of the underlying vector space V˝ correspond to the possible
populations in the genetic algorithm which are represented as strings of letters in A.
The state of the algorithm after t steps or generations is described by a probability
distribution v =  vpp, (06vp61,  vp = 1), over all possible populations p in the
set of populations ˝s. For each of the genetic operators, mutation M(t) with mutation
rate (t), crossover C(t) with crossover rate (t), and 5tness selection Ft, we have
a corresponding stochastic matrix acting on the underlying vector space V˝. A single
iteration Gt through one step t of a genetic algorithm is given by the product linear
operator Gt = FtCK
(t)M(t). The operators C(t) and M(t) commute for the standard
methods, i.e., regular pairwise one-point crossover and multiple-spot mutation, but for
a larger part of the theory this is not a requirement.

6
L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
In Section 3, we determine the spectra of single- and multiple-spot mutation. In ad-
dition, we investigate contracting properties of mutation with respect to various norms.
These estimates can be used to give upper bounds for the combined limit probability of
the genetic algorithm over uniform populations, i.e., populations that consist of multiple
copies of a single creature. We also compute estimates for the coe6cient of ergodicity
of mutation which subsequently can be used to obtain criteria for weak ergodicity of
the inhomogeneous Markov chain underlying the genetic algorithm.
In Section 4, we determine criteria for weak ergodicity of genetic algorithms. In
addition, we investigate the interplay of mutation and the 5tness selection operator in
regard to the change in non-uniformity of populations (or more precisely probability
distributions over populations) over the course of the algorithm.
In Section 5, we give a summary of the results on crossover in [62] with a few
additions. The results in [62] carry over almost verbatim, since crossover does not
change letters in A but positions of letters. For the purpose of the analysis presented
here, we have to introduce an extended de5nition of the so-called Hardy–Weinberg
spaces, which are the span over populations with constant allele frequencies, and which
are the invariant subspaces for the crossover operator.
It is important to note that iterated crossover converges on Hardy–Weinberg spaces
to uniform distributions over the base vectors (populations), i.e., given a 5xed allele
frequency, every population with that frequency has equal probability in the limit. This
shows that any linkage [20, p. 25] between genes is resolved, where gene means a
letter of the underlying alphabet A in a certain position in the genome of a creature.
This is related to work of Geiringer [20], and Vose and Wright [72]. Geiringer [20]
considers sexual reproduction with equal distribution for diploid male and female under
complete panmixia, while in the model presented here any two haploid individuals or
creatures can be mated under crossover. We have included a short simple proof of the
analogue of [20, p. 42, Theorem III] showing that the mean distribution of creatures in
a Hardy–Weinberg space under iterated crossover in a 5nite population is the canonical
product distribution (see Theorem 5:4). See also [72, p. 287, Theorem 3:9].
In addition to the above, we introduce the notion of generalized crossover opera-
tion, which covers regular crossover used in most applications and discussed in many
models, as well as unrestricted crossover as discussed in [62]. In regard to ergodic-type
theorems, the notion of generalized crossover operation is actually su6cient. We note
that for some genetic algorithms, the limit probability distribution over populations is
independent even of the crossover method (see Theorems 8.3 and 8.5).
In Section 6, we show in Theorem 6:1: how, i.e., on which subspaces of V˝, the
crossover operation enhances the averaging eGect of mutation in the random generator
phase of the genetic algorithm. This result is – in the author’s opinion – the key result
in understanding mutation-crossover vs. mutation as probabilistic generator operators
in the algorithm. It characterizes mutation-crossover as procedure with geometric rates
of convergence towards the uniformly probability distributions over all populations.
In addition to the above, we introduce several convergent simulated annealing-type
optimization methods (see the publication by Aarts and van Laarhoven [1] for an in-

L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
7
troduction), which use mutation-crossover as generator matrix. This extends discussions
by Mahfoud and Goldberg [44, p. 302, 305], and [62, p. 124, Remark on simulated
annealing]. The method presented here allows for dynamic bursts of mutation and
crossover rates during the course of the algorithm.
In Section 7, we discuss a variety of standard 5tness selection schemes used in ap-
plications of genetic algorithms. But the analysis also treats types of 5tness selection
mechanisms where the 5tness of the individual depends upon the ambient population,
including, e.g., cases in which the 5tness of a genotype depends on the frequencies
of the various types of individuals in the population (see publications by Axelrod
and Hamilton [4], and Sigmund [64]). In particular, we analyze how 5tness selection
schemes contract towards the space of probability distributions over uniform popula-
tions. This is later combined with the analysis of the interplay 5tness selection vs.
mutation of Section 4.2 mentioned above to obtain estimates for the proportion of the
limit probability distribution over non-uniform populations for a possibly scaled genetic
algorithm. Our presentation illuminates the discussion of “punctuated equilibrium” by
Vose in [69]. In addition to the above, we discuss the eGect of genetic drift (see, e.g.,
[12, 19, 29, 45, 55]) as modeled in [61] in regard to the extended de5nitions given in
this exposition. Essentially, the results of [61] stay valid: it is not hard to show that
such a genetic algorithm without mutation converges pointwise on distributions over
populations to a distribution over uniform populations. This analysis extends 5ndings
by Fogel in [19], and it yields insight into some applications of genetic algorithms
using crossover without mutation.
A number of authors have used genetic algorithms with very low mutation rate or
zero mutation rate obtaining seemingly good results. In the author’s opinion, these
implementations of genetic algorithms may see “convergence” of the algorithm as an
instance of having virtually implemented genetic drift. We point out that this process is
non-ergodic in nature, i.e., the limit probability distribution over populations depends
upon the initial population. Note that Banzhaf et al. [7] report enhanced performance
of genetic algorithms using higher mutation rates.
In Section 8, we show strong ergodicity of a large variety of genetic algorithms.
These algorithms can be scaled in regard to the mutation rates for single- or multiple-
spot mutation, and in regard to the crossover rates for a very general setting for
crossover. We impose as main condition, that the mutation rates (t) for multiple-
bit mutation converge to a strictly positive value. The algorithm can use tournament
5tness selection, rank selection or scaled 5tness selection but also 5tness selection
mechanisms where the 5tness of the individual depends also on the population as dis-
cussed in Section 7. Our analysis applies to most standard methods of 5tness scaling
such as linear 5tness scaling [25, p. 77], sigma-truncation [25, p. 124], and power-law
scaling (see [25, p. 124], and Section 7.1). However, if single-spot mutation is consid-
ered, then such processes as unbounded power-law scaling are excluded. We show that
the limit probability distribution of such processes is fully positive at every population
of uniform 5tness, which implies that the algorithm does not necessarily converge to
populations containing only optimal solutions.

8
L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
If an injective, population-independent 5tness function is used, 1 and if a so-called
strong 5tness scaling such as unbounded power-law scaling for proportional 5tness
selection is used, then the limit distribution depends only on the pre-order or rank
induced by the 5tness function on the set of creatures, and not the particular values
of the 5tness function. This is shown in Theorem 8.3. This is in agreement with the
viewpoint of Baker [6], who proposes to use the 5tness ranking of individuals in
determining 5tness selection probabilities. If, in addition, the mutation and crossover
operators commute, which is satis5ed in all standard applications, then what actually is
done as crossover operation (i.e., method and scaling of crossover) are irrelevant for
the asymptotic behavior of the genetic algorithm. This means that the limit probability
distribution over populations does not depend upon method and=or scaling of crossover.
We also give explicit bounds on the combined probability for non-uniform popu-
lations in the limit distribution. In fact, Theorems 8.1 and 8.2 show that for small
mutation rates the genetic algorithm asymptotically spends most of its time in uniform
populations.
The 5nal part of our analysis contains the most striking new results under the fol-
lowing hypotheses: (a) the mutation rates (t), t ∈N, are monotonously decreasing to
0, slow enough to assure weak ergodicity of the inhomogeneous Markov chain describ-
ing the algorithm (e.g., (t) = t−1=L, t ∈N, where L is the length of a population as
a word over A); (b) mutation and crossover commute, which is usually satis5ed; (c)
an injective, population-independent 5tness function is used, or rank based upon such
a function.
If power-law scaling is used with an “integrable” exponentiation g (e.g., g is linear;
see identity (22) in Section 7.1, and identity (31) in Theorem 8.2), then we have
the following situation: The Markov chain describing the scaled genetic algorithm is
strongly ergodic. The genetic algorithm behaves asymptotically like the so-called take-
the-best search algorithm which consists of the two steps: (1) mutate with rate (t),
and (2) map every population p to the uniform population containing solely the best
creature in p. This means in particular, that crossover method, and 5tness selection
schedule are irrelevant (asymptotically) for the outcome of the genetic algorithm pro-
cedure. We investigate a particular example for a take-the-best search algorithm, and
we show that it does not converge to the best element (see Section 8.3). These results
contradict the main result in [65, 66]. In general, the limit probability distribution over
populations, i.e., the outcome of the algorithm, depends upon the GA-landscape. How-
ever, if the size s of populations is larger than the length ‘ of the genome of creatures,
then the take-the-best search algorithm does converge to the best element.
If power-law scaling is used with a “logarithmic” exponentiation g (see identity
(22) in Section 7.1, and identities (34) and (35) in Theorem 8.3) and s¿‘, then
1 Actually, we need only a weaker condition that every population contains only one creature of maximal
5tness which allows, e.g., to consider population-dependent rank. The discussion in [62, p. 120] shows that
an injective, population-independent 5tness function on the set of creatures is a minor restriction, if a genetic
algorithm is considered for the purpose of function optimization.

L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
9
the Markov chain describing the scaled genetic algorithm is strongly ergodic, and the
algorithm does converge to the best element.
The work of Davies and Principe [15, 16] showed that annealing the mutation rate to
zero does not imply convergence of an otherwise constant genetic algorithm to global
optima with probability 1. Rudolph [57] raised the question whether using a proper
5tness scaling would imply convergence to global optima. This was answered to the
negative in 1996 in the preprint version of [62] for strong 5tness scalings and scaled
mutation rate with positive limit (see [62, Theorem 17]). Theorems 8.2 and 8.3 give
a positive answer to Rudolph’s question in [57] in the remaining case, i.e., annealing
the mutation rate to zero and using a strong 5tness scaling under certain conditions
as outlined above. The examples in Section 8.3 show that some of the conditions are
absolutely necessary.
Finally in Section 9, we discuss some aspects of the theory presented here in regard
to practical applications of genetic algorithms.
2. Notation and preliminaries
The notation used in this exposition is an extension of the notation used in [62]. We
shall give a complete listing here for the convenience of the reader.
2.1. Scalars
Let N, Z, R, R+, and C denote the strictly positive integers, the integers, the real
numbers, the non-negative real numbers, and the complex numbers respectively. Let
N0 = N ∪{0}. Let R+∗= R+={0}. For elements n; m of a set, let n;m = 1, if n = m, and
n;m = 0 otherwise, i.e.,  is the Kronecker delta.
2.2. Vectors
The standard base of unit vectors in Cn, n ∈N, is denoted as
b = (;)n
=1 ∈Cn;
166n:
For vectors v = (v)n
=1; w = (w)n
=1 ∈Cn, n ∈N, and r ∈[1; ∞), we shall denote the
canonical inner product of v and w, and the ‘r-norm [59, p. 4] of v by
⟨w; v⟩=
n
=1
Qwv
and
||v||r =
 n
=1
|v|r
1=r
:
The ‘1-norm shall also be called the Hamming norm. The ‘∞-norm or max-norm of
v is de5ned as
||v||∞= max{|v| :  = 1 : : : n}:

10
L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
2.3. Matrices
Let Mn(), n ∈N, denote the n × n matrices with entries in a set . Let Mn =
Mn(C). A matrix in Mn will operate by matrix multiplication from the left on vectors
in Cn. A matrix in Mn(R+) is called column stochastic or (just) stochastic, if every
of its columns sums to 1. 1 shall always denote the identity matrix, i.e., the stochastic
matrix whose diagonal entries equal 1. A matrix is called row stochastic, if its transpose
is column stochastic. A matrix in Mn(R+∗) will be called fully positive. A matrix in
X ∈Mn shall be called irreducible or indecomposable [59, p. 19], if there exists no
permutation matrix ! ∈Mn({0; 1}) such that for some X1 ∈Mm, 16m¡n:
X = ! ·
 X1
X2
0
X3

· !−1:
(1)
The ‘r-norm on Cn induces an operator norm || · ||r on Mn [59, p. 5]. In fact, for
X ∈Mn we have
||X ||r = sup{||Xv||r : ||v||r = 1}:
(2)
Note that if X ∈Mn, then – avoiding large numbers of subscripts – the coe6cients of
X can conveniently be denoted as
⟨b; X b′⟩= X;′;
16; ′6n:
If X ∈Mn is column stochastic, then let the coe6cient of ergodicity with respect to
the ‘r-norm, be given by
#r(X ) = max

∥Xv∥r : v = (v)n
=1 ∈Rn;
n
=1
v = 0 and ∥v∥r = 1

:
(3)
A useful fact from Seneta’s book [63, p. 137, line 20, and formula (4:6)] gives
#1(X ) = 1 −min
 n
=1
min(X;1; X;2) : 161; 26n

6 1 −
n
=1
min{X; : 166n}:
(4)
Observe that Seneta’s book [63] uses row-stochastic matrices. Thus, the formulas used
here are transposed versions of the formulas in [63].
2.4. The alphabet
We shall denote the letters in the alphabet A of size a, 1¡a ∈N underlying the
model for genetic algorithm described here by ˆa(0); ˆa(1); : : : ; ˆa(a−1). Sometimes when
explicitly stated, we shall identify A = { ˆa($) | 06$6a−1} with Za = Z=aZ such that
under this identi5cation ˆa($) ≡$.

L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
11
2.5. The basic vector space
We shall denote the free vector space over A by V1. We shall identify V1 with Ca
such that the base vector ˆa($) ∈V1 corresponds to base vector b$+1 ∈Ca, 06$6a −1.
Usually, we shall identify A with base vectors in V1. Consequently, – if not oth-
erwise stated – an expression such as ˆa(0) + ˆa(1) denotes an element in V1, and not
in Za.
2.6. The vector space underlying the model
We shall consider creatures living in the model world to which the genetic algorithm
is applied as words of 5xed length ‘¿2 over A. Thus, every creature can be identi5ed
with an ‘-tuple of base vectors in V1.
There are a‘ elements in the set C of possible creatures. Every creature c ∈C can
be also identi5ed with an integer in [0; a‘ −1] interpreting c as an integer in the a-adic
number system. This induces a natural order on C used (up to adding 1) for indexing
matrices. We set
VC =
‘
&=1
V1:
VC is identi5ed with the free vector space over A‘ via the map
ˆa($1) ⊗· · · ⊗ˆa($‘) →( ˆa($1); : : : ; ˆa($‘)):
(5)
The set of populations ˝s is the set of s-tuples of creatures containing aL elements
where L = s ‘. We shall assume throughout this exposition, that s¿2, except when
stated explicitly otherwise. Every population p ∈˝s can be identi5ed with an integer
in [0; aL −1]. This induces a natural order on ˝s.
A spot in the genome is, by de5nition, the position of one of the letters in a word
representing a creature or population. The following distance function is of use in
regard to the mutation operation. For c; d ∈C, or p; q ∈˝s, we de5ne the Hamming
distances )(c; d) resp. )(p; q) as the number of spots in the genome where c and d
resp. p and q diGer. We set
VP =
s
*=1
VC =
L
ˆ&=1
V1:
where the latter identi5cation is canonical. V˝ is also identi5ed with the free vector
space over AL similar as in identity (5). This tensor product construction allows a
very convenient description of the mutation operator – see Section 3: Propositions 3.3
and 3.6.
Let U ⊂V˝ be the free vector space over all populations which are uniform, i.e.,
which consist of s copies of a single creature. Consequently, U ∩˝s shall denote the
set of uniform populations. In addition, PU shall denote the orthogonal projection onto
U. U is the subspace of V˝ which is element-wise invariant under the crossover and

12
L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
the 5tness selection operators – see Section 5.1 and De5nition 7:1. Uniform populations
are only aGected by the mutation operation, and not by crossover or 5tness selection.
Let S ⊂V˝ be the set of probability distributions over ˝s, i.e., S is the positive part
of the || · ||1 unit sphere. S is the relevant state space in this investigation where the
genetic operators mutation, crossover, and 5tness selection act as column stochastic
matrices by matrix multiplication from the left.
2.7. Matrices acting on the vector space underlying the model
If X is a linear operator on V1, then de5ne a linear operator X [ˆ&] on V˝ by
X [ ˆ&] = 1 ⊗1 ⊗· · · ⊗1 ⊗X ⊗1 ⊗1 · · · ⊗1;
where X occurs at the ˆ&th tensor spot. This notation as well as the following iden-
tity (6) for spectra are very useful in the mathematical modeling of mutation. See
Propositions 3.3 and 3.6.
For matrices Xˆ& acting on V1, we have (see, e.g., [62, p. 105])
sp

L
ˆ&=1
X ˆ&[ ˆ&]

= sp(X1) + sp(X2) + · · · + sp(XL);
(6)
and
sp

L	
ˆ&=1
X ˆ&[ ˆ&]

= sp(X1) · · · sp(XL):
The group of permutations ,s of s elements acts canonically on the set of populations
˝s rearranging creatures. In fact, for p = (c1; c2; : : : ; cs) ∈˝s, c* ∈C, 16*6s, and
! ∈,s, we have
!p = !(p) = (c!−1(1); c!−1(2); : : : ; c!−1(s)):
(7)
Since identity (7) establishes the action of ! ∈,s on the basis of V˝, every ! ∈,s
uniquely de5nes a linear map ! : V˝ →V˝. With this in mind, let P, be given by
P, = s!−1 
!∈,s
!;
(8)
i.e., P, is a linear combination of elements in the space of linear maps V˝ →V˝.
P, models arbitrary rearrangement of creatures in a population, and is used in regard
to application of our theory to the multi-set model for genetic algorithms studied in
[14–16, 25, 29, 34, 50, 65, 66, 68–70].
For any matrix X acting on V˝, let X [v] be the matrix where the 5rst row is replaced
by v, where v ∈V˝ is seen as a row vector.
2.8. Maximal-entropy distributions
For any subset  ⊆˝s let e ∈spanC() be the vector such that ⟨p; e⟩= card()−1
for every p ∈. e is a probability distribution. Let e = e˝s. Note that this notation is

L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
13
slightly diGerent from the notation introduced in [62, p. 104] (by a factor 2−L), but
coincides with the notation used in [61]. Let Pe be the orthogonal projection onto the
one-dimensional space generated by e.
For a probability distribution v ∈S ⊆V˝, the entropy [58, Section 2.1] is de5ned as
H(v) = −
p∈Ps
vp log(vp)
(9)
with the convention that 0 log(0) = 0. By using induction over the dimension of the
underlying vector space, it is not hard to show, that e is the maximal-entropy distribu-
tion in S ⊆V˝. In fact, by induction hypothesis, one knows the maximal values of the
entropy on the boundary of S, and then can determine the maximum in the interior by
diGerentiating identity (9). See the publication by Rudolph [58], for an investigation
of genetic algorithms for integer programming on the unbounded domain Zn, n ∈N,
using maximal-entropy distributions.
2.9. Identi;cation with the multi-set model for populations
Many researchers have investigated genetic algorithms using the multi-set model (see
[14–16, 25, 29, 34, 50, 65, 66, 68–70]). In the following paragraph, we shall establish the
mathematical connection between the multi-set model and the model presented here.
Let p = (c1; : : : ; cs) ∈˝s, c* ∈C. Suppose that c* occurs * ∈N times in p, i.e., there
are * copies of c* in p. Now, we de5ne the set mset(p) by
mset(p) = {(c1; 1); : : : ; (cs; s)}:
Let mset(˝s) = { mset(p) : p ∈˝s }. Next, we de5ne a map / : mset(˝s) →S identi-
fying populations, which are understood as multi-sets, canonically with a probability
distribution in S. In fact, we de5ne
/(mset(p)) = P,(p):
Since two populations which generate the same multi-set can be transformed into each
other by a permutation, it follows that / is well de5ned.
Let W˝ denote the free vector space over mset(˝s). / extends uniquely to a lin-
ear map / : W˝ →P,(V˝) ⊂V˝. Let S0 ⊂W˝ be the set of probability distributions
over mset(˝s). Clearly /(S0) = P,(S) ⊂S. It is easy to see that / : W˝ →P,(V˝) is
invertible. The corresponding inverse linear map P,(V˝) →W˝ will be denoted by
/−1.
2.10. Means
meanu and Meanr as de5ned below, and introduced for binary genetic algorithms
in [62, p. 107] measure allele=gene frequencies in populations. They are a very useful
tool in analyzing the interplay mutation vs. crossover.

14
L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
First, we deal with the case of the invariant for unrestricted crossover as de5ned in
Section 5.3. If p = (c1; c2; : : : ; cs) ∈˝s is a population, then for the purpose of the next
de5nition consider every creature c* as an ‘-tuple of base-vectors in V1. Now, we set
meanu(p) = s−1
s
*=1
c* ∈
‘
&=1
V1:
For example, if a = 3, ‘ = 2, s = 4, and p = (( ˆa0; ˆa0); ( ˆa0; ˆa1); ( ˆa0; ˆa2); ( ˆa0; ˆa2)) ; then
we have meanu(p) = ( ˆa0; 1
4( ˆa0 + ˆa1 + 2 ˆa2)):
Next, we deal with the invariant Meanr related to regular crossover as de5ned in
Section 5.2. In this case, assume that the populations size s is even. Let
Meanr(p) = 1
2(c1 + c2; : : : ; cs−1 + cs) ∈
 ‘
&=1
V1
s=2
:
For the example given above, we have Meanr(p) = (( ˆa0; 1
2( ˆa0 + ˆa1)); ( ˆa0; ˆa2)). Both
meanu and Meanr extend uniquely to linear maps on V˝.
2.11. Hardy–Weinberg spaces
Hardy–Weinberg 2 spaces as introduced in [62, p. 108] are canonically invariant
subspaces of V˝ for the standard crossover operators, i.e., regular crossover and un-
restricted crossover. For a given 0 ∈
‘
&=1 V1, let V0, the Hardy–Weinberg space of
populations with gene frequency 0, be de5ned as
V0 = spanC{p | p ∈Ps; meanu(p) = 0}:
De5ne V0 analogously, if 0 = Meanr(p) for a population p of even size s. Let P0, P Q0
be the orthogonal projection onto V0, V0, respectively.
2.12. The diagonal spaces
Let the diagonal space D be de5ned as follows: If 0 = meanu(p) for a population
p, then let
e0 = e{q∈Ps | 0=meanu(q)}
and let
D = spanC{e0 | 0 = meanu(p); p ∈Ps}:
Similarly to the above, if 0 = Meanr(p) for a population p of even population size s,
then let
e Q0 = e{q∈Ps | Q0=Meanr(q)};
2 Assuming identical distributions for females and males, and random breeding (panmixia), Hardy showed
in [32] that a state of equilibrium is reached in a population after the 5rst generation for the probabilities of
genotypes associated with one Mendelian character. In [73], Weinberg investigated the sequence of distri-
bution of genotypes over generations for 2 Mendelian characters which converges to the canonical product
distribution. See [20, p. 42, Theorem III].

L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
15
and let
QD = spanC{e Q0 | Q0 = Meanr(p); p ∈Ps}:
Let PD, and PQD be the orthogonal projection onto D, and D, respectively. Since e ∈D,
and e ∈QD, we have
PDPe = Pe = PePD
and
P QDPe = Pe = PeP QD:
Observe in addition, that !e0 = e0 for ! ∈,s, 0 = meanu(p), p ∈˝s. Hence,
P,PD = PD = PDP,
⇒P,(1 −PD) = (1 −PD)P,(1 −PD):
This shows that P, maps D⊥into D⊥.
2.1. Lemma. Denote e = eA ∈V1 in this lemma (using the above de;nitions for ‘=s
= 1). Let z ∈V1 be such that z ⊥e. Then we have
1: x1 = z ⊗e ⊗e : : : ⊗e + e ⊗e : : : ⊗e ⊗z ⊗e ⊗e : : : ⊗e ∈QD;
where the second z occurs at spot ‘+1; i.e.; the ;rst spot in the second creature.
2: x2 = z ⊗e ⊗e : : : ⊗e −e ⊗e : : : ⊗e ⊗z ⊗e ⊗e : : : ⊗e ∈QD
⊥;
where again the second z occurs at spot ‘ + 1.
Proof. Let z = a−1
$ = 0 z$ ˆa($). Then
z ⊗e ± e ⊗z = a−1 
$;$′ z$ ˆa($) ⊗ˆa($′) ± a−1 
$;$′ z$′ ˆa($) ⊗ˆa($′)
= a−1 
$;$′ z$( ˆa($) ⊗ˆa($′) ± ˆa($′) ⊗ˆa($)):
Up to permuting tensor spots, this shows Lemma 2:1:1 Consider ! ∈,L acting on
populations by permuting the L letters in a population canonically, and extend ! to
a linear map acting on V˝. Let ! ∈,L be a transposition. Then
1
2(1 + !) is a self-
adjoint, stochastic projection acting on V˝. The orthogonal projection PQD onto QD can
be expressed as a product of commuting projections as just considered, where the
associated transpositions exchange spots (1; ‘ + 1), (2; ‘ + 2), etc. Consequently, if PQD
is applied to x2, then this yields 0.
3. Mutation
3.1. The basic mutation matrix
The basic mutation matrix m(1) ∈Ma models the change of a single spot in the
genome, i.e., a change within the alphabet A at a given position in the genome.
In case of a binary alphabet, m(1) models Tipping a single bit in the genome, and
thus equals the Tip matrix f, i.e., we have for a = 2:
m(1) = f =
 0
1
1
0

∈M2:

16
L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
In general, we can model mutation at the level of a single spot of the genome by any
stochastic matrix m(1) ∈Ma satisfying
⟨ˆa($); m(1) ˆa($)⟩= 0;
$ ∈Za:
If demanded by application or model, one can generalize the analysis given below
to cases such as the cyclic shift, i.e., ⟨ˆa($ + 1); m(1) ˆa($)⟩= 1; $ ∈Za: Another case of
interest may even be to split the alphabet at this level using a reducible matrix m(1)
(see identity (1), or [59, p. 19]). In any case, we have |sp(m(1))| ⊂[0; 1]: This follows,
e.g. from [59, p. 5, formula (7′)], and [56, Theorem 10.13(b)].
We remark that for application purposes, a 5nite discrete domain of real numbers
A = {x0 + $ ·  : x0;  ∈R; $ = 1 : : : a};
can be used as alphabet in a genetic algorithm.
In [58], Rudolph investigates genetic algorithms for integer programming on the
unbounded domain Zn; n ∈N. In particular, Rudolph argues to use distributions for
mutation which are “spread out as uniformly as possible” [58, p. 140], i.e., maximal-
entropy distributions. For the unbounded domain, this yields geometric distributions
[58, Section 2.1, Proportion 1, Section 2.2, Proportion 2 and De5nition 2 ff.].
Considering the case of bounded domain A, and following Rudolph’s argument for
a mechanism of change of letter which is uniformly spread, mutation should change
the current letter of the alphabet A with equal probability to a diGerent, new letter.
Consequently, we de5ne the regular basic mutation matrix ˆm(1) by
⟨ˆa($′); ˆm(1) ˆa($)⟩= (a −1)−1;
$′ ̸= $ ∈Za:
In what follows, we shall usually assume that m(1) = ˆm(1), if not explicitly stated oth-
erwise.
3.1. Lemma. Denote e = eA ∈V1 in this lemma (using the above de;nitions for ‘ = s
= 1). The spectrum of ˆm(1) satis;es sp( ˆm(1)) = {−(a −1)−1; 1}; where the eigenspace
to eigenvalue 1 is spanned by e; the maximal-entropy distribution over A.
Proof. Clearly, Pe is a self-adjoint projection with one-dimensional range. Conse-
quently, 1−Pe is the self-adjoint projection onto the kernel of Pe with range of dimen-
sion a −1. Since ˆm(1) = −(a −1)−1(1 −Pe) + Pe, we obtain Lemma 3.1.
Let B( ˆm(1)) = {eA ∈V1; z$ ∈V1 : $ = 1 : : : a −1} where the z$ form an orthonormal
basis of (1 −Pe)V1.
3.2. Single-spot mutation
Let  ∈(0; L−1), where L is the length of populations as words over the alphabet A.
Single-spot mutation (see also [62, Section 2.1]) is de5ned as the following three-step
procedure:
1. Decide whether a single-spot mutation should take place with probability L.

L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
17
2. If single-spot mutation takes place, then chose one of the spots in the population
with probability L−1.
3. If single-spot mutation takes place, then change the current letter in the underlying
alphabet A in accordance with ˆm(1) in the spot selected in step (2).
Single-spot mutation corresponds closely to what in biology is called a “point mutation”
in a single individual of a population. Since by design single-spot mutation allows only
a limited amount of change in the genome, it 5ts very well into the philosophy of “small
neighborhoods” used in simulated annealing [1] (see Section 6.2).
3.2. Example. Let us consider the case, a = ‘ = s = 3. Then L = 9. Set A = {0; 1; 2}.
Let  = 1
20. Let p ˆa = (( ˆa; 0; 0); (0; 0; 0); (0; 0; 0)) ∈˝s, ˆa ∈A, and assume that p0 is the
current population. Then, )(p0; p1) = 1. Now, the decision to mutate is made positively
in 45% of all applications of single-spot mutation. Hence, the probability of no change
is 55% = 1 −L. The probability that spot 1 (where p0 and p1 diGer) is chosen for
change of letter is 5%. If spot 1 is chosen for change of letter, then the 5rst letter 0
in p0 is changed with probability 1
2 to letter 1, and otherwise to letter 2. Hence, the
probability for transition from p0 to p1 is 2:5% = =(a −1).
The following proposition collects the spectral information about the stochastic matrix
M (1)

describing single-spot mutation.
3.3. Proposition. Let M (1)

denote the symmetric; stochastic matrix acting on V˝ de-
scribing transition probabilities for entire populations under single-spot mutation. We
have
1: Let p; q ∈˝s. The coe6cients of M (1)

are as follows:
• ⟨p; M (1)
 p⟩= 1 −L.
• ⟨q; M (1)
 p⟩= (a −1)−1; if )(p; q) = 1.
• ⟨q; M (1)
 p⟩= 0; if )(p; q)¿1.
2: M (1)

= (1 −L)1 + LM (1)
1=L; where M (1)
1=L = L−1 L
ˆ& = 1 ˆm(1)[ˆ&].
3: sp(M (1)
 ) = 1 −a=(a −1) · ([0; L] ∩N0): Consequently; M (1)

is invertible and C∗-
positive 3 if ¡(a −1)=La:
Note that the eigenvectors for M (1)

are all eigenvectors to corresponding eigen-
values of M (1)
1=L. It is easy to see that eigenvectors of M (1)
1=L are suitable sums of
orthogonal vectors of the form L
ˆ& = 1 zˆ&; where every zˆ& ∈B( ˆm(1)) is an eigenvector
of ˆm(1).
4: ∥M (1)
 ∥r = 1 for r ∈[1; ∞]; where the operator norm ∥· ∥r corresponds to the ‘r-
norm on V˝ as in [59; p: 5; formula 5].
5: M (1)

commutes with every permutation operator ! ∈,s.
6: (M (1)
 )L is fully positive. Consequently; e is; up to scalar multiples; the only eigen-
vector of M (1)

to eigenvalue 1. Thus; Pe is the spectral projection of M (1)

to
eigenvalue 1.
3 A C∗-positive matrix is the square of a self-adjoint matrix. Equivalently, it is self-adjoint with positive
spectrum. See [62, p. 132, Corollary B3], or [56, p. 282, De5nition 11:27, Theorem 11:28].

18
L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
Proof. The statement Proposition 3:3:1 for the coe6cients of M (1)

follows immediately
from the de5nition of the single-spot mutation operation given in the 5rst paragraph of
Section 3.2. Now, Proposition 3:3:2 follows directly from Proportion 3:3:1 by checking
how the matrices act on populations. The formula Proportion 3:3:3 for the spectrum
follows from Proportion 3:3:2 and the upper part of identity (6) which is applied to
L · M (1)
1=L. The details in Proportion 3:3:3 about eigenvectors follow from Lemma 3:1,
and the identities
M (1)
1=L = L−1
L
ˆ&=1
ˆm(1)[ ˆ&]
and
M (1)

= (1 −L)1 + LM (1)
1=L:
M (1)

is doubly stochastic. By [59, p. 17, Proposition 5:3], M (1)

is a convex com-
bination of permutation matrices. If Q ∈MaL is a permutation matrix, then ∥Q∥r = 1
for r ∈[1; ∞], since coe6cients of a vector in V˝ are only exchanged by the action
of Q. Since, consequently, M (1)

is a convex combination of matrices with opera-
tor norm equal to 1, we have ∥M (1)
 ∥r61. Since e is a 5x point of M (1)
 , we have
∥M (1)
 ∥r¿1. Proposition 3:3:5 is rather obvious. If M (1)

has been applied L times,
then every spot in any given population may have changed, i.e., (M (1)
 )L is fully pos-
itive. By [59, p. 23, Corollary 1], 1 is a simple root of the characteristic equation of
(M (1)
 )L. By [59, p. 9, Proposition 2:8], 1 is a simple pole of the resolvent, and thus
the corresponding eigenspace is one-dimensional. This shows Proposition 3:3:6.
The next result summarizes geometric properties of M (1)

in regard to being a con-
tractive map.
3.4. Proposition. Let M (1)

be the doubly stochastic matrix describing single-spot mu-
tation.
1: M (1)

is a contracting map in the Euclidean norm on both e⊥and S with ;xed
points 0 and e; respectively.
• If a = 2; then the contracting factor is given by max{2L −1; 1 −2}: The
smallest possible contracting factor 1−2(L+1)−1 is attained for  = (L+1)−1:
• If a¿2; then the contracting factor is given by 1 −a=(a −1): The smallest
possible contracting factor is “attained” for  = L−1.
2: If ¡(a −1)=aL; and v ⊥e; then

1 −La
a −1

∥v∥26∥M (1)
 v∥26

1 −
a
a −1

∥v∥2:
This identity shows that for small  contracting by M (1)

stays controlled in the
sense that the ∥· ∥2-norm of a vector orthogonal to e cannot shrink too much.
3: We have for the coe6cients of ergodicity (see identity (3))
#1(M (1)
 ) = #∞(M (1)
 ) = 1:

L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
19
4: If v ∈S is a probability distribution; then
L +

1 −L −

a −1

∥(1 −PU)v∥1 6 ∥(1 −PU)M (1)
 v∥1
6 L + (1 −L)∥(1 −PU)v∥1:
This inequality describes to what degree the state of the genetic algorithm is
driven away from uniform populations by single-spot mutation. Note that the
upper estimate does not depend upon a, the size of the alphabet.
Proof. Proposition 3:4:1 is a direct consequence of Proposition 3:3:3, and the fact that
e spans the one-dimensional eigenspace of M (1)

to eigenvalue 1. Proposition 3:4:2 is a
direct consequence of the spectral theorem for normal matrices (see, e.g., [40, p. 268],
[30, p. 337], or [62, p. 131, Corollary B2]). Let p0 and p1 be the populations with
all letters equal to ˆa(0), and all letters equal to ˆa(1), respectively. Since by hypothesis
L¿4, there is no population that can reach both of these by a single-spot mutation.
Therefore, min(⟨q; M (1)
 p0⟩; ⟨q; M (1)
 p1⟩) = 0 for all q ∈˝s. Thus, by identity (4), we
have #1(M (1)
 ) = 1, since
min
p;p′


q
min(⟨q; M (1)
 p⟩; ⟨M (1)
 p′⟩)

= 0:
For the above p0, de5ne v ∈V˝ by ⟨v; p0⟩= 1, ⟨v; p⟩= 1 if )(p; p0) = 1, and ⟨v; q⟩=
−1 for exactly (a −1)L + 1 populations q with )(q; p0)¿1. Now v ⊥e, ∥v∥∞= 1,
and
⟨p0; M (1)
 v⟩= 1 −L + (a −1)−1(a −1)L = 1:
Hence, #∞(M (1)
 )¿1. Clearly, #∞(M (1)
 )61 by [59, p. 5, formula (7)]. This shows
Proposition 3:4:3. If p ∈˝s ∩U is uniform, then it is mapped with probability L to
a non-uniform population. If p is non-uniform, then changing any spot might keep
it non-uniform, and it makes it uniform with probability at most (a −1)−1 (if p is
uniform up to one spot). Thus, for v ∈S
L∥PUv∥1 +

1 −

a −1

∥(1 −PU)v∥1 6 ∥(1 −PU)M (1)
 v∥1
6 L∥PUv∥1 + ∥(1 −PU)v∥1:
This shows Proposition 3:4:4.
As simple as it seems, the following result is the key observation for handling the
combined mutation-crossover operation.
3.5. Proposition. We have M (1)
 D ⊆D. Consequently; M (1)
 PD = PDM (1)
 PD = PDM (1)
 .
The same statements hold; if D is replaced by QD.

20
L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
Proof. Suppose 0 = (01; : : : ; 0‘) = meanu(p) for p ∈˝s, and q ∈˝s satis5es )(p; q)=1.
Let 6 = (61; : : : ; 6‘) = meanu(q). Now assume in addition, that p and q diGer such that
a switch from ˆa(0) to ˆa(1) occurred in the 5rst spot within the creatures, i.e.,
01 = s−1((n + 1) ˆa(0) + m ˆa(1) + v)
and
61 = s−1(n ˆa(0) + (m + 1) ˆa(1) + v);
where n; m ∈N, and v ∈spanC{ ˆa($) : $¿2}. Now, if we consider q 5xed for a moment,
then there are m + 1 5xed 5rst spots in creatures in q which equal ˆa(1). Hence, there
are exactly m + 1 populations p′ ∈˝s with 0 = meanu(p′), which can produce q via
single-spot mutation M (1)
 . Thus, we have

q; M (1)


p∈V0
p

q = (m + 1)
a −1
q ⇒P6M (1)
 e0 = (m + 1) dim(V6)
(a −1) dim(V0) e6:
Varying 6 yields Proposition 3.5 for D. The proof of the remainder concerning QD is
similar to the above, and left to the reader.
We note that with the same argument as in [62, Proposition 1(8)], one can show the
following: if 0 = meanu(p) for some p ∈˝s, then P0M (1)
 P0 = (1−L)P0. However, this
and corresponding statements for multiple-spot mutation are not needed in the sequel.
3.3. Multiple-spot mutation
Let  ∈(0; (a −1)=a]. Multiple-spot mutation (see also [62, Section 2.1, p. 110]) is
de5ned as the following procedure:
1. For ˆ& = 1; : : : ; L do the next two steps:
2. Decide whether or not mutation takes place at spot ˆ& in the current population with
probability .
3. If mutation takes place at spot ˆ&, then change the current letter in the underlying
alphabet A in accordance with ˆm(1).
The following proposition collects the spectral information about the stochastic matrix
M (m)

describing multiple-spot mutation.
3.6. Proposition. Let M (m)

denote the symmetric; stochastic matrix acting on V˝
describing transition probabilities for entire populations under multiple-spot mutation.
We have
1: Let p; q ∈˝s. The coe6cients of M (m)

are as follows:
⟨q; M (m)

p⟩=


a −1
)(p;q)
(1 −)L−)(p;q) ¿ 0:
Thus e is; up to scalar multiples; the only eigenvector of M (m)

to eigenvalue 1.
Consequently; Pe is the spectral projection of M (m)

to eigenvalue 1.
2: M (m)

= 	L
ˆ&=1((1 −)1 +  ˆm(1)[ˆ&]).
3: sp(M (m)

) = {(1−a=(a−1))ˆ& : ˆ& ∈[0; L] ∩N0}. Consequently; M (m)

is C∗-positive
and is invertible; except for  = (a −1)=a. If  = (a −1)=a; then M (m)

= Pe.

L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
21
Note that the eigenvectors for M (m)

are suitable sums of orthogonal vectors of
the form L
ˆ&=1 zˆ&; where every zˆ& ∈B( ˆm(1)) is an eigenvector of ˆm(1).
4: ∥M (m)

∥r = 1 for r ∈[1; ∞].
5: M (m)

commutes with every ! ∈,s.
Proof. The coe6cients of M (m)

are immediate from the de5nition of multiple-spot mu-
tation in the 5rst paragraph of Section 3.3. The remainder of Proposition 3:6:1 follows
as
Proposition
3:3:6.
The
matrix
identity
Proposition
3:6:2
follows
from
Proposition 3:6:1 by checking the action of the matrices on populations. The description
of the spectrum Proposition 3:6:3 follows from Proposition 3:6:2 and the lower part of
identity (6). The statements in Proposition 3:6:3 about eigenvectors then follow from
the matrix-formula in Proposition 3:6:2. Proposition 3:6:4 follows as Proposition 3:3:4.
Proposition 3:6:5 is rather obvious.
The next result summarizes geometric properties of M (m)

in regard to being a con-
tractive map.
3.7. Proposition. Let M (m)

denote the doubly stochastic matrix describing multiple-
spot mutation.
1: M (m)

is a contracting map in the Euclidean norm on both e⊥and S with ;xed
points 0 and e; respectively. The contracting factor is given by 1 −a=(a −1).
2: If v ⊥e then

1 −
a
a −1
L
∥v∥26∥M (m)

v∥26

1 −
a
a −1

∥v∥2:
Similar to Proposition 3:4:2; this shows that convergence towards the ;xed points
0 on e⊥; or e on S stays controlled for small  in the sense that the ∥· ∥2-norm
of a vector orthogonal to e cannot shrink too much.
3: We have for the coe6cients of ergodicity (see identity (3))
#r(M (m)

)61 −
 a
a −1
L
for r = 1 or r = ∞:
Consequently; M (m)

is a contracting map both on e⊥and S in the Hamming norm
and the ∞-norm with contracting factor bounded above by 1 −(a=(a −1))L.
4: Let v ∈S. Let h = s=a. De;ne 9; :0; : ∈[0; 1] by
9 = 1 −

s
(a −1)s−1 + (1 −)s
‘
;
:0 =

s
(a −1)s−1 + (1 −)s
‘
−

s
(a −1)s−1 + (1 −)s
(‘−1)
·
s−1(1 −)
(a −1)s−1 + (1 −)s−1
a −1
+ (a −2)


a −1
s

22
L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
: =

s
(a −1)s−1 + (1 −)s
‘
−


a −1
L
a‘
(a −1)(1 −)

h‘
:
Then we have the following estimates:
9 + :0∥(1 −PU)v∥16∥(1 −PU)M (m)

v∥169 + :∥(1 −PU)v∥1:
Proof. Proposition 3:7:1 and Proposition 3:7:2 are immediate from spectral calculus
with the same arguments as in the proof of Proposition 3:4:1–2. By identity (4), we
have
#1(M (m)

)61 −
p∈˝s
min
q∈˝s{⟨q; M (m)

p⟩} = 1 −
p∈˝s


a −1
L
= 1 −
 a
a −1
L
:
Next, the inequality #∞(M (m)

)61 −(a=(a −1))L can be seen as follows: Let v ⊥e,
such that ∥v∥∞= 1, and #∞(M (m)

) = ∥M (m)

v∥∞. Such a vector exists by compactness
of e⊥∩Ball∞(V˝). We may assume W.L.O.G., that M (m)

v has a maximum modulus qth
component, which is strictly positive. Then we have
#∞(M (m)

) = ⟨q; M (m)

v⟩= 
p∈˝s
⟨q; M (m)

p⟩⟨p; v⟩
= 
p∈˝s

⟨q; M (m)

p⟩−


a −1
L
⟨p; v⟩
6 
p∈˝s

⟨q; M (m)

p⟩−


a −1
L
= 1 −
 a
a −1
L
:
This shows Proposition 3:7:3. Finally, let us prove Proposition 3:7:4.
Let p ∈˝s be uniform. In order to produce a uniform population from p, one selects
& spots to be changed in the 5rst creature of p, and then has to change s · & corre-
sponding spots in p. For the & spots in the 5rst creature, one has (a −1)& combined
choices for new letters. Thus, the probability of producing a uniform population from
p is given by
‘
&=0
 ‘
&

(a −1)&


a −1
s&
(1 −)s(‘−&) =

s
(a −1)s−1 + (1 −)s
‘
∈[0; 1]:
Let p ∈P be non-uniform. Suppose that exactly *$ of the s creatures in p have ˆa($)
as their 5rst letter, 06$6a −1. One then must change either s −*0, or s −*1, or
: : : s −*a−1 spots in order to make the 5rst letter in every creature agree. For this to
happen, we obtain the probability
a−1

$=0


a −1
s−*$
(1 −)*$ =


a −1
s a−1

$=0
(a −1)(1 −)

*$
¿


a −1
s
a
(a −1)(1 −)

h
= !u:
(10)

L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
23
It is an easy exercise in calculus using the gradient, and the Hessian with respect to
*1 : : : *a−1 to show the last inequality in identity (10). The probability of generating a
uniform population from p is bounded below by (!u)‘.
Let p ∈˝s be such that )(p; q) = 1 for some uniform q ∈˝s ∩U. Suppose W.L.O.G.,
that p and q diGer at the 5rst spot in the 5rst creature, and the letter in question in
p is ˆa(0), the letter in q is ˆa(1). Thus, disregarding the 5rst spot in creatures, both
p and q are uniform. If *$ is as above, then *0 = 1, *1 = s −1, and *$ = 0 for $¿2.
In this situation, the probability of producing a uniform population (not necessarily q)
from p is given by
s−1(1 −)
(a −1)s−1 + (1 −)s−1
a −1
+ (a −2)


a −1
s
·

s
(a −1)s−1 + (1 −)s
(‘−1)
:
(11)
For a number t ∈[1; ∞), and integers n; m ∈N, it is easy to show that tn+1+tm−1¿tn+
tm, if n¿m. Using the latter fact, a discussion of the left-hand side in identity (11)
– changing only two of the *$ by ±1 at one step – shows that identity (10) lists the
largest possible factors. Combining identities (10) and (11) yields Proposition 3:7:4
similar to the corresponding computation in the proof of Proposition 3:4:4.
We note that the statement in [62, p. 112, Proposition 4:4] contains a misprint. In
fact, the 5rst exponent ‘ (in the left portion of the inequality shown) should be replaced
by ‘ −1 corresponding to the exponent ‘ −1 in :0. The proof given in [62] is correct
showing ‘ −1.
Similar to Proposition 3:5, the following result is the key to handling multiple-spot
mutation combined with the crossover operation.
3.8. Proposition. We have M (m)

D ⊆D. Consequently; M (m)

PD = PDM (m)

PD = PDM (m)

.
The same statements hold; if D is replaced by QD.
Proof. The matrix M (1)
1=L describes changing exactly one spot in a population with
equal probability. Thus, the matrix describing changing exactly two spots is a linear
combination of 1 (corresponding to changing a letter back), M (1)
1=L (corresponding to
changing at the same spot twice, but not back), and (M (1)
1=L)2. Continuing this argument
by induction yields Proposition 3.8 from Proposition 3.5.
4. Applications of contraction properties of mutation
Suppose that T(t), t ∈N, is a sequence of stochastic matrices. Later, we shall set
T(t) = FtCK
(t) where Ft is a stochastic operator modeling 5tness selection, and C(t) is
an operator modeling crossover in a genetic algorithm. In this section, we are inter-
ested in contracting properties of an algorithm that can be modeled as Gt = T(t)M(t),
where M(t) is either single- or multiple-spot mutation. First, we shall investigate weak

24
L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
ergodicity of such an algorithm. Later, we shall investigate how such an algorithm
contracts towards uniform populations.
4.1. Weak ergodicity of genetic algorithms
The next theorem shows that the inhomogeneous Markov chain describing a genetic
algorithm using single-spot mutation is weakly ergodic under regular conditions such
as: (i) the crossover rate leaves a small chance for copying of any population, and (ii)
the 5tness selection reproduces a given population with a 5xed constant or su6ciently
slowly decreasing non-zero probability.
4.1. Theorem. Suppose that T(t); t ∈N; is a sequence of stochastic matrices such
that the diagonal of T(t) is bounded away from 0 for all t ∈N; i.e., for t ∈N there
exists c(t)¿0 such that ⟨p; T(t)p⟩¿c(t) for all p ∈˝s. Using single-spot mutation;
let Gt = T(t)M (1)
(t). Suppose that (t) ∈(0; (a −1)=(L(a −1) + 1)]; and
∞

t=0
L	
ˆ&=1
c(tL + ˆ&)(tL + ˆ&) = ∞:
Then the inhomogeneous Markov chain 	1
k=t Gk = Gt · Gt−1 · · · G1 is weakly ergodic.
Proof. We have =(a −1)61 −L. Since (M (1)
 )L is fully positive, the matrix
Xk =
L(k−1)+1
	
k′=kL
Gk′;
k ∈N, is fully positive with every coe6cient bounded below by
(a −1)−L
kL
	
k′=L(k−1)+1
c(k′)(k′):
As in the proof of Proposition 3:7:3, one shows using identity (4)
#1(Xk)61 −aL(a −1)−L
kL
	
k′=L(k−1)+1
c(k′)(k′):
Since the summation over the products is unbounded, we can use either [63, p. 137,
Theorem 4:8] or [35, p. 151, Theorem V:3:2] to complete the proof.
The following theorem generalizes a result by Suzuki [65, p. 60, Lemma 1, 66, p.
98, Lemma 1], and a result in [61, Section 3].
4.2. Theorem. Suppose that T(t); t ∈N; is a sequence of stochastic matrices. Using
multiple-spot mutation; let Gt = T(t)M (m)
(t); (t) ∈(0; (a −1)=a]. Suppose that
∞

t=1
(t)L = ∞;
Then the inhomogeneous Markov chain 	1
k=t Gk = Gt · Gt−1 · · · G1 is weakly ergodic.

L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
25
Proof. For the proof one combines either [63, p. 137, Theorem 4:8] or [35, p. 151,
Theorem V:3:2], and Proposition 3:7:3.
4.2. Contraction towards uniform populations
The following lemmas essentially show that the genetic algorithm asymptotically
spends most time in uniform populations for small mutation rates. We shall need these
technical results only for constant mutation rate  = (t). Assume in addition, that
T(t) is a sequence of stochastic matrices, which leave the linear span U ⊂V˝ over
uniform populations invariant, and otherwise contract towards U. In fact, the standard
crossover operations do not change the proportions of non-uniform probabilities vs.
uniform probabilities in a probability distribution over populations, i.e., an element in S.
As we shall see in Section 7, the 5tness operator usually contracts towards uniform
populations. As outlined in detail in [61, Section 5], the latter is in most cases true
with a 5xed contraction coe6cient ?¡1. We are interested in estimates, that describe
how products of the Gt as above shrink the non-uniform portion of a particular v ∈S.
4.3. Lemma. Let T(t); t ∈N; be a sequence of stochastic matrices; and ?(t) ∈[0; 1)
be such that
• T(t)PU = PU;
• ∥(1 −PU)T(t)v∥16?(t)∥(1 −PU)v∥1 for every v ∈S.
Let  ∈[0; L−1); and Gt = T(t)M (1)
 ; i.e., single-spot mutation is used; and by de;nition
M (1)
0
= 1. Then we have
1: ∥(1 −PU)Gtv∥16?(t)(L + (1 −L)∥(1 −PU)v∥1).
2: In addition; we have for t ∈N:
• ∥(1 −PU) 	1
k=t Gkv∥16∥(1 −PU)v∥1(1 −L)t 	t
k=1 ?(k) + L t−1
k=0(1 −L)k
· 	t
k′=t−k ?(k′)
• If ?(t) = ? ∈[0; 1); then this implies
∥(1 −PU) 	1
k=t Gkv∥16(1 −L)t?t∥(1 −PU)v∥1 + L?=(1 −(1 −L)?).
Proof. We have
T(t) = PU + T(t)(1 −PU) = PU + PUT(t)(1 −PU) + (1 −PU)T(t)(1 −PU):
Hence, (1 −PU)T(t) = (1 −PU)T(t)(1 −PU). Set 9 = L, and : = 1 −L. The ∥· ∥1-
inequality for T(t) and Proposition 3:4:4 imply
∥(1 −PU)Gtv∥16?(t)∥(1 −PU)M (1)
 v∥16?(t)(9 + :∥(1 −PU)v∥1):
This shows Lemma 4:3:1. Now we proceed by induction to obtain Lemma 4:3:2.
4.4. Lemma. Let 9 = 9() and : = :() are as in Proposition 3:7:4 for ¿0. Let
9(0) = 0; :(0) = 1; and M (m)
0
= 1. Let T(t); t ∈N; be a sequence of stochastic matrices;
and ?(t) ∈[0; 1) be such that
• T(t)PU = PU;
• ∥(1 −PU)T(t)v∥16?(t)∥(1 −PU)v∥1 for every v ∈S.

26
L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
Let  ∈[0; (a −1)=a]; and Gt = T(t)M (m)

; i.e., multiple-spot mutation is used. Then
we have
1: ∥(1 −PU)Gtv∥16?(t)(9 + :∥(1 −PU)v∥1).
2: In addition; we have for t ∈N:
• ∥(1 −PU) 	1
k=t Gkv∥16∥(1 −PU)v∥1:t 	t
k=1 ?(k) + 9 t−1
k=0 :k 	t
k′=t−k ?(k′)
• If ?(t) = ? ∈[0; 1); then this implies
∥(1 −PU) 	1
k=t Gkv∥16:t?t∥(1 −PU)v∥1 + 9?=(1 −:?).
Proof. Same as the proof of Lemma 4.3.
5. Crossover
We shall discuss two types of speci5c crossover operations in this section: (i) reg-
ular crossover which is probably the crossover operation mostly used in computer im-
plementations of genetic algorithms (see the books by Goldberg [25, p. 64], Mitchell
[48, p. 8], or Holland [33, p. 97]), and (ii) unrestricted crossover which mates randomly
chosen pairs in the population. Both crossover operations are discussed extensively in
[62, p. 113, Section 2.2]. Most results and proofs of [62, Section 2.2] carry over ver-
batim, and need not be repeated here. The main reason is that regular and unrestricted
crossover do not change letters in A probabilistically, but do change positions of
letters, a procedure which is not aGected by enlarging the underlying alphabet.
Note that the de5nition of elementary crossover operation given in [62, p. 113]
includes exchanging parents as creatures. This is included for mathematical conve-
nience, but is not an essential restriction. If the reader wants to exclude the exchange
of creatures as an elementary crossover operation, then he or she has to change the
de5nitions of Meanr and meanu given in Section 2.10, Hardy–Weinberg spaces given in
Section 2.11, and the diagonal spaces D and QD given in Section 2.12. However, the
results presented here in regard to convergence of genetic algorithms (see Section 8),
and the result of enhancement of mutation by crossover in Section 6.1 still remain
valid, if properly reformulated.
An elementary crossover operation 4 C(*0; *1; &), which exchanges “heads” of the
genome of two creatures at two 5xed locations *0; *1 ∈[1; s] ∩N in the population with
5xed cutpoint & ∈[1; ‘] ∩N, is (identi5ed with) a stochastic matrix which is its own
inverse. Thus, up to rearrangement of the basis ˝s of V˝, the matrix for C(*0; *1; &) is
a direct sum of a matrix 1 of proper dimension and Tip matrices f, and has spectrum
in {−1; 1}. (There are only more f’s now, and the size of 1 is larger than in the
binary alphabet case, cf. [62, p. 114, Lemma 5.1].) Thus, all arguments about spectra
of stochastic matrices, that model the crossover operations, remain exactly the same as
in [62].
4 We note that the version of crossover operation used here introduces an asymmetric linkage as de5ned
in Geiringer’s publication [20, p. 33] between loci (spots) in the genome. In fact, if the genes (letters) of
creatures in position & are swapped by crossover, then also the letters in the positions &′6& are exchanged.

L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
27
In addition to the above, we shall discuss generalized crossover as introduced in
[61, Section 4], a concept that includes both regular and unrestricted crossover. For the
purpose of obtaining convergence theorems, the de5nition of generalized crossover is
actually su6cient in many cases.
5.1. Generalized crossover
The important property of the crossover operation in regard to convergence of genetic
algorithms is that it leaves uniform populations invariant, i.e., the change from uniform
populations to non-uniform populations is driven solely by mutation. The following
de5nition leaves a lot of room for custom designed crossover operations.
An generalized crossover operation is a map  →C,  ∈[0; 1], into the set of sym-
metric stochastic matrices such that Cq = q for every uniform population q ∈˝s ∩U,
and  ∈[0; 1]. If the map  →C is continuous, then a generalized crossover operation
is called continuous.
Note that we do not require mutation and crossover to commute.
5.1.1. Summary of results
[61, Section 4:1]. If C,  ∈[0; 1], is the stochastic matrix associated with a gener-
alized crossover operation, then:
1. C PU = PU = (PU)∗= PUC
and
C (1 −PU) = C −PU = (1 −PU)C.
2.  →CK
 , K ∈N 5xed, is also a generalized crossover operation.
5.2. Regular crossover
Regular crossover or simple crossover is de5ned as in [25, p. 64], [48, p. 8], or
[33, p. 97] – see [62, p. 114]. The creatures in an even-size population are paired
sequentially. For every pair, it is decided with a certain probability  ∈[0; 1], the
crossover rate, whether crossover takes place. All cutpoints have equal probability
including cutpoint & = ‘ which corresponds to exchanging the positions of the parents
but leaving the parents unaltered. Denote by C(r)

the stochastic matrix corresponding
to this process.
5.2.1. Summary of results
We have the following results for C(r)

[62, p. 115, Proposition 7:1 & 4–7]:
1. If p ∈˝s, then ⟨p; C(r)
 p⟩¿(1 −)s=2.
2. C(r)

commutes with both mutation operators described in Section 3.
3. Up to rearrangement of the basis ˝s of V˝, the matrix C(r)

decomposes into a block
diagonal matrix with one block C(r)
;0 for every 0 = Meanr(p), p ∈˝s, i.e., C(r)
;0 acts
on
QV0.
4. If  ∈(0; 1), then for every 0 = Meanr(p), p ∈˝s, the block (C(r)
;0)‘ is fully positive.
Consequently, e Q0 is up to scalar multiples the only eigenvector to eigenvalue 1 of
C(r)
;0.
5. sp(C(r)
 ) ⊆[−1 + ˆ@; 1 −ˆ@] ∪{1}, where ˆ@ = ‘−s=2(1 −|1 −2|).

28
L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
5.2.2. Regular crossover in the multi-set model
We note that
/−1P,C(r)
 P,/ = /−1P,C(r)
 /
models the crossover operation for the multi-set model. In fact for a population p ∈˝s,
the expression P,p models equal probability for arbitrary arrangements of creatures
in p. C(r)

models applying the crossover procedure to sequentially paired creatures,
i.e., C(r)

pairs creatures at positions (1; 2); (3; 4); : : : ; (s −1; s) in the population. Thus,
C(r)
 P, models pairing creatures at arbitrarily chosen disjoint pairs of positions for
creatures in the population. Finally, P,C(r)
 P, models pairing creatures at arbitrarily
chosen disjoint pairs of positions in the population, and afterwards rearranging the
resulting population arbitrarily.
The relevant invariant subspaces of P,C(r)
 P, are the Hardy–Weinberg spaces V0,
0 = meanu(p), p ∈˝s. Thus up to rearrangement of the basis ˝s of V˝, the matrix
P,C(r)
 P, decomposes into a block diagonal matrix with one block (P,C(r)
 P,)0 for
every 0 = meanu(p), p ∈˝s, i.e., (P,C(r)
 P,)0 acts on V0.
5.1. Lemma. If  ∈(0; 1); then for every 0 = meanu(p); p ∈˝s; the block ((P,C(r)

P,)0)(s−1)‘ is fully positive. Consequently; e0 is up to scalar multiples the only eigen-
vector to eigenvalue 1 of (P,C(r)
 P,)0.
Proof. See a population as a ‘ × s matrix for a moment. Using at most s −1 trans-
positions (from left to right) for every spot & ∈[1; ‘] ∩N in creatures (from bottom
to top) allow to produce any population q ∈˝s from a population p ∈˝s satisfying
meanu(q) = meanu(p). For such p and q as above, let C(*; *′
; &), 16606(s−1)‘
be a sequence of elementary crossover operations needed to transform p into q, i.e.,
q =
0	
=1
C(*; *′
; &)p:
Any transposition ! = !*;*′
 ∈,s corresponding to C(*; *′
; &) can be written as ! =
˜!!1;2 ˜! for a suitable permutation ˜! = ˜!−1 ∈,s where !1;2 ∈,s denotes the transposi-
tion exchanging 1 and 2. Since ¡1, a regular crossover operation may only involve
swapping heads of the 5rst two creatures in a population at cutpoint &. Consequently,
P,C(r)
 P, = r · C(*; *′
; &) + T;
where r¿0, and T is a positive matrix for every 1660. Hence, ⟨q; (P,C(r)

P,)(s−1)‘p⟩¿0.
5.3. Unrestricted crossover
In unrestricted crossover, a single elementary crossover operation C(*0; *1; &) takes
place with probability  ∈[0; 1]. The probability for all triples (*0; *1; &) is the same.
Denote by C(u)

the stochastic matrix corresponding to this process.

L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
29
It is interesting to note that unrestricted crossover is related to a family of represen-
tations of ,s on V˝. This can be used eGectively to compute bounds for the spectrum,
c.f. [62, p. 118, Lemma 8].
5.3.1. Summary of results
We have the following results for C(u)

[62, p. 118, Proposition 9:1 & 4–7]:
1. If ¡1, then the diagonal of C(u)

is strictly positive with lower bound 1 −. If
s¿a, then the diagonal of C(u)

is strictly positive with lower bound independent
from the crossover rate .
2. C(u)

commutes with both mutation operators described in Section 3. C(u)

commutes
with every ! ∈,s. Thus, it commutes with P,.
3. Up to rearrangement of the basis ˝s of V˝, the matrix C(u)

decomposes into a block
diagonal matrix with one block C(u)
;0 for every 0 = meanu(p), p ∈˝s, i.e., C(u)
;0 acts
on V0.
4. For every 0 = meanu(p), p ∈˝s, the block (C(u)
;0)(s−1)‘ is fully positive. Conse-
quently, e0 is up to scalar multiples the only eigenvector to eigenvalue 1 of C(u)
;0.
5. sp(C(u)
 ) ⊆[1 −2 + ˆ@; 1 −ˆ@] ∪{1}; where ˆ@ = ‘−1(1 −@(s)):
Here, @(s) is the second largest eigenvalue of the operator
As = 2(s(s −1))−1 
!∈Ts
!;
in the left regular representation of ,s (see, e.g., Pedersen’s book [52, Chapter 7]),
and Ts ⊂,s is the set of all transpositions in ,s. An open conjecture is that
@(s) = (s−3)(s−1)−1, c.f. [62, p. 131]. It is not hard to show @(s)¿(s−3)(s−1)−1
representing ,s on Cs canonically, and using that no new eigenvalues can occur
in representations. (One obtains a matrix that looks like k1) + k2 ˆm(1).)
Proof. We note that if s¿a, then at least two creatures in a population have equal 5rst
letter. Hence, a suitably chosen elementary crossover operation leaves the population
invariant. This shows the second claim in Section 5:3:1:1. All other proofs are as in
[62], except the proof of Section 5:3:1:4. Section 5:3:1:4 is already established in the
proof of Lemma 5.1.
5.4. On Geiringer’s theorem
In this section, we shall derive an analogue of Geiringer’s theorem [20, p. 42,
Theorem III] for the two types of crossover considered in Sections 5:2:2 resp. in 5.3.
See also [72, p. 287, Theorem 3:9] for a related result. In fact, we shall establish the
result for ;nite populations using essentially only Lemma 5.1 resp. Section 5:3:1:4. The
result says that, in the mean, the distribution of creatures in a population subject to
iterated crossover “converges towards independence”, i.e., it converges to a canonical
product distribution.

30
L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
Fix an initial population p ∈˝s. Let 0 = (0&)‘
&=1 = meanu(p). For 16&6‘, let
0& =
a−1

$=0
0&;$ · ˆa($)
For every letter in A = { ˆa($) | 06$6a −1}, let
pr( ˆa($); &; p) = 0&;$:
(12)
denote the probability of 5nding ˆa($) in the &th spot in creatures of p.
5.2. Theorem. Let c = ( ˆa($1); : : : ; ˆa($‘)) ∈C; ˆa($&) ∈A; 16&6‘. Let C denote either
the crossover operation P,C(r)
 P, considered in Section 5:2:2; or let C denote C(u)

considered in Section 5:3. Then the probability of ;nding c
(1) in the sequence of populations resulting from iterated application of the cross-
over operation C to a ;xed; initial population p ∈˝s; or
(2) in a high generation under this procedure converges in the mean over repeated
applications of this procedure to
‘	
&=1
pr( ˆa($&); &; p);
where pr is de;ned in identity (12).
Proof. For ‘ = 1, 5nding a certain creature ( ˆa($1)), i.e., letter, in a population which
was subject to multiple crossover operations (swaps) equals the initial probability
pr( ˆa($1); 1; p) of 5nding it. We shall proceed now by induction over ‘ ∈N. Suppose,
that the result is true for ‘ −1.
Let p ∈˝s, and c = ( ˆa($1); : : : ; ˆa($‘)) ∈C be 5xed. We shall use that in accordance
with Lemma 5.1 resp. Section 5:3:1:4 in the limit, every population q ∈˝s such that
meanu(q) = 0 = meanu(p) has equal probability of occurrence. In addition, we shall use
[59, p. 10, Theorem 3:1] showing that the averaged iterates of the crossover operation
converge to the projection onto the 5xed point space. Let *′ = s·0‘;$‘ = s·pr( ˆa($‘); ‘; p),
and assume W.L.O.G., *′¿1. De5ne
˜c = ( ˆa($1); : : : ; ˆa($‘−1)):
For a population q = (d1; d2; : : : ; ds) ∈˝s, d* ∈C, 16*6s, let
˜q = ( ˜d1; ˜d2; : : : ; ˜ds):
Now de5ne n(*) to be the number of populations q ∈˝s such that meanu(q) = 0 =
meanu(p), and ˜c occurs * times in
˜q. Let N0 be the number of populations q ∈˝s
such that meanu(q) = 0 = meanu(p). By induction hypothesis, we have for the number
N ˜c of creatures d satisfying ˜d = ˜c in such populations
N ˜c =
s
*=1
* · n(*) = (sN0) ·
‘−1
	
&=1
pr( ˆa($&); &; p):
(13)

L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
31
For a moment, consider the case a = 2, i.e., binary alphabet, and ‘ = 2. In addition,
consider the following population:
p0 =

1
1
1
: : :
1
0
0
: : :
0
ˆa($1)
ˆa($2)
ˆa($3)
: : :
ˆa($*)
ˆa($*+1)
ˆa($*+2)
: : :
ˆa($s)

;
(14)
where the creatures are understood as the columns in the matrix shown in identity (14).
Suppose that meanu(p0) = s−1(*; *′). We shall determine the number N0 of creatures
c0 =

1
1

in this type of population. We claim that for *−= max{0; *′ −*}, and
*+ = min{*′ −1; s −*}
N0 =
*+

=*−
(*′ −) ·

*
*′ −

·
 s −*


= *′
s · * ·
 s
*′

:
(15)
Note that the number of creatures with 5rst component 1 in populations as in identity
(14) is given by * ·
 s
*′

. The fact, that N0 equals the middle sum in identity (15)) is
seen as follows: For every  = *−: : : *+, one can pick *′ − spots left of ˆa($*+1) in
p where to set ˆa($ ˜*) = 1, and one has to pick  spots right of ˆa($*) to maintain the
desired meanu(p0) = s−1(*; *′). In each case, this yields *′ − copies of c0. Using the
de5nition of binomial coe6cients, the latter equality in identity (15) is equivalent to
the following:
*+

=*−

* −1
*′ −1 −

·
 s −*


=
 s −1
*′ −1

:
The latter known identity is obtained by determining the coe6cient of x*′−1y s−*′ in
(x + y)*−1 · (x + y)s−* and (x + y)s−1.
In the case that a ¿ 2, i.e., non-binary alphabet, and ‘ = 2, we can use identity (15)
to obtain
N0 = *′
s · K · * ·
 s
*′

;
(16)
where K is a factor representing the possible arrangements of letters not equal to 1
in both rows of p0. In any case, the number of creatures being identical to c0 in
populations of type p0 is *′=s times the number of creatures containing 1 as 5rst
letter.
Now, we only have to reinterpret identity (16) to complete the proof of
Theorem 5.2. See the 1s in the 5rst row as copies of ˜c, and assume W.L.O.G., that
ˆa($‘) = 1. Considering the possible subsets of s −* creatures
˜d ̸= ˜c in the 5rst row,
identity (16) says that in order to compute the number Nc of copies of c in all pop-
ulations q ∈˝s such that meanu(q) = 0 = meanu(p), one has to multiply every term in
the middle of identity (13), i.e., in the sum, by *′=s. Hence, Nc = N ˜c · *′=s.

32
L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
6. The mutation-crossover proposal matrix
6.1. Contraction properties of combined mutation-crossover
The following result is – in the author’s opinion – the key result showing how
crossover enhances the mutation operation in the random generator phase of a genetic
algorithm. If v ∈S, then Pev = e. Now, let
v = e + d(v) + o(v);
where
d(v) = PD(1 −Pe)v = (PD −Pe)v = (1 −Pe)PDv
and consequently o(v) = (1 −PD)v
if unrestricted crossover is considered, and
d(v) = P QD(1 −Pe)v = (P QD −Pe)v = (1 −Pe)P QDv
and consequently o(v) = (1 −PQD)v;
if regular crossover is considered.
With the notation just de5ned, we have the following result:
6.1. Theorem. Let M denote either mutation operation considered in Section 3. If
M = M (1)
 ; then suppose ¡(a −1)=La. Let C denote either crossover operation con-
sidered in Section 5; and let ˆ@ be as in Section 5:2:1:5 for regular crossover; and
Section 5:3:1:5 for unrestricted crossover. Let v ∈S; and v′ = MCKv for K ∈N. Then
we have
1: d(v′) = Md(v); and o(v′) = MCKo(v).
2: ∥d(v′)∥26(1 −
a
a−1)∥d(v)∥2; and ∥o(v′)∥26(1 −
a
a−1)ˆ@K∥o(v)∥2.
Proof. In accordance with Proposition 3:3:3 and Proposition 3:6:3 the contracting factor
(the second largest eigenvalue) for M is 1 −a=(a −1). After noticing this fact, the
proof continues as the proof of [60, p. 119, Proposition 10].
Mutation-crossover is seen in some treatise as an operation which preserves and
collects schemata (see Holland’s book [33, Chapter 4]). Here, it is shown that crossover
accelerates the averaging processes by the mutation operation. Heuristically speaking,
the enhanced averaging property of mutation-crossover “spreads” out the covered search
space faster. Note that as a consequence of this proof, any vector in e⊥is shrunk by
MCK by at least a factor 1 −a=(a −1) in its ∥· ∥2-norm.
Many researchers have investigated the mutation-crossover matrix for regular cross-
over at the multi-set level (see, e.g., [14–16, 25, 29, 34, 50, 65, 66, 68–70]). Let us show
how one can derive spectral estimates with the methods presented here. Observe that
on the multi-set level, the contraction process described in Theorem 6:1 is actually

L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
33
accelerated in regard to crossover. Note that these bounds correspond up to a factor 1
2
to eigenvalues associated with the Vose–Liepins conjecture [36, p. 411].
6.2. Theorem. Let M0 = /−1M (m)

/ denote the stochastic matrix acting on W˝ de-
scribing multiple-spot mutation in the multi-set model for genetic algorithms. Let
C0 = /−1P,C(r)
 P,/ denote the stochastic matrix acting on W˝ describing the regu-
lar crossover operation in the multi-set model. Then we have;
1: sp(M0C0) ⊆sp(M (m)

P,C(r)
 P,).
2: |sp(M0C0)| ⊆[0; (1 −a=(a −1))2] ∪{1 −a=(a −1); 1}.
Proof. We 5rst note that by Proposition 3:6:5
M (m)

/ = M (m)

P,/ = P,M (m)

P,/
and
M0 = /−1P,M (m)

P,/ = /−1M (m)

/:
Let w0 ∈W˝ be an eigenvector to eigenvalue t of M0C0. Let w = P,w = /w0 ∈V˝. We
obtain
tw = P,/tw0 = P,/M0C0w0 = P,/M0/−1/C0/−1P,w = M (m)

P,C(r)
 P,w:
This shows Theorem 6:2:1.
Suppose W.L.O.G., that  ¡ (a −1)=a. For  = (a −1)=a; M0C0 models the random
restart of the algorithm and equals the projection /−1Pe/, where e = e˝s.
As in Lemma 2.1, we denote e = eA ∈V1 in the remainder of this proof (using the
de5nitions in the notation section for ‘ = s = 1). Let
x(z; ˆ&) = e ⊗e : : : ⊗e ⊗z ⊗e ⊗e : : : ⊗e:
where z ⊥e for ˆ& ∈[1; L] ∩N can be chosen from a −1 orthonormal base vectors
in B( ˆm(1)) ⊂V1, and z occurs at the ˆ&th tensor spot. It is easy to see that x(z; ˆ&) is a
non-zero eigenvector to eigenvalue 1 −a=(a −1) of M (m)

, and that every eigenvector
to this eigenvalue is a linear combination of orthogonal eigenvectors of this type. Using
Lemma 2.1.1, we see that P,x(z; ˆ&) ∈QD.
Note that M (m)

P,C(r)
 P, is a symmetric stochastic matrix, since M (m)

commutes
with both P, by Proposition 3:6:5 and C(r)

by Section 5:2:1:2.
Suppose that (1−a=(a−1))t¿(1−a=(a−1))2 is an eigenvalue of P,C(r)
 P,M (m)

,
where t¡1. Let y ∈V˝ be an eigenvector of P,C(r)
 P,M (m)

to eigenvalue (1 −a=
(a−1))t. Since M (m)

and P,C(r)
 P, commute, they have a joint spectral decomposition
by, e.g., [56, p. 306, Theorem 12:22], and y must be an eigenvector of both M (m)

and
P,C(r)
 P,. Thus, y must be a linear combination of orthogonal vectors of the form
x(z; ˆ&) as above. In addition, we must have
P,y = P,

1 −
a
a −1

t
−1
M (m)

P,C(r)
 P,y
=

1 −
a
a −1

t
−1
M (m)

P,C(r)
 P,y = y:

34
L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
Hence, y ∈QD. Since C(r)

acts identically on QD, we have M (m)

P,C(r)
 P,y = M (m)

y = (1
−a=(a −1))y, which yields a contradiction. The case of a negative eigenvalue with
modulus larger that (1 −a=(a −1))2 is treated similarly. This shows that the third
largest modulus of eigenvalues of M0C0 must be bounded by (1 −a=(a −1))2.
6.2. Convergent simulated annealing type algorithms
Simulated annealing is a well-established technique using a probabilistic algorithm
solve, e.g., large combinatorial optimization problems. It has been extensively studied
in the literature – see, e.g., [1, 10, 11, 21, 31, 46, 49]. In this section, we shall discuss
several convergent simulated annealing type algorithms generalizing previously pro-
posed algorithms by Mahfoud and Goldberg in [44, p. 304, 305], and in [62, p. 124,
Remark on simulated annealing], where variations of mutation-crossover are used as
generator matrix. What we consider here are diGerent algorithms than Boltzmann se-
lection as described in Michell’s book [48, pp. 168–169], and Goldberg’s publication
[24, p. 449]. Michell [48, pp. 168–169] seems to describe Boltzmann selection as a
genetic algorithm with exponentially rescaled 5tness function and proportional selec-
tion. (The expectation values for the newly selected creatures only depend upon the
current population.) Goldberg [24, p. 449] proposed a tournament selection mechanism
(see also Section 7.2) which is shown [24, Section 3] to have the usual steady-state
Boltzmann distribution over all possible creatures.
In general, a simulated annealing type algorithm supposes a function E : E →R
de5ned on a set E of states (candidate solutions). The goal of the algorithm is to
minimize E on the domain E. We shall call E the inverse ;tness function or energy
function. We shall set E = ˝s in the discussion below.
For temperature ? ∈R+∗, let A(?) be the matrix of acceptance probabilities describing
transition from the current state p ∈E in the course of the simulated annealing type
algorithm to newly generated (proposed) state q ∈E. By de5nition, A(?) is given by
⟨q; A(?)p⟩= 1
if E(q)6E(p)
and
⟨q; A(?)p⟩= exp(?−1(E(p) −E(q))) otherwise:
(17)
In addition to the above, a simulated annealing type algorithm requires a symmetric,
stochastic generator matrix or proposal matrix G (see, e.g., [1, p. 36], [49, p. 752]),
which determines the probability of proposed state q ∈E being generated from the
current state p ∈E in the course of the algorithm. Altogether, the simulated annealing
type algorithm consists of the following steps:
1. Initialize a state p ∈E. (t = 1).
2. Generate a new (proposed) state q ∈E from the current state p ∈E probabilistically,
where the probability of generating q from p is given by ⟨q; Gp⟩.

L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
35
3. Accept q as the new state with probability ⟨q; A(?(t))p⟩, t ∈N, where the cooling
schedule t →?(t) must be appropriately chosen (see the publication by Aarts and
van Laarhoven [1, pp. 40–41] for an overview of results on cooling schedules).
4. If a certain stopping criterion is satis5ed, then halt the algorithm. Otherwise, incre-
ment t ←t + 1, and proceed to step (2).
Suppose now, that there is a given 5tness function f : C →R+ de5ned on the
set of creatures C, which is supposed to be maximized. In [44, p. 305], Mahfoud and
Goldberg propose a regular simulated annealing algorithm with the following character-
istics: De5ne the energy E(p) = −s
*=1 f(c*) for a population p = (c1; c2; : : : ; cs) ∈˝s,
c* ∈C, 16*6s. In addition, use the following method to generate the proposed state
q ∈˝s for the next generation:
2(a) Randomly chose an index * ∈[1; s −1] ∩N, and a cutpoint & ∈[1; ‘] ∩N.
2(b) Apply the elementary crossover operation C(*; *+1; &) to the current population
p ∈˝s with crossover rate  ∈(0; 1).
2(c) Apply multiple spot mutation to the spots in c* and c*+1 with mutation rate
 ∈(0; (a −1)=a) to obtain q.
Let G2 = M (m)

·C(u)

be the product of multiple-spot mutation and unrestricted cross-
over in the case s = 2. Then G2 is a symmetric matrix by Section 5:3:1:2. The gen-
erator matrix associated with the algorithm proposed by Mahfoud and Goldberg in
[44, p. 305] is consequently given by
G = Pk
, ·

(s −1)−1 s−1

*=1
1 ⊗1 : : : ⊗1 ⊗G2 ⊗1 ⊗1 : : : ⊗1

· Pk
,
= Pk
, ·

(s −1)−1 s−1

*=1
G2[*]

· Pk
,;
(18)
where there are * −1 operators 1 to the left of G2, and s −* −1 operators 1 to the
right of G2 in a term in the sum for * = 1; : : : ; s−1. In addition, k = 1 if the population
is remixed randomly in every step, or represented as multiset, k = 0 otherwise. Identity
(18) shows that G is symmetric.
We note that Mahfoud and Goldberg [44] also propose a parallel algorithm with
creature-wise simulated annealing type acceptance scheme and mutation-crossover as
generator matrix on the population level. However, a proof of convergence for this
algorithm is not given in [44].
Generalizing [62, p. 124, Remark on simulated annealing] and some of the above,
we set for p = (c1; : : : ; cs) ∈˝s, c* ∈C, and 5xed r ∈[1; ∞]
E(p) = −||(f(c1); : : : ; f(cs))||r
(19)
to de5ne an energy function on populations. Using the Hamming or ‘1-norm, i.e., r = 1,
corresponds to a conservative approach where the 5tness of the population is averaged,
and the algorithm (slowly) seeks to improve the overall 5tness in the population.
Setting r¿1 corresponds to a more greedy strategy, where populations with one or
several above-average elements are favored. For large r, this resembles the strategy of

36
L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
messy genetic algorithms (see, e.g., publications by Deb, Goldberg and Korb [17, 28]):
creatures with large 5tness dominate the energy value of the population while creatures
with low 5tness can be considered as a “hidden” reservoir of promising genetic material.
If the energy of a population is de5ned as in identity (19), then we can use either
the Mahfoud–Goldberg generator matrix as in identity (18), or any of the six operators
of type G = M · C as a generator matrix, where M stands for single=multiple spot
mutation considered in Section 3, and C denotes either regular crossover P,C(r)
 P,,
or the unrestricted crossover operators C(u)

or C(u)
 P, considered in Section 5.
We note that the proof of convergence as described in [1, pp. 37–38] can be modi5ed
without much di6culty to allow for the following alternate of step (2) of the simulated
annealing type algorithm with mutation-crossover as generator mechanism:
2(a) Let 0¿0 be 5xed. If single-spot mutation is used, then chose at time t a mu-
tation rate (t) ∈[0; L−1 −0] ̸= ∅; otherwise, chose at time t a mutation rate
(t) ∈[0; (a −1)=a] ̸= ∅. Chose at time t a crossover rate (t) ∈[0; 0], 061.
Use a suitable continuous generalized crossover operation C which has strictly
positive diagonal entries for all  ∈[0; 0], and commutes with mutation. The
crossover operators mentioned in the last paragraph all satisfy these conditions for
suitable 0. Let the symmetric, generator matrix be given by G(t) = M(t) · C(t),
t ∈N.
2(b) Generate a new (proposed) state q ∈˝s from the current state p ∈˝s probabilis-
tically, where the probability of generating q from p is given by ⟨q; G(t)p⟩.
One shows weak ergodicity of the Markov chain underlying the algorithm by using
an appropriate monotone cooling schedule, the bounds on the coe6cients of the gen-
erator matrices imposed in (2.a) above, and [63, p. 137, Theorem 4:8] or [35, p. 151,
Theorem V:3:2]. Strong ergodicity then follows from [35, p. 160, Theorem V.4.3], for-
mula (5) in [1, p. 37, Theorem 1], and the monotonity of the cooling schedule which
allows to use the usual telescoping-sum argument for summability. Formula (5) in
[1, p. 37, Theorem 1] shows the steady-state distribution for an individual step of the
algorithm. In the limit t →∞, it also shows the convergence to optima. The algorithm
introduced above allows dynamic bursts of mutation-crossover rates. Bursts of mutation-
crossover rates in the generator matrix allow dynamic scaling of the “neighborhood”
of the current state, and thus allow acceleration of convergence of an algorithm should
the latter repeatedly return to a local minimum due to insu6cient “size” of the local
neighborhood of the current state.
7. Selection
Fitness selection in genetic algorithms models reproductive success of individuals or
creatures in their environment. In many computer applications, the selection pressure
is modeled in the following way: given a 5nite collection C of creatures in a model
“world”, a ;tness function f0 : C →R+ is de5ned which determines the chances of
survival for c ∈C in every step of the genetic algorithm. In our setting, C is the set

L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
37
of words of length ‘ over the alphabet A. A genetic algorithm becomes a function
optimizer, if the task is then to 5nd an element c ∈C such that f0(c) is maximal.
Implementations of genetic algorithms mostly use the 5tness selection strategies listed
next. See [61, Section 5] for a more detailed discussion.
7.1. Proportional ;tness selection for population-dependent ;tness functions
Proportional 5tness selection has probably been investigated the most as part of
genetic algorithms. See, e.g., [15, 16, 29, 57, 65, 66, 69], [62, Section 2.3]. We shall list
here only a few facts.
At the population level, the 5tness operator F(f0)
PFS (t), t ∈N, yields a new population
from the current population, based on a 5tness-proportional probability for each creature
to be reproduced in the next generation. Let p = (c1; c2; : : : ; cs) ∈˝s be an arbitrary
population, and suppose that a raw 5tness value f0(c*; p) ∈R+ is de5ned for every
creature c* in the population. Thus, we explicitly allow population-dependent 5tness
values of creatures.
Let ft(c*; p) = g(t; f0(c*; p)) ∈R+ be the (possibly) scaled 5tness value of creature
c* in p at step t of the genetic algorithm. We shall suppose that for every population
p ∈˝s and every t ∈N:
s
*=1
ft(c*; p) ¿ 0:
If this condition is violated, then rede5ne the 5tness function to be constant 1 in a
population where it was constant 0. For a population p = (c1; c2; : : : ; cs) ∈˝s consisting
of creatures c* ∈C, * ∈[1; s] ∩N, the probability that any given new creature in step
t + 1 is produced by literally copying c* is
ft(c*; p)
s
*′=1 ft(c*′; p):
(20)
From this, it is not hard to determine the associated stochastic matrix F(f0)
PFS (t) [62,
Proposition 11:1]: for p = (c1; c2; : : : ; cs) ∈˝s, c* ∈C, and q = (d1; d2; : : : ; ds) ∈˝s, d* ∈
C, * ∈[1; s] ∩N, let n(d*; p) denote the number of copies of d* in the population p.
The probability that q is generated from p by 5tness selection is given by
⟨q; F(f0)
PFS p⟩=
s	
*=1
n(d*; p) ft(d*; p)
s
*′=1 ft(c*′; p) :
(21)
As a consequence we obtain: let cmax ∈C be a creature of maximal 5tness in p, and
q = (cmax; : : : ; cmax) ∈˝s ∩U, then
⟨q; F(f0)
PFS (t)p⟩¿s−s =: 1 −?PFS:
A common choice for a 5tness scaling used with proportional 5tness selection is the
so-called power-law scaling [25, p. 124], [65, p. 65], [66, p. 100], where
ft(c; p) = (f0(c; p))g(t):
(22)

38
L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
We shall say that a power-law scaling is unbounded, if limt→∞g(t) = ∞. With the
above notation, we de5ne the stochastic matrix F(f0)
∞
as follows:
⟨q; F(f0)
∞p⟩= lim
t→∞
s	
*=1
n(d*; p) f0(d*; p)t
s
*′=1 f0(c*′; p)t :
(23)
For a 5tness function f0 where every population contains exactly one creature of
maximal 5tness (which can occur in multiple copies), one sees that F(f0)
∞p = q, where
q = (cmax; : : : ; cmax), and cmax ∈C is one of the identical creatures of maximal 5tness
in p. Otherwise, F(f0)
∞p is a probability distribution over populations with best creatures
in p depending upon the frequencies of those best creatures in p.
Mitchell [48, pp. 168–169] describes the so-called Boltzmann selection by a proba-
bility distribution for the current population in such a way that the method becomes an
exponentially rescaled proportional 5tness selection. See in particular the formula on
p. 169 in [48]. This is diGerent from Goldberg’s approach in [24, p. 449], which
amounts to a variation of tournament selection as described in Section 7.2. Goldberg
shows [24, Section 3] that the inhomogeneous Markov chain describing his algorithm
has the usual steady-state Boltzmann distribution over all possible creatures. Both ap-
proaches just mentioned are diGerent from the approach by Mahfoud and Goldberg in
[44, p. 304] as outlined in Section 6.2.
7.2. Tournament ;tness selection
Goldberg and Deb [27, p. 78] (see also [48, p. 170] 5 ) propose the following tour-
nament selection mechanism: Fix G ∈[0; 1
2). For * = 1; : : : ; s do:
1. Select two creatures c*1 and c*2, *1;2 ∈[1; s] ∩N, at random from the current popula-
tion p = (c1; : : : ; cs) ∈˝s. It is assumed that all creatures c1; : : : ; cs participate in this
random selection process in both rounds, i.e., a particular creature may be selected
twice.
2. If the selected creatures c*1 and c*2 have the same 5tness, then select one of them
with probability 1
2. Otherwise, set d* to the creature with lower 5tness value with
probability G, and to the creature with higher 5tness value with probability 1 −G.
Goldberg’s presentation [26] and Michalewicz’s book [47, p. 59] contain variations of
this procedure. Observe that this tournament 5tness selection mechanisms only depends
upon the rank of creatures, and not the actual 5tness values.
Let FTS(G) be the stochastic matrix acting on V˝ associated with the tournament
selection mechanism described above. Let p ∈˝s; cmax ∈C be a creature of maximal
5tness in p, and q = (cmax; : : : ; cmax) ∈˝s ∩U. It is easy to see that
⟨q; FTS(G)p⟩¿s−s =: 1 −?TS:
(24)
We shall call the tournament selection mechanism scaled, if G is varied in accordance
with a predetermined schedule (Gt)t∈N during the genetic algorithm.
5 The author thanks the anonymous referee A for pointing out that the tournament selection mechanism
described here is apparently due to Goldberg and Deb, and not Mitchell as assumed in [61].

L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
39
7.3. Rank selection
Baker [6] proposed to use only the 5tness ranking of individuals in determin-
ing 5tness selection probabilities, i.e., given a 5tness function f(c*; p) ∈R for every
p = (c1; c2; : : : ; cs) ∈˝s, de5ne
f0(c*; p) = card({c*1 : *1 ∈[1; s] ∩N; f(c*1; p)6f(c*; p)}):
(25)
Creatures are selected for the next step of the genetic algorithm, e.g., by scaled or
unscaled proportional 5tness selection as in Section 7.1 using f0. See also Mitchell’s
book [48, p. 170] for genetic algorithms whose 5tness selection schemes use rank.
7.4. Generalized ;tness selection scaling
All the de5nitions given in Sections 7.1–7.3 and such procedures as linear ;tness
scaling [25, p. 77], and sigma-truncation [25, p. 124] can be summarized in the fol-
lowing de5nition, which extends a de5nition given in [61, Section 5:1].
7.1. De+nition. A generalized ;tness selection scaling is a map t →Ft; t ∈N, into the
set of stochastic matrices, such that
1. FtPU = PU for every t ∈N, i.e., Ft leaves uniform populations invariant.
2. There exist disjoint subsets ˝I
s and ˝II
s of ˝s such that ˝s ∩U ⊂˝I
s, and ˝I
s ∪˝II
s
= ˝s, and the conditions in the next section are satis5ed where W = spanC(˝
s );
 = I,II.
3. We have for some 5xed H ∈N; ?t ∈[0; 1], and every v ∈S; t ∈N:
• PWIFtPWI = FtPWI; i.e. Ft maps WI into WI.
• PWI(	t
k=H+t Fk)PWIIv = (	t
k=H+t Fk)PWIIv; i.e., after H+1 stages of “development”
all populations end up in ˝I
s.
• ∥(1 −PU)FtPWIv∥16?t ∥(1 −PU)PWIv∥1; i.e., (1 −PU)Ft is a contracting map
on (1 −PU)WI. We shall assume that ?t is chosen minimal.
• lim inf t→∞?t =: ?¡1; i.e., this assures that the combined shrinking by products
of all Ft transports everything into U ∩˝s.
A generalized 5tness scaling shall be called a strong ;tness scaling, if ˝II
s = ∅, and if
a raw 5tness function f0 is given such that
lim
t→∞Ft = F(f0)
∞;
(26)
where F(f0)
∞
is de5ned as in identity (23). In that case, we have
? = lim
t→∞?t = lim
t→∞max{∥(1 −PU)Ftv∥1 : v ∈S; ∥(1 −PU)v∥1 = 1}
= max{∥(1 −PU)F(f0)
∞v∥1 : v ∈S; ∥(1 −PU)v∥1 = 1};
since identity (26) implies=means convergence in the ∥· ∥1 operator norm (see
[59, p. 5, formula 5]). The prime example for a strong 5tness scaling is unbounded
power-law scaling – see identity (22).

40
L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
Several examples for generalized 5tness selection can be found in [61, Section 5:1].
Let us include two additional examples. For various examples of frequency-dependent
selection see also the publication by Sigmund [64].
7.2. Example. Given a 5tness function f(c*; p) ∈R for every p = (c1; c2; : : : ; cs) ∈˝s,
de5ne
f0(c*; p) = f(c*; p) −min{f(c*1; p) : *1 ∈[1; s] ∩N}
and reset f0(c*; p) = 1, if f is constant on the population. Let pt ∈˝s be the current
population in the genetic algorithm after step t. Let ˜pt+1 be the current population in
the genetic algorithm after mutation and crossover for step t + 1. If ˜pt+1 ∈˝s\U, then
use scaled or unscaled proportional 5tness selection based upon f0 to determine pt+1
from ˜pt+1. In the setting of Example 7.2, ˝I
s = ˝s, and ?t6?F = 1 −s−s.
7.3. Example. Suppose, a 5tness function f(c*; p) ∈R is de5ned for every p =
(c1; c2; : : : ; cs) ∈˝s. Let pt ∈˝s be the current population in the genetic algorithm after
step t. Let ˜pt+1 be the current population in the genetic algorithm after mutation and
crossover for step t + 1.
• If ˜pt+1 ∈˝s\U is of non-uniform 5tness, then eliminate one of the randomly selected
creatures in ˜pt+1 with lowest 5tness value, and replace it by a randomly selected
creature with highest 5tness value.
• If ˜pt+1 ∈˝s\U is of uniform 5tness, then select the creatures in the new population
pt+1 at all positions randomly from creatures in ˜pt+1.
In the setting of Example 7.3, ˝I
s is the set of populations of uniform 5tness, ?t6?FF
= 1 −s−s, and H = s −2. (FF stands for “forget fast”.) Similar to [61, Lemma 5:1–2],
we have the following two results.
7.4. Lemma. Let t →Ft; t ∈N; be a generalized ;tness selection scaling. Then we
have
1: (1 −PU)Ft = (1 −PU)Ft(1 −PU):
2: For every k ∈N; there exists k0 ∈[0; k −1] ∩N0 such that ∞
t = 0(1 −?tk+k0) = ∞.
Proof. We have (1−PU)Ft(1−PU) = (1−PU)Ft −(1−PU)FtPU = (1−PU)Ft −(1−
PU)PU = (1−PU)Ft: By hypotheses, lim inf t→∞?t¡1, which yields ∞
t = 0(1−?t) = ∞:
Partitioning this sum of positive terms yields Lemma 7:4:2.
7.5. Lemma. Let t →Ft; t ∈N; be a generalized ;tness selection scaling with associ-
ated ?t ∈[0; 1] and H ∈N. Then we have.

(1 −PU)
1	
k=t
Fkv


1
6
H+2
	
k=t
?k

∥(1 −PU)v∥1
for every v ∈S; and every t ∈N such that t¿H + 1.

L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
41
Proof. Using PWIFkPWIv = FkPWIv; we have by the ∥· ∥1-inequality for Ft:

(1 −PU)
H+2
	
k=t
Fk

PW1v


1
6
H+2
	
k=t
?k

||(1 −PU)PW1v||1
for t ∈N. Using Lemma 7:4:1, we have for t¿H + 1:

(1 −PU)
H+2
	
k=t
Fk
 
1	
k=H+1
Fk

v


1
6

t	
k=H+2
?k
 
(1 −PU)PW1
1	
k=H+1
Fkv


1
=
H+2
	
k=t
?k
 
(1 −PU)FH+1(1 −PU)
1	
k=H
Fkv


1
6 · · · 6
H+2
	
k=t
?k

∥(1 −PU)v∥1:
since 1 −PU is a diagonal matrix, and ∥Fk∥1 = 1 (see [59, p. 5, formula (5)]).
7.5. A short note on the eGect of genetic drift
Genetic drift, well known from treatises on evolutionary genetics (see, e.g., the
books by Maynard–Smith [45], Crow and Kimura [12], Roughgarden [55]), refers to
the phenomenon that populations not subject to mutation tend to become uniform, i.e.,
over the generations an increasing number of creatures (individuals) in the population
become genetically identical. See also the paper by Goldberg and Segrest [29, p. 3].
A number of authors have used genetic algorithms with very low mutation rate or
zero mutation rate obtaining seemingly good results. The convergence of such algo-
rithms to (local) optima can be understood as an instance of genetic drift combined
with the averaging property of C(r)

and C(u)

on Hardy–Weinberg spaces (cf., 2.11,
and Sections 5:2:1:4, 5:3:1:4). We point out that this process is non-ergodic in nature,
i.e., the limit population strongly depends upon the initial population in general. Note
that Banzhaf et al. [7] report enhanced performance of genetic algorithms using higher
mutation rates.
Since we have extended the de5nition of generalized 5tness selection scaling, we dis-
cuss shortly genetic drift for a genetic algorithm with 5tness selection but without mu-
tation. In fact, the results in [61, Section 6] remain valid. The proofs in [61, Section 6]
actually carry through almost verbatim and are only indicated here.
Consider a generalized crossover operation  →C;  ∈[0; 1], and a generalized 5t-
ness selection scaling Ft; t ∈N as de5ned in Sections 5.1 and 7.4 respectively. Set
Ht = 	1
k=t FkC(k). Then we have
• If ˝I
s = ˝s, and ˝II
s = ∅in the de5nition of generalized 5tness selection scaling
De5nition 7:1:2, then applying Lemma 4:3:2 or 4:4:2 for mutation rate  = 0;

42
L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
t ∈N, yields:
lim
t→∞∥(1 −PU)Htv0∥1 = 0
(27)
since 	∞
t=1 ?t = 0 by De5nition 7:1:3.
• Now consider the case with ˝II
s ̸= ∅. Suppose that 0 ∈[0; 1] and J ∈(0; 1] exist
such that C −J1 is a matrix with positive entries for  ∈[0; 0]. This condition
can be satis5ed for simple crossover for every 0 ∈[0; 1) by Section 5:2:1:1, and for
unrestricted crossover for every 0 ∈[0; 1) or s¿a and 0 = 1 by Section 5:3:1:1.
Suppose now, that (t) ∈[0; 0] for every t ∈N. Then, also identity (27) holds.
Proof. The property of a positive diagonal of the C(t) shows that (1−PU) 	t
k=t+H+1 Fk
C(k) is a contracting map for t ∈N similar to the proof of Lemma 7:5 with contracting
factor 1 −(1 −?t+H+2)JH+2. Now, Lemma 7:4:2 shows the claim.
Both cases considered show the phenomenon of genetic drift in a very general set-
ting: we impose no requirement on convergence of the crossover operators or 5tness
selection operators themselves. If one wants to remove the condition (t) ∈[0; 0] on
the crossover rates (t) in the second case, then one has to analyze the interplay of the
crossover operators C(t) with the sets ˝I
s and ˝II
s. As in [61, Section 6], it is easy to
show that the average convergence time is 5nite for this type of process or algorithm.
8. Ergodic behavior of genetic algorithms
In the following section, we shall derive ergodic-type theorems for (scaled) genetic
algorithms. Ergodic-type theorems describe the asymptotic behavior of inhomogeneous
Markov chains associated with probabilistic algorithms such as scaled genetic algo-
rithms. Such an analysis is important: the short-term behavior of a probabilistic al-
gorithm is determined by the interplay random generator phase vs. selection – the
long-term, i.e., asymptotic behavior, may or may not indicate that the algorithm is
properly designed to, e.g., 5nd global maxima of an optimization problem. As Aarts
and van Laarhoven point out for the simulated annealing algorithm [1, p. 49, 5rst •]:
“The algorithm has a potential for 5nding high-quality solutions; the required amount of
computation time to realize this potential is usually quite large”. Theoretical analysis of
genetic algorithms is in many cases devoted to the study of asymptotic behavior. In that
regard, we point out the work of Aytug and Koehler [5] (approximation of the steady-
state distribution), Davies [14], Davies and Principe [15, 16] (asymptotic behavior for
annealing the mutation rate in a genetic algorithm to zero), Goldberg [24] (asymptotic
behavior for Boltzmann tournament selection), Leung et al. [42, p. 19] (asymptotic ap-
proximation of the steady-state distribution), Mahfoud [43, p. 157] (asymptotic behavior
for Boltzmann tournament selection), Mahfoud and Goldberg [44] (asymptotic behavior
for parallel recombinative simulated annealing), Nix and Vose [50, Section 4] (asymp-
totics of the simple genetic algorithm), Poli and Langdon [54] (asymptotic behavior of

L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
43
schemata), Rodolph [57] (asymptotic behavior for the simple genetic algorithm), and
Vose [69] (asymptotic behavior for the simple genetic algorithm).
In the 5rst part of this section, we shall establish strong ergodicity for (inhomo-
geneous) Markov chains associated with scaled genetic algorithms, if all three opera-
tors converge separately, and the mutation rate converges to a strictly positive value.
This establishes such methods using, e.g., linear 5tness scaling [25, p. 77], or sigma-
truncation [25, p. 124] as genuine experiments with probabilistic but non-arbitrary
outcome. It is also relevant in that regard that these results cover the case of the
simple genetic algorithm. However, Theorems 8.1 and 8.2 show that such algorithms
do not converge to a probability distribution over populations containing only optimal
solutions.
Next, we deal with the case, where still the mutation rate converges to a strictly
positive value, but in addition the 5tness scaling is a so-called strong 5tness scaling,
cf., [62, p. 123] or Section 7.4 identity (26), and the raw 5tness function f0 is such
that every population contains exactly one creature with maximal 5tness (which may
occur multiple times). This is in particular the case for a population independent raw
5tness function which is an injective functions on creatures. As outlined in [62, p. 121],
the latter is a minor restriction, if genetic algorithms are considered for the purpose of
function optimization. The idea behind loosening the requirement that the raw 5tness
function is injective on creatures, is population-dependent rank f0 as in identity (25)
based upon an injective 5tness function f on creatures. The prime example for a
strong 5tness scaling is unbounded power-law scaling – see Section 7.1 in particular
identity (22). In that case, Theorem 8.3 is remarkable in regard to use of the crossover
operation: the limit probability distribution over populations is independent even of
the crossover method as long as it commutes with mutation. We shall also show that
for such scalings the limit probability distribution is independent of the strong 5tness
scaling, i.e., both the method used, and any schedule used.
The second part of this section deals with the case that the mutation rate converges
monotonously to 0 but slowly enough to assure weak ergodicity of the inhomogeneous
Markov chain describing the genetic algorithm. In addition, we shall, essentially, as-
sume a power-law 5tness scalings which is subject to convergence conditions (see
Theorem 8.5, identity (31), and Theorem 8.6, identities (34) and (35)), and a raw
5tness function f0 which is population-independent and injective on creatures, or
population-dependent rank based upon an injective function on creatures, and that mu-
tation and crossover commute. The results are quite striking.
If a certain “integrable” convergence condition is satis5ed such that the selection
pressure increases fast, then there is essentially no other restriction on the crossover op-
eration, and the algorithm asymptotically behaves as the following take-the-best search
algorithm: (1) mutate in every step with rate decreasing to zero, and (2) map any
population to the uniform population with the best creature. The take-the-best search
algorithm is investigated, and its convergence is shown. Depending upon population-
size, the take-the-best search algorithm does or does not converge to the optimal
solution.

44
L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
If populations size s is larger than the length of the genome of creatures ‘ and a
certain logarithmic convergence condition is satis5ed such that the selection pressure
increases slowly but su6ciently fast, then the algorithm asymptotically converges to
the optimal solution.
Note that most of our results apply to types of 5tness selection mechanisms where
the 5tness of the individual also depends on the ambient population (see Exam-
ples 7:2, 7:3 and 2 and 3 in [61, Section 5.1]. Note in addition, that we strengthen
the results in [61, 62] in that single-spot mutation is incorporated in the results, and
in
that
we
show
that
the
crossover
operation
is
almost
arbitrary
in
some
cases.
8.1. Non-zero limit mutation rate
We treat the cases of single-spot mutation and multiple-spot mutation separately. The
theorem concerning single-spot mutation requires a rather strong technical condition,
which is however satis5ed for the simple genetic algorithm with most 5tness selection
schemes including scaled tournament 5tness selection (see [27, p. 78], [48, p. 170])
and discussed in Section 7.2.
8.1. Theorem. Consider the following hypotheses:
• Let M (1)
 ;  ∈(0; L−1); describe single-spot mutation. Let (t) ∈(0; L−1); t ∈N; be
such that limt→∞(t) = ∞∈(0; L−1) exists.
• Let C;  ∈[0; 1]; be a continuous generalized crossover operation as de;ned in
Section 5:1. Let (t) ∈[0; 1] be such that limt→∞(t) = ∞exists. Suppose that
C∞−J1 is a matrix with positive entries for some J ∈(0; 1]. This condition can
be satis;ed for simple crossover for ∞∈[0; 1) by Section 5:2:1:1; and is satis;ed
for unrestricted crossover by Section 5:3:1:1 either for ∞∈[0; 1) or s¿a.
• Let
Ft;
t ∈N;
be
a
generalized
;tness
selection
scaling
as
de;ned
in
Section 7:4 with associated ?t ∈[0; 1]; ? ∈[0; 1) and H ∈N. Suppose that limt→∞
Ft = F∞exists such that F∞has a fully positive diagonal. (The latter implies that
˝II
s = ∅:)
This technical and rather strong condition assures a strongly ergodic Markov chain
with fully positive matrices, and a fully positive limit matrix. It is satis5ed for most
simple genetic algorithms using scaled tournament 5tness selection in the sense of
[27, p. 78], [48, p. 170], or bounded power-law scaling as discussed in Section 7.1. It
is not satis5ed for unbounded power-law scaling.
Let Gt = Ft C(t)) M (1)
(t). Then we have:
1. If v0 ∈S is the initial probability distribution over populations for the scaled genetic
algorithm, then
v∞= lim
t→∞
1	
k=t
Gkv0 = lim
t→∞(F∞C∞M (1)
∞)tv0

L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
45
exists and is independent of v0 ∈S. In fact, the inhomogeneous Markov chain as-
sociated with the scaled genetic algorithm is strongly ergodic.
2. The limit probability distribution v∞is fully positive. Hence, the algorithm does
not converge to a probability distribution over populations containing only optimal
solutions.
3. ˝s = ˝I
s for ˝I
s as in the de5nition of generalized 5tness selection scaling in
Section 7:4:1, and we have:
∥(1 −PU)v∞∥16?
L∞
1 −?(1 −L∞):
Proof. For the proof of Theorem 8:1:1, we may assume W.L.O.G., that every matrix C(t),
and Ft, t ∈N has a fully positive diagonal. Let H t1
t = 	t1
k=t Fk C(k)M (1)
(k); t1; t ∈N; t1
6t. Using [62, Theorem 16] or Gidas’ theorem [22, Theorem 1:1], we see that H t0+1
tM+t0
is strongly ergodic in t ∈N, for every 5xed t0; M ∈N0; L6M. Now 5x t0, and a
prime number n¿L. Then Ln−1 ˙= 1 (mod n) by [67, p. 131]. Hence,
(n −1)t0L(n−1)k + t0 ˙=nt0 ˙=0 (mod n)
and
nLk ˙=0 (mod n):
(28)
Consequently, we have
lim
t→∞(H 1
tL+t0v0 −H 1
tLv0) = 0;
since both terms in the diGerence converge separately, and both sequences (tL + t0)t∈N
and (tL)t∈N contain a respective subsequence which is, at the same time, a subsequence
of n · N by the above identities in (28). Hence,
v∞= lim
t→∞
1	
k=t
Gkv0 = lim
t→∞(F∞C∞M (1)
∞)Ltv0 = lim
t→∞(F∞C∞M (1)
∞)tv0
exists, and is independent of v0 ∈S. To prove Theorem 8:1:2, we observe that
(F∞C∞M (1)
∞)L
is a fully positive matrix. To obtain Theorem 8:1:3, we apply Lemma 4:3:2 to constant
matrices T(t) = F∞C∞, and  = ∞.
The result corresponding to Theorem 8.1 for multiple-spot mutation is actually much
stronger since the fact that the multiple-spot mutation matrix is fully positive allows
to lessen the requirements for the 5tness scaling.
8.2. Theorem. Consider the following hypotheses:
• Let M (m)

;  ∈(0; (a −1)=a]; describe multiple-spot mutation. Let (t) ∈(0; (a −
1)=a];
t ∈N; be such that limt→∞(t) = ∞¿0 exists. Let 9 = 9(∞) and
: = :(∞) be given as in Proposition 3:7:4 for  = ∞.
• Let C;  ∈[0; 1]; be a continuous generalized crossover operation as de;ned in
Section 5:1 Let (t) ∈[0; 1] be such that limt→∞(t) = ∞exists.

46
L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
• Let Ft; t ∈N; be a generalized ;tness selection scaling as de;ned in Section 7:4 with
associated ?t ∈[0; 1]; ? ∈[0; 1) and H ∈N. Suppose that limt→∞Ft = F∞exists.
Let Gt = Ft C(t))M (m)
(t). Then we have:
1. If v0 ∈S is the initial probability distribution over populations for the scaled genetic
algorithm, then we have
v∞= lim
t→∞
1	
k=t
Gkv0 = lim
t→∞(F∞C∞M (m)
∞)tv0
exists and is independent of v0 ∈S. In fact, the inhomogeneous Markov chain as-
sociated with the scaled genetic algorithm is strongly ergodic.
2. If the 5tness selection scaling Ft, t ∈N, stands for scaled proportional 5tness selec-
tion, tournament 5tness selection in the sense of [27, p. 78], [48, p. 170], [26], or
[47, p. 59] as discussed in Section 7.2, or rank selection combined with (scaled) pro-
portional 5tness selection as discussed in Section 7.3, then the coe6cients ⟨v∞; p⟩
of the limit probability distribution are strictly positive for every population p ∈˝s
of uniform 5tness. In particular, for a non-constant 5tness function, the genetic al-
gorithm Gt, t ∈N, does not converge to a population consisting solely of creatures
with maximal 5tness value.
3. If ˝s = ˝I
s for ˝I
s as in the de5nition of generalized 5tness selection scaling in
Section 7.1, then we have
∥(1 −PU)v∞∥16?
9
1 −?::
4. Suppose that C∞−J1 is a matrix with positive entries for some J ∈(0; 1]. This
condition can be satis5ed for simple crossover for ∞∈[0; 1) by Section 5:2:1:1,
and is satis5ed for unrestricted crossover by Section 5:3:1:1 either for ∞∈[0; 1)
or s¿a. If ˝s = ˝I
s ∪˝II
s, and ˝II
s ̸= ∅(see Section 7.1), then we have
∥(1 −PU)v∞∥16
1 −(1 −∞)L(H+2)
1 −(1 −∞)L(H+2)(1 −JH+2(1 −?)):
Proof. The proof of Theorem 8:2:1 is omitted as it is very similar to the proof in [62,
pp. 128–129, Theorem 17], or the proof of Theorem 8.1. Let us turn to the proof of
Theorem 8:2:2:
Let f0 be the given raw 5tness function. In the case of scaled proportional 5tness se-
lection, let p ∈˝s be a population of uniform 5tness, i.e., p = (c1; c2; : : : ; cs); c1; : : : ; cs ∈
C, and f0(c1; p) = f0(c2; p) = · · · = f0(cs; p). We have
v∞= F∞C∞M (m)
∞v∞:
(29)
Consider the p-component of C∞M (m)
∞v∞. Using that C∞is self-adjoint, we obtain
⟨p; C∞M (m)
∞v∞⟩= ⟨M (m)
∞C∞p; v∞⟩¿ 0:
(30)

L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
47
Identities (30), (29), and (20) imply ⟨p; v∞⟩¿0. This includes the case of rank se-
lection combined with (scaled) proportional 5tness selection. In the case of (scaled)
tournament 5tness selection following [27, 26, 47, 48], we have ⟨v∞; p⟩¿0 by combin-
ing (30), (29), and an argument similar to showing identity (24). This completes the
proof of Theorem 8:2:2. To obtain Theorem 8:2:3, we apply Lemma 4:4:2. To show
Theorem 8:2:4, we observe that
M (1)
∞= (1 −∞)L1 + R;
where ∥R∥1 = 1 −(1 −∞)L by [59, p. 5, formula (7′)]. Using Lemma 7:5, we have
∥(1 −PU)v∞∥1 = ∥(1 −PU)F∞C∞M (1)
∞v∞∥1
= (1 −∞)L∥(1 −PU)F∞C∞v∞∥1 + ∥(1 −PU)F∞C∞Rv∞∥1
6(1 −∞)L∥(1 −PU)(F∞C∞)2M (1)
∞v∞∥1 + 1 −(1 −∞)L
6(1 −∞)2L∥(1 −PU)(F∞C∞)3M (1)
∞v∞∥1
+(1 −∞)L(1 −(1 −∞)L) + 1 −(1 −∞)L
6(1 −∞)(H+2)L∥(1 −PU)(F∞C∞)H+2v∞∥1 + 1 −(1 −∞)(H+2)L
= (1 −∞)(H+2)L∥(1 −PU)(F∞(J1 + C(0)))H+2v∞∥1 + 1 −(1 −∞)(H+2)L
6(1 −∞)(H+2)L(∥(1 −PU)JF∞(F∞(J1 + C(0)))H+1v∞∥1
+(1 −J)∥(1 −PU)(F∞(J1 + C(0)))H+1v∞∥1) + 1 −(1 −∞)(H+2)L
6(1 −∞)(H+2)L(JH+2? + (1 −JH+2))∥(1 −PU)v∞∥1 + 1 −(1 −∞)(H+2)L;
where C(0) = C∞−J1, and ∥C(0)∥1 = 1 −J. Now, Theorem 8:2:4 is obtained with the
geometric series type argument as in the proof of Lemma 4:3:2.
The estimates given in Theorem 8:2:4 are slightly better than the estimates given in
[61, Theorem 7:4(2)]. The proof of [61, Theorem 7:4(2)] contains a misprint. In fact,
the above arguments explicitly show that it is not necessary to assume that mutation
and crossover commute.
The following theorem strengthens [62, Theorem 17] considerably. In fact, it shows
for some regular genetic algorithm applications that the outcome of the genetic algo-
rithm for positive limit mutation rate is, asymptotically, independent from any crossover
procedure or crossover scaling schedule.
8.3. Theorem. Consider the following hypotheses:
• Let
M (m)

;
 ∈(0; (a −1)=a];
describe
multiple-spot
mutation.
Let
(t) ∈
(0; (a −1)=a]; t ∈N; be such that limt→∞(t) = ∞¿0 exists. Let 9 = 9(∞) and
: = :(∞) be given as in Proposition 3:7:4 for  = ∞.

48
L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
• Let C;  ∈[0; 1]; be a continuous generalized crossover operation as de;ned in
Section 5:1. Let (t) ∈[0; 1] be such that limt→∞(t) = ∞exists.
• Let Ft; t ∈N; be a strong generalized ;tness selection scaling as de;ned in
Section 7:4 with associated ?t ∈[0; 1]; and ? ∈[0; 1). By de;nition; limt→∞Ft =
F(f0)
∞; where F(f0)
∞
is as in Section 7:2 identity (23) for a given possibly population-
dependent raw ;tness function f0. This is the situation for proportional ;tness
selection and unbounded power-law scaling.
Let Gt = FtC(t))M (m)
(t). Then we have:
1. The limit distribution v∞of the inhomogeneous Markov chain associated with the
genetic algorithm is independent of the method of 5tness scaling. In particular for
power-law scaling, the limit distribution v∞is independent of the scaling schedule.
2. If the raw 5tness function f0 is independent of the population and is (globally)
injective on creatures, then v∞only depends upon rank induced by f0, and not the
particular values of f0.
3. If the raw 5tness function f0 is such that every population contains exactly one
creature with maximal 5tness (which may occur multiple times), and if mutation
commutes with crossover, then the conditions that the generalized crossover opera-
tion is continuous and that limt→∞(t) exists can be dropped.
4. If the raw 5tness function f0 is such that every population contains exactly one crea-
ture with maximal 5tness (which may occur multiple times), then ∥(1−PU)v∞∥1 = 0.
Proof. First observe that the limit distribution only depends upon the limit of the
5tness selection matrices, i.e., F(f0)
∞. This shows Theorem 8:3:1 and Theorem 8:3:2.
To show Theorem 8:3:3, we 5rst make the following observation:
lim
t→∞∥C(t+1)Ft −F(f0)
∞∥1 = lim
t→∞∥C(t+1)Ft −C(t+1)F(f0)
∞∥1
6 lim
t→∞∥Ft −F(f0)
∞∥1 = 0:
Hence,
limt→∞M (m)
(t+1)C(t+1)Ft = M (m)
∞F(f0)
∞
for
any
sequence
C(t).
Note,
that
M (m)
∞F(f0)
∞
is a fully positive matrix. Let w ∈S be the uniquely determined 5xed-point
of M (m)
∞F(f0)
∞. Now, [62, Theorem 16] shows that the limit vector of the inhomoge-
neous, strongly ergodic Markov chain determined by the M (m)
(t+1)C(t+1)Ft is w, and is
thus independent from any choice of crossover operation.
Let v0 ∈S. Applying [62, Theorem 16] twice, we have for commuting mutation and
crossover operator:
lim
n→∞(F(f0)
∞M (m)
∞)nv0 = F(f0)
∞
lim
n→∞(M (m)
∞F(f0)
∞)nM (m)
∞v0 = F(f0)
∞w
= lim
t→∞Ft
1	
k=t−1
(M (m)
(k+1)C(k+1)Fk)(C(1)M (m)
1 v0)
= lim
t→∞Gtv0 = v∞:

L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
49
This shows Theorem 8:3:3. Theorem 8:3:4 follows from v∞= F(f0)
∞w shown above, if
mutation and crossover commute. Otherwise, Theorem 8:3:4 follows from ? = 0 and
Theorem 8:2:3, if limt→∞(t) exists, and crossover is continuous in (t).
8.2. Zero limit mutation rate and strong ;tness scaling
Before we come to the 5nal and most important results of Section 8, we need
a de5nition.
8.4. De+nition. Consider the following:
• Let M (m)

;  ∈(0; (a −1)=a], describe multiple-spot mutation. Let (t) ∈(0; (a −
1)=a]; t ∈N, be a monotonously decreasing sequence such that limt→∞(t) = 0.
Suppose that
∞

t=1
(t)L = ∞:
Then we shall call this situation a weakly ergodic multiple-spot mutation annealing.
• If a weakly ergodic multiple-spot mutation annealing is given, and F(f0)
∞
be as in
Section 7.1 identity (23) for a possibly population-dependent raw 5tness function
f0, then the inhomogeneous Markov chain
1	
k=t
F(f0)
∞M (m)
(k)
will be called a take-the-best search algorithm.
If the raw 5tness function f0 is such that every population contains exactly one creature
with maximal 5tness (which may occur multiple times), then a take-the-best search
algorithm does the following: (i) mutate with respect to the given schedule (t) using
multiple-spot mutation, and (ii) map a population p ∈˝s to the uniform population
(cmax; : : : ; cmax) containing solely the creature cmax with maximal 5tness in p.
8.5. Theorem. Consider the following hypotheses:
• Let M (m)

; (t) ∈(0; (a −1)=a]; t ∈N; be a weakly ergodic multiple-spot mutation
annealing.
• Let C;  ∈[0; 1]; be a generalized crossover operation as de;ned in Section 5:1.
Suppose that the crossover operation commutes with the mutation operation. This
is satis;ed in all regular applications by Section 5:2:1:2 and Section 5:3:1:2.
• Let Ft;
t ∈N; be a strong generalized ;tness selection scaling as de;ned in
Section 7:4. Let F(f0)
∞
be as in Section 7:1; identity (23); for a possibly population-
dependent raw ;tness function f0. Suppose that for q; p ∈˝s we have
∞

t=1
|⟨q; (Ft −F(f0)
∞)p⟩| ¡ ∞:
(31)

50
L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
Suppose that the given raw ;tness function f0 is such that every population contains
exactly one creature with maximal ;tness (which may occur multiple times).
Condition (31) is satis;ed for proportional ;tness selection; and power-law scaling
for a large variety of scalings. For example; a linear growth function g(t) as
in Section 7.2, identity (22); satis;es condition (31). One has to use a suitable
logarithmic growth function g(t) to violate the condition.
Let Gt = FtC(t))M (m)
(t). Then we have:
1. The inhomogeneous Markov chain associated with the genetic algorithm is strongly
ergodic. The limit probability distribution v∞of the inhomogeneous Markov chain
associated with the genetic algorithm is independent of the method of 5tness scaling.
In particular for power-law scaling, the limit distribution v∞is independent of the
scaling schedule as long as condition (31) holds.
2. In regard to v∞, it is arbitrary what is used as generalized crossover operation as
long as the crossover operator commutes with the mutation operator.
3. In the limit, the genetic algorithm behaves like the take-the-best search algorithm
	1
k=t F(f0)
∞M (m)
(k), and both inhomogeneous Markov chains are strongly ergodic. In
particular, both inhomogeneous Markov chains have the same limit probability distri-
bution over populations which is independent of the particular sequence (t); t ∈N.
4. Suppose that the given raw 5tness function f0 is such that there exists exactly one
creature c+ ∈C which has strictly best 5tness in all populations it occurs in. If the
population size s is larger than the length of creatures ‘, then the genetic algorithm
converges to the uniform population with the optimal creature c+.
Proof. The sequence (∥Ft −F(f0)
∞∥1)t∈N is summable, i.e., an element of ‘1(N). In
fact, since the coe6cients are summable, so is


q;p∈˝s
|⟨q; (Ft −F(f0)
∞)p⟩|

t∈N
∈‘1(N):
The expression 
q;p∈˝s |⟨q; Xp⟩| is a norm for matrices X , and since all norms on
a 5nite vector space are equivalent, we are done with this observation.
By Theorem 4.2, the inhomogeneous Markov chain underlying the genetic algorithm
is weakly ergodic. We now show that this inhomogeneous Markov chain has the same
limit as the corresponding take-the-best search algorithm. Consider for t1; t ∈N; t16t:
ˆGt = M (m)
(t+1)FtC(t);
ˆH
t1
t =
t1	
k=t
ˆGk;
˜Gt = M (m)
(t+1)F(f0)
∞
and
˜H
t1
t =
t1	
k=t
˜Gk:
Note, that limt→∞(M (m)
(t))−1 = 1, and thus for the purpose of establishing strong ergod-
icity of the inhomogeneous Markov chain describing the genetic algorithm, we may
(with the same limit(s)) consider ˆH
1
t , and ˜H
1
t instead. Fix v ∈S. Consider a sequence
(t)∈N of integers, such that by compactness of Ball1(V˝) the vectors ˆH
1
tv converge.

L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
51
Then we have, for M ∈N:
lim
→∞( ˆH
1
t −ˆH
M+1
t
˜H
1
M)v = 0;
applying weakly ergodicity to the inhomogeneous Markov chain determined by ˆH
M+1
t
;
t ∈N. Now we have
∥( ˆH
M+1
t
˜H
1
M −˜H
1
t)v∥1 = ∥( ˆH
M+1
t
˜H
1
M −ˆH
M+2
t
˜H
1
M+1 + ˆH
M+2
t
˜H
1
M+1 −˜H
1
t)v∥1
6 ∥FM+1 −F(f0)
∞∥1 + ∥( ˆH
M+2
t
˜H
1
M+1 −˜H
1
t)v∥1
6
t
k=M+1
∥Fk −F(f0)
∞∥1
Here, the assumption, that mutation and crossover commute, is used. Now suppose that
w = limt→∞˜H
1
t v exists and is independent of v, which we shall prove below. (In fact,
we show that the associated inhomogeneous Markov chain is strongly ergodic.) Then
we have
lim
→∞∥( ˆH
1
t −˜H
1
t)v∥1 = lim
→∞∥( ˆH
M+1
t
˜H
1
M −˜H
1
t)v∥16
∞

k=M+1
∥Ft −F(f0)
∞∥1 →0
as M →∞. Hence, if w = limt→∞˜H
1
t v exists, then all points of accumulation of
( ˆH
1
t v)t∈N are the same, i.e., the sequence converges to w.
Now, let us show that the take-the-best search algorithm determined by (t) is
strongly ergodic. By Theorem 4.2, the inhomogeneous Markov chain underlying the
take-the-best search algorithm is weakly ergodic. ˜Gt is a fully positive matrix which has
a
uniquely
determined,
fully
positive
eigenvector
wt ∈S
to
eigenvalue
1
by
[59, p. 9, Proposition 2:8, p. 23, Corollary 2]. The equation determining wt can be
written as
( ˜Gt −1)[e]wt = (a−L; 0; 0; : : : ; 0)T:
(32)
Summing up the rows of ( ˜Gt −1) in the 5rst row yields ( ˜Gt −1)[0]. The equation
( ˜Gt −1)[0]wt = 0 still determines the fully positive wt up to a scalar factor. Thus,
the kernel of ( ˜Gt −1)[e] is {0}. Hence, identity (32) is a full aL-rank system of
equations. If we apply Cramer’s Rule [40, p. 182, Theorem 3], then the solution to
identity (32) is a family of rational functions in (t) which stay bounded as (t) →0.
Consequently, the sequence ∥wt −wt−1∥1 is summable since the convergence is ac-
tually Lipschitz bounded (the rational functions determining wt are well-de5ned and
diGerentiable at  = 0). Applying [35, p. 160, Theorem V:4:3], completes the proof of
Theorem 8:5:3.
Finally, let us show Theorem 8:5:4. Suppose that ‘¡s. For ¿0, let w ∈S be
the uniquely determined, invariant probability distribution of M (m)

· F(f0)
∞, and let v =
(M (m)

)−1w ∈S be the uniquely determined, invariant probability distribution of F(f0)
∞
·

52
L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
M (m)

using [59, p. 7, Proposition 2:3]. v and w have the same limit as  →0. Let
c+ = ( ˆa($+
1 ); : : : ; ˆa($+
‘ )) ∈C be the creature with maximal 5tness in C. Let p+ = (c+; c+;
: : : ; c+) ∈˝s ∩U. Let !() = ⟨p+; v⟩. Then, 1 −!() is the combined probability for
uniform populations over non-optimal creatures in v.
Let c ∈C; c ̸= c+, and p = (c; c; : : : ; c) ∈˝s ∩U. In order to make a transition with
M (m)

from p to a population containing c+, one may have to change all ‘ letters of
c within one of the s copies of c in p. In order to make a transition with M (m)

from
p+ to a population which does not contain c+, one has to change at least one letter
(arbitrarily) in every creature of p+. Hence, we have for small :
1 −!()6(1 −K · ‘)(1 −!())) + K′ · s · !();
(33)
where K¿0; K′¿0 are constant. Now, identity (33) implies that
lim→0 (1 −!())=!() = 0;
which completes the proof.
Note that the end of the proof of Theorem 8:5:3 is a simpli5cation of a proof by
Davies and Principle in [16]. We emphasize, that as outlined in [62, pp. 120–121], it
is usually a minor restriction for an optimization problem to assume that a population-
independent raw 5tness function f0 : C →R+ is injective.
8.6. Theorem. Consider the following hypotheses:
• Multiple-spot mutation M (m)
(t) with the cooling schedule (t) = min{(a −1)=2a;
t−1=L}; t ∈N is used.
• Let C be a constant generalized crossover operation as de;ned in Section 5:1.
Suppose that the crossover operation commutes with the mutation operation. This
is satis;ed for simple crossover by Section 5:2:1:2; and for unrestricted crossover
by Section 5:3:1:2.
• Let F(f0)
PFS (t); t ∈N; stand for power-law scaled proportional ;tness selection as
de;ned in identities (21) and (22) in Section 7:1 based upond a raw ;tness function
f0. Let B ∈R+∗; and
g(t) = B log(t + 1)
(see identity (22)):
(34)
Let Gt = F(f0)
PFS (t)CM (m)
(t). Then we have:
1. The inhomogeneous Markov chain associated with the genetic algorithm is strongly
ergodic.
2. Suppose that the given raw 5tness function f0 is such that there exists exactly
one creature c+ ∈C which has strictly best 5tness in all populations it occurs in.
Suppose s¿‘, i.e., the population size s is larger than the length of creatures ‘,
and B ∈R+∗, is chosen such that
‘ −1 ¡ L · B log(H2);
(35)

L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
53
where H2¿1 is the smallest value of f0(c+; p)=f0(c; p)¿1 over all populations
p containing c+ and creatures c ̸= c+ in p. Then the genetic algorithm converges
to the uniform population with the optimal creature c+.
Proof. This proof is similar to the proof of Theorem 8.5. M (m)
(t) with (t); t ∈N, as
above is a weakly ergodic multiple-spot mutation annealing. First, we show strong
ergodicity of the underlying inhomogeneous Markov chain for the genetic algorithm.
Consider for t ∈N:
ˆGt = M (m)
(t+1)F(f0)
PFS (t)C;
ˆH t =
1	
k=t
ˆGk:
Now, weak ergodicity of the inhomogeneous Markov chain
ˆHt; t ∈N, follows from
Theorem 4:2. In order to show strong ergodicity of
ˆHt, we use [35, p. 160, Theo-
rem V:4:3]. Thus, similar to the argument in the proof of Theorem 8:5:3, we have to
show that the norms of diGerences ∥wt+1 −wt∥1 of the steady-state distributions wt of
the ˆGt are summable.
It is enough to show summability for |⟨p; wt+1 −wt⟩|; t ∈N, for every popula-
tion p ∈˝s. To obtain this, we compute wt with now continuous parameter t = x−L −
1; x = (t + 1) ∈(0; (a −1)=a), as the solution of
( ˆGt −1)[e]wt = (a−L; 0; 0; : : : ; 0)T:
(36)
using Cramer’s Rule [40, p. 182, Theorem 3]. Taking a look at the coe6cients of Ft as
in Section 7.1, identity (21), we obtain for populations q; p ∈˝s: the probability that
q = (d1; : : : ; ds) is generated from p = (c1; : : : ; cs); d*; c* ∈C; * = 1; : : : ; s, by 5tness
selection is given by
⟨q; F(f0)
PFS (t)p⟩=
s	
*=1
n(d*; p)f0(d*; p)g(t)
s
*′=1 f0(c*′; p)g(t) =
s	
*=1
n(d*; p)x−L·B log(f0(d*;p))
s
*′=1 x−L·B log(f0(c′
*;p)) :
(37)
As a consequence of identity (37), we obtain that the solution ⟨p; wt = x−L−1⟩to iden-
tity (36) is a “rational” function in x where the powers of x in the denominator and
numerator are positive real numbers, i.e.,
G(x) = ⟨p; wt=x−L−1⟩=
n1
=1 r;1 · xr;2
n2
=1 r;3 · xr;4 ;
r;1; r;3 ∈R; r;2; r;4 ∈R+;
n1; n2 ∈N; r1;3 = 1; r1;4 = 0:
(38)
We can assume W.L.O.G., that r1;3 = 1 and r1;4 = 0 since ⟨p; wt = x−L−1⟩stays bounded
as x →0. We substitute x = zK for a constant K¿1 in identity (38) to obtain
G(zK) =
n1
=1 r;1 · zr′
;2
1 + n2
=2 r;3 · zr′
;4 ;
r;1; r;3 ∈R; r′
;2; r′
;4 ∈{0} ∪[1; ∞); n1; n2 ∈N:

54
L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
Hence, |(d=dz)G(zK)| is bounded by some constant K′¿0 for z in [0; z0]; z0¿0. Con-
sequently, we have for some t0 ∈N:
∞

t=t0
|⟨p; wt+1 −wt⟩|6
∞

t=t0
K′ · |(t + 2)−1=(K·L) −(t + 1)−1=(K·L)| ¡ ∞:
This completes the proof of Theorem 8:6:1.
Suppose now, that the conditions of Theorem 8:6:2 are satis5ed. Let wx ∈S be the
uniquely determined, invariant probability distribution of M (m)
x
F(f0)
PFS (x−L −1)C, and
let vx = (Mx)−1wx ∈S be the uniquely determined, invariant probability distribution of
F(f0)
PFS (x−L −1)CM (m)
x
. Let c+ ∈C be the creature with maximal 5tness in all popu-
lations it occurs in. Let p+ = (c+; : : : ; c+) ∈˝s. Let !(x) = ⟨p+; vx⟩. We 5rst observe
that for every populations p ∈˝s that contains c+, one has
⟨p+; F(f0)
PFS p⟩¿(1 + (s −1)xL·B log(H2))−s = @x:
(39)
Note that for some K1¿0:
1 −@x6K1 · xL·B log(H2):
(40)
Let p ∈˝s. We determine a lower estimate for the probability ⟨p+; F(f0)
PFS (x−L −1)C
M (m)
x
p⟩. Applying crossover (5rst) to p generates another population p′ ∈˝s. In order
to make a transition with M (m)

from p′ to a population p′′ ∈˝s containing c+, one
has at most to change all ‘ letters in the spots corresponding to one creature of p′.
Making a transition from p′′ to p+ under 5tness evaluation occurs now with proba-
bility bounded below by @x¿s−s. Hence, there exists a constant K2¿0, such that for
small x:
⟨p+; F(f0)
PFS (x−L −1)CM (m)
x
p⟩¿K2 · x‘:
(41)
Now, we consider the transition probability 
p̸=p+ ⟨p; F(f0)
PFS (x−L −1)CM (m)
x
p+⟩. Ap-
plying crossover (5rst) to p+ does not aGect this population. We distinguish two
cases.
Case 1: In order to make a transition with multiple-spot mutation from p+ to a pop-
ulation which does not contain c+, one has to change at least one letter (arbitrarily)
in every creature of p+. Fitness selection then cannot generate p+ again.
Case 2: If c+ is contained in a population p′ ∈˝s after changing at least one letter
of p+, then the probability to generate p+ again via proportional 5tness selection is
bounded below by @x using identity (39).
Hence using identity (40), we have for a constant K3¿0:

p̸=p+
⟨p; F(f0)
PFS (x−L −1)CM (m)
x
p+⟩6K3 · (xs + x · xL·B log(H2)) · !(x):
(42)
Combining identities (41) and (42), we obtain:
1 −!(x)6(1 −K2 · x‘) · (1 −!(x)) + K3 · (xs + x1+L·B log(H2))) · !(x)
(43)
Thus, limx→0 !(x) = 1.

L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
55
8.7. Remark. We note that Theorem 8.6 with the proof given above also holds in case
crossover is a “reasonable” function in the mutation rate x, e.g., the coe6cients are as
in identity (38).
8.3. Examples for non-optimal convergence
Example 1. Consider the smallest possible example: a = ‘ = s = 2. Let the raw 5tness
of creatures (00); (01); (10); (11) be given by f0((00); p) = 4; f0((01); p) = 1; f0((10);
p) = 2; f0((11); p) = 3, respectively, regardless of the population p.
One computes the 16 × 16 matrix (M (m)

F(f0)
∞
−1)[e] using computer algebra (MATH-
EMATICA [74]), and then solves the associated system, i.e., Eq. (32) using the Gauss
algorithm simplifying rational expressions at every step. The explicit MATHEMATICA-
computation can be downloaded from [60]. The coe6cient of the solution wt to Eq. (32)
for population ((11); (11)) is then determined as
⟨((11); (11)); wt⟩
= 2 −11(t + 1) + 28(t + 1)2 −38(t + 1)3 + 28(t + 1)4 −8(t + 1)5
6 −4(t + 1)
;
which converges to 1
3 as t →∞.
Example 2. Consider a = s = 2, ‘ = 3. Let the raw 5tness of creatures be given by
f0((000); p) = 8, f0(bin(); p) = ,  = 1; : : : ; 7 where bin() means the binary string
representing an integer . Then a MATHEMATICA-computation yields:
lim
t→∞⟨((111); (111)); wt⟩= 1:
These examples show that, in general, the take-the-best search algorithm and the genetic
algorithm as in Theorem 8.5 do not converge to the uniform population with the best
possible creature with probability 1 contradicting the main result in [65, 66]. The proof
given in [65, 66] contains gaps which are substantial and not notational in nature, and
occur for arbitrary size s¿1 of populations, and arbitrary length ‘¿1 of the genome
of a creature.
9. Discussion of applicability
One of the goals of this work is to establish scaled genetic algorithms mathematically
as a probabilistic, convergent all-purpose method for optimization similar to results
obtained for the simulated annealing algorithm as outlined in [1]. Essentially, this is
achieved in Theorem 8.6. Obviously, 5nding “just one copy of one optimal creature”
in the course of the algorithm is su6cient as goal for optimization. However, in order
to be guaranteed just to do so with high probability, it is necessary, as outlined below,
to run the algorithm for a long time, and likely “end up” with a uniform population.

56
L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
In the generic situation of a blind search with a 5tness function of largely unknown
behavior, one must, 5rst of all, make sure that the search space is su6ciently explored.
In the language of simulated annealing: “the algorithm needs time for a uniform, con-
trolled overall ‘cooling’ procedure”. This is achieved by scaling the parameters (muta-
tion rate (t), crossover rate (t), and exponentiation g(t) of the 5tness function (see
identity (22)), t ∈N) in such a way that the inhomogeneous Markov chain describing
the algorithm becomes strongly ergodic. As a result, the asymptotic behavior of the
scaled genetic algorithm becomes, in particular, independent from any choice of initial
population or population sequence. Denote, as before, the stochastic matrices describ-
ing the individual steps of the scaled genetic algorithm by Gt, t ∈N, and let wt denote
the steady-state distribution of Gt. The proof of [35, p. 160, Theorem V.4.3] shows
that the asymptotic behavior of the scaled genetic algorithm is determined by (1) weak
ergodicity of the sequence Gt, (2) summability of the sequence ∥wt+1 −wt∥1, and (3)
the approximation of the limit probability distribution by the wt. This shows that even
if the genetic algorithm is being executed for a 5nite but larger number of cycles, its
behavior is bounded by the convergence behavior of the wt, t ∈N, and weak ergodicity.
A larger mutation rate at the beginning of the algorithm enhances weak ergodicity, in
particular, it shrinks the distance ∥	1
k=t Gk(v0 −v′
0)∥1 between trajectories of the algo-
rithm for initial distributions over populations v0 and v′
0. But in the situation of a blind
search, one needs a sequence of mutation rates decreasing to zero in order to be able
to estimate the probability for the current population being among (uniform) popula-
tions with optimal creatures as in Eq. (43), since in this situation, the limit probability
distribution is known. The fact that for any 5tness scaling and zero limit mutation
rate, the limit probability distribution is non-zero only over uniform populations (see
Theorem 8.2), is thereby an unavoidable consequence of the selection method.
In addition to the points discussed above, the analysis presented in this work sets
boundary conditions for application of genetic algorithms some of which are listed next.
First, Theorems 8.1 and 8.2 show that one must always be aware of 5nding suboptimal
solutions for positive mutation rates. In particular, the simple genetic algorithm has
positive probability for doing so. Second, as discussed in Section 7.5, crossover alone
is not really suitable as random generator phase in a genetic algorithm since this leads
to implementation of genetic drift which is non-ergodic in nature. Third, if a scaled
genetic algorithm is used, then the selection pressure should not increase too fast.
Otherwise, one can use the take-the-best algorithm as simpler, equivalent alternative,
cf., Theorem 8.5. Fourth, if a scaled genetic algorithm is used, then the conditions set in
Theorem 8.5 or 8:6 in particular in regard to size of the population have to be observed.
10. Conclusion
As a consequence of contributions by many researchers and the analysis in this
exposition, we can present the following table of asymptotic behavior of genetic al-
gorithms. We have established here in all cases listed below, except for [24] and the

L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
57
parallel algorithm in [44], that the Markov chain describing the genetic algorithm is
strongly ergodic. What we mean below with “convergence” is convergence of the un-
derlying (inhomogeneous) Markov chain to a steady state probability distribution which
is non-zero only over populations containing optimal creatures (individuals, candidate
solutions). Observe that the notion of generalized crossover introduced in Section 5.1
contains the commonly used crossover operations. Note also that some of the results
in this exposition have been obtained in weaker versions by R.F. Fujii, C.L. Nehaniv
and the author in [61, 62].
Case 1: The mutation and crossover operations are constant (over time).
(a) Case: Constant proportional 5tness selection is used (simple genetic algorithm).
Included in (2a).
• Non-convergence shown for binary alphabet, regular crossover and multiple-
bit mutation by Davis and Principe [15], and Rudolph [57].
(b) Case: Simulated annealing type selection is used with a population-dependent
5tness. Largely included in (3).
• Convergence shown for binary alphabet, regular crossover and multiple-bit
mutation as well as a special crossover-mutation operator by Mahfoud and
Goldberg [44]. See also [62]. A parallel algorithm based upon a creature-
dependent 5tness is proposed in [44].
(c) Case: Boltzmann selection is used with a logistic acceptance scheme.
• Convergence shown for binary alphabet and regular crossover by Goldberg
[24].
Case 2: The mutation rate converges to a strictly positive value.
(a) Case: The crossover operators and the 5tness selection operators converge.
• Non-convergence shown for general-size alphabet, generalized crossover and
single=multiple-spot
mutation
in
Theorems
8.1
and
8.2.
See
also
[61, 62].
(b) Case: Unbounded power-law scaled 5tness selection is used for an injective
5tness function. The crossover operators need not converge to assure ergodicity.
• Non-convergence shown for general-size alphabet, generalized crossover and
multiple-spot mutation in Theorem 8.3.
Case 3: The mutation and crossover rates vary in an interval. Simulated annealing type
selection is used for a population-dependent 5tness.
• Convergence shown for general-size alphabet, generalized crossover and
single=multiple-spot mutation as discussed in Section 6.2 similar to the proof
for a constant generator matrix outlined in [1].
Case 4: The mutation rate converges to zero. Multiple-spot mutation and proportional
5tness selection are used.
(a) Case: The crossover operator is constant. The 5tness evaluation is constant.
• Non-convergence shown for binary alphabet, regular crossover and multiple-
bit mutation by Davis and Principe [15].
• Non-convergence shown, in principle, for general-size alphabet and general-
ized crossover as in the proof of Theorem 8.5, and Section 8.3.

58
L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
(b) Case: Unbounded power-law scaled 5tness selection is used for an injective
5tness function.
• Non-convergence is shown, in general, in Theorem 8.5, and Section 8.3.
• Convergence is shown under certain conditions in Theorems 8:5, 8:6, and
Remark 8:7.
Acknowledgements
The author thanks the anonymous referee A for pointing out a number of interesting
references in regard to this exposition, and the anonymous referee B for the challenging
report. Special thanks go to M. Ito in Kyoto.
References
[1] E.H.L. Aarts, P.J.M. van Laarhoven, Simulated annealing: an introduction, Statist. Neerlandica 43 (1989)
31–52.
[2] S. Anily, A. Federgruen, Simulated annealing methods with general acceptance probabilities, J. Appl.
Probab. 24 (1987) 657–667.
[3] J. Antonisse, A new interpretation of Schema notation that overturns the binary encoding constraint, in:
J.D. SchaGer (Ed.), Proceedings of the Third International Conference on Genetic Algorithms, Morgan
Kaufmann, Los Altos, CA, 1989, pp. 86–97.
[4] R. Axelrod, W.D. Hamilton, The evolution of cooperation, Science 211 (1981) 1390–1396.
[5] H. Aytug, G.J. Koehler, Stopping criteria for 5nite length genetic algorithms, Inform. J. Comput. 8
(1996) 183–191.
[6] J.E. Baker, Reducing bias and ine6ciency in the selection algorithm, in: J.J. Grefenstette (Ed.), Genetic
Algorithms and Their Applications: Proceedings of the Second International Conference on Genetic
Algorithms, Lawrence Erlbaum, London, 1987.
[7] W. Banzhaf, F.D. Francone, P. Nordin, The eGect of extensive use of the mutation operator on
generalization in genetic programming using sparse data sets, in: W. Ebeling, I. Rechenberg, H.P.
Schwefel, H.M. Voigt (Eds.), Proceedings of the Fourth International Conference on Parallel Problem
Solving from Nature (PPSN96), Springer, Berlin, 1996, pp. 300–309.
[8] A.D. Bethke, Genetic algorithms as function optimizers, Ph.D. Dissertation, University of Michigan,
Dissertation Abstracts International, 41(9), 3503B, University Micro5lms No. 8106101, 1981.
[9] S. Bhattacharyya, G.J. Koehler, An analysis of non-binary genetic algorithms with cardinality 2,
Complex Systems 8 (1994) 227–256.
[10] K. Binder, Monte Carlo Methods in Statistical Physics, Springer, Berlin, 1978.
[11] V. Cerny, Thermodynamical approach to the traveling salesman problem: an e6cient simulation
algorithm, J. Optim. Theory Appl. 45 (1985) 41–51.
[12] J.F. Crow, M. Kimura, An Introduction to Populations Genetics Theory, Harper & Row, New York,
1970.
[13] L. Davis, Handbook of Genetic Algorithms, Van Nostrand Reinhold, New York, 1991.
[14] T.E. Davis, Toward an extrapolation of the simulated annealing convergence theory onto the simple
genetic algorithm, Ph.D. Dissertation, University of Florida, 1991.
[15] T.E. Davis, J.C. Principe, A simulated annealing-like convergence theory for the simple genetic
algorithm, in: R.K. Belew, L.B. Booker (Eds.), Proceedings of the Fourth International Conference
on Genetic Algorithms ’91, Morgan Kaufmann, Los Atlas, CA, 1991, pp. 174–181.
[16] T.E. Davis, J.C. Principe, A Markow chain framework for the simple genetic algorithm, Evol. Comput.
1 (3) (1993) 269–288.
[17] K. Deb, D.E. Goldberg, mGA in C: A messy genetic algorithm in C, Dept. of General Engineering,
University of Illinois at Urbana-Champaign IlliGAL, Report No. 91008, 1991.

L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
59
[18] D.B. Fogel, Evolving arti5cial intelligence, Ph.D. Dissertation, The University of California, San Diego,
1992.
[19] D.B. Fogel, Asymptotic convergence properties of genetic algorithms and evolutionary programming:
analysis and experiments, Cybernet. Systems 25 (3) (1994) 389–407.
[20] H. Geiringer, On the probability theory of linkage in Mendelian heredity, Ann. Math. Statist. 15 (1944)
25–57.
[21] S. Geman, D. Geman, Stochastic relaxation, Gibbs distribution and the Bayesian restoration of images,
IEEE Proc. Pattern Anal. Mach. Intell. 6 (1984) 721–741.
[22] B. Gidas, Nonstationary Markov chains and convergence of the annealing algorithm, J. Statist. Phys.
39 (1985) 73–131.
[23] A.M. Gillies, Machine learning procedures for generating image domain feature detectors, Ph.D.
Dissertation, University of Michigan, 1985.
[24] D.E. Goldberg, A note on Boltzmann tournament selection for genetic algorithms and population oriented
simulated annealing, Complex Systems 4 (1990) 445–460.
[25] D.E. Goldberg, Genetic Algorithms, in Search, Optimization & Machine Learning, Addison-Wesley,
Reading, MA, 1989.
[26] D.E. Goldberg, Genetic Algorithms Tutorial, Genetic Programming Conference, Stanford University,
July 13, 1997.
[27] D.E. Goldberg, K. Deb, A comparative analysis of selection schemes used in genetic algorithms, in:
G.J.E. Rawlins (Ed.), Foundations of Genetic Algorithms, Morgan Kaufmann, Los Altos, 1991, pp.
69–93.
[28] D.E. Goldberg, K. Deb, B. Korb, Messy genetic algorithms revisited: studies in mixed size and scale,
Complex Systems 4 (1990) 415–444.
[29] D.E. Goldberg, P. Segrest, Finite Markov chain analysis of genetic algorithms, in: J.J. Grefenstette
(Ed.), Genetic Algorithms and their Applications: Proceedings of the Second International Conference
on Genetic Algorithms ’87, Lawrence Erlbaum, London, 1987, pp. 1–8.
[30] W. Greub, Linear Algebra, Springer, Berlin, 1975.
[31] B. Hajec, Cooling schedules for optimal annealing, Math. Oper. Res. 13 (1988) 311–329.
[32] G.H. Hardy, Mendelian proportions in a mixed population, Science 28 (1908) 49–50.
[33] J.H. Holland, Adaptation in Natural and Arti5cial Systems, University of Michigan Press, 1975;
Extended new Edition, MIT Press, Cambridge, 1992.
[34] J. Horn, Finite Markov chain analysis of genetic algorithms with niching, Illinois Genetic Algorithms
Laboratory Report No. 93002, Dept. of General Engineering, University of Illinois, Urbana-Champaign,
1993.
[35] D.L. Isaacson, R.W. Madsen, Markov Chains: Theory and Applications, Prentice-Hall, Englewood CliGs,
NJ, 1961.
[36] G.J. Koehler, A proof of the Vose–Liepins conjecture, Ann. Math. Arti5cial Intelligence 10 (1994)
408–422.
[37] G.J. Koehler, S. Bhattacharyya, M.D. Vose, General cardinality genetic algorithms, Evol. Comput. 5
(4) (1998) 439–459.
[38] J.R. Koza, Genetic Programming, MIT Press, Cambridge, MA, 1992.
[39] J.R. Koza, Genetic Programming II, MIT Press, Cambridge, MA, 1994.
[40] S. Lang, Linear Algebra, 2nd Edition, Addison-Wesley, Reading, MA, 1970.
[41] S. Lang, Complex Analysis, Addison-Wesley, Reading, MA, 1977.
[42] Y. Leung, Z.-P. Chen, Z.-B. Xu, K.-S. Leung, Convergence rate for non-binary genetic algorithms with
diGerent crossover operators, The Chinese University of Hong Kong, preprint, 1998.
[43] S.W. Mahfoud, Finite Markov chain models of an alternative selection strategy for genetic algorithms,
Complex Systems 7 (1993) 155–170.
[44] S.W. Mahfoud, D.E. Goldberg, A genetic algorithm for parallel simulated annealing, in: R. M.anner,
B. Manderick (Eds.), Parallel Problem Solving from Nature, vol. 2, Elsevier, Amsterdam, 1992, pp.
301–310.
[45] J. Maynard Smith, Evolutionary Genetics, Oxford University Press, Oxford, 1989.
[46] N. Metropolis, A.W. Rosenbluth, M.N. Rosenbluth, A.H. Teller, Equations of state calculations by fast
computing machines, J. Chem. Phys. 21 (1953) 1087–1091.
[47] Z. Michalewicz, Genetic Algorithms + Data Structures = Evolution Programs, 2nd, extended Edition,
Springer, Berlin, 1994.

60
L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
[48] M. Mitchell, An Introduction to Genetic Algorithms, MIT Press, Cambridge, MA, 1996.
[49] D. Mitra, F. Romeo, A. Sangiovanni-Vincentelli, Convergence and 5nite time behavior of simulated
annealing, Adv. Appl. Probab. 18 (1986) 747–771.
[50] A.E. Nix, M.D. Vose, Modeling genetic algorithms with Markov chains, Ann. Math. Arti5cial
Intelligence 5 (1992) 79–88.
[51] C.L.
Nehaniv
(Ed.),
Mathematical
and
Computational
Biology:
Computational
Morphogenesis,
Hierarchical Complexity, and Digital Evolution, An International Workshop, 21–25 October 1997, Aizu,
Japan, Lectures on Mathematics in the Life Sciences Series, vol. 26, American Mathematical Society,
Providence, RI, 1999.
[52] G.K.
Pedersen,
C
∗-Algebras
and
Their
Automorphism
Groups,
London
Mathematical
Society
Monographs No. 14, Academic Press, New York, 1979.
[53] J.R. Peck, J.M. Yearsley, D. Waxman, Why do asexual and self-fertilizing populations tend to
occur in marginal environments?, in: C.L. Nehaniv (Ed.), Mathematical and Computational Biology:
Computational Morphogenesis, Hierarchical Complexity, and Digital Evolution, An International
Workshop, 21–25 October 1997, Aizu, Japan, Lectures on Mathematics in the Life Sciences Series,
vol. 26, American Mathematical Society, Providence, RI, 1999, pp. 121–132.
[54] A. Poli, M. Langdon, Schema theory for genetic programming with one-point crossover and point
mutation, Evol. Comput. 6 (3) (1998) 231–252.
[55] J. Roughgarden, Theory of Population Genetics and Evolutionary Ecology, MacMillan, New York, 1976
(Reprinted by Prentice-Hall, Englewood CliGs, NJ, 1996).
[56] W. Rudin, Functional Analysis, McGraw-Hill, New York, 1973.
[57] G. Rudolph, Convergence analysis of canonical genetic algorithms, IEEE Trans. Neural Networks 5
(1994) 96–101.
[58] G. Rudolph, An evolutionary algorithm for integer programming, in: Y. Davidor, H.-P. Schwefel, R.
M.anner (Eds.), Proceedings of the Third International Conference on Parallel Problem Solving From
Nature (PPSN III), Springer, Berlin, 1994, pp. 139–148.
[59] H.H. Schaefer, Banach Lattices and Positive Operators, Die Grundlehren der mathematischen
Wissenschaften in Einzeldarstellungen Band 215, Springer, Berlin, 1974.
[60] L.M. Schmitt, Mathematica Computation, ftp://ftp.u-aizu.ac.jp/u-aizu/doc/Tech-Report/
1999/99-2-004.tar.gz
[61] L.M. Schmitt, C.L. Nehaniv, The linear geometry of genetic operators with applications to the
analysis of genetic drift and genetic algorithms using tournament selection, in: C.L. Nehaniv (Ed.),
Mathematical and Computational Biology: Computational Morphogenesis, Hierarchical Complexity,
and Digital Evolution, An International Workshop, 21–25 October 1997, Aizu, Japan, Lectures on
Mathematics in the Life Sciences Series, vol. 26, American Mathematical Society, Providence, RI,
1999, pp. 147–166.
[62] L.M. Schmitt, C.L. Nehaniv, R.H. Fujii, Linear analysis of genetic algorithms, Theoret. Comput. Sci.
200 (1998) 101–134.
[63] E. Seneta, in: Non-negative Matrices and Markov Chains, Springer Series in Statistics, Springer, Berlin,
1981.
[64] K. Sigmund, The social life of automata, in: C.L. Nehaniv (Ed.), Mathematical and Computational
Biology:
Computational
Morphogenesis,
Hierarchical
Complexity,
and
Digital
Evolution,
An
International Workshop, 21–25 October 1997, Aizu, Japan, Lectures on Mathematics in the Life Sciences
Series, vol. 26, American Mathematical Society, Providence, RI, 1999, pp. 133–146.
[65] J. Suzuki, A further result on the Markov chain model of genetic algorithms and its application to a
simulated annealing-like strategy, in: R.K. Belew, M.D. Vose (Eds.), Foundations of Genetic Algorithms,
vol. 4, Morgan Kaufmann, Los Altos, CA, 1997, pp. 53–72.
[66] J. Suzuki, A further result on the Markov chain model of genetic algorithms and its application to a
simulated annealing-like strategy, IEEE Trans. Systems Man, Cybernet. – Part B 28 (1998) 95–102.
[67] B.L. van der Warden, Algebra I (Achte AuTage der Modernen Algebra), Heidelberger Taschenb.ucher
Band 12, Springer, Berlin, 1971.
[68] M.D. Vose, Formalizing genetic algorithms, in: Proceedings of the IEEE Workshop on Genetic
Algorithms, Neural Networks and Simulated Annealing Applied to Problems in Signal and Image
Processing, May 1990, Glasgow, UK, 1990.
[69] M.D. Vose, Modeling simple genetic algorithms, in: G. Rawlins (Ed.), Foundations of Genetic
Algorithms, Morgan Kaufmann, Los Altos, CA, 1991, pp. 94–101.

L.M. Schmitt / Theoretical Computer Science 259 (2001) 1–61
61
[70] M.D. Vose, G.E. Liepins, Punctuated equilibria in genetic search, Complex Systems 5 (1991) 31–44.
[71] M.D. Vose, A.H. Wright, The simple genetic algorithm and the Walsh transform: Part I, theory, Evol.
Comput. 6 (3) (1998) 253–273.
[72] M.D. Vose, A.H. Wright, The simple genetic algorithm and the Walsh transform: Part II, the inverse,
Evol. Comput. 6 (3) (1998) 275–289.
[73] W. Weinberg, .Uber Vererbungsgesetze beim Menschen, Zeitschrift f.ur induktive Abstammungs- und
Vererbungslehre 1 (1909) 277–330.
[74] S. Wolfram, Mathematica – A System for Doing Mathematics by Computer, Addison Wesley, Reading,
MA, 1991.
[75] S. Wright, Statistical genetics and evolution, Bull. Amer. Math. Soc. 48 (1942) 223–246.

