 
 
CfunBASE: A Cosmological Functions Library for Astronomical Databases
Author(s): M. Taghizadeh-Popp
Source: Publications of the Astronomical Society of the Pacific, Vol. 122, No. 894 (2010
August), pp. 976-989
Published by: Astronomical Society of the Pacific
Stable URL: https://www.jstor.org/stable/10.1086/655666
Accessed: 28-02-2023 13:21 UTC
 
JSTOR is a not-for-profit service that helps scholars, researchers, and students discover, use, and build upon a wide
range of content in a trusted digital archive. We use information technology and tools to increase productivity and
facilitate new forms of scholarship. For more information about JSTOR, please contact support@jstor.org.
 
Your use of the JSTOR archive indicates your acceptance of the Terms & Conditions of Use, available at
https://about.jstor.org/terms
Astronomical Society of the Pacific is collaborating with JSTOR to digitize, preserve and
extend access to Publications of the Astronomical Society of the Pacific
This content downloaded from 132.174.252.114 on Tue, 28 Feb 2023 13:21:36 UTC
All use subject to https://about.jstor.org/terms

CfunBASE: A Cosmological Functions Library for Astronomical Databases
M. TAGHIZADEH-POPP
Department of Physics and Astronomy, Johns Hopkins University, Baltimore, MD 21218; mtaghiza@pha.jhu.edu
Received 2010 April 5; accepted 2010 June 7; published 2010 July 26
ABSTRACT.
CfunBASE is a customizable C# cosmological functions library in the .NET framework. Its primary
use is in CasJobs/SkyServer, where the functions are ported into a MS-SQL Server database hosting the SDSS
science archive, and can be executed through simple T-SQL commands. This gives cloud-computing users the
possibility of calculating cosmological distances, volumes and times as a function of redshift, as well as their re-
spective inverse functions. Also included are basic data exploratory analysis tools, such as binning, N-dimensional
weighted histograms, and quantile and cumulative distribution aggregate functions. Advanced astronomical exam-
ples are presented and discussed, such as the T-SQL implementation and fast computation of luminosity functions,
color-magnitude diagrams, and the friends-of-friends galaxy cluster identification algorithm.
1. INTRODUCTION
Science has evolved today to include the essential use of
computer science and applied math and statistics. After starting
with plain observation, it was complemented with a theoretical
background and, lately, computer simulations have been used to
reproduce complex phenomena out of the reach of theory.
Nowadays, we experience the emergence of a fourth para-
digm: data-intensive science or eScience (see articles in Hey
et al. 2009), which engulfs the prior approaches by providing
ways of
1. Collecting a huge amount of observational data provided
by technological advances (“data deluge”), either from net-
works of cheap massified sensors, high-output state-of-the-art
instruments, computer simulations, or other mechanisms with
output now reaching petabytes per year (Szalay et al. 2001).
2. Preprocessing, archiving, and preserving the data in
servers, with emphasis on many low–energy-consumption hard
drives with fast I/O and parallel CPUs or GPUs, supported by an
efficient database management system (DBMS).
3. Visualizing and analyzing the complex high-dimensional
data space with statistical data-mining tools right where the data
are stored physically, having the small-sized aggregated results
made available for further scientific use.
In fact, the data deluge makes it infeasible to move, down-
load, or analyze all the data in personal computers or Beowulf-
type clusters (Bell et al. 2009). This makes it necessary to “bring
the computation to the data,” having it stored in clusters of
servers optimized for a balance between parallel computing
power and data access, transfer, and analysis for many on-
demand users, rather than only performance-centered computa-
tional power for a small or centralized amount of users (Szalay
et al. 2009a, 2009b). The implementation of data warehouses
brings the possibility of cloud computing (Armbrust et al.
2009), by means of which any client can connect to its own
small database or environment in servers (i.e., “the cloud”),
where services are offered; data can be stored, queried, or
shared; and provided software can be run.
Current examples, in and outside science, can be found in the
study of consumer habits, tracking of global commercial trans-
actions, geospatial information systems and web mapping (e.g.,
Google Earth), genomics (e.g., Human Genome Project; Roehm
& Blakeley 2009), online social networks (e.g., Facebook), web
search engines (e.g., Google, Yahoo), experimental particle
physics (e.g., Large Hadron Collider), data/mass surveillance
(Kolda et al. 2005; Popp & Poindexter 2006), etc. In astronomy,
the spread of high-resolution CCDs and high-quality optics tele-
scopes has fostered an avalanche of data. A pioneering example
is the Sloan Digital Sky Survey (SDSS) (York et al. 2000),
which with a 120 Mpix CCD camera and 2.5 m telescope
has scanned 25% of the sky, generating ∼30 TB of data. A suc-
cessful example of cloud computing is SkyServer (Szalay
et al. 2001; Singh et al. 2006), which provides public access
to SDSS data archive by means of the web-based service
CasJobs1 running on MS-SQL Server. Data storage and analysis
in next-generation surveys will be much more demanding, as
Pan-STARRS,2 LSST (Ivezic et al. 2008; Abell et al. 2009),
and others will be providing time-series data at a rate of
30 TB night1 of raw data.
In this article we present CfunBASE,3 a .NET framework
library written in C# that contains functions relevant in cosmol-
ogy and extragalactic astronomy, made ready to be uploaded
into a MS-SQL 2005/2008 server database and executed in situ
1 At http://cas.sdss.org/dr7/en/.
2 See http://pan‑starrs.ifa.hawaii.edu/public/.
3 Downloadable from http://www.skyserver.org/cfunbase
976
PUBLICATIONS OF THE ASTRONOMICAL SOCIETY OF THE PACIFIC, 122:976–989, 2010 August
© 2010. The Astronomical Society of the Pacific. All rights reserved. Printed in U.S.A.
This content downloaded from 132.174.252.114 on Tue, 28 Feb 2023 13:21:36 UTC
All use subject to https://about.jstor.org/terms

using T-SQL queries. Several previous cosmology libraries have
been included in web services, e.g., Wright (2006) and Kitching
et al. (2009), but until now there was no library written in a fast
low-level programming language with database integration in
order to handle the data deluge.
CfunBASE’s primary intended use is in CasJobs,4 where it
provides measurements of cosmological distances, volumes,
and times as a function of redshift, with which astronomers
or the general public can do sample selection, identification
of galaxy clusters, and filtering of extragalactic objects inside
“the cloud” without having to download superfluous data into
their computers. Current and future sky surveys, such as
LAMOST (Sun et al. 2006; Wang et al. 2009), Pan-STARRS,
and LSST will provide redshift measurements obtained either
from
spectroscopy
(∼106–107)
or
multiband
photometry
(∼109–1010), on which CfunBASE might be of great utility.
The library also includes basic data exploratory analysis and
statistical tools, such as quantile aggregate functions, basic bin-
ning, and creation of N-dimensional weighted histograms that
are helpful for visualizing the high-dimensional data space. Sec-
tion 2 of this article reviews the theory of the universe dynamics
under general relativity and lists basic cosmological functions,
§ 3 discusses details on the implementation of the library, and
§ 4 shows CfunBASE-related advanced examples of astronom-
ical interest (provided as T-SQL scripts in Appendix B).
2. THEORETICAL BACKGROUND
Quantities of basic interest in cosmology are measurements
of the distances, volumes, and times involved in the dynamics of
an expanding universe. The theoretical framework is widely
known, but is included here for completeness. Some papers
and books on these matters include Hogg (2000), Hogg et al.
(2002), Liske (2000), Peacock (1999), Peebles (1993), Martinez
& Saar (2002), Bonometto et al. (2002), Dodelson (2003),
Weinberg (2008), and others.
Under general relativity, Einstein’s field equation (Peacock
1999; Bonometto et al. 2002; Dodelson 2003) relates informa-
tion about the content of the universe (energy-momentum tensor
T μν) with its geometry (Einstein tensor Gμν)
Gμν þ Λgμν ¼  8πG
c4 T μν;
(1)
where Λ is Einstein’s famous cosmological constant. Here, gμν
is the Robertson-Walker metric tensor, obtained from considera-
tions of an isotropic and homogeneous universe (Weinberg
2008), under which the space-time line element (dependent on
the curvature k) is given by (Bonometto et al. 2002; Martinez &
Saar 2002)
ds2 ¼ c2dt2  R2ðtÞ½dr2 þ S2
kðrÞðdθ2 þ sin2ðθÞdϕ2Þ;
(2)
SkðrÞ ¼
8
<
:
sinhðrÞ
if k ¼ 1; open universe
r
if k ¼ 0; flat universe
sinðrÞ
if k ¼ 1; closed universe
:
(3)
The coordinates r, θ, and ϕ behave as dimensionless angles,
referred to as “comoving” because they are defined on a
three-dimensional (3D) hypersurface that expands according
to RðtÞ, which is the scale factor or curvature radius of the
universe. The k ¼ 1, k ¼ 1 and k ¼ 0 universes have the
geometry of a three-sphere, three-hyperboloid, and three-plane,
respectively. Manipulations on equations (1) and (2) lead to the
Friedman equations (Bonometto et al. 2002; Martinez & Saar
2002):
H2 ≡
_R2
R2 ¼ _a2
a2 ¼ 8πG
3
ρ þ Λc2
3  kc2
R2 ;
(4)
€a
a ¼  4πG
3

ρ þ 3p
c2

þ Λc2
3 ;
(5)
_ρ ¼ 3 _a
a

ρ þ p
c2

:
(6)
Equation (4) defines the Hubble parameter HðtÞ, which deter-
mines the expansion rate of the universe, measured today
to be H0 ≡Hðt ¼ 0Þ ≡h0 × 100 km s1 Mpc1, where h0 ¼
0:705 according to Komatsu et al. (2009). Here,
aðtÞ ≡RðtÞ
R0
¼
1
1 þ z
(7)
is the normalized scale factor (a0 ¼ 1). The redshift z∈½0; ∞
(zðt ¼ 0Þ ¼ 0) is used by astronomers as a proxy for time t,
since it can be obtained directly by measuring the Doppler shift
(with respect to a rest frame) of the observed wavelength λ in
known spectral features of the spectrum of a galaxy that moves
away from us, together with the universe expansion (or “Hubble
flow”):
z ≡λobs
λrest
 1:
(8)
In the Friedman equations, Λ, the pressure p, and the density ρ
give information about the content of the universe. The density
is defined as ρ ¼ ρM þ ρR (matter plus radiation), whereas the
fiducial dark energy density can be written as ρΛ ¼ Λc2=ð8πGÞ.
Using equation (4), we obtain that at any time there exists a total
critical density ρTc ¼ 3H2ðtÞ=ð8πGÞ for which the universe is
4A preliminary version of CfunBASE is included as part of the DR7 database,
while the full version will be provided in the next data release.
CFUNBASE COSMOLOGICAL FUNCTIONS LIBRARY
977
2010 PASP, 122:976–989
This content downloaded from 132.174.252.114 on Tue, 28 Feb 2023 13:21:36 UTC
All use subject to https://about.jstor.org/terms

flat (k ¼ 0). It currently amounts to 5:6 × 1027 kg m3. We
can define the normalized densities
Ωi ¼ ρi=ρTc
ði∈fM; R; ΛgÞ;
(9)
ΩT ¼
X
Ωi;
(10)
Ωk ¼ kc2=ðHRÞ2;
(11)
with which equation (4) results in
ΩM þ ΩR þ ΩΛ þ Ωk ¼ ΩT þ Ωk ¼ 1:
(12)
We can solve for HðtÞ by using equation (6) and a suitable
equation of state (EOS) pi ¼ wiρic2 for each one of the uni-
verse’s components. That leads us to
ρiðaÞ ¼ ρi;0a3½1þ wiðaÞ ¼ Ωi;0
3H2
0
8πG a3½1þ wiðaÞ;
(13)
wiðaÞ ¼ 1
ln a
Z ln a
0
d lnða0Þwiða0Þ:
(14)
Note that wM ¼ 0 and wR ¼ 1=3. For dark energy, the most
basic nonevolving EOS is defined by wΛ ¼ wΛ;0 ≡w0 ¼ 1.
Summing up, the dynamics is determined by
HðzÞ ¼ H0EðzÞ;
(15)
E2ðzÞ ¼ ΩM;0ð1 þ zÞ3 þ ΩR;0ð1 þ zÞ2 þ ΩΛ;0ð1 þ zÞ3ð1þ wΛÞ
þ Ωk;0ð1 þ zÞ2:
(16)
Knowledge of today’s values of the cosmological parameters
ΩM, ΩR, ΩΛ, Ωk, ω0, and h0 allows us to determine the dy-
namics of the expansion and the cosmological functions con-
cerning distances and times. The estimated values measured
by using WMAP (5 yr) combined with measurements from Type
Ia supernovae and baryon acoustic oscillations (Komatsu et al.
2009) are
ðΩM;0; ΩR;0; ΩΛ;0; h0; w0Þ ¼ ð0:2739; 104; 0:726; 0:705; 1Þ;
(17)
which have been rounded to support the observed fact that ΩT;0
¼ 1 and Ωk;0 ¼ 0 (flat universe). Here we have considered the
measured effective number of neutrinos equal to Neff ¼ 4:4 and
ΩR ¼ Ωγð1 þ 0:2271NeffÞ, where Ωγ ¼ 4:968 × 105 accord-
ing to Komatsu et al. (2009).
Distance and time scales are defined by
DHðzÞ ¼ cH1ðzÞ;
(18)
T HðzÞ ¼ H1ðzÞ;
(19)
and are called Hubble distance and time, respectively, with cur-
rent values of DH;0 ¼ 4252:38 Mpc and T H;0 ¼ 13:87 Gyr.
Straight from equations (11) and (12), we can obtain the curva-
ture radius of the universe, given by
RðzÞ ¼ DH
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
k
ΩT  1
s
¼ DH;0
1 þ z
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
k
ΩT;0  1
s
;
(20)
which is nondefined for ΩT;0 ¼ 1 (flat universe). As a photon
always travels along null geodesics in space-time (ds2 ¼ 0), we
have from equation (2) that dr ¼ cdt=RðtÞ when the light
travels along the radial direction (i.e., line of sight). Also, from
equations (4) and (7) we obtain dt ¼ dz½ð1 þ zÞH1. Now, by
including equation (15), we can obtain expressions for the in-
tervals of time ΔT and comoving distance ΔDc (line of sight)
comprehended in the redshift interval z∈½z1; z2:
ΔDCðz1; z2Þ ¼ R0Δrðz1; z2Þ ¼ DH;0
Z z2
z1
dz
EðzÞ ;
(21)
ΔTðz1; z2Þ ¼ T H;0
Z z2
z1
dz
ð1 þ zÞEðzÞ ;
(22)
DCðzÞ ≡ΔDCð0; zÞ;
(23)
T LBðzÞ ≡ΔTð0; zÞ;
(24)
T AUðzÞ ≡ΔTðz; ∞Þ:
(25)
Here we have defined the line of sight comoving distance
DCðzÞ, lookback time T LBðzÞ, and age of the universe
T AUðzÞ. For the current values of Ωi, the line of sight comoving
distance has a finite maximum at infinite redshift, as photons
meeting a particle at z ¼ 0 have a limited time to travel since
the beginning of the universe (T AUðz ¼ 0Þ ¼ 13:71 Gyr). In
fact,
Dhorðz ¼ 0Þ ≡Dcðz ¼ ∞Þ ¼ 1:428 × 104 Mpc
is
the
current value of the so-called particle horizon, outside of which
978
TAGHIZADEH-POPP
2010 PASP, 122:976–989
This content downloaded from 132.174.252.114 on Tue, 28 Feb 2023 13:21:36 UTC
All use subject to https://about.jstor.org/terms

the events are not connected causally with the particle at red-
shift z ¼ 0.
On the other hand, from equation (2), the transverse physical
size ΔL of an object is connected to its angular diameter Δθ
by means of ΔL ¼ RðzÞSkðΔr½0; zÞΔθ. Hence, the angular
diameter distance DAðzÞ is given by
DAðzÞ ¼ ΔL
Δθ ¼
DH;0
ð1 þ zÞjΩk;0j
1
2 Sk
DCjΩk;0j
1
2
DH;0

:
(26)
From equation (26), another distance scale, the transverse
comoving distance, can be defined:
DMðzÞ ¼ ð1 þ zÞDAðzÞ:
(27)
In a more general way, we can calculate the comoving distance
between events at different redshifts and angular separation θ in
the sky. Straight from equation (2), we have that the line element
dL2 ¼ R2
0ðdr2 þ S2
kðrÞdθ2Þ is defined on the surface of a three-
sphere, three-hyperboloid or three-plane. Therefore, the comov-
ing separation distance between points 1 and 2 is
ΔL ¼ R0r12;
(28)
where, by using the law of cosines in spherical (k ¼ 1) and
hyperbolic (k ¼ 1) geometry, we have respectively (Peacock
1999; Liske 2000)
cos r12 ¼ cos r1 cos r2 þ sin r1 sin r2 cos θ;
(29)
cosh r12 ¼ cosh r1 cosh r2  sinh r1 sinh r2 cos θ:
(30)
The angles r1 ¼ Δrð0; z1Þ and r2 ¼ Δrð0; z2Þ are related to the
line-of-sight comoving distance by means of equation (21). In
the case of flat geometry (k ¼ 0), we have
ΔL2 ¼ D2
Cðz1Þ þ D2
Cðz2Þ  2DCðz1ÞDCðz2Þ cos θ:
(31)
The differential of volume is dV ¼ 4πR2ðtÞS2
kðrÞdr, which
under integration leads to (Martinez & Saar 2002)
V CðzÞ ¼ 2πR3
0½r  sinðrÞ cosðrÞ
ðk ¼ 1Þ;
(32)
V CðzÞ ¼ 2πR3
0½sinhðrÞ coshðrÞ  r
ðk ¼ 1Þ;
(33)
V CðzÞ ¼ 4
3 πD3
CðzÞ
ðk ¼ 0Þ;
(34)
where r ¼ Δrð0; zÞ.
With respect to magnitudes, the distance to the light source
has to be redefined in order to adjust for changes due to the
expansion universe. In fact, the total luminosity per frequency
at a redshift z is measured as a total flux density per frequency
S ¼ L=ð4πD2
L½zÞ received at z ¼ 0, where the luminosity dis-
tance DLðzÞ takes into account the changes in the frequency of
the light, the arrival rate and energy, and the change in the spec-
tral bandwidth (Peacock 1999). This leads to
DLðzÞ ¼ DMð1 þ zÞ ¼ DAð1 þ zÞ2:
(35)
Hence, we can define the distance modulus DM (Hogg 2000)
as
DM ≡m  M ¼ 5 log½DLðzÞ=1 Mpc þ 25;
(36)
where M is the absolute magnitude and m is the apparent mag-
nitude (extinction and k-corrected) (Hogg et al. 2002). Usually,
DM is used as a proxy for DL.
3. DATABASE INTEGRATION AND FUNCTIONS
IMPLEMENTATION
The library is written in C# under the .NET framework. In
this environment, any .NET programming language is compiled
into a lower common intermediate language (CLI) and then exe-
cuted by the .NET run time. Starting in 2005, MS-SQL Server
incorporates this common language runtime (CLR), allowing
the user to create his own code written in any .NET language,
then upload the dll or assembly into a database and execute the
ported code as simple T-SQL commands. This includes, among
others, user-defined functions (UDFs), table valued functions
(UDTVFs), stored procedures (UDSPs), and aggregate func-
tions (UDAFs), which can handle calculations of higher com-
plexity and faster than with a T-SQL routine. The SQL scripts
for uploading the code into a database are given in two kinds,
depending on the version of MS-SQL Server (2005 or 2008).
All ported code and examples can be found in Appen-
dixes A1–A3, and B1–B2.
3.1. Cosmological Functions
The class containing the cosmological functions can be first
instantiated with customizable cosmological and auxiliary
numerical parameters, allowing the execution of functions either
with high precision or high speed. The SQL-CLR functions
FðzÞ that comprehend all distances, times and volume as a func-
tion of redshift (eqs. [18], (19), [23]–[28], [31]–[36]) are imple-
mented in two versions, either with fixed (from eq. [17]) or free
cosmological parameters (names starting with fCosmf and
fCosmo, respectively). The user can modify the code as neces-
sary or adding new features, such as a time evolving state equa-
tion for dark matter. Figure 1 shows the normalized functions
FðzÞ up to redshift z ¼ 2:5, obtained from executing the
fCosmfQuantities UDTVF. This function returns the
CFUNBASE COSMOLOGICAL FUNCTIONS LIBRARY
979
2010 PASP, 122:976–989
This content downloaded from 132.174.252.114 on Tue, 28 Feb 2023 13:21:36 UTC
All use subject to https://about.jstor.org/terms

cosmological functions evaluated at a grid of redshifts. At red-
shift zi, part of the integrals Ið0; ziÞ ¼ Ið0; zi1Þ þ Iðzi1; ziÞ
in equations (21) and (22) have already been calculated in the
previous redshift intervals. As a result, the quantities at each
redshift can be streamed (using C#’s “yield return”) with no
extra overhead and grid memory allocation.
In order to calculate the aforementioned integrals, numerical
integration is implemented through the Romberg method, which
evaluates (without extra overhead) a progressively finer grid for
the trapezium method within the interval of integration (Press
et al. 1992). Extrapolation of the integral’s value is performed
to the case of zero grid separation by means of Neville extrap-
olation (Press et al. 1992). The use of an open-interval trape-
zium method is necessary when integrating in the interval
z∈½0; ∞, as well as the change of variable z →z1. The frac-
tional precision of the integrals is by default set to Δ ≤109.
For obtaining the inverses ZðFÞ ≡F 1ðF½zÞ of the cos-
mological quantities, i.e., the redshift at particular values of
distances, volume, or time, we use a root-finding method that
includes the Newton-Raphson method (Press et al. 1992),
Neville interpolation, and simple bracketing. The first iteration
starts by using the Newton-Raphson algorithm, with a seed
defined as the middle point in the interval of length L1 that
brackets a root (or redshift). If the new calculated redshift lies
inside the interval, a new smaller interval is selected and a new
iteration is made. If the redshift lies outside the bracket, we par-
tition the original bracket in 4 intervals and use Neville inter-
polation to compute a new root. A smaller root-containing
bracket is defined as plus minus the error in the redshift that
results from Neville’s method. If the error interval is bigger than
the initial bracket, we find a new smaller bracket using the 5
redshift values where the function was already evaluated when
performing Newton-Raphson algorithm and Neville interpola-
tion. Then a new iteration is started. Once this method has
bracketed a root, it will never lose the solution, and stops when
either the root or the function at the root have reached a frac-
tional precision of Δ ≤109.
The convergence rate of the root finding algorithm is defined
by the exponent n in the relation Li ¼ K × Ln
iþ1, where K is a
constant and i indexes the iterations (Press et al. 1992). In the
best case, the algorithm has quadratic convergence (n ¼ 2)
when Newton-Raphson dominates, and in the worst case it is
linear (n ¼ 1) when Neville’s method (K ≫1) or simple
bracketing (K ¼ 4) dominate. Figure 2 shows the actual frac-
tional precision Δ ¼ jZðFÞ  zj=z reached by the root finding
method. The probability distribution Pðlog ΔÞ in Figure 3
shows a significant accumulation at Δ ∼1016  1014 and
also in Δ ¼ 0, both far from the imposed Δ ¼ 109 cutoff,
which suggests that Newton-Raphson dominates at least in
the last iteration.
3.2. Binning Functions and Procedures
Simple data exploratory analysis tools include the function
fMathBin, which returns the bin centers where the data points
fall in, given a one-dimensional user-defined grid. The function
fMathGrid returns a column table with a user defined grid,
either in linear or logarithmic scale, and can be used together
with fMathBin and the group by clause in order to construct
histograms or any other aggregate-related statistic (see Appen-
dix B1) . The bin and grid values are rounded to a fractional
precision of Δ ¼ 1014. This rounding eliminates numerical
error created when constructing the grid, allowing clean join
clauses between tables on values generated by these functions.
Fractional precision rounding can be implemented with
0.0
0.5
1.0
1.5
2.0
2.5
0
0.5
1
z
D C D H,0
D M D H,0
D A D H,0
D L D H,0
ComVol / D H,0
3
LookBackTime / T H,0
AgeOfUniverse / T H,0
FIG. 1.—Normalized cosmological functions for the best cosmological
parameters shown in eq. (17). Note that this corresponds to a flat universe,
in which DCðzÞ ¼ DMðzÞ. Note that, for z ≲0:1, the straight line zDH;0 is
a good approximation for all distances, while zT H;0 fits the look-back time
in the same regime well .
10 −3
10 −2
10 −1
10
0
10
1
10
2
10
3
0
10−15
10 −13
10 −11
10 −9
∆
z
D C,D M
D A
D L
Com.Volume 1
Com.Volume 2
LookBackTime
c
c
c
c
cc
c
ccc
c
ccc
c
cc
c
cc
c
c
ccc
c
c
c
c
ccccc
c
c
cc
c
c
c
c
c
c
cccc
cc
cc
cc
c
c
ccc
ccc
cc
c
c
cc
c
c
cc
c
c
cc
c
c
c
cc
c
c
c
c
c
c
c
cc
c
c
c
c
cc
ccccc
c
cccc
c
c
c
cccccc
c
c
c
c
c
c
c
cc
cc
c
c
c
c
cc
c
c
c
c
cc
c
c
cc
c
ccc
cccc
c
c
c
c
c
c
c
c
cc
ccc
c
ccc
cccccc
c
c
c
c
c
c
cc
cc
c
c
c
c
c
c
c
c
c
c
c
cc
c
c
c
cc
cccc
c
c
cc
cccc
c
c
cccc
c
ccc
cc
c
c
c
c
c
c
cccc
c
cc
c
cc
c
ccccccc
c
ccc
cc
c
cc
c
c
cc
c
c
cc
c
c
cc
c
c
c
c
ccccc
c
cc
ccc
c
ccc
c
cc
cccccc
c
c
c
c
c
c
cc
c
cc
cc
c
c
c
c
c
c
ccc
c
c
c
c
c
cccc
cc
c
cc
c
cc
c
c
c
c
c
c
ccc
c
c
ccc
c
c
c
cc
c
c
c
cc
c
c
c
c
cccc
ccccccc
ccccc
c
c
ccc
c
cccc
c
ccc
c
c
c
c
c
c
cc
cc
c
cc
c
cc
c
cc
c
ccc
c
c
c
c
c
c
ccc
c
c
c
c
ccccc
c
c
c
ccccc
c
c
cc
c
c
c
cccc
ccc
c
c
c
c
ccc
c
c
c
c
cc
c
cc
c
c
cc
c
c
ccccc
c
c
cc
ccc
c
c
c
cccc
c
c
c
c
c
c
c
c
c
c
c
cc
c
c
c
c
ccccc
c
c
c
c
c
c
c
c
cc
ccc
cc
c
c
c
c
c
c
cc
ccccc
cc
c
cc
c
c
cc
cc
c
c
c
c
cccc
c
cc
c
c
c
c
c
ccc
c
c
c
c
c
c
c
c
c
cc
c
cc
cc
ccc
c
c
c
cc
cc
c
c
cc
ccc
cc
c
c
c
cc
c
c
c
c
c
cc
c
c
c
c
c
c
c
ccc
c
c
c
c
c
c
c
cccc
c
c
ccc
cc
c
c
c
c
c
c
c
c
cc
cc
c
c
c
cc
cc
c
c
cc
c
c
c
c
ccccc
c
cc
c
c
cc
c
cc
cc
cc
c
cccccccc
c
ccccccc
cc
c
c
c
c
c
c
cc
ccc
c
c
c
cc
c
c
c
c
cc
c
c
c
c
c
cc
c
c
c
cc
ccc
c
c
c
c
cc
c
c
c
cc
c
ccc
c
c
c
cc
cc
c
c
c
c
cc
c
c
c
c
c
cc
c
c
cc
c
c
c
cc
c
c
cc
c
c
c
c
c
cc
c
c
c
cc
c
c
c
c
c
c
c
c
c
c
c
cc
c
c
cc
c
c
c
ccc
c
ccc
c
c
cc
c
cc
c
c
c
c
c
c
c
c
cc
c
c
c
cc
cc
ccccc
c
ccccc
c
ccc
c
c
c
cc
cc
c
c
cc
cc
c
c
c
c
cc
c
c
cc
c
ccccc
ccc
c
cc
cc
c
c
c
cc
c
cc
c
c
cc
c
c
c
cc
c
c
c
c
c
cc
cccc
c
c
c
c
c
cccc
c
c
cccc
cc
cc
c
c
ccc
c
ccc
c
cc
c
c
ccc
c
cc
cc
c
cc
cc
c
c
c
c
c
ccc
c c c c AgeOfUniverse
FIG. 2.—Actual fractional precision Δ ¼ jZðFÞ  zj=z of ZðFÞ with respect
to the original redshift z that the value of FðzÞ is derived from. Note the cutoff at
Δ ≤109, imposed in the root finding method. The horizontal dashed line de-
notes Δ ¼ 1016, which is the precision for the double data type. The values at
Δ ¼ 0 are plotted off the logarithmic scale. The inverse function Com.Volume 1
refers to redshift as a function of comoving volume, whereas Com.Volume 2 is
redshift as a function of DL composed with DL as a function of redshift.
980
TAGHIZADEH-POPP
2010 PASP, 122:976–989
This content downloaded from 132.174.252.114 on Tue, 28 Feb 2023 13:21:36 UTC
All use subject to https://about.jstor.org/terms

fMathRound, which rounds a value to a particular number of
significant digits. Midpoint rounding of type ToEven is applied
to reduce bias.
The advanced UDSP spMathHistogramNDim returns a
table with an N-dimensional histogram, given data points dis-
tributed in N columns returned by a user-defined query. In order
to avoid SQL-injection attacks, the query is filtered out using
the fMathSafeSqlCommand UDF (see § 3.4). The normal-
ized-to-one probability distribution is also returned, which con-
siders optional multiplicative weighting of the data points. This
UDSP can be of use when computing a color-magnitude dia-
gram (CMD) under the V MAX method, as shown in § 4.1
and Appendix B1.
3.3. Statistical Aggregate Functions
Basic statistical aggregates implemented are the quantile
function and its inverse, the cumulative distribution function
(CDF). In MS-SQL Server 2005, the total serialization in a
CLR UDAF is limited to 8000 bytes, which cripples the capa-
bilities of a CLR aggregate that stores and sorts a large amount
of values (Coles 2008). However, the existence of ranking func-
tions such as ROW_NUMBER() allow the creation of UDFs that
implement these statistical aggregates. In CfunBASE, the func-
tion fMathCDF consists of a SQL script that uses ROW_
NUMBER() and returns the (linearly interpolated) CDF, given
a set of values returned as a column by a user defined query. On
the other hand, its inverse fMathQuantile gets the (linearly
interpolated) quantile function. SQL-injection attacks are pre-
vented by using fMathSafeSqlCommand (see § 3.4).
In MS-SQL Server 2008, the absence of a 8000 byte seriali-
zation limit, together with multiple-input–capable aggregates,
allow the creation of simpler-syntax CLR UDAFs such as
aMathQuantile and aMathCDF. A drawback is the fact that
serialization methods (i.e., read() and write()) have to be
implemented in the CLR code, instead of using the SQL native
serialization. This makes this aggregates slower than the UDFs
by a factor of 2–5 (tested for 106 records).
3.4. Security-Related Functions
Submitted queries have the potential to affect the server
negatively. In fact, SQL injection attacks exploit the security
breach in systems where the user’s query is not filtered out
of harmful commands. CasJobs sets particular user privileges
and checks any query against a list of commands, keywords
or characters known to be potentially dangerous by using
the spExecuteSafeSQL UDSP, on which CfunBASE’s
fMathSafeSqlCommand is based. The latter returns a safe
command, that can be passed to any function or procedure that
requires executing it (note that UDSPs can not be executed
inside UDFs or UDTVFs). The maximum number of rows
returned is tentatively set to be 107.
4. ADVANCED EXAMPLES
The cosmological functions bring up the view of a 3D uni-
verse and its evolution through time, in which galaxies can be
studied according to their close environment, intrinsic luminos-
ity, colors, spectral quantities, etc. Here we show basic features
of interest that can be easily implemented, including luminosity
functions and the friends-of-friends algorithm for galaxy groups
identification. The testing of CfunBASE and these advanced
examples was performed on a GrayWulf cluster (Szalay et al.
2009a; Simmhan et al. 2009), designed for fulfilling the spe-
cific needs of data-intensive computing. It holds an SDSS DR7
database managed by MS-SQL Server 2008, running under
Windows HPC Server 2008.
4.1. Luminosity Function
The luminosity function (LF) ΦðMÞ, i.e., the galaxy number
density per absolute magnitude M, can be easily estimated
using the V Max method (Schmidt 1968). Basically, it creates
a weighted histogram of the different values of M. The weights
wi ¼ 1=V Max;i are defined by the maximum volume V Max;i in-
side which the ith galaxy can be observed, given the apparent
magnitude and redshift cuts of the survey and the fractional sky-
covering area F A of the footprint. The weighting takes care of
the fact that the density of the less luminous galaxies becomes
very low at high redshifts in flux-limited surveys, a phenome-
non known as Malmquist bias. A limitation is that it assumes
that the galaxies are evenly distributed in the sky, which is not
the case. CasJobs offers access to the SDSS DR7 Main Galaxy
Sample (MGS) (Strauss et al. 2002; Abazajian et al. 2009),
which is flux limited by an r-band Petrosian apparent magni-
tude cut of mr ≲17:77, and whose selection function (or red-
shift distribution) peaks at z ≃0:1. We can construct a smaller
sample defined by the intervals z∈½z1 ¼ 0:04; z2 ¼ 0:12 and
mr∈½m1 ¼ 13:5; m2 ¼ 17:77. If the ith galaxy of apparent
−∞
−15
−13
−11
−9
0.0
0.5
1.0
P(log(∆))
log(∆)
D C,D M
D A
D L
Com.Volume 1
Com.Volume 2
LookBackTime
c
c
c
c
AgeOfUniverse
c
c c c c c c c
c
c
c
c
c
c c c c
c
c c c
c c c c c c c c c c c c c c c c c c c
FIG. 3.—Probability distribution of log Δ, derived from Fig. 2. The vertical
dashed line denotes Δ ¼ 1016. The values at log Δ ¼ ∞are plotted off the
logarithmic scale.
CFUNBASE COSMOLOGICAL FUNCTIONS LIBRARY
981
2010 PASP, 122:976–989
This content downloaded from 132.174.252.114 on Tue, 28 Feb 2023 13:21:36 UTC
All use subject to https://about.jstor.org/terms

magnitude m at a luminosity distance DL were to have limiting
apparent magnitudes m1;2, we obtain from equation (36) that it
should be moved to a limiting luminosity distance DL;m1;2 given
by
DL;m1;2 ≡DLðzlim; m1;2Þ ¼ DL × 10ðm1;2kðzlimÞmþkÞ=5: (37)
Hence, the maximum volume is defined by the biggest interval
of DL inside which a galaxy can appear in the survey:
V Max;i ¼ ½V ðminðDLðz2Þ; DL;m2ÞÞ
 V ðmaxðDLðz1Þ; DL;m1ÞÞ × F A:
(38)
Note that equation (37) defines zlim in an implicit way. In order
to solve for it iteratively, the redshift-dependent k correction
kðzlimÞ has to be known. This would need additional informa-
tion related to the galaxy’s spectral type, such as a decomposi-
tion into a linear combination of spectral templates. As a rough
approximation, we can use k ≃kðzlimÞ. The galaxies whose m
is bright enough that V Max is equal to the survey’s volume V S ¼
½V ðz2Þ  V ðz1Þ × F A are considered a volume-limited sample,
and can be used for further studies without caring about the
V Max weighting. The LF ΦðMÞ and its Poisson error ΔΦðMÞ
are estimated at the center of absolute magnitude bins of width
ΔM, having the form
ΦðMÞ ¼
1
ΔM
X
i¼galaxies
ci
V Max;i
;
(39)
ΔΦðMÞ ¼
1
ΔM
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
X
i¼galaxies

ci
V Max;i
2
s
;
(40)
where the sum is performed on the galaxies located in the cor-
responding bins. The factor ci takes into account possible in-
completeness in the sample. In this case, we choose ci ¼ 1
for simplicity.
Appendix B1 shows the T-SQL implementation of the LF
based on the previous magnitude and redshift cuts and other
constraints, sampling ≃270000 MGS galaxies from DR7,
where the area of the spectroscopic survey amounts to
7932:125 deg2 (≃19% of the sky). The result can be seen in
Figure 4, where both the LF and the CMD are shown. The
LF obtained by the V Max method uses the function fMathBin
to aggregate the 1=V Max weights in the absolute magnitude Mr
bins, measured in petrosian magnitudes. The color Cur ≡umodel
rmodel ≡u  r uses a model magnitude, which proves to be a
better separator for the blue and red galaxy clumps in the CMD
(Baldry et al. 2004). The CMD is basically a weighted 2D his-
togram, where the weights are also 1=V Max, and can be obtained
by means of executing spMathHistogramNDim.
4.2. Friends-of-Friends Galaxy Cluster Identification
Algorithm
The knowledge of the spatial distribution of galaxies is a rel-
evant issue. Measurements of the 3D correlation function have
shown that galaxies, as a collective group, distribute in space
according to a power law, where red and blue galaxies present
different clustering (e.g., Budavari et al. 2003). At a more de-
tailed level, various methods have been used for identifying
members of galaxy clusters and groups, allowing studies of
galaxy properties depending on surrounding density and envi-
ronment. One widespread method is the friends-of-friends
algorithm (FoF) (Huchra & Geller 1982), which is shown im-
plemented in Appendix B2. The algorithm starts with a galaxy
labeled as the first group member, and includes as its group
members all the immediate neighbors closer than predetermined
linking comoving distances, both perpendicular (DLink;⊥) and
parallel (DLink;∥) to the line of sight. The process is repeated
recursively on new neighbors of the neighbors, until no more
new neighboring galaxies are found. Then a new galaxy is
10−8
10−6
10−4
10−2
Φ(Mr) [Mpc−3mag−1]
−24
−23
−22
−21
−20
−19
−18
0.5
1.0
1.5
2.0
2.5
3.0
3.5
4.0
Cur
Mr
FIG. 4.—Luminosity function (top) and color-magnitude diagram (bottom)
of the sample discussed in § 4.1. The bin sizes used are ΔMr ¼ 0:1 and
ΔCur ¼ 0:05.
982
TAGHIZADEH-POPP
2010 PASP, 122:976–989
This content downloaded from 132.174.252.114 on Tue, 28 Feb 2023 13:21:36 UTC
All use subject to https://about.jstor.org/terms

picked and the whole process is again repeated. Following
Berlind et al. (2006), for a flat universe, z ≲0:1 and a volume-
limited sample, we define the maximum values for the comov-
ing distances D⊥and D∥between 2 objects separated at an
angular separation θ:
D⊥¼ ðDcðz1Þ þ Dcðz2ÞÞ sinðθ=2Þ ≤DLink;⊥≡b⊥n1=3 (41)
D∥¼ jDcðz1Þ  Dcðz2Þj ≤DLink;∥≡b∥n1=3;
(42)
where n is the average count density of galaxies. The values
b⊥and b∥are chosen to find a balance between including field
galaxies as group members, and finding just the cluster’s core
members. Also, the galaxy peculiar velocities around clusters
have to be taken into account, as they create distortion in red-
shift space (fingers of God, pancakes of God, etc.). Since we use
a volume-limited sample, the linking distances are not weighted
by the selection function, but remain constant across different
redshift values. A simple solution is to take a cylindrical search-
ing volume around a galaxy, with parameters b⊥¼ 0:14 and
b∥¼ 0:75 (Berlind et al. 2006). In our sample, we have
n ¼ 0:001283 Mpc3, which leads to DLink;⊥¼ 6:902 Mpc
and DLink;∥¼ 1:288 Mpc.
Finding the immediate neighbors of N galaxies is greatly
eased by clustered indexing of the spatial coordinates.
Brute-force spatial searches are expensive (OðNÞ), hence the
importance of identifying and storing the table rows on disk
in a hierarchical schema according to the spatial distribution
of objects, thus decreasing searching times. The script in Ap-
pendix B2 stores the group labels of galaxies in the Groups
table, which is filled by running the FoF algorithm on the table
NeighborsLSS. The latter contains the neighbors of all
galaxies based on the criteria shown in equations (41) and
(42), being created from spatial searches based on the R.A.,
decl., and redshift values given in table DR7smallLSS.
Note that although the neighbors of each galaxy can also be
retrieved “on the fly” in each step of the FoF algorithm from
internal nested queries to DR7smallLSS, this approach is
slower than accessing this information right from an indexed
Neighbors table. This method might be nonetheless of
practical use when storing all the neighbors in a table becomes
expensive, in the case of having too many objects (>109) in
DR7smallLSS, as is expected in next-generation all-sky
surveys.
A
simple
custom
spatial
indexing
schema
for
table
DR7smallLSS is to create a 3D grid in space, whose cell side
length is the longest distance between DLink;⊥and DLink;∥.
Using the function fMathBin, we can index each galaxy ac-
cording to the 3D grid inside which it falls. This leads us to
3 grid cell center values (Gx,Gy,Gz) for each galaxy, that
together with the SpecObjID can define a primary key or
unique clustered index, i.e., a spatial index on table rows stored
sequentially on disk according to the following nested order
of unique values: (Gx,Gy,Gz,SpecObjID). This greatly re-
duces searching time (O½log N) when using the BETWEEN
clause in searches around the x, y, z comoving coordinates
of galaxies. A further improvement is the use of an Octree data
structure, where a cube in space is divided recursively into 8
identical cubes. A spatial index can be constructed by hashing
together successive node IDs from the different node levels, up
to the level whose side length is the longest between DLink;⊥and
DLink;∥. R-trees (Guttman 1984) could be implemented as well.
It might be the case that the original table with 3D coordinates of
the galaxies becomes too big, or has already a primary key. In
that case, we can define a unique nonclustered index in the pre-
viously binned spatial coordinates, or, if the table is static (as is
usual in astronomical databases), we can even create a view of
the table that includes this index. In this case, however, the spa-
tial searches might run a bit slower.
Another spatial searching possibility is to use native spheri-
cal indexing in MS-SQL Server 2008, which is implemented
by means of the Geography type and is associated with the
unique clustered index of the table. This type is defined based
on a constant latitude/constant longitude tessellation of the
sphere. It takes as input the R.A.,decl. coordinates and a spatial
reference system identifier (SRID) definition of the Earth,5
allowing the calculation of physical distances between points on
the Earth’s surface, but running much slower than the grid-based
method. By default, the database carries SRIDs of the Earth’s
shape and size that implement only ellipsoidal geometry (i.e., a
nonconstant radius), leading to inconsistencies in calculating
the separation angles between galaxies at different positions
in the sky. The user can therefore use this type only if spherical-
geometry–based SRIDs are uploaded.
More sophisticated methods include sphere-tessellation
schemas based on nested tree data structures that define the
cells, such as HTM (Szalay et al. 2005), HEALPix (Górski et al.
2005), and IGLOO (Crittenden 2000). A clustered index com-
posed of nested cell IDs of the galaxies is adequate for spatial
searches, since it is trivial to compute the neighboring cells’ IDs
based on the cell ID a galaxy is in. Currently, CasJobs includes
an HTM library with functions that greatly facilitate spatial
searches.
The spatial galaxy distribution shown in Figure 5 is obtained
by running the FoF algorithm on the volume-limited sample
specified in § 4.1. Only galaxies in the Northern Galactic
Cap of the DR7 footprint are shown. The groups of 10 or more
galaxy members are highlighted by drawing 7 Mpc semitrans-
parent spheres around each galaxy. Finger of God-like struc-
tures can thus be easily identified.
5See definitions by the Oil & Gas Producers (OGP) Surveying & Positioning
Committee, available at http://www.epsg.org/.
CFUNBASE COSMOLOGICAL FUNCTIONS LIBRARY
983
2010 PASP, 122:976–989
This content downloaded from 132.174.252.114 on Tue, 28 Feb 2023 13:21:36 UTC
All use subject to https://about.jstor.org/terms

5. CONCLUSION
As soon as next-generation surveys release their data prod-
ucts, astronomers could be forced to work inside databases, and
even to write their own customized code and upload it into “the
cloud.” In extragalactic astronomy, the trend of mapping large-
scale structures with precision multiband photometric redshifts
will bring N ≥1010 redshift measurements, which require fast
specific database-integrated software, implementing algorithms
not slower than OðN log NÞ (Szalay et al. 2002). The Cfun-
BASE library might fill some gaps, by being customized for
either precision or speed, being expanded as new functions
are required, and being ported into other DBMSs, such as
MySQL, Oracle, PostgreSQL, and SciDB if necessary. In the
future, a need for an expanded structured query language for
scientific computing could arise, where data types and mathe-
matical expressions of higher complexity (such as linear alge-
bra, calculus, statistical functions) are integrated as a natural
part of the language. If the market is big enough, this would
replace IDL, R, Python, and other high-level languages widely
used in the scientific community, but that would need the entire
data set to be first stored in the available RAM/virtual memory,
or it might run slowly when dealing with big data sets.
The author is grateful to Mark Neyrinck for reviewing the
paper, and to Alex Szalay, Tamas Budavári, Ching-Wa Yip,
Sebastien Heinis, and Miguel Aragon-Calvo for useful advice.
The GrayWulf cluster was financially supported by the Gordon
and Betty Moore Foundation, Microsoft Research, and the Pan-
STARRS project.
APPENDIX A
CLR FUNCTIONS
A1. Cosmological Functions
The cosmological functions shown here are those with fixed
cosmological parameters drawn from equation (17). The names
of functions with free parameters start with fCosmo instead of
fCosmf, and have the extra input parameters added at the end
of the function declaration, e.g.: @OmegaM float ¼ 0:2739,
@OmegaL float ¼ 0:726, @OmegaR float ¼ 1e-4, @w0float ¼
1, @h0float ¼ 0:705).
Note that a float type in T-SQL corresponds to double pre-
cision in C#.
1. fCosmfDl(@zfloat)
Returns the luminosity distance (Mpc) at a given redshift.
2. fCosmfDc(@zfloat)
Returns the line-of-sight comoving distance (Mpc) at a given
redshift.
3. fCosmfDcInterval(@Zmin float, @Zmax float)
Returns the line-of-sight comoving distance (Mpc) compre-
hended in the redshift interval [@Zmin,@Zmax].
4. fCosmfDa(@z float)
Returns the angular diameter distance (Mpc) at a given
redshift.
5. fCosmfDm(@z float)
Returns the transverse comoving distance (Mpc) at a given
redshift.
6. fCosmfComovingVolume(@z float)
Returns the comoving volume (Mpc3) between here and a
given redshift.
7. fCosmfAbsMag(@m float, @z float)
Returns the absolute magnitude of a galaxy at a particular
redshift.
8. fCosmfDistanceModulus(@z float)
Returns the distance modulus at a particular redshift.
9. fCosmfQuantities(@zMin float, @zMax float,
@NumBin int)
Returns a table with the midpoint values of a grid of red-
shifts, together with their corresponding values of cosmological
distance, comoving volume, and time intervals.
10. fCosmfLookBackTime(@z float)
Returns the time interval (Gyr) between the present time and
a particular redshift.
11. fCosmfAgeOfUniverse(@z float)
Returns the time interval (Gyr) between a particular redshift
and the beginning of the universe.
12.
fCosmfTimeInterval(@zMin
float,
@zMax
float)
Returns the time interval (Gyr) between redshifts zMin
and zMax.
FIG. 5.—Large-scale structure and galaxy groups (derived from the friends-
of-friends algorithm) in the DR7 Northern Galactic Cap. The axes show comov-
ing distance in Mpc. Details of the volume-limited galaxy sample are presented
in § 4.1. The galaxies are shown as points, while semitransparent spheres
(7 Mpc radius) indicate galaxies belonging to groups of ≥10 members.
984
TAGHIZADEH-POPP
2010 PASP, 122:976–989
This content downloaded from 132.174.252.114 on Tue, 28 Feb 2023 13:21:36 UTC
All use subject to https://about.jstor.org/terms

13. fCosmfHubbleDistance(@z float)
Returns the Hubble Distance (Mpc) at a particular redshift.
14. fCosmfHubbleTime(@z float)
Returns the Hubble time (Gyr) at a particular redshift.
15.
fCosmfComovDist2Objects(@Redshift1
float,
@Redshift2 float, @AngularSeparation float)
Returns the comoving distance (Mpc) between 2 objects at
different redshifts and locations in the sphere.
16. fMathAngSepXYZ(@x1 float, @y1 float, @z1 float,
@x2 float, @y2 float, @z2 float)
Returns the angular separation (in radians) between 2 points
in Cartesian coordinates.
17.
fMathAngSepRADEC(@Ra1
float,
@Dec1
float,
@Ra2 float, @Dec2 float)
Returns the angular separation (in radians) between 2 points
in equatorial coordinates.
18. fCosmfZfromDl(@LuminosityDistance float)
Returns the redshift at a given luminosity distance (Mpc).
19. fCosmfZfromDa(@AngularDiamDist float)
Returns a row with the first and second solution for the red-
shifts at a given angular diameter distance (Mpc).
20. fCosmfZfromDm(@ComovDistTransverse float)
Returns the redshift for a given transverse comoving dis-
tance (Mpc).
21.fCosmfZfromDc(@ComovDistLineOfSight float)
Returns the redshift at a given line-of-sight comoving dis-
tance (Mpc).
22.fCosmfZfromAgeOfUniverse(@AgeOfUniverse
float)
Returns the redshift at a given age of the universe (Gyr).
23.fCosmfZfromLookBackTime(@LookBack-
Time float)
Returns the redshift at a given look-back time (Gyr).
24.fCosmfZfromComovVolume(@ComovVolume
float)
Returns the redshift at a given comoving volume (Mpc3).
25.fCosmfComovVolumeFromDl(@LumDistance float)
Returns the comoving volume at a given luminosity dis-
tance (Mpc).
26.fCosmfZfromTh(@HubbleTime float)
Returns the redshift at a given Hubble time (Gyr).
27.fCosmfZfromDh(@HubbleDistance float)
Returns the redshift at a given Hubble distance (Mpc).
A2. Basic Data Exploratory Analysis and Statistical Tools
1.fMathGrid(@x1
float,
@x2 float,
@NumBin int,
@IsLinearScale bit, @IsMidPoints bit)
Returns a column containing the tick marks (either interval
boundaries or midpoints) that define a grid of @NumBin bins
in the interval [@x1,@x2]. The scale is either linear or loga-
rithmic.
2.fMathBin(@x float, @x1 float, @x2 float, @NumBin
int, @HasOpenUpperBound bit, @IsLinearScale bit)
Returns the bin’s center where @x falls, given a grid of
@NumBin bins in the interval [@x1,@x2]. The scale is either
linear or logarithmic. Each bin can have open (or closed) upper
(or lower) bounds.
3.fMathRound(@x float, @SigPlace int)
Rounds a value up to the first @SigDigits significant digits.
4.spMathHistogramNDim(@Query
nvarchar(512),
@Dimension int, @String_X1 nvarchar(128), @String_X2
nvarchar(128), @String_NumCell nvarchar(128), @HasOpe-
nUpperBound bit)
Returns an N-dimensional histogram (with optional weight-
ing) of N-dimensional data points returned by a user-defined
select statement.
5.aMathCDF(@AggregatedValues float, @Value float)
Aggregate function that returns the cumulative distribu-
tion function (CDF) at a @value, given a column of values
@AggregatedValues. If the value is not in the column of values,
linear interpolation is performed.
6.aMathQuantile(@AggregatedValues float, @CDFva-
lue float)
Aggregate function that returns the inverse of the cumulative
distribution function (CDF), also called quantile function; eval-
uated at a value of the CDF @CDFvalue in the interval [0,1].
The aggregate works on a column of values @AggregatedVa-
lues, on which linear interpolation is performed.
7.fMathCDF(@Query nvarchar(256), @Value float)
Returns the cumulative distribution function (CDF) at a value
@Value, given a column of values returned by a user-defined
query @Query. If the value is not in the column of values, linear
interpolation is performed.
8.fMathQuantile(@Query
nvarchar(256),
@CDFva-
lue float)
Returns the inverse of the cumulative distribution function
(CDF), also called quantile function; evaluated at a value
@CDFvalue of the CDF in the interval [0,1]. The functions
works on a column of values returned by a user-defined query
@Query. Linear interpolation between the column values is
performed.
A3. Utility Functions
1. fMathSafeSqlCommand(@cmd VARCHAR(8000),
@limit INT ¼ 1000)
Parses and checks the command @cmd against SQL-injec-
tion. Returns a string with a safe version of the command,
enforced to return a maximum of @limit rows. Based on
spExecuteSQL
from
http://casjobs.sdss.org/dr7/en/help/
browser/browser.asp.
2. fMathReplace(@oldstr VARCHAR(8000), @pattern
VARCHAR(1000), @replacement VARCHAR(1000))
Case-insensitive string replacement. Identical to fReplace
from http://casjobs.sdss.org/dr7/en/help/browser/browser.asp.
3. fMathIsNumbers(@string varchar(8000), @start int,
@stop int)
CFUNBASE COSMOLOGICAL FUNCTIONS LIBRARY
985
2010 PASP, 122:976–989
This content downloaded from 132.174.252.114 on Tue, 28 Feb 2023 13:21:36 UTC
All use subject to https://about.jstor.org/terms

Checks that the substring is a valid number. Identical to
fIsNumbers
from
http://casjobs.sdss.org/dr7/en/help/
browser/browser.asp.
APPENDIX B
ADVANCED EXAMPLES
Refer to http://www.skyserver.org/cfunbase/ for the T-SQL
code that implements these advanced examples.
B1. Galaxy LF and CMD
This T-SQL script creates a small MGS and computes its
luminosity function and color-magnitude diagram. Refer to
§ 4.1 for details.
--/Calculating the spectroscopic
--/survey area:
SELECT SUM(area) FROM BestDR7..Region
WHERE type=‘SECTOR’
–-/AreaSurvey=7932.12522550822=7932.125 SqDeg
–-/Setting up the redshift, luminosity --/
distance, and apparent magnitude cuts: DE-
CLARE @z_1 float, @z_2 float,
@Dlum_1 float, @Dlum_2 float, @m1im_1 float,
@mlim_2 float, @FracVolume float,
@AreASurvey float, @Vsurvey float
SET @z_1 = 0.04; SET @z_2 = 0.12;
SET @Dlum_1=dbo.fCosmfDl(@z_1);
print @Dlum_1
SET @Dlum_2=dbo.fCosmfDl(@z_2);
print @Dlum_2
SET @m1im_1 = 13.50
SET @mlim_2 = 17.77
–-/The fraction of the entire sky volume
--/occupied by the survey footprint:
SET @FracVolume=0.1922801
-—/SET @FracVolume =
--/AreaSurvey/(4*PI()*power((180/PI()),2))
--/Creating small table with galaxy sample:
CREATE TABLE DR7small(
SpecObjID bigint primary key not null,
RA float not null, DEC float not null,
z float not null, m_r float not null,
Vmax float not null,
Color_u_r float not null)
INSERT DR7small
SELECT
specobjid, ra, dec, z,
petromag_r-extinction_r as m_r,
(dbo.fCosmfComovVolumeFromDl(
CASE
WHEN @Dlum_2 < dbo.fcosmfDl(z)*POWER(10.0,
(@mlim_2-(petromag_r-extinction_r))/5.0)
THEN @Dlum_2
ELSE
dbo.fcosmfDl(z)*POWER(10.0,
(@mlim_2-(petromag_r-extinction_r))/5.0)
END)- dbo.fCosmfComovVolumeFromDl(
CASE
WHEN @Dlum_1>dbo.fcosmfDl(z)*POWER(10.0,
(@m1im_1-(petromag_r-extinction_r))/5.0)
THEN @Dlum_1
ELSE
dbo.fcosmfDl(z)*POWER(10.0,
(@m1im_1-(petromag_r-extinction_r))/5.0)
END))*@FracVolume AS Vmax,
(modelMag_u-extinction_u)-
(modelMag_r-extinction_r) AS Color_u_r
FROM BestDR7.dbo.specphoto
WHERE z between @z_1 and @z_2
and primtarget&(64|128|256)!=0
-–/The previous line chooses the MGS
and petromag_r-extinction_r between
@m1im_1 and @mlim_2
–-/Add your custom photometric and
--/spectroscopic constraints here.
-–/Getting the luminosity function and its
--/error. Absolute magnitude range is
--/
[-25,-15], with number of bins=100 –-/(bin
size DeltaM=0.1 mag)
SELECT dbo.fMathBin(v.AbsMag_r,-25, -15,
100 ,1, 1) AS AbsMag,
sum(1/v.Vmax)/0.1 AS Phi,
sqrt(sum( 1/(v.Vmax*v.Vmax) ) )/0.1 AS
PhiError, count(*) AS counts
FROM (SELECT dbo.fCosmfAbsMag(m_r,z) AS
AbsMag_r, Vmax FROM DR7small) AS v
GROUP BY dbo.fMathBin(v.AbsMag_r,-25, -15,
100 ,1, 1)
ORDER BY dbo.fMathBin(v.AbsMag_r,-25, -15,
100 ,1, 1)
--/This gets the same luminosity function as
--/a probability distribution, i.e.,
-–/the area under it is unity:
EXECUTE spMathHistogramNDim ‘SELECT dbo.
fCosmfAbsMag(m_r,z), 1.0/(Vmax)
FROM DR7small’
986
TAGHIZADEH-POPP
2010 PASP, 122:976–989
This content downloaded from 132.174.252.114 on Tue, 28 Feb 2023 13:21:36 UTC
All use subject to https://about.jstor.org/terms

,1, ‘-25’, ‘-15’, ‘100’ ,1
-–/This gets the color-magnitude diagram as
--/a probability distribution, i.e., -–/
the area under it is unity. The color --/
range is [0,5] with number of bins = 100.
EXECUTE spMathHistogramNDim ‘SELECT dbo.
fCosmfAbsMag(m_r,z),Color_u_r, 1.0/Vmax
FROM DR7small’
,2, ‘-25,0’, ‘-15,5’, ‘100,100’ ,1
B2. Finding Galaxy Groups: The FoF Algorithm
This T-SQL script creates the NeighborsLSS table with
the neighbors of the galaxies, and executes the FoF algorithm,
storing the galaxies labeled by group ID in table Groups. Refer
to § 4.2 for details.
–/This table stores spatial information:
CREATE TABLE DR7smallLSS(
SpecObjID bigint not null, RA float not
null, DEC float not null, z float not
null, Gx float not null, Gy float not
null, Gz float not null
–-/If native MS-SQL server 2008 geospatial
--/indexing is also wanted, add the
--/
following line:
–-/,GeographyCol geography not null
)
-–/This creates a unique clustered index or
--/primary key with spatial information:
ALTER TABLE DR7smallLSS ADD PRIMARY KEY
(Gx,Gy,Gz,SpecObjID);
INSERT DR7smallLSS
SELECT specobjid, ra, dec, z,
--/The following gets the midpoints of the
--/3-dimensional grid cells. Note that -–/
the cell side length is rounded to 7Mpc,
--/having 80 cell divisions per dimension:
dbo.fMathBin(dbo.fCosmfDc(z)*SIN(radians
(90.0-dec))*COS(radians(RA)),0,560,80,1,1),
dbo.fMathBin(dbo.fCosmfDc(z)*SIN(radians
(90.0-dec))*SIN(radians(RA)),0,560,80,1,1),
dbo.fMathBin(dbo.fCosmfDc(z)*COS(radians
(90.0-dec)),0,560,80,1,1)
-–/If native SQL 2008 server geospatial
--/indexing is also wanted, add the
--/
following line:
-–/,GEOGRAPHY::Point(dec,ra,4326)
–-/Note that 4326 is the SRID number of a
--/custom Earth shape definition.
FROM DR7small
-–/Add the following 3 lines if a volume
--/limited sample is wanted:
-–/WHERE (dbo.fCosmfComovingVolume(0.12)
--/ -dbo.fCosmfComovingVolume(0.04)) --/
*0.1922801<=Vmax
ORDER BY
dbo.fMathBin(dbo.fCosmfDc(z)*SIN(radians
(90.0-dec))*COS(radians(RA)),0,560,80,1,1),
dbo.fMathBin(dbo.fCosmfDc(z)*SIN(radians
(90.0-dec))*SIN(radians(RA)),0,560,80,1,1),
dbo.fMathBin(dbo.fCosmfDc(z)
*COS(radians(90.0-dec)),0,560,80,1,1),
specObjID
-–/This creates the Neighbors table:
CREATE TABLE NeighborsLSS(
SpecObjID bigint not null, NeighborSpecObjID
bigint not null)
CREATE unique clustered index SpecObjID
NeighborSpecObjID ON
NeighborsLSS(SpecObjID,NeighborSpecObjID)
INSERT NeighborsLSS
SELECT h1.Specobjid, h2.SpecObjID
FROM DR7smallLSS as h1, DR7smallLSS as h2
WHERE
-–/The value 7.1 Mpc intead of 7 Mpc is chosen
--/to avoid eventual problems with rounding:
h2.Gx between h1.Gx-7.1 and h1.Gx+7.1 and
h2.Gy between h1.Gy-7.1 and h1.Gy+7.1 and
h2.Gz between h1.Gz-7.1 and h1.Gz+7.1 and
–-/If native SQL 2008 server geospatial indexing
--/is also wanted, erase the previous 3 lines
--/and add the following 2 lines:
-–/h1.GeographyRaDec.STDistance(
--/h2.GeographyRaDec)<=(6360000.0)*0.00794
-–/Note that 6360000 is a custom Earth radius
--/in meters,and 0.00794 radians is the angular
--/size distance of 1.288 Mpc at redshift 0.04.
–-/The following defines the cylindrical volume
--/around the galaxies:
and (dbo.fCosmfDc(h1.z)+dbo.fCosmfDc(h2.z)) *
SIN(dbo.fMathAngSepRADEC(h1.ra,h1.dec,h2.
ra,h2.dec)/2.0)<=1.288
and
ABS(dbo.fCosmfDc(h1.z)-dbo.fCosmfDc(h2.z))<=6.902
and h1.Specobjid !=h2.SpecObjID
GROUP BY h1.Specobjid,h2.SpecObjID
ORDER BY h1.Specobjid,h2.SpecObjID
GO
IF OBJECT_ID('Groups') IS NOT NULL DROP
TABLE Groups
IF EXISTS (SELECT name FROM tempdb..sysobjects
WHERE name like '#temp%') DROP TABLE #temp
IF EXISTS (SELECT name FROM tempdb..sysobjects
WHERE name like '#Remaining%')
CFUNBASE COSMOLOGICAL FUNCTIONS LIBRARY
987
2010 PASP, 122:976–989
This content downloaded from 132.174.252.114 on Tue, 28 Feb 2023 13:21:36 UTC
All use subject to https://about.jstor.org/terms

DROP TABLE #Remaining
IF EXISTS (SELECT name FROM tempdb..sysobjects
WHERE name like '#PreviousNeighbors%')
DROP TABLE #PreviousNeighbors
IF EXISTS (SELECT name FROM tempdb..sysobjects
WHERE name like '#Neighbors%')
DROP TABLE #Neighbors
IF EXISTS (SELECT name FROM tempdb..sysobjects
WHERE name like '#NewNeighbors%')
DROP TABLE #NewNeighbors
CREATE TABLE Groups(
SpecObjID bigint not null,GroupID int not null)
-–/This finds and labels into groups the
--/galaxies that have no neighbors:
SELECT SpecObjID,IDENTITY(int,1,1) AS GroupID
INTO #temp FROM DR7smallLSS
WHERE SpecObjID NOT IN (SELECT SpecObjID
FROM NeighborsLSS) ORDER BY SpecObjID
INSERT Groups SELECT * FROM #temp
DROP TABLE #temp
GO
-–/#Remaining has the galaxies that have not
--/been yet labeled:
CREATE TABLE #Remaining(SpecObjID bigint
primary key not null)
INSERT #Remaining
SELECT specobjid FROM DR7smallLSS
WHERE SpecObjID NOT IN (SELECT SpecObjID
FROM Groups) ORDER BY SpecObjID
--/#Neighbors stores the neighboring galaxies
--/of the ones in table #PreviousNeighbors, and
–-/#NewNeighbors stores the neighboring
galaxies
--/of the ones in table #Neighbors that are not
--/ in table #PreviousNeighbors
CREATE TABLE #PreviousNeighbors(SpecObjID
bigint not null)
CREATE TABLE #Neighbors(SpecObjID bigint
not null)
CREATE TABLE #NewNeighbors(SpecObjID
bigint not null)
-–/Starting the FoF algorithm:
DECLARE @SpecObjID bigint
DECLARE @i int, @counts int
-–/@i stores the group label:
SELECT @i=COUNT(*)+1 FROM Groups
-–/Getting the first galaxy:
SELECT TOP 1 @SpecObjID=specobjid FROM
#Remaining
INSERT #PreviousNeighbors SELECT @SpecObjID
-–/Finding the neighbors:
INSERT #Neighbors SELECT NeighborSpecObjID
FROM NeighborsLSS WHERE SpecObjID= @SpecObjID
-–/Labeling the group:
INSERT Groups SELECT @SpecObjID,@i
-–/Updating #Remaining:
DELETE FROM #Remaining
WHERE SpecObjID=@SpecObjID
-–/Starting the loop that finds new neighbors:
WHILE 1=1
BEGIN
TRUNCATE TABLE #NewNeighbors
–-/Getting the new neighbors of the neighbors:
INSERT #NewNeighbors
SELECT n1.NeighborSpecObjID
FROM NeighborsLSS as n1 JOIN #Neighbors n2
on n1.SpecObjID=n2.SpecObjID
WHERE n1.NeighborSpecObjID NOT IN
(SELECT SpecObjID FROM #PreviousNeighbors
UNION SELECT SpecObjID FROM #Neighbors)
GROUP BY n1.NeighborSpecObjID
SELECT @counts=COUNT(*) FROM #NewNeighbors
IF (@counts>=1)
--/If there are new neighbors, label the current
--/group members and set the new neighbors as
--/the current neighbors:
BEGIN
INSERT Groups
SELECT SpecObjID, @i FROM #Neighbors
DELETE FROM #Remaining WHERE SpecObjID
in (SELECT SpecObjID FROM #Neighbors)
TRUNCATE TABLE #PreviousNeighbors
INSERT #PreviousNeighbors
SELECT SpecObjID FROM #Neighbors
TRUNCATE TABLE #Neighbors
INSERT #Neighbors
SELECT SpecObjID FROM #NewNeighbors
END
ELSE
-–/If there are no new neighbors, store
--/the group label and start with new galaxy:
BEGIN
INSERT Groups
SELECT SpecObjID, @i FROM #Neighbors
DELETE FROM #Remaining WHERE SpecObjID
in (SELECT SpecObjID FROM #Neighbors)
SET @i=@i+1
SELECT TOP 1 @SpecObjID=specobjid FROM
#Remaining
-–/If all galaxies have been labeled, stop:
IF NOT EXISTS (select top 1 specobjid
from #Remaining)
988
TAGHIZADEH-POPP
2010 PASP, 122:976–989
This content downloaded from 132.174.252.114 on Tue, 28 Feb 2023 13:21:36 UTC
All use subject to https://about.jstor.org/terms

BREAK -–/this exits the while loop
TRUNCATE TABLE #PreviousNeighbors
INSERT #PreviousNeighbors
SELECT @SpecObjID
TRUNCATE TABLE #Neighbors
INSERT #Neighbors
SELECT NeighborSpecObjID FROM
NeighborsLSS WHERE SpecObjID= @SpecObjID
INSERT Groups SELECT @SpecObjID,@I
DELETE FROM #Remaining WHERE
SpecObjID=@SpecObjID
END
END
REFERENCES
Abell, P., et al. 2009, LSST Science Book, Version 2.0, preprint
(arXiv:0912.0201v1)
Abazajian, K. N., et al. 2009, ApJS, 182, 543
Armbrust, M., et al. 2009, Above the Clouds: A Berkeley View of
Cloud Computing, Berkeley Technical Report No. UCB/EECS-
2009-28
Baldry, I. K., et al. 2004, ApJ, 600, 681
Bonometto, S., et al. 2002, Modern Cosmology (Bristol, Philadelphia:
IOP Publishing)
Bell, G., Hey, T., & Szalay, A. S. 2009, Science, 323, 1297
Berlind, A., et al. 2006, ApJS, 167, 1
Budavari, T., et al. 2003, ApJ, 595, 59
Coles, M. 2009, Pro T-SQL 2008 Programmers Guide (Berkeley, CA:
Apress)
Crittenden, R. G. 2000, ApL&C, 37, 377
Dodelson, S. 2003, Modern Cosmology (Amsterdam: Academic)
Górski, K. M., et al. 2005, ApJ, 622, 759
Guttman, A. 1984, ACM SIGMOD International Conference on
Management of Data, 47
Hey, T., Tansley, S., & Tolle, K. 2009, The Fourth Paradigm: Data
Intensive
Scientific
Discovery
(Redmond,
WA:
Microsoft
Research)
Hogg, D. 2000, preprint (astro-ph/9905116v4)
Hogg, D., et al. 2002, preprint (astro-ph/0210394v1)
Huchra, J. P., & Geller, M.J. 1982, ApJ, 257, 423
Ivezic, Z., et al. 2008, preprint (arXiv:0805.2366v1)
Kitching, T. D., et al. 2009, preprint (arXiv:0901.3143)
Kolda, T., et al. 2005, LLNL Report UCRL-TR-208926
Komatsu, E., et al. 2009, ApJS, 180, 330
Liske, J. 2000, MNRAS, 319, 557
Martinez, V. J., & Saar, E. 2002, Statistics of the Galaxy Distribution
(Boca Raton, FL: Chapman and Hall/CRC)
Peacock, J. A. 1999, Cosmological Physics (Cambridge: Cambridge
Univ. Press)
Peebles, P. J. E. 1993, Principles of Physical Cosmology (Princeton,
NJ: Princeton Univ. Press)
Popp, R., & Poindexter, J. 2006, IEEE Security & Privacy, preprint
(1540-7993/06), 18
Press, W., et al. 1992, Numerical Recipes in C: The Art of Scien-
tific
Computing
(2nd
ed;
Cambridge:
Cambridge
Univ.
Press)
Roehm, U., & Blakeley, J. 2009, preprint (arXiv:0909.1764)
Schmidt, M. 1968, ApJ, 151, 393
Simmhan, Y., et al. 2009, in 42nd Hawaii International Conference on
System Sciences, GrayWulf: Scalable Software Architecture for
Data Intensive Computing
Singh, V., et al. 2006, Microsoft Research Tech. Rep. MSR TR-
2006-190
Sun, L., et al. 2006, Chinese J. Astron. Astrophys, 6, 155164
Szalay, A. S, et al. 2001, Microsoft Research Tech. Rep. MSR-TR-
2001-104
———. 2002, Microsoft Research Tech. Rep. MSR-TR-2002-
84
———. 2005, Microsoft Research Tech. Rep. MSR-TR-2005-
123
———. 2009a, in 42nd Hawaii International Conference on System
Sciences
Szalay, A. S, et al. 2009b, SOSP Workshop on Power Aware Comput-
ing and Systems (HotPower ’09)
Strauss, M. A., et al. 2002, AJ, 124, 1810
Wang, X., et al. 2009, MNRAS 394, 1775
Weinberg, S. 2008, Cosmology (Oxford: Oxford Univ. Press)
Wright, N. 2006, PASP, 118, 1711
York, D. G., et al. 2000, ApJ, 120, 1579
CFUNBASE COSMOLOGICAL FUNCTIONS LIBRARY
989
2010 PASP, 122:976–989
This content downloaded from 132.174.252.114 on Tue, 28 Feb 2023 13:21:36 UTC
All use subject to https://about.jstor.org/terms

