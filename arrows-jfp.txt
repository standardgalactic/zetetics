JFP 20 (1): 51–69, 2010.
c⃝Cambridge University Press 2010
doi:10.1017/S095679680999027X
51
The arrow calculus
SAM LINDLEY, P HILIP WADLER and JEREMY YALLOP
University of Edinburgh
(e-mail: Sam.Lindley@ed.ac.uk, Philip.Wadler@ed.ac.uk, Jeremy.Yallop@ed.ac.uk)
Abstract
We introduce the arrow calculus, a metalanguage for manipulating Hughes’s arrows with
close relations both to Moggi’s metalanguage for monads and to Paterson’s arrow notation.
Arrows are classically deﬁned by extending lambda calculus with three constructs satisfying
nine (somewhat idiosyncratic) laws; in contrast, the arrow calculus adds four constructs
satisfying ﬁve laws (which ﬁt two well-known patterns). The ﬁve laws were previously known
to be sound; we show that they are also complete, and hence that the ﬁve laws may replace
the nine.
1 Introduction
Arrows belong in the quiver of every functional programmer, ready to pierce hard
problems through their heart.
Arrows (Hughes 2000) generalize the monads of Moggi (1991) and the idioms of
McBride and Paterson (2008). They are closely related to Freyd categories, discovered
independently from Hughes by Power, Robinson, and Thielecke (Power & Robinson
1997; Power & Thielecke 1999). Arrows enjoy a wide range of applications, including
parsers and printers (Jansson & Jeuring 1999), web interaction (Hughes 2000),
circuits (Paterson 2001), graphic user interfaces (Courtney & Elliott 2001), and
robotics (Hudak et al. 2003).
Formally, arrows are deﬁned by extending simply typed lambda calculus with three
constants satisfying nine laws. And here is where the problems start. While some of
the laws are easy to remember, others are not. Further, arrow expressions written
with these constants use a “pointless” style of expression that can be hard to read
and to write. (Not to mention that “pointless” is the last thing arrows should be.)
Fortunately, Paterson introduced a notation for arrows that is easier to read and
to write, and in which some arrow laws may be directly expressed (Paterson 2001).
But for all its beneﬁts, Paterson’s notation is only a partial solution. It simply
abbreviates terms built from the three constants, and there is no claim that its laws
are adequate for all reasoning with arrows. Syntactic sugar is an apt metaphor: it
sugars the pill, but the pill still must be swallowed.
Here we deﬁne the arrow calculus, which closely resembles both Paterson’s notation
for arrows and Moggi’s metalanguage for monads. Instead of augmenting simply
typed lambda calculus with three constants and nine laws, we augment it with four
constructs satisfying ﬁve laws. Two of these constructs resemble function abstraction
and application, and satisfy beta and eta laws. The remaining two constructs resemble
http:/www.cambridge.org/core/terms. http://dx.doi.org/10.1017/S095679680999027X
Downloaded from http:/www.cambridge.org/core. Edinburgh College of Art, on 02 Dec 2016 at 19:15:24, subject to the Cambridge Core terms of use, available at

52
S. Lindley et al.
the unit and bind of a monad, and satisfy left unit, right unit, and associativity laws.
So instead of nine (somewhat idiosyncratic) laws, we have ﬁve laws ﬁtting two
familiar patterns.
The arrow calculus is equivalent to the classic formulation. We give a translation
of the four constructs into the three constants, and show the ﬁve laws follow from
the nine. Conversely, we also give a translation of the three constants into the four
constructs, and show the nine laws follow from the ﬁve. Hence, the arrow calculus
is no mere syntactic sugar. Instead of understanding it by translation into the three
constants, we can understand the three constants by translating them to it!
Elsewhere, we have already applied the arrow calculus to elucidate the connections
between idioms, arrows, and monads (Lindley et al. 2008b). Arrow calculus was not
the main focus of that paper, where it was a tool to an end, and that paper has
perhaps too terse a description of the calculus. This paper was in fact written before
the other, and we hope that it provides a readable introduction to the arrow calculus.
Our notation is a minor syntactic variation of Paterson’s notation, and Paterson’s
paper contains essentially the same laws we give here. So what is new?
First, Paterson translates his notation into classic arrows, and shows the ﬁve laws
follow from the nine (soundness). Conversely, we give an inverse translation, and
show that the nine laws follow from the ﬁve (completeness). Completeness is not
just a nicety: Paterson regards his notation as syntactic sugar for the classic arrows;
completeness lets us claim our calculus can supplant classic arrows.
Second, we are also the ﬁrst to publish concise formal type rules. The type rules
are unusual in that they involve two contexts, one for variables bound by ordinary
lambda abstraction and one for variables bound by arrow abstraction. Discovering
the rules greatly improved our understanding of arrows. Or rather, we should say
rediscovering. It turns out that the type rules were known to Paterson, and he used
them to implement the arrow notation extension to the Glasgow Haskell Compiler.
But Paterson never published the type rules; he explained to us that “Over the years
I spent trying to get the arrow notation published, I replaced formal rules with
informal descriptions because referees didn’t like them.” We are glad to help the
formal rules ﬁnally into print.
Third, we show the two translations from classic arrows to arrow calculus and
back are exactly inverse, providing an equational correspondence in the sense of
Sabry and Felleisen (1993). The reader’s reaction may be to say, “Of course the
translations are inverses, how could they be otherwise?” But in fact the more
common situation is for forward and backward translations to compose to give an
isomorphism (category theorists call this an equivalence of categories), rather than
compose to give the identity on the nose (an isomorphism of categories). Lindley
et al. (2008b) give forward and backward translations between variants of idioms,
arrows, and monads, and only some turn out to be equational correspondences; we
had to invent a more general notion of equational equivalence to characterize the
others. Interestingly, the proof of equational correspondence depends only on the
translations, and is independent of the type rules.
Fourth, we reveal a redundancy: the nine classic arrow laws can be reduced to
eight. Notation alone was not adequate to lead to this discovery; it ﬂowed from
http:/www.cambridge.org/core/terms. http://dx.doi.org/10.1017/S095679680999027X
Downloaded from http:/www.cambridge.org/core. Edinburgh College of Art, on 02 Dec 2016 at 19:15:24, subject to the Cambridge Core terms of use, available at

The arrow calculus
53
our attempts to show the translations between classic arrows and arrow calculus
preserve the laws.
Fifth, following Hughes and Paterson, we extend the arrow calculus to higher-
order arrows, corresponding to arrows with apply, which in turn correspond to
monads (Hughes 2000). We again show soundness and completeness, and uncover a
second redundancy, that the three laws proposed by Hughes can be reduced to two.
The arrow calculus has already proven useful. It enabled us to clarify the
relationship between idioms, arrows, and monads (Lindley et al. 2008b), and it
provided the inspiration for a categorical semantics of arrows (Atkey 2008).
In private correspondence, Eugenio Moggi and Robert Atkey have suggested
that there may be interesting generalizations of arrows, inspired by the formulation
proposed in this paper, possibly related to Indexed Freyd Models (Atkey 2008) or
to a generalization of Benton’s Adjoint Calculus (Benton 1995).
This paper is organized as follows. Section 2 reviews the classic formulation
of arrows. Section 3 introduces the arrow calculus. Section 4 translates the arrow
calculus into classic arrows, and vice versa, showing that the laws of each can be
derived from the other. Section 5 extends the arrow calculus to higher-order arrows.
2 Classic arrows
We refer to the traditional presentation of arrows as classic arrows, and to our new
metalanguage as the arrow calculus.
The core of both is an entirely pedestrian simply typed lambda calculus with
products and functions, as shown in Figure 1. We let A, B, C range over types,
L, M, N range over terms, and Γ, Δ range over environments. A type judgment
Γ ⊢M : A indicates that in environment Γ term M has type A. We use a Curry
formulation, eliding types from terms. Products and functions satisfy beta and eta
laws. The (η→) law has the usual side-condition, that x is not free in L.
Classic arrows extends lambda calculus with one type and three constants
satisfying nine laws, as shown in Figure 2. The type A ; B denotes a computation
that accepts a value of type A and returns a value of type B, possibly performing
side eﬀects. The three constants are: arr, which promotes a function to a pure arrow
with no side eﬀects; (>>>), which composes two arrows; and ﬁrst, which extends
an arrow to act on the ﬁrst component of a pair leaving the second component
unchanged. We allow inﬁx notation as usual, writing M>>>N in place of (>>>) M N.
The nine laws state that arrow composition has a left and right unit (;1,;2), arrow
composition is associative (;3), composition of functions promotes to composition
of arrows (;4), ﬁrst on pure arrows rewrites to a pure arrow (;5), ﬁrst is a
homomorphism for composition (;6), ﬁrst commutes with a pure arrow that is the
identity on the ﬁrst component of a pair (;7), and ﬁrst pushes through promotions
of fst and assoc (;8,;9).
The ﬁgure deﬁnes ten auxiliary functions, all of which are standard. The identity
function id, selector fst, associativity assoc, function composition f · g, and product
bifunctor f × g are required for the nine laws. Functions dup and swap are used to
deﬁne second, which is like ﬁrst but acts on the second component of a pair, and
http:/www.cambridge.org/core/terms. http://dx.doi.org/10.1017/S095679680999027X
Downloaded from http:/www.cambridge.org/core. Edinburgh College of Art, on 02 Dec 2016 at 19:15:24, subject to the Cambridge Core terms of use, available at

54
S. Lindley et al.
Fig. 1. Lambda calculus.
f &&& g, which applies arrows f and g to the same argument and pairs the results.
We also deﬁne the selector snd.
Every arrow of interest comes with additional operators, which perform side
eﬀects or combine arrows in other ways. The story for these additional operators is
essentially the same for classic arrows and the arrow calculus, so we say little about
them.
3 The arrow calculus
Arrow calculus extends the core lambda calculus with four constructs satisfying ﬁve
laws, as shown in Figure 3. As before, the type A ; B denotes a computation that
accepts a value of type A and returns a value of type B, possibly performing side
eﬀects.
We now have two syntactic categories. Terms, as before, are ranged over by
L, M, N, and commands are ranged over by P, Q, R. In addition to the terms of
the core lambda calculus, there is one new term form: arrow abstraction λ•x. Q.
There are three command forms: arrow application L • M; arrow unit [M], which
resembles unit in a monad; and arrow bind let x ⇐P in Q, which resembles bind
in a monad.
In addition to the term typing judgment
Γ ⊢M : A
http:/www.cambridge.org/core/terms. http://dx.doi.org/10.1017/S095679680999027X
Downloaded from http:/www.cambridge.org/core. Edinburgh College of Art, on 02 Dec 2016 at 19:15:24, subject to the Cambridge Core terms of use, available at

The arrow calculus
55
Fig. 2. Classic arrows.
http:/www.cambridge.org/core/terms. http://dx.doi.org/10.1017/S095679680999027X
Downloaded from http:/www.cambridge.org/core. Edinburgh College of Art, on 02 Dec 2016 at 19:15:24, subject to the Cambridge Core terms of use, available at

56
S. Lindley et al.
Fig. 3. Arrow calculus.
we now also have a command typing judgment
Γ; Δ ⊢P ! A.
An important feature of the arrow calculus is that the command type judgment
has two environments, Γ and Δ, where variables in Γ come from ordinary lambda
abstractions, λx. N, while variables in Δ come from arrow abstractions, λ•x. Q, and
arrow bind, let x ⇐P in Q.
We will give a translation of commands to classic arrows, such that a command
P satisfying the judgment Γ; Δ ⊢P ! A translates to a term [[P]]Δ satisfying the
judgment Γ ⊢[[P]]Δ : Δ ; A; so a command P denotes an arrow, and the second
environment Δ corresponds to the argument type of the arrow. We explain the type
rules of the language in this section, and the translation in the next.
Here are the type rules for the four constructs. Arrow abstraction converts a
command into a term.
Γ; x : A ⊢Q ! B
Γ ⊢λ•x. Q : A ; B
Arrow abstraction closely resembles function abstraction, save that the body Q is
a command (rather than a term) and the bound variable x goes into the second
environment (separated from the ﬁrst by a semicolon).
Conversely, arrow application builds a command from two terms.
Γ ⊢L : A ; B
Γ, Δ ⊢M : A
Γ; Δ ⊢L • M ! B
http:/www.cambridge.org/core/terms. http://dx.doi.org/10.1017/S095679680999027X
Downloaded from http:/www.cambridge.org/core. Edinburgh College of Art, on 02 Dec 2016 at 19:15:24, subject to the Cambridge Core terms of use, available at

The arrow calculus
57
Arrow application closely resembles function application. The argument term may
contain variables from Δ, but the term denoting the arrow to be applied may not;
this is because there is no way to apply an arrow that is itself yielded by another
arrow. It is for this reason that we distinguish two environments, Γ and Δ. (Section 5
describes an arrow with an apply operator, which relinquishes this restriction and is
equivalent to a monad.)
Arrow unit promotes a term to a command.
Γ, Δ ⊢M : A
Γ; Δ ⊢[M] ! A
Note that in the hypothesis we have a term judgment with one environment (there is
a comma between Γ and Δ), while in the conclusion we have a command judgment
with two environments (there is a semicolon between Γ and Δ).
Last, the value returned by a command may be bound.
Γ; Δ ⊢P ! A
Γ; Δ, x : A ⊢Q ! B
Γ; Δ ⊢let x ⇐P in Q ! B
This resembles a traditional let term, save that the bound variable goes into the
second environment, not the ﬁrst.
Admissibility rules for substitution and weakening follow from these. Substitution
of a term in a term is straightforward.
Γ ⊢M : A
Γ, x : A ⊢N : B
Γ ⊢N[x := M] : B
Here the double line means that if the judgment on the top is derivable then the
judgment on the bottom is also derivable.
Substitution of a term in a command may involve either environment. Substitution
for a variable in the ﬁrst environment is again straightforward.
Γ ⊢M : A
Γ, x : A; Δ ⊢Q ! B
Γ; Δ ⊢Q[x := M] ! B
Substitution for a variable in the second environment is more interesting.
Γ, Δ ⊢M : A
Γ; Δ, x : A ⊢Q ! B
Γ; Δ ⊢Q[x := M] ! B
In this case the term may refer to variables in either environment.
The weakening rule for terms is straightforward. Write Γ ⊆Γ′ to indicate that
every type binding x : A in Γ also occurs in Γ′. If Γ ⊆Γ′, then
Γ ⊢M : A
Γ′ ⊢M : A
http:/www.cambridge.org/core/terms. http://dx.doi.org/10.1017/S095679680999027X
Downloaded from http:/www.cambridge.org/core. Edinburgh College of Art, on 02 Dec 2016 at 19:15:24, subject to the Cambridge Core terms of use, available at

58
S. Lindley et al.
The weakening rule for commands is slightly unusual because of the two typing
contexts. If Γ ⊆Γ′ and Γ, Δ ⊆Γ′, Δ′, then
Γ; Δ ⊢P ! A
Γ′; Δ′ ⊢P ! A
Weakening permits both the Γ and Δ type enviroments to grow, and also permits
variables to move from Δ into Γ (but not conversely).
Arrow abstraction and application satisfy beta and eta laws, (β;) and (η;), while
arrow unit and bind satisfy left unit, right unit, and associativity laws, (left), (right),
and (assoc). Similar laws appear in the computational lambda calculus of Moggi
(1991). The (assoc) law has the usual side condition, that x is not free in R. We do
not require a side condition for (η;), because the type rules guarantee that x does
not appear free in L.
Paterson’s notation is closely related to ours. Here is a translation table, with our
notation on the left and his on the right.
λ•x. Q
proc x →Q
L • M
L −≺M
[M]
arrowA −≺M
let x ⇐P in Q
do {x ←P; Q}
In essence, each is a minor syntactic variant of the other. The only diﬀerence of
note is that we introduce arrow unit as an explicit construct, [M], while Paterson
uses the equivalent form arrowA −≺M where arrowA is arr id. Our introduction of a
separate construct for arrow unit is slightly neater, and avoids the need to introduce
arrowA as a constant in the arrow calculus.
4 Translations
We now consider translations between our two formulations, and show they are
equivalent.
The translation takes an arrow calculus term M into a classic arrow [[M]]:
[[Γ ⊢M : A]]
=
Γ ⊢[[M]] : A
Similarly, the translation takes an arrow calculus command P into a classic arrow
[[P]]Δ, parameterized by a sequence of variables:
[[Γ; Δ ⊢P ! A]]
=
Γ ⊢[[P]]Δ : Δ ; A.
The denotation of a command is an arrow, with argument corresponding to the
command’s (second) environment Δ and result corresponding to the command’s type
A.
Note that in [[P]]Δ, we take Δ to stand for a tuple of the variables in the
environment, and in Δ ; A we take Δ to stand for the product of the types in
the environment. We encode these as binary products associating to the left. For
example, if Δ is x1 : A1, x2 : A2, x3 : A3 then Δ as a tuple of variables stands
for ((x1, x2), x3) and Δ as a type stands for (A1 × A2) × A3. We also write λΔ. M
http:/www.cambridge.org/core/terms. http://dx.doi.org/10.1017/S095679680999027X
Downloaded from http:/www.cambridge.org/core. Edinburgh College of Art, on 02 Dec 2016 at 19:15:24, subject to the Cambridge Core terms of use, available at

The arrow calculus
59
Fig. 4. Translation from arrow calculus into classic arrows.
with the obvious meaning. For example, if Δ is as above then λΔ. [[M]] stands for
λz. [[M]][x1 := fst (fst z), x2 := snd (fst z), x3 := snd z].
The translation from arrow calculus to classic arrows is given in Figure 4.
The translation of the constructs of the core lambda calculus are straightforward
homomorphisms. We consider in turn the translation of the four new constructs.
The translation of an arrow abstraction is the translation of its body with respect
to its bound variable:
[[λ•x. Q]]
=
[[Q]]x
Or, in the context of its type rules:

Γ; x : A ⊢Q ! B
Γ ⊢λ•x. Q : A ; B

=
Γ ⊢[[Q]]x : A ; B
Γ ⊢[[Q]]x : A ; B
The introduction rule for arrow abstraction in the arrow calculus becomes a no-op
when translated to classic arrows.
It may be worth pausing to explain the above in detail. The translation of rules
is to be read pointwise. The translation of commands is [[Γ; Δ ⊢P ! A]] = Γ ⊢
[[P]]Δ : Δ ; A, so taking Δ := x : A, P := Q, B := A gives us the translation of the
hypothesis. Similarly, the translation of terms is [[Γ ⊢M : A]] = Γ ⊢[[M]] : A, so
taking M := λ•x. Q, A := A ; B and applying the deﬁnition [[λ•x. Q]] = [[Q]]x gives
us the translation of the conclusion.
The translation of an arrow application is the composition of the promotion of
the translation of the argument with the translation of the function:
[[L • M]]Δ
=
arr (λΔ. [[M]]) >>> [[L]]
Or, in the context of its type rules:
⎡
⎣
⎡
⎣
Γ ⊢L : A ; B
Γ, Δ ⊢M : A
Γ; Δ ⊢L • M ! B
⎤
⎦
⎤
⎦
=
Γ ⊢[[L]] : A ; B
Γ, Δ ⊢[[M]] : A
Γ ⊢arr (λΔ. [[M]]) >>> [[L]] : Δ ; B
Here λΔ. [[M]] is a function of type Δ →A; applying arr to this yields an arrow
Δ ; A which is composed with the arrow [[L]] of type A ; B to yield an arrow
Δ ; B as required.
http:/www.cambridge.org/core/terms. http://dx.doi.org/10.1017/S095679680999027X
Downloaded from http:/www.cambridge.org/core. Edinburgh College of Art, on 02 Dec 2016 at 19:15:24, subject to the Cambridge Core terms of use, available at

60
S. Lindley et al.
Fig. 5. Translation from classic arrows into arrow calculus.
The translation of the promotion of a term to a command is the promotion of
the corresponding function:
[[ [M] ]]Δ
=
arr (λΔ. [[M]])
Or, in the context of its type rules:

Γ, Δ ⊢M : A
Γ; Δ ⊢[M] ! A

=
Γ, Δ ⊢[[M]] : A
Γ ⊢arr (λΔ. [[M]]) : Δ ; A
This is exactly the same as the part of the previous transformation corresponding
to the argument of the function.
Finally, the translation of a binding extends the environment by the translation
of the deﬁniens and composes this with the body:
[[let x ⇐P in Q]]Δ
=
(arr id &&& [[P]]Δ) >>> [[Q]](Δ,x)
Or, in the context of its type rules:
⎡
⎣
⎡
⎣
Γ; Δ ⊢P ! A
Γ; Δ, x : A ⊢Q ! B
Γ; Δ ⊢let x ⇐P in Q ! B
⎤
⎦
⎤
⎦
=
Γ ⊢[[P]]Δ : Δ ; A
Γ ⊢[[Q]]Δ,x : Δ×A ; B
Γ ⊢(arr id &&& [[P]]Δ) >>> [[Q]]Δ,x : Δ ; B
This translation uses &&&, which is deﬁned in terms of ﬁrst (and second) in Figure 2.
Here arr id &&& [[P]]Δ of type Δ ; Δ × A extends the environment, and composition
with [[Q]]Δ,x of type Δ × A ; B yields an arrow Δ ; B as required.
The inverse translation, from classic arrows to the arrow calculus, is given in
Figure 5. Again, the translations of the constructs of the core lambda calculus
are straightforward homomorphisms. Each of the three constants translates to an
appropriate term in the arrow calculus. Promotion accepts a function, and returns
the corresponding arrow which applies the function:
[[arr]]−1
=
λf. λ•x. [f x]
Composition of arrows looks just like ordinary function composition, but using
arrow apply instead of function application:
[[(>>>)]]−1
=
λf. λg. λ•x. let y ⇐f • x in g • y
And the constant ﬁrst accepts an arrow, and returns an arrow which takes a
pair, applies the arrow to the ﬁrst component of the pair and returns the second
http:/www.cambridge.org/core/terms. http://dx.doi.org/10.1017/S095679680999027X
Downloaded from http:/www.cambridge.org/core. Edinburgh College of Art, on 02 Dec 2016 at 19:15:24, subject to the Cambridge Core terms of use, available at

The arrow calculus
61
component unchanged:
[[ﬁrst]]−1
=
λf. λ•z. let x ⇐f • fst z in [(x, snd z)]
Our previous admissibility rules give rise to two lemmas about translation. The
substitution lemma relates the translation of a substitution to the translation of its
components:
[[Q[x := M]]]Δ
=
arr (λΔ. (Δ, [[M]])) >>> [[Q]]Δ,x
Or, in the context of its type rules:
⎡
⎢⎣
⎡
⎢⎣
Γ, Δ ⊢M : A
Γ; Δ, x : A ⊢Q ! B
Γ; Δ ⊢Q[x := M] ! B
⎤
⎥⎦
⎤
⎥⎦
=
Γ, Δ ⊢[[M]] : A
Γ ⊢[[Q]]Δ, x : Δ × A ; B
Γ ⊢arr (λΔ. (Δ, [[M]])) >>> [[Q]]Δ,x : Δ ; B
The proof is by induction on the structure of Q.
Similarly, the Weakening Lemma relates the translation of a weakened judgment
to the translation of the original judgment:
[[P]]Δ′
=
arr (λΔ′. Δ) >>> [[P]]Δ
Or, in the context of its type rules, if Γ ⊆Γ′ and Γ, Δ ⊆Γ′, Δ′, then

Γ; Δ ⊢P ! A
Γ′; Δ′ ⊢P ! A

=
Γ ⊢[[P]]Δ : Δ ; A
Γ′ ⊢arr (λΔ′. Δ) >>> [[P]]Δ : Δ′ ; A
The proof is by induction over P.
We can now show four properties.
(i) The ﬁve laws of the arrow calculus follow from the nine laws of classic arrows:
M = N implies [[M]] = [[N]]
and
P = Q implies [[P]]Δ = [[Q]]Δ
for all arrow calculus terms M, N and commands P, Q. The proof requires
ﬁve calculations, one for each law of the arrow calculus. Figure 6 shows one
of these, the calculation to derive (right) from the classic arrow laws.
(ii) The nine laws of classic arrows follow from the ﬁve laws of the arrow calculus:
M = N implies [[M]]−1 = [[N]]−1
for all classic arrow terms M, N. The proof requires nine calculations, one for
each classic arrow law. Figure 7 shows one of these, the calculation to derive
(;2) from the laws of the arrow calculus.
(iii) Translating from the arrow calculus into classic arrows and back again is the
identity on terms:
[[ [[M]] ]]−1 = M
for all arrow calculus terms M. Translating a command of the arrow calculus
into classic arrows and back again cannot be the identity, because the back
http:/www.cambridge.org/core/terms. http://dx.doi.org/10.1017/S095679680999027X
Downloaded from http:/www.cambridge.org/core. Edinburgh College of Art, on 02 Dec 2016 at 19:15:24, subject to the Cambridge Core terms of use, available at

62
S. Lindley et al.
Fig. 6. Proof of right from classic arrows.
Fig. 7. Proof of ;2 in arrow calculus.
translation yields a term rather than a command, but it does yield the term
that is the arrow abstraction of the original command:
[[ [[P]]Δ ]]−1 = λ•Δ. P
for all arrow calculus commands P. The proof requires four calculations, one
for each construct of the arrow calculus.
http:/www.cambridge.org/core/terms. http://dx.doi.org/10.1017/S095679680999027X
Downloaded from http:/www.cambridge.org/core. Edinburgh College of Art, on 02 Dec 2016 at 19:15:24, subject to the Cambridge Core terms of use, available at

The arrow calculus
63
Fig. 8. Translating ﬁrst to arrow calculus and back is the identity.
(iv) Translating from classic arrows into the arrow calculus and back again is the
identity:
[[ [[M]]−1 ]] = M
for all classic arrow terms M. The proof requires three calculations, one for
each classic arrow constant. Figure 8 shows one of these, the calculation for
ﬁrst.
Properties (i)–(iv) together constitute an equational correspondence between classic
arrows and the arrow calculus (Sabry & Felleisen 1993). The full details of the proof
appear in a companion technical report (Lindley et al. 2008a).
A look at Figure 6 reveals a mild surprise: (;2), the right unit law of classic
arrows, is not required to prove (right), the right unit law of the arrow calculus.
Further, it turns out that (;2) is also not required to prove the other four laws. But
this is a big surprise! From the classic arrow laws—excluding (;2)—we can prove
http:/www.cambridge.org/core/terms. http://dx.doi.org/10.1017/S095679680999027X
Downloaded from http:/www.cambridge.org/core. Edinburgh College of Art, on 02 Dec 2016 at 19:15:24, subject to the Cambridge Core terms of use, available at

64
S. Lindley et al.
Fig. 9. Proof that ;2 is redundant.
the laws of the arrow calculus, and from these we can in turn prove the classic arrow
laws—including (;2). It follows that (;2) must be redundant.
Once the arrow calculus provided the insight, it was not hard to ﬁnd a direct
proof of redundancy, as presented in Figure 9. We believe we are the ﬁrst to observe
that the nine classic arrow laws can be reduced to eight.
5 Higher-order arrows
Arrows oﬀer only a weak notion of structure, and it is common to impose additional
structure by adding extra constants and extra laws. Such variants include higher-
order arrows (Hughes 2000), arrows with choice (Hughes 2000), arrows with loops
(Paterson 2001), and static arrows (Lindley et al. 2008b). Here we show how to treat
higher-order computation in the arrow calculus; we believe the other extensions can
be treated similarly.
Hughes (2000) described the additional structure required for classic arrows to be
higher order, and showed that an arrow with this structure is equivalent to a monad.
In practice, when such structure is present one would tend to use a monad rather
than an arrow (since the monad calculus is simpler than the arrow calculus). But
the structure is useful for understanding the relation between monads and arrows
(Hughes 2000; Lindley et al. 2008b).
Hughes introduced a new constant, an arrow analogue of application,
app
:
(A ; B)×A ; B
satisfying three laws, as shown in Figure 10.
http:/www.cambridge.org/core/terms. http://dx.doi.org/10.1017/S095679680999027X
Downloaded from http:/www.cambridge.org/core. Edinburgh College of Art, on 02 Dec 2016 at 19:15:24, subject to the Cambridge Core terms of use, available at

The arrow calculus
65
Fig. 10. Higher-order classic arrows.
Fig. 11. Higher-order arrow calculus.
Recall our previous rule for arrow application,
Γ ⊢L : A ; B
Γ, Δ ⊢M : A
Γ; Δ ⊢L • M ! B
which imposes the restriction that the term denoting the arrow to apply cannot
contain free variables in Δ. To extend the arrow calculus to higher-order arrows,
we introduce a second apply operation (written
rather than •) which lifts this
restriction,
Γ, Δ ⊢L : A ; B
Γ, Δ ⊢M : A
Γ; Δ ⊢L
M ! B
and satisﬁes a beta law,
(βapp)
(λ•x. Q)
M
=
Q[x := M]
The changes are summarized in Figure 11.
http:/www.cambridge.org/core/terms. http://dx.doi.org/10.1017/S095679680999027X
Downloaded from http:/www.cambridge.org/core. Edinburgh College of Art, on 02 Dec 2016 at 19:15:24, subject to the Cambridge Core terms of use, available at

66
S. Lindley et al.
Fig. 12. Proof of ;H2 in higher-order arrow calculus.
It is instructive to see the beta law rewritten with types:
Γ; x : A ⊢Q ! B
Γ ⊢M : A
Γ; ∅⊢(λ•x. Q)
M = Q[x := M] ! B
where we write Γ; Δ ⊢P = Q ! A to abbreviate Γ; Δ ⊢P ! A and Γ; Δ ⊢Q ! A and
P = Q. One might be tempted to adopt more general types,
Γ, Δ; x : A ⊢Q ! B
Γ, Δ ⊢M : A
Γ; Δ ⊢(λ•x. Q)
M = Q[x := M] ! B
but this cannot be correct, because the more general typing for the right-hand side
is not necessarily admissible under the more general typing for Q.
The (ηapp) law follows from (βapp), since
λ•x. L
x = λ•x. (λ•y. L • y)
x = λ•x. L • x = L
where the equalities follow by (η;), (βapp), and (η;), respectively. Further, every
ﬁrst-order application is equivalent to a higher-order application. If we assume
Γ ⊢L : A ; B and Γ, Δ ⊢M : A and x ̸∈Γ, Δ, then
L • M = (λ•x. L • x)
M = L
M
where the equalities follow by (βapp) and (η;), respectively.
http:/www.cambridge.org/core/terms. http://dx.doi.org/10.1017/S095679680999027X
Downloaded from http:/www.cambridge.org/core. Edinburgh College of Art, on 02 Dec 2016 at 19:15:24, subject to the Cambridge Core terms of use, available at

The arrow calculus
67
Fig. 13. Proof of βapp from higher order classic arrows.
http:/www.cambridge.org/core/terms. http://dx.doi.org/10.1017/S095679680999027X
Downloaded from http:/www.cambridge.org/core. Edinburgh College of Art, on 02 Dec 2016 at 19:15:24, subject to the Cambridge Core terms of use, available at

68
S. Lindley et al.
Replacing every occurrence of L • M by L
M renders the diﬀerence in the
two environments, Γ and Δ, no longer relevant, since the only signiﬁcant diﬀerence
between Γ and Δ is that L in L • M may not use variables in Δ, and it is precisely
this restriction that is lifted in L
M.
The substitution and weakening lemmas extend straightforwardly. The translation
from arrow calculus to classic arrows is extended by
[[L
M]]Δ
=
arr (λΔ. ([[L]], [[M]])) >>> app
and the inverse translation is extended by
[[app]]−1
=
λ•z. (fst z)
(snd z).
As before, we must show that the translations preserve equations. There are three
calculations for each of the three higher-order arrow laws. Figure 12 shows one
of these, the calculation to derive (;H2) from the laws of the arrow calculus and
(βapp). Figure 13 shows the corresponding calculation for the inverse translation, a
proof of (βapp) from the laws of classic arrows with apply.
Once again, the proof reveals a surprise: (;H2) is not required to prove (βapp).
From the classic laws—with apply but excluding (;H2)—we can prove the laws
of higher-order arrow calculus, and from these we can in turn prove the classic
laws—including (;H2). It follows that (;H2) must be redundant. We believe we
are the ﬁrst to observe that the three classic arrow laws for app can be reduced to
two.
Acknowledgments
Our thanks to Robert Atkey, Samuel Bronson, John Hughes, Eugenio Moggi, Ross
Paterson, and our referees.
References
Atkey, R. (2008) What is a categorical model of arrows? In Mathematical Structures in
Functional Programming, Capreta, V. & McBride, C. (eds), Electronic Notes in Theoretical
Computer Science, Reykjavic, Iceland.
Benton, N. (1995) A mixed linear and non-linear logic: Proofs, terms and models. In Computer
Science Logics, Pacholski, L. & Tiuryn, J. (eds), Lecture Notes in Computer Science,
vol. 933. Springer–Verlag, Kazimierz, Poland.
Courtney, A. & Elliott, C. (2001) Genuinely Functional User Interfaces. Haskell workshop,
41–69.
Hudak, P., Courtney, A., Nilsson, H. & Peterson, J. (2003) Arrows, robots, and functional
reactive programming. In Advanced Functional Programming, 4th International School,
Jeuring, J. & Jones, S. P. (eds), LNCS, vol. 2638. Springer-Verlag, Oxford, UK.
Hughes, J. (2000) Generalising monads to arrows, Sci Comput Program., 37: 67–111.
Jansson, P. & Jeuring, J. (1999) Polytypic compact printing and parsing. Pages 273–287 of:
European Symposium on Programming, LNCS, vol. 1576. Springer-Verlag, Amsterdam, The
Netherlands.
Lindley, S., Wadler, P. & Yallop, J. (2008a) The Arrow Calculus. Tech. rept. EDI-INF-RR-1258.
School of Informatics, University of Edinburgh.
http:/www.cambridge.org/core/terms. http://dx.doi.org/10.1017/S095679680999027X
Downloaded from http:/www.cambridge.org/core. Edinburgh College of Art, on 02 Dec 2016 at 19:15:24, subject to the Cambridge Core terms of use, available at

The arrow calculus
69
Lindley, S., Wadler, P. & Yallop, J. (2008b) Idioms are oblivious, arrows are meticulous,
monads are promiscuous. In Mathematical Structures in Functional Programming, Capreta,
V. & McBride, C. (eds), Electronic Notes in Theoretical Computer Science, Reykjavic,
Iceland.
McBride, C. & Paterson, R. (2008) Applicative programming with eﬀects, J. Funct. Program.,
18 (1): 1–13.
Moggi, E. (1991) Notions of computation and monads, Inf. Comput., 93 (1): 55–92.
Paterson, R. (2001) A new notation for arrows. Pages 229–240 of: International Conference
on Functional Programming, ACM Press, Florence, Italy.
Power, J. & Robinson, E. (1997) Premonoidal categories and notions of computation, Math.
Struct. Comput. Sci., 7 (5): 453–468.
Power, J. & Thielecke, H. (1999) Closed Freyd- and kappa-categories. In International
colloquium on automata, languages, and programming, LNCS, vol. 1644. Springer, Prague,
Czech Republic.
Sabry, A. & Felleisen, M. (1993) Reasoning about programs in continuation-passing style,
Lisp Symbol. Comput., 6 (3/4): 289–360.
http:/www.cambridge.org/core/terms. http://dx.doi.org/10.1017/S095679680999027X
Downloaded from http:/www.cambridge.org/core. Edinburgh College of Art, on 02 Dec 2016 at 19:15:24, subject to the Cambridge Core terms of use, available at

