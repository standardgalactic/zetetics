ChemOS: an orchestration software to democratize autonomous discovery
Lo¨ıc M. Roch,1, a) Florian H¨ase,1, a) Christoph Kreisbeck,1 Teresa Tamayo-Mendoza,1 Lars P. E.
Yunker,2 Jason E. Hein,2 and Al´an Aspuru-Guzik1, 3, b)
1)Department of Chemistry and Chemical Biology, Harvard University, Cambridge,
Massachusetts, 02138, USA
2)Department of Chemistry, University of British Columbia, Vancouver,
British Columbia V6T 1Z1, Canada
3)Senior Fellow, Canadian Institute for Advanced Research, Toronto, Ontario M5G 1Z8,
Canada
Autonomous or “self-driving” laboratories combine robotic platforms with artiﬁcial intel-
ligence to increase the rate of scientiﬁc discovery.
They have the potential to transform
our traditional approaches to experimentation. Although autonomous laboratories recently
gained increased attention, the requirements imposed by engineering the software packages
often prevent their development. Indeed, autonomous laboratories require considerable ef-
fort in designing and writing advanced and robust software packages to control, orchestrate
and synchronize automated instrumentations, cope with databases, and interact with vari-
ous artiﬁcial intelligence algorithms. To overcome this limitation, we introduce ChemOS, a
portable, modular and versatile software package, which supplies the structured layers indis-
pensable for operating autonomous laboratories. Additionally, it enables remote control of
laboratories, provides access to distributed computing resources, and comprises state-of-the-
art machine learning methods. We believe that ChemOS will reduce the time-to-deployment
from automated to autonomous discovery, and will provide the scientiﬁc community with an
easy-to-use package to facilitate novel discovery, at a faster pace.
I.
INTRODUCTION
Empowering automated machines with artiﬁcial
intelligence (AI) algorithms to yield autonomous
laboratories has the potential to expedite in situ
discovery.1–4 Inspired by the increasing digitiza-
tion of sciences and the rapid expansion of the
Internet of Things (IoT), the scientiﬁc commu-
nity has begun to design the next-generation of
research facilities.5 The concept of autonomous
and
interconnected
robotics
platforms
with
speciﬁc tools to tune materials properties will
enable new fabrication strategies.
Such plat-
forms are at the heart of what we refer to as
the meta-labs. In the meta-labs, AI algorithms
continuously learn from experimental results
collected through real-time feedback, and reﬁne
models based on the most recent information.
This procedure, which deﬁnes the closed-loop
approach, suggests the best set of experimental
conditions
based
on
acquired
knowledge
to
a)These authors contributed equally
b)Electronic mail: aspuru@chemistry.harvard.edu
reach predeﬁned goals, e.g.
reduce the time
of an experiment or minimize reactants usage.
Although the premise of such research facilities
has recently been analyzed,3 a portable, modular
and versatile software interfacing researchers,
robots, and computational tools to control and
manage these meta-labs is yet to be designed.
Such a software package is presented herein, and
is referred to as ChemOS.
Automation was pioneered by the pharmaceu-
tical industry in search for a high-throughput
screening solution for drug-like compounds.6–9
During the last decade, several groups have
demonstrated the beneﬁts of automated systems
on a variety of chemistry:
fully automated
approaches were applied to the synthesis of small
organic molecules from libraries of commercially
available fragments,10–12 to continuous-ﬂow syn-
thesis of peptides,13,14 to real-time monitoring
of chemical reactions unraveling kinetics of ho-
mogeneous and heterogeneous reactions,6 to the
identiﬁcation of novel wide bandgap perovskites
with higher stability,15 and to the identiﬁcation
1

of colloidal nanocrystals.16 One step further,
the integration of the design of experiment
(DoE)17–19 to automation as a ﬁrst strategic
approach
has
emerged.20,21
Nonetheless,
the
community, notably chemistry, material science,
and automation, is ready to take the discovery
process to the next level by moving towards
autonomous research facilities.
It is important
to make the distinction between automated and
autonomous systems: the former perform repet-
itively predeﬁned experiments, while the latter
reﬁne experiments without human interaction,
based on collected results to reach deﬁned goals.
Several groups have demonstrated the use of au-
tonomous approaches to a range of applications.
One of the ﬁrst examples of an autonomous
system was reported by Maruyama et al. on the
synthesis of carbon nanotubes.22 The authors
built an autonomous research system (ARES),
which learned to grow carbon nanotubes at
controlled rates using machine learning (ML),
based on random forests,23 for optimal exper-
imental design.
A similar approach was used
to produce Bose-Einstein condensates (BEC),24
where Gaussian processes were used to predict
the
evaporation
ramp
yielding
high
quality
BECs.
The synthesis and crystallization of a
polyoxometalate cluster were investigated via a
ML classiﬁcation algorithm.25 The authors also
reported the beneﬁt of such a procedure in terms
of accuracy and coverage of the crystallization
space by comparing with human-based and
random search approaches. Other examples in-
tegrating AI algorithms include the optimization
of organic synthesis,26–28 and the discovery of
new multicomponent NiTi-based shape memory
alloys.29
Although the meta-labs appear to be on track
to revolutionize the traditional approach to
experimentation, they require complex software
to be engineered. This often imposes constraints
on the development of such autonomous facil-
ities, preventing, thus, their full exploitation.
Indeed, in the aforementioned examples, in-
house developed software tied to the hardware
were used to control the experimental infras-
tructure,
parse information,
and learn from
it.
Undoubtedly, distinct scientiﬁc challenges
require distinct and tailored meta-labs. However,
a substantial number of processes are common
across them.
As such, one might ask:
What
if we could provide the scientiﬁc community
with a structured software package, consisting
of fundamental layers, which are common to
any meta-labs?
These layers require databases
management, experiment scheduling, collection
of in situ feedback, interaction with diﬀerent
learning procedures, suggestion of experimental
conditions for the robotics platform, etc. In this
paper we present ChemOS, a software package
that fulﬁlls these requirements and overcomes
these constraints. We believe that ChemOS will
not only allow for an increase in the discovery
rate
across
chemistry
and
material
science
but also catalyze the realization of prototype
meta-labs.
ChemOS
coordinates
the
overall
workﬂow,
administrates data collection, data storage as
well as details about the conﬁgurations of the
available automated laboratory equipment, po-
tentially distributed across diﬀerent laboratories.
One of the crucial components of ChemOS are
the various learning procedures based on AI
deﬁning the learning module.
AI algorithms
can take advantage of existing data to predict
which set of experimental choices needs to be
applied next in order to reach a certain strategic
goal.
The latter could be the optimization of
chemical reactions to maximize yield, the design
of fabrication procedures targeting speciﬁc ma-
terial properties, and the establishing diagnostic
sequences to improve the characterization of
devices. Although ChemOS shares the vision of
a fully autonomous discovery platform, it allows
for an eﬃcient interaction between researchers,
AI algorithms, and the robotic hardware.
To
this end, ChemOS provides various intuitive
interfaces for interactions, ranging from simple
data exchange via well-deﬁned protocols to nat-
ural language processing. ChemOS is available
for download on GitHub.30
The remainder of the paper is organized as fol-
lows. We start by discussing the details of the
architecture and implementation of ChemOS.
2

Then we demonstrate the transferability and be-
havior of ChemOS on three applications, con-
sisting of an in-house developed robot to learn
color and cocktail space, as well as a robotics so-
lution for direct-inject sampling robot.
II.
RESULTS
In the ﬁrst half of this section we describe the ar-
chitecture of ChemOS and detail its implemen-
tation. A general layout of ChemOS is repre-
sented in Fig. 1, and a detailed representation
with emphasis on the workﬂow is shown in Fig. 2.
In the second half, we demonstrate the ﬂexibility
and modularity of ChemOS on three use-cases,
each highlighting diﬀerent aspects of ChemOS.
A.
Architecture of ChemOS
ChemOS is a framework which orchestrates het-
erogeneous tasks on diﬀerent platforms.
As
shown in Fig. 1, ChemOS is composed of six
modules and the central workﬂow manager. The
six modules comprise (i) interaction with re-
searchers, (ii) databases handling and managing,
(iii) robotics, (iv) characterization, (v) AI based
learning procedures, and (vi) analysis, which are
detailed further below, in their respective para-
graphs.
Interaction with researchers
ChemOS
provides an intuitive interface for
researchers.
This interface not only favors the
interaction between researchers,
the learning
module,
and
the
robotic
hardware,
but
it
also facilitates processing new requests,
and
ﬁltering/summarizing relevant results.
To this
end, we supplement ChemOS with a natural
language processing (NLP) module in a chatbot
framework. This module is based on neural net-
work text classiﬁers, which ChemOS connects
to application programming interfaces (APIs)
of several common social media platforms and
communication services via an abstract facade
software interface.31
FIG. 1. Representation of the modules composing
ChemOS. This scheme highlights the modularity
and the independence of the six modules, which are
(i) interaction with researchers, (ii) databases han-
dling and managing, (iii) robotics, (iv) characteriza-
tion, (v) learning procedures, and (vi) analysis.
The chatbot framework is constructed from
conversational intents deﬁned in the Javascript
Object Notation (JSON) format.
The de-
ﬁned intents are processed using the natural
language
toolkit
(NLTK)32
in
Python,
and
transformed to bag-of-words arrays for process-
ing in TensorFlow.33 A multi-layer perceptron
is then trained on the deﬁned conversational
intents to map given inputs, i.e. plain text, to
conversational classes, for which responses are
predeﬁned.
Given a newly received message,
the neural network determines the message
category, and a response is sampled from the set
of responses predeﬁned for this category. Details
on the implementation of this chatbot framework
are reported in the supplementary information
(see Sec. VI A 1).
ChemOS
supports the customization of re-
sponses based on information speciﬁc to the
received message.
This is achieved by using
placeholders in the predeﬁned responses sampled
from the neural network classiﬁcation.
At a
later stage, the response is replaced with the
associated
speciﬁc
information
by
ChemOS
before sending it to the researcher.
A number of adapters to common social me-
dia platforms and messaging services are imple-
3

mented in ChemOS to address the personal pref-
erences of researchers. This includes e-mail ex-
change via Gmail, private and public messaging
via Twitter, and private messaging via Slack. In
addition, ChemOS also supports communication
via the command line interface, and can be trig-
gered by ﬁle system events, e.g.
via Dropbox.
With these supported methods of communica-
tion, we intend to make ChemOS easily accessi-
ble to other computational procedures.
The databases
Long-term storage of information in ChemOS
is facilitated via database-management systems
(DBMS). ChemOS features a facade connected
to multiple adapters, which interact with the
APIs of diﬀerent DBMS. Currently we sup-
port SQLite, a widely used relational database
management system embedded into the end
program.
Nevertheless, we provide interfaces
for the integration of other types of DBMS in
ChemOS.
ChemOS stores information in four distinct
databases (DBs, see Fig. 2), which serve speciﬁc
purposes essential to an eﬃcient workﬂow within
ChemOS (see Sec. II B). All request entries are
stored in the request DB, which contains unique
identiﬁers for the scientiﬁc procedure associated
with the experiment, and a unique key for the
experiment itself.
The parameter DB contains
parameters for the experiment at hand with an
indication ﬂagging their previous usage, along
with the identiﬁer of the scientiﬁc procedure.
The robot DB contains robot-speciﬁc infor-
mation, such as the communication protocol,
hardware conﬁgurations, and status.
Finally,
experimental results are stored in the feedback
DB in addition to information on the scientiﬁc
procedure and parameters used for a speciﬁc
experiment.
All DBs operate on the ﬁrst-in-ﬁrst-out (FIFO)
principle. Consequently, new requests are queued
chronologically, and they are processed as soon as
parameters and the robotic hardware are avail-
able. ChemOS automatically matches generated
experimental parameters and qualiﬁed robotic
hardware to a given request such that monitoring
multiple distinct scientiﬁc procedures on diﬀerent
platforms with a single instance of ChemOS is
possible.
The learning module
The learning module is the key component to
reach autonomy as it designs new experiments
for the scientiﬁc procedures requested by the
researcher.
The purpose of this module is to
support methods for parameter space searches
and decision making.
Typically, the learning
procedures can be formulated as an optimization
problem of a possibly high-dimensional parame-
ter space, where the allowed ranges along each
dimension are deﬁned by the application space
of the scientiﬁc procedure at hand.
ChemOS
contains four diﬀerent learning procedures for
global optimization: random search, Phoenics,34
SMAC,35–37 and Spearmint.38,39
Random search refers to the exploration of a
parameter space via uniform sampling of all
parameters. Because this procedure only makes
uninformed decisions, and does not memorize
observations, it can be used to explore the
parameter space in an unbiased, and uncorre-
lated fashion.40,41 Random search ﬁnds usage in
benchmarking performance and detecting error
and misbehavior of the robotic hardware.
Phoenics34 is a universal deep Bayesian optimizer
developed by H¨ase et al. for global optimization.
It is a probabilistic algorithm, which combines
aspects from Bayesian optimization with ideas
from Bayesian kernel density estimation.
As a
consequence, Phoenics shows a favorable linear
scaling with the number of parameters as well as
the number of observations. Phoenics was shown
to be particularly well-suited for automated and
parallel experimentation as it can propose pa-
rameter points with sampling behaviors ranging
from full exploration to full exploitation of the
previously collected experimental feedback. This
is enabled by introducing a sampling parameter
in the acquisition function.
As a result, with
a single (additional) observation, multiple new
experimental conditions can be suggested in
4

batches, maximizing parallelization.
SMAC35–37 is a Bayesian optimization package
based on random forest (RF) models.23 RFs are
computationally inexpensive regression models
with a favorable linearithmic scaling with the
number of observations and a linear scaling with
the number of parameters. SMAC features a very
eﬃcient implementation of RF models, which
keeps the computational cost of the optimization
procedure to a minimum.
However, the model
uncertainty needs to be estimated empirically.
Spearmint38,39 is a Bayesian optimization package
based on Gaussian processes (GPs).38,42–44 GPs
provide a ﬂexible way of ﬁnding analytic approx-
imations to the objective function based on nor-
mal distributions associated with every parame-
ter point. Nonetheless, GP based optimization
scales cubically with the number of observations
and the dimensionality of the parameter space.
With this limitation, GP based optimization is
typically applied to relatively low dimensional
problems for which the optimum can be found
in relatively few function evaluations.
The analysis module
ChemOS features a simple analysis module for
pre-processing results obtained from the exper-
imental procedures. This enables researchers to
quickly perceive the progress of the current exper-
iment or summarize the results of a completed sci-
entiﬁc procedure. ChemOS supports (i) the gen-
eration of time traces, which displays the progress
of the ChemOS session, (ii) the distance distri-
bution, which provides intuition for the sampled
parameters in the high dimensional parameter
space, and (iii) the distances to the best perform-
ing set of parameters observed so far.
The robotics and characterization
modules
The purpose of the robotics and characteriza-
tion modules in ChemOS is to communicate
high-level instructions deﬁned in the scientiﬁc
procedure to low-level elementary operations,
executed on the robotic hardware.
High-level
instructions
are
researcher-oriented
keywords
commonly used in scientiﬁc procedures:
e.g.
mixing,
heating,
sample drawing,
etc.
The
low-level instructions,
however,
deﬁne a set
of
elementary
machine-oriented
operations,
executed by the robotic hardware at hand to
perform a single high-level operation. Such a set
of low-level operations could consist in encoding
the movement of a robotic arm,
operating
pumps, or pre-processing experimental results.
It goes without saying that low-level instruc-
tions are speciﬁc to particular robotic and char-
acterization hardware. Nevertheless, the robotics
and characterization modules provide bridges be-
tween the ChemOS core and the actual robotic
hardware. With these bridges, new robotic hard-
ware can easily be integrated into ChemOS to
directly beneﬁt from the architecture in place.
B.
Workﬂow of ChemOS
ChemOS is designed to coordinate the overall
workﬂow of autonomous materials discovery by
employing learning procedures, which propose
candidate experiments later to be executed by
the robotic hardware. Such a complex workﬂow
is depicted in Fig. 2. It starts with an initializa-
tion phase, followed by the closed-loop process
yielding autonomy. In addition to the previously
described elementary processes, more specialized
operations include status updates for requests,
robots, experimental results, etc. ensuring that
ChemOS closely monitors all resources and
experiments at all times throughout the session.
During the initialization phase of ChemOS, in-
ternal modules are created based on information
parsed from a general conﬁguration ﬁle. These
internal modules comprise (i) the “BotMan-
ager”, which facilitates communication between
ChemOS and both the robotic and the charac-
terization hardware, (ii) the “Communicator”,
which enables ChemOS to communicate with
researchers, (iii) the “ParamGenerator”, which
controls the learning procedures for proposing
new parameters,
(iv) the “RequestHandler”,
which manages new experiment requests, and
5

(v)
the
“FeedbackHandler”,
which
manages
newly received experimental feedback.
Then
ChemOS creates the DBs (see Sec. II A), checks
communication
protocols
and
automatically
determines which of the deﬁned robots can host
the declared experimental procedures.
In this
process, an internal look-up table is created
to accelerate submission of experiments to the
robotic hardware.
Request DB
Parameter DB
Results DB
Robot DB
start
ChemOS workflow
BotManager
Communicator
ParamGenerator
RequestHandler
FeedbackHandler
new requests?
send
confirmation;
robots
available?
parameters
available?
reserve robot;
fetch
parameters;
submit
experiment;
update request
status;
listen;
store request;
store results;
experiment
completed?
store results;
notify
researcher;
release robot;
new results?
learning
procedures
available?
fetch results;
refine
parameters;
y
n
y
y
n
n
n
y
y
n
y
FIG. 2.
Detailed workﬂow diagram of ChemOS.
A new ChemOS session starts with the initializa-
tion of ﬁve color-coded modules. During one cycle,
ChemOS checks for new requests, completed exper-
iments and new experimental results. Each of these
events triggers a set of actions. While traversing the
loop, ChemOS accepts new requests for new experi-
ments. All information is stored in the corresponding
databases.
The conﬁguration ﬁle contains speciﬁc infor-
mation
about
the
communication
protocol,
the robot settings, the learning procedure, the
level
of
parallelization,
the
characterization
hardware, and the experimental settings. These
experimental settings can include the number
of experiments to run, the set of parameters
associated with each scientiﬁc procedure, and
the capabilities of the robotic solution.
The
settings can easily be expanded to accommodate
new parameters.
Once
the
initialization
phase
is
completed,
ChemOS
proceeds
to
the
closed-loop
pro-
cess, in which all resources (computational re-
sources, robotic hardware, etc.)
are managed
autonomously by ChemOS. For each cycle,
ChemOS calls the RequestHandler to collect
pending requests.
Once a request is found,
ChemOS calls for the BotManager to search for
available robotic hardware qualiﬁed for executing
the scientiﬁc procedure of the requested exper-
iment.
Once the appropriate robotic hardware
is selected, ChemOS asks for a new set of pa-
rameters from the ParamGenerator. All details
about the experimental procedure are assembled
as a job object, which is submitted to the se-
lected robot for execution. Next, the results are
stored at completion of the experiment, and are
made available to the learning module.
Then,
ChemOS triggers the execution of a new iter-
ation of the learning algorithm, if the compu-
tational resources are idle.
Finally, the learn-
ing module makes a more informative decision
on what parameter sets to execute next by bal-
ancing exploitation of the current data to ﬁnd
an ideal set of parameter, and exploration of un-
known regions of the parameter space. This last
step initiates the next iteration cycle.
Runtime performance of ChemOS
To
exploit
the
full
potential
of
ChemOS,
the actions executed at each step throughout
the workﬂow must be parallelized.
This not
only avoids overhead, but also enables to run
multiple experiments at the same time,
on
diﬀerent robotics platforms while reﬁning the
set of experimental parameters via the learning
modules.
For example, in a case where the
experimental execution of the robotic hardware
is time-consuming,
the runtime of a single
ChemOS cycle is limited by the robotic execu-
tion, as learning procedures are executed and
monitored in parallel. Such an approach ensures
a maximized throughput.
6

ChemOS is designed to minimize the overall
runtime of the workﬂow with parallelization
techniques.
It reduces the wait times of com-
putational resources for extensive parameter
generation, and the experiment performed by
robotic hardware. This is achieved by executing
and monitoring their corresponding modules in
separate threads.
The parallel execution of parameter generation
and experiment preparation is enabled with the
implementation of the parameter DB. Instead of
calling the learning module to generate parame-
ters when a request is received, ChemOS looks
for an unused set of parameters generated at a
previous iteration cycle. The generation of new
parameter sets is triggered independently from
the requests, as soon as experimental results
are received from the robots.
Therefore, the
parameter DB always contains the most recent
parameters.
To control the parallel processing of new requests
and new experimental results, all robotic hard-
ware and all learning procedure instances lock
themselves by changing internal status.
As a
consequence, ChemOS either searches for other
available resources, or waits for the execution to
complete.
We suggest the following benchmark test to
assess the overhead of the central workﬂow
manager:
parameters points are proposed via
the random search sampling, and are processed
by a virtual robot.
The runtime of both the
computation and the (virtual) experimentation
is set to 4 s. Diﬀerent scenarios are evaluated, in
which execution times for the learning procedure
and the robot execution are delayed by 6 s.
Fig. 3 presents four scenarios and compares
ChemOS runtime per cycle to the time spent on
running the learning procedure and the robotic
execution. The reported runtimes were averaged
over 100 independent runs.
We observe that the runtime of a single ChemOS
cycle is mostly determined by the slower pro-
cess of generating new parameters and running
an experiment. In other words, function queries,
FIG. 3. Runtimes of full ChemOS cycles compared
to the times spent on running an instance of the
learning procedure, and evaluating an experiment
on the robotic hardware. We display average results
with the standard deviation taken from 100 repeti-
tions of the same ChemOS run. Panel (A) shows the
scenario where both the learning procedure and the
experimental evaluation last 4 s. In panels (B)-(D),
an additional delay of 6 s was introduced to (B) only
the learning procedure, (C) only the experimental
evaluation, and (D) both the experimental evalua-
tion and the learning procedure.
database requests and data parsing yield a negli-
gible overhead. Hence, the interleaving of learn-
ing procedures and experimental execution im-
plemented in ChemOS is an eﬀective design to
keep the overall runtime of a ChemOS cycle to
a minimum.
C.
Applications
We demonstrate the functionalities of ChemOS
on three diﬀerent applications, where we con-
sider diﬀerent experimental procedures.
All
experimental procedures were run with the same
ChemOS
core deployed on several diﬀerent
UNIX-based operating systems; only speciﬁca-
tions in the conﬁguration ﬁle diﬀer from one
application to another.
Each procedure is executed using diﬀerent robotic
and characterization hardware with diﬀerent
learning modules. The experimental procedures
are run at various degrees of automation: some
procedures are run fully autonomously without
any human interaction, while other procedures
require inputs and feedback from a researcher.
7

Learning color space
In the following we suggest a robotic platform
for mixing a set of ﬁve dyed solutions resulting
from the combination of three dyes, at diﬀerent
concentrations (Fig. 4). The goal of the proce-
dure is to reproduce a target colored solution in
an autonomous fashion.
The target is deﬁned
by a speciﬁc RGB code, which is unknown
to ChemOS. We demonstrate that ChemOS
is capable of autonomously learning the color
space, and that it can produce results perfectly
concordant with the predeﬁned goal. This ﬁrst
use-case
evidences
the
closed-loop
approach
orchestrated by ChemOS, and highlights the
workﬂow management.
In this experimental procedure, ChemOS con-
trolled and synchronized a total of three distinct
physical platforms:
a master platform hosting
ChemOS as well as the learning procedure, a
robot platform operating pumps, which mixes
the solutions (see Fig. 4c), and a characterization
platform managing the embedded RGB sensor
used to measure the color of the produced so-
lution. The communication between the master
platform and the characterization platform is
achieved via Dropbox, while the communication
between the robotic hardware and the charac-
terization device is implemented via the Secure
Copy Protocol (SCP). All communications were
managed by ChemOS, on the master platform.
The experimental loop starts when the master
platform generates a set of parameters.
These
parameters deﬁne the volumes to be drawn,
and are then sent to the robotic hardware.
In
this arrangement, the characterization module
computes the distance of the measured RGB
code to the desired target, using the maximum
norm.
This metric serves as feedback to make
more informed decisions about future parameter
points, to eventually produce the predeﬁned
colored solution.
Minimization of the distance
leads to solutions closer to the target.
Five initial solutions with the following normal-
ized RGB codes are provided: yellow (RGB =
[0.40,0.41,0.19]), red (RGB = [0.70,0.17,0.13]),
orange (RGB = [0.57,0.26,0.17]), blue (RGB
=
[0.06,0.36,0.58]),
and
green
(RGB
=
[0.16,0.56,0.28]).
The latter being the tar-
get color.
ChemOS automatically maps the
proposed
experimental
parameters
with
the
order of the pumps on the robotic hardware.
Importantly, ChemOS was not constrained to
the number of solutions to use.
For example,
green solutions can be produced by choosing
only the provided green mixture, or mixing the
separate initial yellow and blue solutions. Details
on the procedure are provided in Sec. IVA.
We ran this experiment with all three imple-
mented AI algorithms for a total of 25 evaluations
per session.
Fig. 4d displays the progress of
the experimental procedures for each algorithm.
We report the loss, which corresponds to the
maximum distance between the normalized RGB
code of the sampled solutions mixture, and the
target RGB code.
The rapid decrease of the loss translates the
capability of ChemOS to learn the color space
in an autonomous fashion. As a matter of fact,
all employed learning algorithms consistently
produce mixtures of green color with RGB codes
close to the pre-deﬁned target. An example of
colors produced by the mixtures sampled from
Phoenics with a bias towards exploitation is
displayed in Fig. 4b.
This simple experiment illustrates the ability of
the learning procedures to suggest routes to reach
a predeﬁned target, which diﬀers from conven-
tional human intuition. Where a human might
favor the green solution over a mix of multiple so-
lutions for a green target, ChemOS suggested a
recipe containing 43.6% of green solution, 19.6%
of the yellow solution, 30.1% of the blue solution,
and 6.8% the orange solution. This mixture still
reproduced the target color indistinguishably by
both the human eye and the RGB sensor. The
potential of such an approach extends far beyond
the color space; we can imagine the potential of
ChemOS when bridged to platform design for
drug and material discovery.
8

FIG. 4. (a) The three dyes used in this experiment:
E102 (yellow), E129 (red), and E133 (blue). (b) Pic-
ture of the solution obtained with the 12 exploitation
points from Phoenics (c) Picture of the in-house built
robot. (d) Maximum norm distance (loss) between
the achieved normalized RGB color code and the tar-
get RGB color code for the 25 runs. Each panel cor-
responds to the learning procedure in-use: Phoenics,
SMAC, or spearmint. For the Phoenics algorithm,
red denotes a bias towards exploration, and blue a
bias towards exploitation.
Learning the Tequila Sunrise space with
the Bayesian Optimized Bartender (Bob)
We demonstrate the ﬂexibility and modularity of
ChemOS on a procedure for mixing consumable
liquids.
In this procedure, we modiﬁed the
robot used for the color experiment to produce
cocktails.
We named the robot “Bob”, short
for “Bayesian Optimized Bartender”.
The
goal of this experimental procedure is to learn
the cocktail-space and ﬁnd a delicious Tequila
Sunrise. The challenge lies in increasing the level
of interaction between researchers and robots, as
it requires active integration of humans into the
feedback loop.
The interaction between the researcher and
ChemOS
is made possible by the commu-
nication module.
Integration of interfaces to
common messaging systems such as Twitter and
Gmail allowed for easy communication between
the researcher and ChemOS. Messages received
were parsed by a natural language process-
ing (NLP) module within the communication
module.
The NLP module relies on a text
classiﬁcation algorithm built on neural networks.
Each received message is ﬁrst classiﬁed, and
responses are sampled from a set of predeﬁned
responses for the determined class of messages.
Based on the content of the received message,
either a new request is generated or feedback is
parsed and stored in the feedback DB. Details
on the implementation of the NLP module are
provided in the supplementary information (see
Sec. VI A 1).
The overall procedure,
which is outlined in
Fig.
5 starts with a researcher requesting new
cocktails via Gmail and Twitter. When a new
message is received, its content is parsed and
classiﬁed
by
the
implemented
NLP
module
(the request is processed in the same way as in
prior applications).
Order conﬁrmations and
notiﬁcations of completion are then sent by
ChemOS to the researcher.
The latter serves
as the characterization module in the ChemOS
cycle. The feedback, which is a direct evaluation
of the cocktail taste, is based on a 5-star rating
system.
As was the case for the color space
application, there were no constraints on the
ratios of ingredients.
As such, the prepared
cocktails could result in a Tequila Sunrise, or in
any combination of the available ingredients.
We conducted the experiment with four re-
searchers requesting cocktails from Bob in a
single session, and ChemOS was run with the
Phoenics optimization algorithm.
Results on
the conducted experiments are reported in the
supplementary information (see Fig. 9, in Sec.
VI B). We note that during the progress of
the experimental procedure, researchers gave
more positive ratings to cocktails which were
9

FIG. 5.
Representation of the ChemOS pipeline
while screening the Tequila Sunrise space.
generated later on in the procedure, indicating
that the taste of the cocktail improved over time.
However, we did not observe a strong preference
of certain recipes by the learning procedure over
others, as in prior applications. We believe that
the outcome reﬂects the subjective nature of the
objective function due to the large diﬀerences in
the taste, which vary from one person to another.
This case-study highlights the fact that ChemOS
provides a ﬂexible and interactive platform, en-
abling communication between researchers and
robotics solutions at various degrees of autonomy.
Importantly, the ChemOS core was not modi-
ﬁed to speciﬁcally suit this application. Instead,
the degree of interaction was increased by simply
modifying speciﬁcations in the conﬁguration ﬁle.
Autonomously calibrating a robotic
sampling sequence for direct-inject
HPLC analysis
In the following, we illustrate how ChemOS can
be used for remote interactions with distributed
automated laboratory systems. We orchestrate
an infrastructure capable of unattended sam-
pling.
A similar setup was recently used for
real-time reaction progress monitoring.6
The
robotics
hardware
is
located
in
Vancouver,
Canada, and controlled by ChemOS in Cam-
bridge, USA. The procedure involves proposing
new calibration parameters, running the exper-
iment, analyzing the experimental results and
updating parameter candidates.
The goal of the calibration is to ﬁnd a set of
parameters which maximizes the response of
the HPLC, namely maximize the amount of
drawn sample reaching the detector. The work-
ﬂow is fully controlled by ChemOS, and only
requires human interaction for initializing the
autonomous run.
Not only ChemOS triggers
experimental operations, but also hypothesizes
parameter candidates for experimental evalua-
tion based on prior experiments and acquired
knowledge. The robotic setup is monitored by a
webcam which live-streams the progress of the
current experiment through Twitch.45
ChemOS is set up to communicate with re-
searchers via the command line interface for
local execution, and via Slack for remote execu-
tion.
The communication between the master
platform and the robotic system is done via
Dropbox. Each ChemOS session is set up for
a total of 100 individual experiments, which
runs autonomously without human interaction
over a time period of about seven hours.
We
demonstrate the robustness of ChemOS on
two sessions accumulating a total of 1500 data
points. Details can be found in the supplemen-
tary information (Sec. VI C).
The experimental arrangement is illustrated in
Fig. 6a. A robotic arm (N9 from North Robotics)
with an integrated sampling needle is used to
draw a sample of 1,3,5-trimethoxybenzene in
MeCN from one of the vials in a 96-well tray.
The sample is then passed through a sample
loop, inline mixer and injection loop and is
ﬁnally analyzed by an HPLC. Peak areas of the
chromatogram determine the amount of target
compound, which was delivered to the HPLC.
Details on the experimental setup are provided
in Sec. IV B.
In the present setup, the magnitude of the re-
sponse of the detection can be controlled with
six distinct tunable parameters such as sample
draw and the push rates. These parameters are
10

those commonly varied by researchers when op-
timizing a sampling sequence (see Fig. 7a). The
ﬁrst parameter (P1) is the volume of the sam-
ple loop and internal volume of the 2-way 6-port
valve. The second parameter (P2) is the volume
required to draw the sample to the 2-way 6-port
valve. This volume is commonly combined with
the ﬁrst volume in most sampling sequences, and
they are separated here to allow for additional
sample manipulation outside of the sampling se-
quence. The third parameter (P3) is the volume
required to drive the sample plug from the sample
loop, through the in-line mixer, and to the second
valve. The fourth and ﬁfth parameters (P4, P5)
control the draw rate and push rate of the sample
and push pumps respectively. The sixth param-
eter (P6) is the time waited after drawing sam-
ple and before switching the ﬁrst selection valve.
This allows time for equilibration of any cavita-
tion bubbles in the sample line and syringe.
FIG. 6. (A) Schematic of the ﬂow path for the sam-
pling sequence used with the N9 robotic platform.
The six parameters (P1-P6) are color coded to illus-
trate the eﬀect they have on the sampling sequence.
The yellow shade highlights the arm valve, and the
grey shade the HPLC valve. (B) Example of logging
messages from ChemOS . (C) Side and (D) top view
of the robotic hardware.
We demonstrate the autonomous execution of
the autocalibration by ChemOS with four learn-
ing procedures:
Phoenics, SMAC, spearmint,
and random search.
The results of each auto-
calibration run with 100 individual experiments
are depicted in Fig. 7. The upper panels display
the peak areas achieved during the execution of
individual experiments with the diﬀerent learn-
ing procedures.
The uniform random searches
of the parameter space represent an uninformed
exploration of the parameter space as acquired
knowledge
is
not
taken
into
account
when
proposing new parameter points.
We observe
that all implemented optimization algorithms
(Phoenics, SMAC and spearmint) quickly ﬁnd
parameter points which yield peak areas larger
than those encountered in random search. The
lower panels of Fig. 7 depict the parameter
distance distributions computed from all possible
parameter
pairs
sampled
in
each
ChemOS
run.
While uniform random search appears to
sample parameter points based on unimodal
distribution, the optimization algorithms show
tendencies of favoring broader distance distri-
butions with more parameter points at both
smaller and larger distances to other parameter
points.
We interpret this deviation in the
distance distributions as the signature of the
optimization algorithms used, in which the ac-
quisition function emphasizes either exploitation
of the acquired data (small distances) or ex-
ploration of the parameter space (large distance).
With this application we showed that ChemOS
can control remote facilities to augment auto-
mated systems with AI to facilitate autonomous
scientiﬁc procedures.
III.
CONCLUSION AND OUTLOOK
We introduced ChemOS, a transferable, ﬂexible
and versatile software.
It is a complex frame-
work, which supplies all the layers needed to
control and orchestrate distributed automated
laboratories. The functional design of ChemOS
and its modular structure, in which each module
is responsible to fulﬁll speciﬁc tasks, allows for
the global control of complex heterogeneous
automation platforms.
ChemOS
includes
state-of-the-art
machine
learning algorithms in the learning module. This
module is the key component to reach autonomy,
and we plan to extend it to include other learning
11

FIG. 7. Results from the autonomous calibration of an HPLC setup maximizing the magnitude of the
response. ChemOS performed autocalibration with four diﬀerent learning procedures (Phoenics, SMAC,
Spearmint and Uniform). Upper panels display the achieved peak areas, i.e. magnitudes of response. Lower
panels display the distributions of pair-wise distances between sampled parameter points computed with
the L2 norm. For the Phoenics algorithm, red denotes exploration, and blue exploitation.
procedures such as reinforcement learning. Also,
to facilitate the researcher-robot interaction, we
supplemented ChemOS with a natural language
processing module in a chatbot framework. This
module, based on a neural network, interfaces
with several common social media platforms and
communication services.
Finally, due to paral-
lelization techniques, the negligible computing
overhead rising from function queries, database
requests and data parsing ensures a maximized
throughput.
We demonstrated the ﬂexibility of ChemOS for
three distinct applications, all of which highlight
diﬀerent capabilities of ChemOS. In the color
mixing application, we illustrated the ability
of ChemOS to close the loop in the discovery
process by controlling the robot and collecting
data from a characterization device, which feeds
back to the learning module. We used a similar
robotic setup to learn the cocktail-space.
In
addition to closing the loop, this application
demonstrates that ChemOS supports various
communication protocols between the automated
system and the researchers. Going beyond sim-
ple toy-model robot systems,
we illustrated
that ChemOS is able to control operations
of a more complex experimental characteriza-
tion setup, which will be applied to reaction
progress monitoring.
We triggered thousands
of experiments remotely from Cambridge, USA,
and executed the experiments on an automated
HPLC characterization located in Vancouver,
Canada. The optimization of the experimental
setup runs fully autonomously overnight without
human supervision.
The current version of ChemOS is the begin-
ning of a comprehensive software package for con-
trolling automated laboratory systems. We be-
lieve that ChemOS has the potential to follow
the path paved by the Robot Operating System
(ROS),46,47 to become the standard to power the
meta-labs. The results shown in this manuscript
are the ﬁrst steps towards a global operating
system for distributed automated laboratories.
Similar to supercomputer centers, which give
researchers easy access to compute infrastruc-
ture, we envision ChemOS to democratize au-
tonomous discovery. With the access to such lab-
oratories, more research groups could join the un-
deniable evolution of experimentation and could
contribute to advances in a large spectrum of
technologies at an accelerated rate.
12

IV.
MATERIALS AND METHODS
A.
Color and drink experiment
The robot was assembled on a frame of aluminum
rods and 3D-printed pieces.48 The pumping sys-
tem was built with a Raspberry Pi 3 Model B
as a microcontroller, a power supply, and a set
of eight DC peristaltic pumps of 12 V, each con-
nected to a 5 V relay. Within this arrangement,
the relays were controlled by the Python library
GPIO. We used SCP as communication protocol
between the Raspberry Pi and ChemOS, which
was deployed on a Mint environment (Ubuntu
based operating system).
The color of the
samples was analyzed by an embedded RGB
sensor (EZO-RGB, AtlasSicentiﬁc), connected
to an iMac via a USB to serial converter. The
low-level programs controlling the pumps and
the RGB sensor were written in Python.
The
synchronization between the iMac and ChemOS
was performed via Dropbox.
The learning algorithms generate ﬁve values on
the [0, 1] interval. ChemOS formats these ﬁve
values into an eight dimensional array, according
to the speciﬁc experimental layout used. Once
transmitted to the robot, this eight-value array
is re-scaled based on a previous calibration
of each individual pump.
Then, the vector is
scaled to the total volume to be drawn, i.e. the
sum of the ﬁve initial solutions.
Finally, the
RGB sensor measures the color of the solution.
ChemOS
receives only the maximum norm
distance between the target normalized RGB
vector and the measure RGB (also normalized).
The latter is minimized during the ChemOS run.
This robot was slightly modiﬁed to yield the
Bayesian Optimized Bartender, Bob. ChemOS
communicates with the researcher using Twitter
and Gmail.
It processes messages through the
NLP module, which classiﬁes incoming messages
as request or feedback. For aesthetic purposes,
we included two diﬀerent kinds of LED. A set of
digital LED strips regulated with the I2C proto-
col and with the Python library fcntl. A small
array of LED that worked as a display to inform
when a process ﬁnishes.
B.
Autocalibration experiment
The robotic setup was built on a North Robotics
N9 platform, paired with an Agilent 1260 In-
ﬁnite series HPLC. The sample used was 10
mM 1,3,5-trimethoxybenzene in MeCN. The
sampling sequence involves ﬁrst the drawing
sample through a needle, and then a sample loop
installed into a Rheyodyne 2-way 6-port selection
valve. The valve is then switched, and the diluent
solvent is pushed through the sample loop and an
in-line mixer to a second loop in another 2-way
6-port selection valve. This second valve is then
switched to be in line with the HPLC pump and
column and the HPLC acquisition is triggered.
A full cycle of operation involves retrieving a
set of parameters from ChemOS, executing a
sampling sequence, rinsing the sampling needle
and push line, retrieval of the integration from
the HPLC trace, and return of the integrated
value to ChemOS. Dropbox was used as the
communication protocol.
The control software for the robot was written
in Python, which enabled variation of several
parameters of the sampling sequence.
The pa-
rameters from ChemOS are passed to a sam-
pling sequence function, which incorporates those
parameters into a sequence of arm movements,
pump manipulations, and valve switches.
The
commands in that sequence are function calls of
Python class instances speciﬁc to the physical ob-
ject being manipulated. Pump and valve switch
commands are then relayed through the robot
to those components.
Arm motion commands
are calculated and determined dynamically from
the target location (sample or rinse vial) prior
to being passed to the robot.
The parameter
values were obtained as normalized values from
ChemOS, and were scaled to the appropriate
ranges. The scalars were user-deﬁned to restrict
the values within reasonable ranges accessible by
the hardware.
V.
ACKNOWLEDGMENTS
We thank Dr.
N. Fulleringer for his help in
3D-printing Bob. L.M.R. and A.A.G. were sup-
13

ported by the Tata Sons Limited - Alliance Agree-
ment (A32391).
F.H. was supported by the
Herchel Smith Graduate Fellowship.
T.T.-M.
was supported by the CONACyT scholarship No.
433469. C.K. and A.A.G. were supported by the
National Science Foundation under award num-
ber CHE-1464862. L.P.E.Y. and J.E.H. acknowl-
edge ﬁnancial support provided by the University
of British Columbia, North Robotics, the Natu-
ral Sciences and Engineering Research Council of
Canada (Engage, 2016-RGPIN-04613), and the
Canada Foundation for Innovation (grant 35833).
REFERENCES
1R.
D.
King,
J.
Rowland,
S.
G.
Oliver,
M. Young, W. Aubrey, E. Byrne, M. Li-
akata, M. Markham, P. Pir, L. N. Soldatova,
A. Sparkes, K. E. Whelan, and A. Clare, Sci-
ence 324, 85 (2009).
2A. Aspuru-Guzik, R. Lindh,
and M. Reiher,
ACS Cent. Sci. Article ASAP (2018).
3“Materials
Acceleration
Platform:
Accel-
erating
Advanced
Energy
Materials
Dis-
covery
by
Integrating
High-Throughput
Methods
with
Artiﬁcial
Intelligence.”
http : / / mission - innovation.net / wp -
content / uploads / 2018 / 01 / Mission -
Innovation - IC6 - Report - Materials -
Acceleration - Platform - Jan - 2018.pdf
(2018), Mission Innovation: Expert Workshop
Report.
4G.-Z. Yang, J. Bellingham, P. E. Dupont,
P. Fischer, L. Floridi, R. Full, N. Jacobstein,
V. Kumar, M. McNutt, R. Merriﬁeld, B. J.
Nelson, B. Scassellati, M. Taddeo, R. Taylor,
M. Veloso, Z. L. Wang, and R. Wood, Sci. Rob.
3, eaar7650 (2018).
5D. P. Tabor, L. M. Roch, S. K. Saikin, C. Kreis-
beck, D. Sheberla, J. Montoya, S. Dwaraknath,
M. Aykol, C. Ortiz, H. Tribukait, C. Amador-
Bedolla, C. J. Brabec, B. Maruyama, K. A.
Persson,
and A. Aspuru-Guzik, Submitted
(2017).
6T. C. Malig, J. D. B. Koenig, H. Situ, N. K.
Chehal, P. G. Hultin,
and J. E. Hein, React.
Chem. Eng. 2, 309 (2017).
7C. A. Nicolaou, I. A. Watson, H. Hu,
and
J. Wang, J. Chem. Inf. Model. 56, 1253 (2016).
8T. Chapman, Nature 421, 661 (2003).
9G. Schneider, Nat. Rev. Drug Discov. 17, 97
(2018).
10E. M. Woerly, J. Roy, and M. D. Burke, Nat.
Chem. 6, 484 (2014).
11R. F. Service, Science 347, 1190 (2015).
12J. Li, S. G. Ballmer, E. P. Gillis, S. Fujii, M. J.
Schmidt, A. M. E. Palazzolo, J. W. Lehmann,
G. F. Morehouse,
and M. D. Burke, Science
347, 1221 (2015).
13A. Adamo, R. L. Beingessner, M. Behnam,
J. Chen, T. F. Jamison, K. F. Jensen, J.-C. M.
Monbaliu, A. S. Myerson, E. M. Revalor, D. R.
Snead, T. Stelzer, N. Weeranoppanant, S. Y.
Wong, and P. Zhang, Science 352, 61 (2016).
14A. J. Mijalis, D. A. T. III, M. D. Simon,
A. Adamo, R. Beaumont, K. F. Jensen,
and
B. L. Pentelute, Nat. Chem. Biol. 13, 464
(2017).
15S. Chen, Y. Hou, H. Chen, X. Tang, S. Langner,
N. Li, T. Stubhan, I. Levchuk, E. Gu, A. Osvet,
and C. J. Brabec, Adv. Energy Mater (2017),
10.1002/aenm.201701543.
16E. M. Chan, C. Xu, A. W. Mao, G. Han, J. S.
Owen, B. E. Cohen, and D. J. Milliron, Nano
Lett. 10, 1874 (2010).
17R. A. Fisher, The design of experiments (Oliver
and Boyd; Edinburgh; London, 1937).
18G. E. P. Box, J. S. Hunter, and W. G. Hunter,
Statistics for experimenters: design, innovation
and discovery, 2nd ed. (Wiley, 2005).
19M. J. Anderson and P. J. Whitcomb, DOE sim-
pliﬁed: practical tools for eﬀective experimenta-
tion (CRC Press, 2016).
20C. Houben and A. A. Lapkin, Curr. Opin.
Chem. Eng. 9, 1 (2015).
21B. J. Reizman and K. F. Jensen, Acc. Chem.
Res. 49, 1786 (2016).
22P. Nikolaev, D. Hooper, F. Webber, R. Rao,
K. Decker, M. Krein, J. Poleski, R. Barto, and
B. Maruyama, npj Comput. Mater. 2, 16031
(2016).
23L. Breiman, Machine learning 45, 5 (2001).
24P. B. Wigley, P. J. Everitt, A. van den Hengel,
J. W. Bastian, M. A. Sooriyabandara, G. D.
McDonald, K. S. Hardman, C. D. Quinlivan,
P. Manju, C. C. N. Kuhn, I. R. Petersen, A. N.
Luiten, J. J. Hope, N. P. Robins,
and M. R.
Hush, Sci. Rep. 6, 25890 (2016).
14

25V. Duros, J. Grizou, W. Xuan, Z. Hosni, D.-
L. Long, H. N. Miras, and L. Cronin, Angew.
Chem. Int. Ed. 56, 10815 (2017).
26V. Dragone, V. Sans, A. B. Henson, J. M.
Granda, and L. Cronin, Nat. Comm. 8, 15733
(2017).
27P. J. Kitson, G. Marie, J.-P. Francoia, S. S.
Zalesskiy, R. C. Sigerson, J. S. Mathieson, and
L. Cronin, Science 359, 314 (2018).
28Z. Zhou, X. Li, and R. N. Zare, ACS Cent. Sci.
3, 1337 (2017).
29D. Xue,
P. V. Balachandran,
J. Hogden,
J. Theiler, D. Xue,
and T. Lookman, Nat.
Comm. 7, 11241 (2016).
30https://github.com/aspuru-guzik-group/
ChemOS.
31E. Gamma, R. Helm, R. Johnson, and J. vlis-
sides, Design Patterns: Elements of Reusable
Object-Oriented Software, 1st ed. (Addison-
Wesley, 1994).
32S. Bird, E. Klein, and E. Loper, Natural lan-
guage processing with Python: analyzing text
with the natural language toolkit (“O’Reilly Me-
dia, Inc.”, 2009).
33M. Abadi, A. Agarwal, P. Barham, E. Brevdo,
Z. Chen, C. Citro, G. S. Corrado, A. Davis,
J. Dean, M. Devin, S. Ghemawat, I. Good-
fellow, A. Harp, G. Irving, M. Isard, Y. Jia,
R. Jozefowicz, L. Kaiser, M. Kudlur, J. Leven-
berg, D. Man´e, R. Monga, S. Moore, D. Mur-
ray, C. Olah, M. Schuster, J. Shlens, B. Steiner,
I. Sutskever, K. Talwar, P. Tucker, V. Van-
houcke, V. Vasudevan, F. Vi´egas, O. Vinyals,
P. Warden, M. Wattenberg, M. Wicke, Y. Yu,
and X. Zheng, “TensorFlow: Large-scale ma-
chine learning on heterogeneous systems,”
(2015), software available from tensorﬂow.org.
34F.
H¨ase,
L.
M.
Roch,
C.
Kreisbeck,
and
A.
Aspuru-Guzik,
arXiv
preprint
arXiv:1801.01469 (2018).
35F. Hutter, H. Hoos, and K. Leyton-Brown, in
International Conference on Learning and In-
telligent Optimization, Vol. 5 (2011).
36F. Hutter, H. Hoos,
and K. Leyton-Brown,
in Learning and Intelligent Optimization (2012)
p. 55.
37M. Lindauer, K. Eggensperger, M. Feurer,
S. Falkner, A. Biedenkapp,
and F. Hutter,
“Smac v3: Algorithm conﬁguration in python,”
https://github.com/automl/SMAC3 (2017).
38J. Snoek, H. Larochellrobotie,
and R. P.
Adams, in Advances in Neural Information
Processing Systems (NIPS), Vol. 25 (2012) pp.
2951–2959.
39J. Snoek, K. Swersky, R. Zemel,
and R. P.
Adams, in International Conference on Ma-
chine Learning (2014) pp. 1674–1682.
40J. A. Bergstra, R. Badenet, Y. Bengio,
and
B. K´egl, in Advances in Neural Information
Processing Systems (NIPS), Vol. 24 (2011) pp.
2546–2554.
41J. Bergstra and Y. Bengio, J. Mach. Learn. Res.
13, 281 (2012).
42R. Martinez-Cantin, N. de Freitas, E. Brochu,
J. Castellanor, and A. Doucet, Auton. Robots
27, 93 (2009).
43M. A. Osborne, R. Garnett, and S. J. Roberts,
in 3rd international conference on learning and
intelligent optimization (LION3) (2009) pp. 1–
15.
44T. Desautels, A. Krause,
and J. W. Burdick,
J. Mach. Learn. Res. 15, 3873 (2014).
45https://www.twitch.tv/ubcheinlab.
46M. Quigley, K. Conley, B. Gerkey, J. Faust,
T. Foote, J. Leibs, R. Wheeler, and A. Y. Ng,
in ICRA Workshop on Open Source Software,
Vol. 3 (2009) p. 5.
47L. Zhang, R. Merriﬁeld, A. Deguet, and G.-Z.
Yang, Sci. Rob. 2, eaar1868 (2017).
48The 3D model and stl ﬁles were downloaded
from GitHub [https://github.com/ytham/
barmixvah, author: Yu Jiang Tham], in July
2017.
49Y.
Tang,
arXiv
preprint
arXiv:1612.04251
(2016).
50D. P. Kingma and J. Ba, arXiv preprint
arXiv:1412.6980 (2014).
15

VI.
SUPPLEMENTARY INFORMATION
A.
Details on the architecture of ChemOS
1.
Chatbot framework
ChemOS contains a natural language processing (NLP) module integrated to a chatbot framework
for communicating with the researchers. The chatbot model is based on simple text classiﬁcation
via a trained neural network. The text classiﬁer is used to determine the type of a received message
from a set of predeﬁned categories, for which multiple diﬀerent valid responses are already deﬁned.
Once the type of the received message is determined by the neural network classiﬁer, one of the
deﬁned associated responses is selected randomly and sent back to the researcher.
The neural network classiﬁer is implemented in TensorFlow, version 1.3.0,33 via the tﬂearn toolkit,
version 0.3.2.49 We use the Natural Language Toolkit (NLTK), version 3.2.5,32 to tokenize words,
from which we then construct a bag-of-words model. This bag-of-words representation serves as
input for the neural network classiﬁer.
The classiﬁer was trained on a set of predeﬁned patterns, providing examples for inputs of particular
categories. We found good prediction accuracies for a neural network classiﬁer with three layers
and eight neurons per layer. Layers are connected via sigmoid activation functions except for the
last layer, which uses the softmax activation for classiﬁcation. The neural network was trained for
a total of 104 epochs with the Adam optimizer,50 and an initial learning rate of 10−2.
During the training procedure, we found that the classiﬁcation capabilities of the trained neural
network classiﬁer can be improved signiﬁcantly by providing a more informative training set, i.e.
more examples for inputs of particular categories. We could increase the classiﬁcation accuracy
much more by providing more meaningful examples than by adapting the network architecture of
the training strategy.
FIG. 8. Setup and workﬂow of the natural language processing module in ChemOS. A) A neural network
classiﬁer is trained on a set of natural language examples in bag-of-words representations associated with
a speciﬁc category. B) A previously unseen received message is processed by the trained neural network
and classiﬁed as one of the deﬁned categories. A response is sampled from the set of predeﬁned responses
associated with the classiﬁed category.
Fig. 8 summarizes the setup and the workﬂow of the natural language processing workﬂow imple-
mented in ChemOS . The neural network classiﬁer is trained on a set of pattern associated with a
16

particular category before launching a ChemOS instance. When starting a new ChemOS instance
the trained neural network classiﬁer is loaded from disk. Newly received messages are transformed
into bag-of-words representations and processed by the neural network to determine the category.
Once the category of the message has been identiﬁed, a response is sampled from the set of responses
associated with this category.
B.
Details on the cocktail experiments
We demonstrated the performance of ChemOS with signiﬁcant interactions between researchers
and robots on an experimental procedure for mixing consumable liquids (see Sec. II C). ChemOS
was used to learn recipes of ﬂavorful cocktails by proposing recipes from a learning procedure
and receiving feedback on the taste of the cocktail from researchers. Researchers could rate each
produced cocktail on a scale from 0 (best) to 4 (worst) in steps of one.
We ran this experimental procedure in two independent sessions with four researchers in each
session. Results are depicted in Fig. 9. We report the ratings of each produced cocktail in panels
(A) and (B) for the two diﬀerent sessions. In both cases, we observe a slight trend of cocktails
receiving better (smaller) ratings with more conducted experiments.
FIG. 9. Results of the experiments on the Tequila Sunrise space. Panels (A) and (B) present the ratings
provided by researchers on produced cocktails for two diﬀerent sessions. Cocktail recipes were proposed by
Phoenics with a bias towards exploration (red), exploitation (blue) or without bias (yellow). Panels (C)
and (D) show the distance between recipes with the best rating and all other proposed recipes compared
to the diﬀerence in the rating for the two separate sessions.
Panels (C) and (D) of Fig. 9 show the distances in the received ratings between cocktails with the
best rating and all other cocktails compared to the distances between the recipes of the cocktails
for the two sessions. For both sessions, we observe that the diﬀerence in the rating can be large
(more than two rating units) even for very small distances in the recipe. This observation indicates
that similar recipes can receive rather diﬀerent ratings. This reﬂects the subjective nature of the
objective function.
17

C.
Extensive calibration of a robotic sequence for direct-inject HPLC analysis
ChemOS is used to run a calibration procedure on a robotics platform for direct-inject HPLC
analysis fully autonomously. The goal of the calibration procedure is to ﬁnd a set of experimental
parameters which maximizes the amount of drawn sample reaching the HPLC (see main text for
details). We found that the learning procedures implemented in ChemOS quickly ﬁnd experimental
parameters which yield large (> 2500) peak areas. For these experimental procedures, ChemOS
was determined to run for a total of 100 iterations.
However, we demonstrate that the workﬂow established in ChemOS is suﬃciently robust to
autonomously run a much larger number of experiments. Fig. 10 displays the results obtained from
two calibration runs with 400 and 1000 consecutive experiments each. Depicted are the achieved
peak areas with respect to the chosen parameter values for the six parameters P1 to P6 sampled
from the random search learning procedure (see main text for details).
FIG. 10. Experimental parameters and achieved peak areas obtained from autonomous ChemOS sessions
with 400 and 1000 consecutive experiments. We display the peak areas achieved for particular values of
individual parameters P1 to P6. Parameter points were sampled from random search.
We observe that the achieved area is mostly inﬂuenced by parameter P3, which controls the amount
of volume required to push the sample plug from the sample loop to the second valve. Parameters
P1 and P4 mildly inﬂuence the achieved peak areas, with larger parameter values resulting in larger
peak areas. The other three parameters show no signiﬁcant inﬂuence on the peak area.
18

