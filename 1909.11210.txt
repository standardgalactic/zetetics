Gene ologs: a categorical framework
for Gene Ontology
Yanying Wu∗1,2
1Centre for Neural Circuits and Behaviour, University of Oxford, UK
2Department of Physiology, Anatomy and Genetics, University of Oxford, UK
Sept 26, 2019
Abstract
Gene Ontology (GO) is the most important resource for gene func-
tion annotation. It provides a way to unify biological knowledge across
diﬀerent species via a dynamic and controlled vocabulary.
GO is now
widely represented in the Semantic Web standard Web Ontology Lan-
guage (OWL). OWL renders a rich logic constructs to GO but also has
its limitations. On the other hand, olog is a diﬀerent language for on-
tology and it is based on category theory. Due to its solid mathematical
background, olog can be rigorously formulated yet considerably expres-
sive.
These advantages make ologs complementary, if not better than,
OWL. We therefore think it worthwhile to adopt ologs for GO and took
an initial step in this work.
∗yanying.wu@cncb.ox.ac.uk
arXiv:1909.11210v1  [q-bio.GN]  24 Sep 2019

1
Introduction
Despite the amazing diversity of life forms on earth, genomic sequencing revealed
that many genes are actually conserved among diﬀerent species. Therefore our
knowledge of gene functions for one species can be transformed to another. How-
ever, using natural language to describe gene function causes misunderstanding
and thus is unsuitable for such knowledge transferring. Gene Ontology (GO)
was created to ﬁll in the gap. GO produces a set of dynamic controlled vo-
cabulary for the annotation of gene functions, so that our understanding of
diﬀerent biological systems can be shared and communicated. GO was invented
in year 1998, and has evolved into the most important tool for the uniﬁcation
of biology [Ashburner et al., 2000,TheGeneOntologyConsortium, 2019].
Once represented in the Open Biomedical Ontology (OBO) language, GO
has been trending towards using the Web Ontology Language (OWL) in the
recent years [Hastings, 2017]. OWL was build by the World Wide Web Con-
sortium (W3C) for their Semantic Web implementation in 2002. Since then,
OWL has attracted a wide community and therefore possesses an intensive tool
support [Hastings, 2017, Hitzler et al., 2010]. OWL is based on logic, and the
logical axioms provide OWL the necessary constrains on classes and proper-
ties. Therefore, OWL is a relatively rigorous language with decent expressive
capacity for ontology [Hastings, 2017,Spivak et al., 2011]. Nevertheless, OWL
is insuﬃcient in representing knowledge that is not binary (true or false). Also,
its scalability is limited [Hastings, 2017]. Therefore, exploring other ontology
languages for GO is reasonable.
Olog was created in 2011 by David Spivak and Robert Kent as a new frame-
work for ontology [Spivak et al., 2011]. Olog is grounded in a branch of math-
ematics called category theory. The mathematical foundation ensures olog a
rigorous formulation while at the same time a strong expressive power for knowl-
edge representation. It is very hopeful that if we use ologs for Gene Ontology, we
will be able to obtain novel perspectives on our understanding of gene functions.
This work serves an preliminary attempt to materialize the belief.
2
Gene ontology and its OWL representation
2.1
GO and OWL basics
There are three main classes of GO: biological process, molecular function and
cellular component.
A biological process describes a particular process that a gene or its prod-
uct participates. For example, “cellular ion homeostasis” refers to any process
involved in the maintenance of an internal steady state of ions at the level of a
cell. The Drosophila gene DAT which encodes a dopamine transporter has its
biological process denoted as “cellular ion homeostasis”.
On the other side, a molecular function refers to the biochemical activity a
gene product carries out. The DAT gene we just mentioned has its controlled
vocabulary (CV) term (or GO term) “dopamine:sodium symporter activity” for
its molecular funciton.
Finally, the cellular component deﬁnes the location inside a cell where a
gene product performs its function. Again, take the DAT gene as an example,
1

it has several GO terms for cellular component, and one of them is “integral
component of plasma membrane”.
Together, these three types of GO give us a relatively complete picture of
a gene’s function. For DAT, we now know that it is a dopamine:sodium sym-
porter which normally locates on the plasma membrane, and it is involved in
maintaining cellular ion homeostasis.
GO is now primarily represented in the Web Ontology Language (OWL).
OWL is a Semantic Web standard established by the World Wide Web Consor-
tium (W3C), and it is expressive, ﬂexible and eﬃcient [Hastings, 2017, Hitzler
et al., 2010]. The main components of OWL include classes, properties, individ-
uals and restrictions. Concretely, classes deﬁne concepts, properties describe the
relations between concepts, individuals represent the instances of classes, and
restrictions provide logical meanings or constrains on the class deﬁnitions. As
OWL is a logic based language, it supports a rich spectrum of logical constructs
including quantiﬁcation (universal or existential), cardinality (exact, minimum
or maximum), logical connectives (intersection or union), negation (not), as well
as disjointness and equivalence of classes. A great advantage of these logic rules
is that OWL enables automated reasoning and inferencing through computer
programs. Moreover, the consistency of knowledge in the GO can be veriﬁed
and implicit knowledge be made explicit [Hastings, 2017,Hitzler et al., 2010].
In practice, GO terms can be organized in a hierarchical graph using OWL.
For example, the GO term “negative regulation of transcription” may have a
graph view (simpliﬁed version) in Figure 1. In this graph, each box represents
a class (GO term), and each arrow between two boxes (speciﬁed in the legend)
denotes the property or relation between them [Binns et al., 2009,Carbon et al.,
2009].
Figure 1: A GO example (based on AmiGO/QuickGO)
For a particular gene product, such as Foxp1, we can annotate it with this
GO term ”negative regulation of transcription” according to experimental ev-
2

idences [Li et al., 2004]. At this moment (Sept. 2019), there are 44,945 GO
terms, 6,408,283 annotations for 1,155,213 gene products covering 4,467 species
collected on the Gene Ontology database (http://geneontology.org/) [Ashburner
et al., 2000,TheGeneOntologyConsortium, 2019,Carbon et al., 2009,Binns et al.,
2009].
2.2
Standard GO annotation and GO-CAM model
In a standard GO annotation, a gene product is associated with a GO term as
illustrated above. Apparently, multiple GO terms can be assigned to one gene
product, and conversely one GO term has many associated gene products. In
both cases, the GO terms and the gene products actually contain biologically
meaningful relationships among them. For example, several gene products hav-
ing the same GO term may work together in a common pathway. On the other
hand, for a single gene product, its molecular function is mostly related to other
aspects of GO such as the cellular component. In order to capture this layer of
understanding, the Causal Activity Models for Gene Ontology (GO-CAM) was
created. A GO-CAM model combines standard GO annotations to produce an
annotation network that could better reveal the semantic connections among
diﬀerent aspects of a gene or among diﬀerent gene products [TheGeneOntolo-
gyConsortium, 2019].
As an example, we show the individual GO annotations for the gene product
Foxp1 in Figure 2. Note that this is not a complete list of GO annotations for
Foxp1.
Figure 2: The individual GO annotations of Foxp1
And the corresponding GO-CAM models are displayed in Figure 3 (an illustra-
tion) and Figure 4 (the actual model). The GO-CAM model is based on the
scientiﬁc report [Araujo et al., 2015], and the graph in Figure 4 is rendered by
the GO-CAM website (http://noctua.geneontology.org).
From Figure 2, we know several aspects of Foxp1, but they are isolated.
From Figure 3 and Figure 4, our knowledge of the functions and properties of
Foxp1 gets connected together in a sensible way. Therefore, we obtain a better
understanding of Foxp1 through the GO-CAM model.
3

Figure 3: The GO-CAM model for Foxp1 (illustration)
Figure 4: The GO-CAM model for Foxp1 (from geneontology.org)
3
Ologs for knowledge representation
Olog (Ontology log) is a very diﬀerent ontology language from OWL. It was
invented by David Spivak in 2011 [Spivak and Kent, 2012,Spivak et al., 2011].
The central idea of olog is to set up a category theoretic framework for knowl-
edge representation.
Category theory is a branch of mathematics originally
created to connect diﬀerent ﬁelds such as abstract algebra and geometric topol-
ogy [Samuel Eilenberg and MacLANE, 1945]. Since its birth, category theory
has shown an surprising power to unify seemingly separate disciplines and to re-
4

veal the connections and similarities among them. Importantly, this abstraction
and uniﬁcation capability has extended far beyond pure mathematics, as cate-
gory theory has found its successful applications in physics, computer science,
and linguistics [Spivak, 2014,Awodey, 2010,Sica, 2006]. Further, it is promising
that category theory may become a universal language for qualitative modelling
throughout science [Spivak et al., 2011]. At the core of category theory is the
art of composition, i.e. how simple building blocks could compose together in
a meaningful way to achieve a complex, which possesses functions that surpass
the sum of its components. As olog is based on category theory, it therefore ﬁts
perfectly to the general feature of an ontology language for knowledge represen-
tation, which essentially is a way to combine various knowledge together.
Olog uses a linguistic version of category theory. Each olog is treated as a
category in which objects and arrows are called types and aspects, respectively.
A type in an olog is drawn as a text box containing an abstract concept such
as “a gene”, and as aspect of a type X is denoted as an arrow X →Y , where Y
is another type that represents a way of viewing X. For example, a way to view
a gene is that it is a fragment of DNA, so we can draw an olog to reﬂect this
piece of knowledge:
In order for the aspects to be composable, olog requires that aspects must be
functional relationships. Basically, suppose two type A and B are sets, then
an aspect f : A →B between them should be a functional map, which means
that each element in A must have one and only one corresponding element in
B [Spivak and Kent, 2012]. Here, A is called the domain of aspect f, and B
is named the set of result values for f. If we have another aspect g : B →C,
then we are able to compose the two aspects and get g ◦f : A →C. The types,
aspects and compositions are the elementary units of an olog as a category. It is
surprising that such a simple system can generate super rich forms for ontology
expression [Spivak et al., 2011].
Moreover, in ologs, we are able to declare the equivalent of two paths as a
fact. For example, in the olog (2) depicted below, we have one aspect of a gene
saying it encodes a protein. Also, there is another path composed of two in-
dividual aspects, which states that a gene can be transcribed into a mRNA,
which can be translated into a protein. As the protein in the path refers to
the same protein in the ﬁrst aspect, we have a fact in this olog: a gene can be
transcribed into a mRNA which can be translated into a protein that the gene
encodes. Actually, being able to declare that two paths from type A to type B
in an olog are identical is the key diﬀerence between a category and a normal
graph [Spivak and Kent, 2012]. (Note that in the example, we assume that a
5

gene encodes a unique mRNA and a unique protein, while this is only true for
some of the genes.)
Further, for the three basic constructions mentioned above, i.e. types, as-
pects and facts, olog also deﬁnes the instances of them. In fact, an olog can
be treated like a database schema, and instances are just real data organized
accordingly [Spivak and Kent, 2012].
Most importantly, what makes olog really powerful is the rich repertoire of
layouts, i.e. ways to describe and organize the relationships at multiple layers
of the system. This merit comes along with the category theory background of
olog. A peek of the gems gives us pullbacks, products, pushouts and coproducts,
which we will describe in detail in the next section.
4
Gene ologs – an initial draft
4.1
Basic components
In this section we will draft an initial version of the Gene ologs. We will intro-
duce deﬁnitions from the original ologs framework [Spivak and Kent, 2012] and
adapt them to Gene Ontology. In addition, we will accompany each deﬁnition
with some examples to illustrate it, when necessary.
Types. A type is an concept, which is represented as a box containing a
singular indeﬁnite noun phrase. In Gene ologs, most of the GO terms are types,
and we just need to put “a” or “an” in front of the term, or slightly reorganize
the words to convert the term description into a noun phrase. In the Gene olog
language, a type is also viewed as a set (of objects with that type). Typical
examples of types are:
Aspects. An aspect describes a property of a type or a relationship between
two types. In a Gene olog, an aspect is denoted as an arrow between two types,
with text descriptions along the arrow. As aspect also represents a function
between the two types (sets) it connects, we name the source type “domain”
and the target type “codomain”. Examples for aspects include:
6

When the codomain of an aspect is the same as the domain of a second aspect,
we can connect these two aspects together and form a path in an olog. Here is
an example:
Facts. A fact is a declaration of equivalence between two paths. In Gene
ologs, we can draw a “communicative diagram” with a check-mark “√” to indi-
cate the equivalence of two paths. A fact often reﬂects that we can view a GO
term from two diﬀerent ways. For example, in the following Gene olog, we know
that a GTPase activator is a GTPase regulator, and it could also be viewed as
an enzyme activator. After all, it is an enzyme regulator.
Instances. As a type represents a set of objects, an instance refers to a
concrete object of that type. When we annotate a gene product with a GO
term, we say that the gene is an instance of that type (GO term).
Products. We deﬁne the product of two types (or sets) A and B, denoted
A × B, as a set containing pairs of objects coming from A and B, respectively:
A × B = {(a, b) | a ∈A
and
b ∈B}.
Conversely, we have two projection maps A × B →A and A × B →B, sending
the pair (a, b) back to A and B respectively.
Coproducts. The coproduct of two sets A and B, denoted A ⨿B, is the
disjoint union of A and B:
A ⨿B = {(a,
′A′) | a ∈A} ∪{(b,
′B′) | b ∈B}.
Also, we have a pair of inclusive maps A →A ⨿B and B →A ⨿B, sending a
to (a, ’A’) and b to (b, ’B’) respectively.
Pullbacks. The deﬁnition of a pullback carries more category theory ﬂavours.
As depicted in olog (7), the right-hand olog (a communicative square) is the pull-
back for the left-hand olog. Basically, it means that the pullback of type B and
C along D is a type that makes the two paths in the right-hand olog equivalent.
Following the norm, we use symbol B ×D C to denote the pullback type of type
B and type C along D. In addition, the symbol aIJ represents the aspect from
type I to type J.
Pullbacks can easily describe the “and” relationship between two types, such
as in the following example:
7

Olog (9) is the pullback of olog (8), where we have the type “a carbohydrate
transmembrane transport” representing a gene product that is both “a carbo-
hydrate” and “a transmembrane” transport. Moreover, pullbacks can signify
many other interesting relationships [Spivak and Kent, 2012].
Pushouts. The deﬁnition of a pushout is displayed in the following diagram
(olog (10)), where the right-hand olog (a communicative square) is the pushout
for the left-hand olog. We write B ⨿A C to stand for the pushout of type B
and C along A, and it is a type that makes the two paths in the right-hand olog
equivalent.
Pushouts can also express many relationships including “or”, which is illustrated
in the example below:
8

Olog (12) is the pushout of olog (11), and the meaning is obvious from the text
description of the types.
4.2
Comparison between two Gene ologs
Similar to ologs, we can connect two Gene ologs with a functor, which is a
structure preserving mapping from one category to another. As shown in Figure
5, F is a functor that maps types to types (such as A to F(A)), aspects to aspects
(such as f to F(f)), and paths to paths (such as g ◦f to F(g ◦f)).
Figure 5: A functor between two Gene ologs
The concept of a functor enables us to compare two Gene ologs and to better
observe their semantic similarities. For example, in Figure 6, we can see a clear
equivalence of TOR signalling and cAMP-mediated signalling, both of which
are intracellular signalling transductions.
Figure 6: A simple functor example
4.3
Merging two Gene ologs
When two Gene ologs have a common ground, i.e., a part that is same in both,
we can glue the two Gene ologs together. Apparently, the two Gene ologs in
Figure 6 can be merged into one which is depicted in Figure 7
9

Figure 7: A merge of two Gene ologs
To ask for the command ground to be the same is an extreme case. More
generally, a command ground of two Gene ologs C and D refers to a third
Gene olog B, which sends meaningful functors to C (FC : B →C) and D
(FC : B →D), respectively. Therefore, two diﬀerent Gene ologs C and D could
be connected through common ground C ←B →D, and communications
between C and D beyond a simply sticking could happen [Spivak and Kent,
2012].
5
Conclusion and future work
Category theory is believed to be the closest thing to a universal language of
thought, and arguably the most appropriate language for forming connections
[Spivak, 2014]. Rooted in category theory, olog provides a ﬂexible yet rigorous
framework to codify knowledge. Tempted by its great potential, we decide to
exploit the application of olog for Gene ontology, one of the largest treasure
houses of biological knowledge. In this work, we introduce Gene olog, which
simply means olog for Gene.
Following the original olog design, we lay out
the components of Gene olog. As an initial step, we only cover the most basic
settings such as types, aspects, facts and so on. A more comprehensive and
advanced construction should be considered in the future work, together with
more sophisticated examples, particularly for the GO-CAM models.
References
[Araujo et al., 2015] Araujo, D. J., Anderson, A. G., Berto, S., Runnels, W.,
Harper, M., Ammanuel, S., Rieger, M. A., Huang, H.-C., Rajkovich, K.,
Loerwald, K. W., Dekker, J. D., Tucker, H. O., Dougherty, J. D., Gibson,
J. R., and Konopka, G. (2015). FoxP1 orchestration of ASD-relevant signaling
pathways in the striatum. Genes & Development, 29(20):2081–2096.
[Ashburner et al., 2000] Ashburner, M., Ball, C. A., Blake, J. A., Botstein, D.,
Butler, H., Cherry, J. M., Davis, A. P., Dolinski, K., Dwight, S. S., Eppig,
J. T., and Others (2000). Gene ontology: tool for the uniﬁcation of biology.
Nature genetics, 25(1):25.
[Awodey, 2010] Awodey, S. (2010). Category theory. Oxford University Press.
10

[Binns et al., 2009] Binns,
D.,
Dimmer,
E.,
Huntley,
R.,
Barrell,
D.,
O’Donovan, C., and Apweiler, R. (2009).
QuickGO: a web-based tool for
Gene Ontology searching. Bioinformatics (Oxford, England), 25(22):3045–6.
[Carbon et al., 2009] Carbon, S., Ireland, A., Mungall, C. J., Shu, S., Marshall,
B., Lewis, S., AmiGO Hub, t. A., and Web Presence Working Group, t.
W. P. W. (2009). AmiGO: online access to ontology and annotation data.
Bioinformatics (Oxford, England), 25(2):288–9.
[Hastings, 2017] Hastings, J. (2017). Primer on Ontologies. pages 3–13.
[Hitzler et al., 2010] Hitzler, P., Krotzsch, M., and scientist) Rudolph, S. C.
(2010). Foundations of Semantic Web technologies. CRC Press.
[Li et al., 2004] Li, S., Weidenfeld, J., and Morrisey, E. E. (2004). Transcrip-
tional and DNA binding activity of the Foxp1/2/4 family is modulated by
heterotypic and homotypic protein interactions. Molecular and cellular biol-
ogy, 24(2):809–22.
[Samuel Eilenberg and MacLANE, 1945] Samuel Eilenberg, B. and MacLANE,
S. (1945). GENERAL THEORY OF NATURAL EQUIVALENCES. Techni-
cal report.
[Sica, 2006] Sica, G. (2006). What is category theory?, volume 3. Polimetrica
sas.
[Spivak, 2014] Spivak, D. I. (2014). Category theory for the sciences. MIT Press.
[Spivak et al., 2011] Spivak, D. I., Giesa, T., Wood, E., and Buehler, M. J.
(2011). Category theoretic analysis of hierarchical protein materials and social
networks. PLoS ONE, 6(9).
[Spivak and Kent, 2012] Spivak, D. I. and Kent, R. E. (2012). Ologs: A cate-
gorical framework for knowledge representation. PLoS ONE, 7(1):1–52.
[TheGeneOntologyConsortium, 2019] TheGeneOntologyConsortium
(2019).
The Gene Ontology Resource: 20 years and still GOing strong.
Nucleic
Acids Research, 47(D1):D330–D338.
11

