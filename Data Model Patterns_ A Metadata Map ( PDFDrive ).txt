
DATA MODEL PATTERNS

The Morgan Kaufmann Series in Data Management Systems
Series Editor: Jim Gray, Microsoft Research
Data Model Patterns: A Metadata Map
David Hay
Data Mining: Concepts and Techniques,
Second Edition
Jiawei Han and Micheline Kamber
Querying XML: XQuery, XPath, and
SQL/XML in Context
Jim Melton and Steve Buxton
Joe Celko’s SQL for Smarties: Advanced
SQL Programming, Third Edition
Joe Celko
Moving Objects Databases
Ralf Güting and Markus Schneider
Foundations of Multidimensional and
Metric Data Structures
Hanan Samet
Joe Celko’s SQL Programming Style
Joe Celko
Data Mining, Second Edition: Concepts
and Techniques
Ian Witten and Eibe Frank
Fuzzy Modeling and Genetic Algorithms
for Data Mining and Exploration
Earl Cox
Data Modeling Essentials, Third Edition
Graeme C. Simsion and Graham C. Witt
Location-Based Services
Jochen Schiller and Agnès Voisard
Database Modeling with Microsft® Visio
for Enterprise Architects
Terry Halpin, Ken Evans, Patrick Hallock,
Bill Maclean
Designing Data-Intensive Web Applications
Stephano Ceri, Piero Fraternali,
Aldo Bongio, Marco Brambilla,
Sara Comai, and Maristella Matera
Mining the Web: Discovering Knowledge
from Hypertext Data
Soumen Chakrabarti
Advanced SQL: 1999—Understanding
Object-Relational and Other Advanced
Features
Jim Melton
Database Tuning: Principles, Experiments,
and Troubleshooting Techniques
Dennis Shasha and Philippe Bonnet
SQL: 1999—Understanding Relational
Language Components
Jim Melton and Alan R. Simon
Information Visualization in Data Mining
and Knowledge Discovery
Edited by Usama Fayyad, Georges G.
Grinstein, and Andreas Wierse
Transactional Information Systems: Theory,
Algorithms, and Practice of Concurrency
Control and Recovery
Gerhard Weikum and Gottfried Vossen
Spatial Databases: With Application to GIS
Philippe Rigaux, Michel Scholl, and
Agnes Voisard
Information Modeling and Relational
Databases: From Conceptual Analysis to
Logical Design
Terry Halpin
Component Database Systems
Edited by Klaus R. Dittrich and
Andreas Geppert
Managing Reference Data in Enterprise
Databases: Binding Corporate Data to the
Wider World
Malcolm Chisholm
Understanding SQL and Java Together:
A Guide to SQLJ, JDBC, and Related
Technologies
Jim Melton and Andrew Eisenberg
Database: Principles, Programming,
and Performance, Second Edition
Patrick and Elizabeth O’Neil
The Object Data Standard:
ODMG 3.0
Edited by R. G. G. Cattell and
Douglas K. Barry
Data on the Web: From Relations to
Semistructured Data and XML
Serge Abiteboul, Peter Buneman,
and Dan Suciu
Data Mining: Practical Machine Learning
Tools and Techniques with Java
Implementations
Ian Witten and Eibe Frank
Joe Celko’s SQL for Smarties: Advanced
SQL Programming, Second Edition
Joe Celko
Joe Celko’s Data and Databases: Concepts
in Practice
Joe Celko
Developing Time-Oriented Database
Applications in SQL
Richard T. Snodgrass
Web Farming for the Data Warehouse
Richard D. Hackathorn
Management of Heterogeneous
and Autonomous Database
Systems
Edited by Ahmed Elmagarmid,
Marek Rusinkiewicz, and
Amit Sheth
Object-Relational DBMSs: Tracking the
Next Great Wave, Second Edition
Michael Stonebraker and Paul Brown,
with Dorothy Moore
A Complete Guide to DB2 Universal
Database
Don Chamberlin
Universal Database Management:
A Guide to Object/Relational
Technology
Cynthia Maro Saracco
Readings in Database Systems,
Third Edition
Edited by Michael Stonebraker and
Joseph M. Hellerstein
Understanding SQL’s Stored Procedures:
A Complete Guide to SQL/PSM
Jim Melton
Principles of Multimedia Database
Systems
V. S. Subrahmanian
Principles of Database Query Processing
for Advanced Applications
Clement T. Yu and Weiyi Meng
Advanced Database Systems
Carlo Zaniolo, Stefano Ceri,
Christos Faloutsos, Richard T. Snodgrass,
V. S. Subrahmanian, and Roberto Zicari
Principles of Transaction Processing
Philip A. Bernstein and Eric Newcomer
Using the New DB2: IBMs Object-Relational
Database System
Don Chamberlin
Distributed Algorithms
Nancy A. Lynch
Active Database Systems: Triggers and
Rules For Advanced Database
Processing
Edited by Jennifer Widom and
Stefano Ceri
Migrating Legacy Systems: Gateways,
Interfaces, & the Incremental Approach
Michael L. Brodie and Michael Stonebraker
Atomic Transactions
Nancy Lynch, Michael Merritt,
William Weihl, and Alan Fekete
Query Processing for Advanced Database
Systems
Edited by Johann Christoph Freytag,
David Maier, and Gottfried Vossen
Transaction Processing: Concepts and
Techniques
Jim Gray and Andreas Reuter
Building an Object-Oriented Database
System: The Story of O2
Edited by François Bancilhon, Claude Delobel,
and Paris Kanellakis
Database Transaction Models for Advanced
Applications
Edited by Ahmed K. Elmagarmid
A Guide to Developing Client/Server
SQL Applications
Setrag Khoshaﬁan, Arvola Chan, Anna Wong,
and Harry K. T. Wong
The Benchmark Handbook for Database
and Transaction Processing Systems,
Second Edition
Edited by Jim Gray
Camelot and Avalon: A Distributed
Transaction Facility
Edited by Jeffrey L. Eppinger, Lily B.
Mummert, and Alfred Z. Spector
Readings in Object-Oriented Database
Systems
Edited by Stanley B. Zdonik and
David Maier

DATA MODEL PATTERNS
A Metadata Map
David C. Hay
Essential Strategies, Inc.
AMSTERDAM
BOSTON
HEIDELBERG
LONDON
NEW YORK
OXFORD
PARIS
SAN DIEGO
SAN FRANCISCO
SINGAPORE
SYDNEY
TOKYO

Publisher
Diane D. Cerra
Assistant Editor
Asma Stephan
Editorial Intern
Marisa Crawford
Publishing Services Manager
George Morrison
Project Manager
Marilyn E. Rash
Cover Design
Hannus Design
Cover Image
Aristotle with a Bust of Homer, 1653 (Oil on canvas)
Rembrandt Harmensz van Rijn (1606–1669 Dutch)
Metropolitan Museum of Art, New York, USA
Composition
Cepha Imaging Pvt. Ltd.
Technical Illustrations
Dartmouth Publishing Inc.
Indexer
Kevin Broccoli
Interior printer
Courier Westford
Cover printer
Phoenix Color Corp.
Morgan Kaufmann Publishers is an imprint of Elsevier.
500 Sansome Street, Suite 400, San Francisco, CA 94111
This book is printed on acid-free paper.
© 2006 by David C. Hay. Published by Elsevier Inc. All rights reserved.
Designations used by companies to distinguish their products are often claimed as trademarks or registered
trademarks. In all instances in which Morgan Kaufmann Publishers is aware of a claim, the product names
appear in initial capital or all capital letters. Readers, however, should contact the appropriate companies for
more complete information regarding trademarks and registration.
No part of this publication may be reproduced, stored in a retrieval system, or transmitted in any form or by
any means—electronic, mechanical, photocopying, scanning, or otherwise—without prior written permission
of the publisher.
Permissions may be sought directly from Elsevier’s Science & Technology Rights Department in Oxford, UK:
phone: (+44) 1865 843830, fax: (+44) 1865 853333, E-mail: permissions@elsevier.com. You may also complete
your request on-line via the Elsevier homepage (http://elsevier.com), by selecting “Support & Contact” then
“Copyright and Permission” and then “Obtaining Permissions.”
Library of Congress Cataloging-in-Publication Data
Hay, David C., 1947-
Data model patterns : a metadata map / David C. Hay.
p. cm.
1. Data warehousing. 2. Metadata.
I. Title.
ISBN-13: 978-0-12-088798-9 (pbk.: alk. paper)
ISBN-10: 0-12-088798-3 (pbk.: alk. paper)
QA76.9.D37.H38 2006
005.74–dc22
2006011123
For information on all Morgan Kaufmann publications, visit our Web site at www.mkp.com or
www.books.elsevier.com
Printed in the United States of America
06 07 08 09 10
5 4 3 2 1

To my mother, Henrietta Hay, who taught me to write well
and to appreciate good writing.

This Page Intentionally Left Blank

CHRONO-SYNCLASTIC INFUNDIBULA—Just imagine that your Daddy is the smartest
man who ever lived on Earth, and he knows everything there is to ﬁnd out, and he
is exactly right about everything, and he can prove he is right about everything.
Now imagine another little child on some nice world a million light-years away,
and that little child’s Daddy is the smartest man who ever lived on that nice world
so far away. And he is just as smart and just as right as your Daddy is. Both
Daddies are smart, and both Daddies are right.
Only if they ever met each other they would get into a terrible argument, because
they wouldn’t agree on anything. Now, you can say that your Daddy is right
and the other little child’s Daddy is wrong, but the Universe is an awfully big
place. There is room enough for an awful lot of people to be right about things and
still not agree.
The reason both Daddies can be right and still get into terrible ﬁghts is because there
are so many different ways of being right. There are places in the Universe, though,
where each Daddy could ﬁnally catch on to what the other Daddy was talking
about. These places are where all the different kinds of truths ﬁt together as nicely
as the parts in your Daddy’s solar watch. We call these places chrono-synclastic
infundibula.
. . .
Chrono (KROH-no) means time. Synclastic (sin-CLASS-tick) means curved
toward the same side in all directions, like the skin of an orange. Infundibulum
(in-fun-DIB-u-lum) is what the ancient Romans like Julius Caesar and Nero called
a funnel. If you don’t know what a funnel is, get Mommy to show you one.
—Kurt Vonnegut Jr.
From The Sirens of Titan, © copyright 1988
by Kurt Vonnegut
Used by permission of Dell Publishing,
a division of Random House, Inc.

This Page Intentionally Left Blank

CONTENTS
Preface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
xiii
Foreword . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
xix
CHAPTER 1: ABOUT METADATA MODELS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
1
WHAT ARE METADATA?
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
1
IN SEARCH OF METADATA . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
5
THE ARCHITECTURE FRAMEWORK . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
7
The Rows . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
8
The Columns . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
11
METAMODELS AND THE FRAMEWORK . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
13
Data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
15
Activities
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
15
Locations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
16
People and Organizations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
16
Timing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
16
Motivation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
17
THE NOTATION: OBJECT AND ENTITY CLASSES . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
17
Class Model (UML) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
18
Entity-Relationship Model . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
24
LEVEL OF ABSTRACTION . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
29
CHAPTER 2: DATA . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
33
DATA AND THE ARCHITECTURE FRAMEWORK . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
33
THE BUSINESS OWNER AND BUSINESS RULES . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
34
ROW TWO: BUSINESS TERMS, CONCEPTS, AND FACT TYPES . . . . . . . . . . . . . . . . . . . . .
37
Terms and Concepts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
38
Ontologies . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
45
Propositions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
48
Fact Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
49
Characteristics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
52
Resources . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
54
ix

x
CONTENTS
Authorship . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
57
Document Distribution
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
60
Coverage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
60
The Dublin Core . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
63
Data Stewardship . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
65
ROW THREE: THE ENTITY-RELATIONSHIP DIAGRAM . . . . . . . . . . . . . . . . . . . . . . . . . . . .
65
Sample Entity-Relationship Model . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
66
Entity Classes and Attributes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
67
Relationships and Relationship Roles . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
70
Entity Class Views . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
82
About Reference Data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
86
ROW FOUR: DATA DESIGN . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
87
Relational Database Design . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
88
Object-Oriented Data Design . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
97
ROW SIX: THE PRODUCTION SYSTEM . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
115
CHAPTER 3: ACTIVITIES, FUNCTIONS, AND PROCESSES . . . . . . . . . . . . . . . . . . . .
123
ACTIVITIES AND THE ARCHITECTURE FRAMEWORK . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
123
DEFINITIONS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
125
TYPES OF PROCESS MODELS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
127
ROW TWO: FUNCTIONS AND BUSINESS PROCESSES . . . . . . . . . . . . . . . . . . . . . . . . . . .
129
Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
130
Business Processes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
133
Sample Process Model . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
138
Motivating Business Processes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
140
Access Roles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
140
ROW THREE: PROCESSING DATA . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
142
A Data Flow Diagram
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
144
System Processes and Data Flows . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
146
Access Roles and System Events . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
150
Essential System Processes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
152
ROW FOUR: PROGRAM MODULES
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
157
Basic Module Structure . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
157
Program Roles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
164
Object Modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
171
ROW SIX: PROGRAM INVENTORY . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
178
CHAPTER 4: LOCATIONS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
183
ABOUT LOCATIONS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
183
Site . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
185
Geographic Location . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
189

CONTENTS
xi
ROW TWO: PLACING PARTIES, BUSINESS PROCESSES, AND MOTIVATION . . . . . . . . . . . . . .
192
Business Locations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
192
Means, End, and Effort . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
192
ROW THREE: DATA FLOW DIAGRAMS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
195
ROW FOUR: PLACING DATA AND PROGRAMS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
199
ROW SIX: SYSTEM INVENTORY . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
203
Database Instances
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
203
Servers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
205
CHAPTER 5: PEOPLE AND ORGANIZATIONS
. . . . . . . . . . . . . . . . . . . . . . . . . . . . .
209
THE PEOPLE AND ORGANIZATIONS COLUMN . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
209
ABOUT PEOPLE AND ORGANIZATIONS
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
210
ROW TWO: THE BUSINESS OWNER’S VIEW . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
218
Access Roles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
218
Concepts, Symbols, and Signiﬁers
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
221
Activities, Decisions, and Events . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
224
Means and Ends . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
225
ROW THREE: THE ARCHITECT’S VIEW . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
230
ROW FOUR: THE DESIGNER’S VIEW . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
234
Interactive Modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
236
ROW SIX: SECURITY AND GOVERNANCE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
243
CHAPTER 6: EVENTS AND TIMING . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
245
THE EVENTS AND TIMING COLUMN . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
245
ROW TWO: BUSINESS EVENT TYPES . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
247
External Business Event Types
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
247
Internal Business Event Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
249
Motivation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
252
ROW THREE: SYSTEM EVENTS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
252
State-Transition Diagram . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
254
Entity Life History . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
257
Essential System Processes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
263
The Feedback Loop . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
266
ROW FOUR: PROGRAM EVENTS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
267
Object Orientation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
270
CHAPTER 7: MOTIVATION . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
273
THE MOTIVATION COLUMN . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
273
About Motivation
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
274
Mission and Vision . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
274
Ends
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
277
Means . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
278

xii
CONTENTS
Directives . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
280
Inﬂuencers and Assessments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
284
Directive Motivation
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
287
Activities
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
289
ROW THREE: THE ARCHITECT’S VIEW . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
292
About Business Rules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
292
Sample Model
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
294
Domains . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
307
System Constraints . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
312
Business Rule Mapping . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
318
Parties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
318
Data Quality . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
321
ROW FOUR: THE DESIGNER’S VIEW
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
322
Sample Database Design . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
324
Database Constraints . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
333
Object-Oriented Constraints . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
333
Links . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
336
Data Quality . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
338
ROW SIX: MEASURING DATA QUALITY . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
338
GLOSSARY . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
343
REFERENCES AND FURTHER READING . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
391
ABOUT THE AUTHOR
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
395
INDEX . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
397

PREFACE
ABOUT METADATA
Twenty years ago, when I started working as a consultant with the Oracle
Corporation, I learned a particular style of data modeling. I had done database
design for many years before that, and often illustrated my designs with draw-
ings. The particular ﬂavor of modeling I learned at Oracle, however, was very
different. For the ﬁrst time, I was modeling the structure—the language—of a
company, not just the structure of a database. How does the organization under-
stand itself and how can I represent that so that we can discuss the information
requirements?
Thanks to this approach, I was able to go into a company in an industry about
which I had little or no previous knowledge and, very quickly, to understand the
underlying nature and issues of the organization—often better than most of the
people who worked there. Part of that has been thanks to the types of questions
data modeling forces me to ask and answer. More than that, I quickly discovered
common patterns that apply to all industries.
It soon became clear to me that what was important in doing my work efﬁ-
ciently was not conventions about syntax (notation) but rather conventions about
semantics (meaning). This was the source of my ﬁrst book, Data Model Pat-
terns: Conventions of Thought. I had discovered that nearly all commercial and
governmental organizations—in nearly all industries—shared certain semantic
structures, and understanding those structures made it very easy to understand
quickly the semantics that were unique to each.
The one industry that has not been properly addressed in this regard, however,
is our own—information technology. This is at least partly because the patterns
that address most businesses are not as helpful to the understanding this one.
Where a business model represents the semantics of a business, what we need are
xiii

xiv
PREFACE
models that represent semantics itself. We need models of the models we use to
describe the business. This is more difﬁcult.
Our industry also has not been properly addressed for the same reason many
companies do not have data models: we have not seen the need. Just as the idea
of modeling an organization’s data seems a little too arcane for many business
people, so too the idea of modeling information technology data seems too strange
for many of us. But the need is deﬁnitely there. Just as it is essential for an
organization to better understand the underlying nature of its data (and through
that the underlying nature of its own structure) if it is to acquire and use systems
successfully to meet its customers’ needs, so too is it essential for us to understand
the underlying nature of our data (and through that the underlying nature of our
industry’s own structure) if we are to be successful in producing information
systems products for our customers.
As you will see, some of the semantic patterns are in fact the same for infor-
mation technology as they are for any other industry. Most notably, people and
organizations are components of the information technology world, just as they
are at the heart of any business. Similarly, locating programs and data in the
information technology world is not that different from locating products and
customers in the business world. Beyond these topics, however, the model in this
book is very different from a typical commercial model. Whereas a business is
concerned with modeling products and processes, our model is concerned with
modeling the concepts for describing a product or process.
Aristotle called his work “Meta” physics, simply because it was the one he
wrote after writing the one on physics, the word meta being Greek for “after”.
This book could also be about a “meta” model simply because I am creating it
after years of creating business models. But it is more than that. Because of the
strange nature of Aristotle’s metaphysics, the word meta came to mean “above”
or “beyond”. Because of the strange nature of this model, I am sure no one will
argue against applying the word in this more cosmic sense.
ABOUT THIS BOOK
The “data” in metadata means that this description of our industry will be
expressed as a data model. The concepts are presented here using semantic

PREFACE
xv
data constructs. But data are not the sole subject of this model. The book is
intended to be more comprehensive than prior efforts, in that it will cover more
facets of our industry. Because this is a comprehensive view of metadata, a com-
prehensive view of the world is required. The book describes not just the structure
of data modeling but also models of activities, people and organizations, locations,
events and timing, and motivation.
Yes, those of you familiar with John Zachman’s Framework for Enterprise
Architecture will recognize these topics. They are the what, how, who, where,
when, and why columns in his approach to understanding the body of knowledge
that is the information systems development world. These columns indeed form
the basis for chapters in the book.
While the model is intended to be comprehensive, by the way, I am acutely
aware that it probably is not comprehensive enough. First, not all rows are covered.
To model the builder’s world (the ﬁfth row) requires a model of every different
brand of relational database, programming language, and new tool for addressing
business rules and other areas. Those models alone would require several books
this size. It seems reasonable, therefore, to start “small”.
Second, as suggested by the title of the book, these really are just patterns for
modeling metadata. This is not a comprehensive design for a “metadata repos-
itory”. Rather, this model is an attempt to identify the most fundamental and
widely applicable concepts that must be present in such a repository. I am acutely
aware of the fact that if you are building a repository in a particular environment
you will need more speciﬁc details in many areas. My only hope is that this model
will make it clear where to add those details.
In addition to addressing the columns in John Zachman’s Architecture Frame-
work, this book addresses the different points of view taken by various people in
the systems development process: the CEOs, the people who run the business, the
information architects, the designers, the builders, and the users of systems. By
addressing the different perspectives described in the framework, this book should
be more comprehensible than previous efforts, as well. It describes metadata as
seen by business owners, system architects, and designers—in their terms.
Because each row of the Architecture Framework described here represents
a particular perspective, and the part of the model describing that row is pre-
sented in terms of language appropriate to that perspective, both business metadata
and technical metadata are included. Each is intended to be readable and under-
standable by its intended audience. Moreover, the model is presented one small

xvi
PREFACE
piece at a time to ensure that the structures described can be understood by any
educated—even if not technologically savvy—reader.
The subject of the book is a single conceptualdatamodel (an entity-relationship
model) of the metadata that control systems development and management. It is
a conceptual data model in that it is a uniﬁed description of the business we are
in, not of a speciﬁc database design. Indeed, it is not the design of a metadata
repository at all, although it does describe what should be in such a repository,
and any designer would be well advised to understand it thoroughly before taking
on such a design. It is fundamentally a Row Three model.
This book itself uses a particular vocabulary (as close to educated English as
possible) to describe the concepts contained here. One of the things described,
however, is itself the idea of vocabulary. This means that the models used are
themselves examples of what is being described. (For those who, in spite of your
author’s best efforts, do not ﬁnd the meaning of the models intuitively obvious,
all the entity classes and attributes presented are deﬁned both in the text and in
the glossary at the back of the book.)
When a company develops a data model of its operations, the model is a use-
ful product for the development of a new database. The effort of producing the
model itself, however, often reveals to the people involved profound insights into
the nature of their business. These insights often represent a direct beneﬁt to
the enterprise, over and above any improved systems obtained from the model.
It gives them the opportunity to understand the implications of what they do for
a living—on their systems, their colleagues, and on the business as a whole.
So, what you have here is a model of the principal concepts behind what we
do when we try to improve the information management of an organization.
The interesting thing is that once we understand these concepts the major con-
troversies that have plagued our industry for the last couple of decades (such as
object-oriented versus relational, the entity-relationship diagram versus the UML
class model, and so forth) become less heated. It turns out that there is no real
disagreement about the merit of any particular technological change, but only on
the perspectives of the contenders. Understand these differences of perspective,
and the arguments disappear.
What the model in this book shows is just what such technological changes
mean. Does this new tool change the way we write programs? Does it change
the way we construct (or carry out) processes? Does it change how we analyze
requirements? Correctly placing the technology in the framework goes a long

PREFACE
xvii
way toward understanding its signiﬁcance—and, indeed, increases our ability to
implement it effectively.
For example, UML has been trumpeted as a great innovation in modeling.
It is true that it is more expressive in some areas than has been seen before. But it
is important to understand what is really new about it and what is simply a new
notation for things that can also be represented in other ways. The models in this
book should make this distinction clear.
This book is intended for the data management community—data administra-
tors, database administrators, data modelers, and the like. But it should also be
useful to system developers, helping them to more readily understand both the
meaning of what they are doing and where that ﬁts into the larger scheme of
things. It should also be useful in an academic setting for teaching any and all of
these people. This may be asking a lot, but it would be valuable also if information
technology managers at least understood the broad strokes of these models, again
to ensure that they understand the context of what they are doing.
The model in these pages attempts to show the information processing world
from many different perspectives. With luck, perhaps we actually have a chrono-
synclastic infundibula.
ACKNOWLEDGMENTS
I must begin by expressing my thanks to Allan Kolber, who not only encouraged
me throughout this effort but provided invaluable insights into the Zachman
Framework, and in particular into the real meaning of the Business Owner’s
View. I still reserve the right to disagree with him on speciﬁcs, but his insights
have been vital to this book.
And of course thanks go to my Business Rules Group colleagues who provided
a wonderful place for the incubation of ideas on business rules and the Architec-
ture Framework. Their movement to become collaborators in the Business Rules
Team has been a signiﬁcant step forward, and I appreciate the publication of the
“Semantics of Business Vocabulary and Business Rules”. I sincerely hope that this
book can be a proper complement to that work. In particular, Cheryl Estep has
spent many hours helping clarify where my work has diverged from the Business
Rule Team’s efforts.

xviii
PREFACE
Please note that I have borrowed extensively from early drafts of the BRT
work. While I want to give them credit for members’ contributions, any errors
of interpretation or divergence from the eventual ﬁnal draft are entirely my
responsibility.
Thanks must also go to Bob Seiner for publishing The Data Administration
Newsletter (www.tdan.com) faithfully for all these years. In addition to providing
the world with a wonderful source of knowledge about all things data admin-
istration, it provided me with a wonderful vehicle for exploring the ideas that
ultimately resulted in this book.
Thanks to Meiler Page-Jones for writing the best book I have found about
object-oriented design [Page-Jones 2000]. It was clear enough to form the basis
for my model of object orientation.
From ANSI to John Zachman, I am always indebted to all the authors in my
bibliography (and others) who have formed the intellectual basis for anything
I may have done here.
I am fortunate to have been able to present this model to various organizations.
I want to thank The Texas Modeling and User Group in particular, and speciﬁ-
cally Lee Leclair for his insightful comments. Also my thanks to the Information
Resource Management Association of Canada for their hospitality; especially the
comments of Dorothy Russel, Kerel Vitrofsky, and Deborah Henderson were
most helpful. Comments from the Boston and Rochester DAMA chapters are
also appreciated. The people attending the Metadata 2005 Conference in London
were also helpful in showing me some remaining errors in the model.
None of this would have been possible without the help of Diane Cerra, my
advocate at Morgan Kaufmann, and Marilyn E. Rash, the project manager/editor
who put it all together. In addition, the quality of the book was immeasurably
improved by the suggestions from all the people who graciously gave of their
time to review the contents of the manuscript: James Bean, Charles Betz, Malcolm
Chisolm, Michael Eulenberg, Dagna Gaythorpe, Terry Halpin, Mike Lynott, Dave
McComb, Ken Orr, and Graeme Simseon.
And of course, as always, thanks to my wife, Jola, and to Pamela and Bob,
for being there.

FOREWORD
Marcel Proust wrote that the real voyage of discovery lay not in ﬁnding new
landscapes, but in having new eyes. In the information systems ﬁeld, parts of
the landscape change so rapidly that we can easily overlook the value that can be
found in fresh perspectives. This is particularly true of systems speciﬁcation, where
advances have more often come from new ideas than from new technologies.
Systems speciﬁcation is traditionally discussed in terms of its processes. Neo-
phytes are taught the stages and tasks; debate centers on the merits of the different
methodologies. Yet information systems professionals learned a long time ago that
although process analysis might be the most obvious approach to understanding
a business, it is not the only one. Looking at data—the what rather than the
how—not only complements the process perspective, but also arguably results
in a deeper, more concise and more stable description. Data modelers regularly
achieve insights that process modelers miss.
In this book, Dave Hay brings the perspective of an expert data modeler to the
business of systems speciﬁcation. His starting point is the Zachman Framework
for Enterprise Architecture, which itself owes its longevity at least in part to a
focus on artifacts rather than activities.
This book begins with some insightful and practical adjustments to the Frame-
work. It is hardly surprising that after some twenty years, reﬂective users should
have some suggestions for improvement, and it would be disappointing if purists
saw these changes as anything other than a conﬁrmation of the Framework’s con-
tinuing relevance and adaptability. Dave then sets out, in considerable detail, the
structure of the information used in each of the relevant cells. In keeping with
his philosophy of data modeling, he seeks to describe rather than prescribe, to
illuminate established approaches rather than proposing his own.
The result is a comprehensive picture of what constitutes an information sys-
tems speciﬁcation, from business requirements to logical design. Dave calls it “an
enterprise data model of the IT industry”—a description of the data that systems
xix

xx
FOREWORD
professionals need to do their jobs. Whatever methodology we use, and regardless
of whether we document the data or convey it informally, these are the things we
need to know. For users of the Zachman Framework, the information here pro-
vides a clear “next level down”. For information systems practitioners, students,
and academics in general, it offers a perspective likely to be of continuing value
even as methods and technologies change.
The language of the book is data modeling—and this is one of its particular
strengths. The use of data models, rather a reliance on text and examples, provides
a level of completeness and rigor missing in much of the other work in the ﬁeld.
Dave’s background as a working data modeler is evident in the content and pre-
sentation of the models, and in the examples he uses to illustrate them. Readers
of his earlier books on data model patterns and systems speciﬁcation will know
that he brings to the task a unique combination of subject matter knowledge and
data modeling expertise.
Read this book, therefore, not only to gain a “new eye” on information systems
speciﬁcation, but also to see how an expert modeler uses the language of data
modeling to represent and communicate a complex and important domain.
Graeme Simsion
Simsion & Associates and the
University of Melbourne

1
ABOUT METADATA MODELS
There once was a fellow named Corey
Whose career was not covered in glory
He had a bad day
When he just couldn’t say
Me-ta-da-ta Re-pos-i-TOR-y.
WHAT ARE METADATA?∗
During the 1990s, the concept of data warehouse∗∗swept the information tech-
nology industry. After many years of trying, it appears ﬁnally to be possible for a
company to store all of its data in one place for purposes of reporting and analysis.
The technology for doing this is still new, and the ﬁrst attempts have had mixed
results, but the effort has been quite serious.
One of the problems that arose from this effort was the realization that if a
senior executive is going to ask a giant database a question it is necessary to know
just what is in the database and what types of questions to ask. In addition to the
data themselves, therefore, it is necessary to keep data about the data. The term
coined for “data about data” during the 1990s was metadata.
Since then, numerous books and magazine articles have been published on this
subject, but most have focused on why metadata are important and on technologies
and techniques for managing them. What these publications have left out is a clear
∗Ok, it’s true. I studied Latin in high school and have always held that data is the plural form of
the word datum. I realize that I may be swimming against the current, but, hey! It’s my book!
∗∗Key words and phrases, shown in bold italic font, are deﬁned in the glossary at the back of the
book.
1

2
ABOUT METADATA MODELS
description of exactly what the stuff is. After a decade, there is still no simple, clear
description of metadata in a form that is both comprehensive enough to cover our
industry and comprehensible enough that it can be used by people. This book is
an attempt to produce such a description.
As with all buzzwords, once invented the term metadata has taken on a life of
its own. It is variously described as:
•
Any data about the organization’s data resource [Brackett 2000, p. 149].
•
All physical data and knowledge from inside and outside an organization,
including information about the physical data, technical and business pro-
cesses, rules and constraints of the data, and structures of the data used by
a corporation [Marco 2000, p. 5].
•
The detailed description of instance data. The format and characteristics of
populated instance data: instances and values, dependent on the role of the
metadata recipient [Tannenbaum 2002, p. 93].
Several signiﬁcant points come out of these deﬁnitions. First, as Mr. Marco
pointed out there is a difference between business metadata and technical meta-
data. The business user of metadata is interested in deﬁnitions and structures of
the language as terms for the types of information to be retrieved. The technician
is concerned with the physical technologies used to store and manage data. Both
of these points of view are important, and both must be addressed.
Second, the subject is concerned with more than just data. It is, as Mr. Brackett
said, “any data about an organization’s data resource.” Once you have started
looking at the structure of an organization’s data, you have to also account for its
activities, people and organizations, locations, timing and events, and motivation.
Third, as Ms. Tannenbaum pointed out, the “meta” aspect of the question is
a matter of point of view. There is metadata relative to the data collected by the
business. There is also meta-metadata, which is used to understand and manage
the metadata.∗
∗While delivering a lecture on cosmology one day, Sir Arthur Eddington gave a brief overview of
the early theories of the universe. Among others, he mentioned the American Indian belief that the
world rested on the back of a giant turtle, adding that it was not a particularly useful model as it failed
to explain what the turtle itself was resting on. Following the lecture, Eddington was approached by

WHAT ARE METADATA?
3
This Book
(Meta-
metadata)
Objects:
“Entity Class”
“Attribute”
Table:
“CHECKING_
ACCOUNT”
Columns:
“Account_number”
“Monthly_charge”
Program module:
ATM Controller
Language:
Java
ATM Controller:
Java code
Julia Roberts
Wall Street branch
Checking account
#09743569
ATM Withdrawal
Entity class:
“Customer”
Attributes:
“Name”
“Birthdate”
Customer Name:
“Julia Roberts”
Customer
Birthdate:
“10/28/67”
Branch Address:
“111 Wall Street”
Branch Manager:
“Sam Sneed”
CHECKING_
ACCOUNT.
Account_number:
= “09743569”
CHECKING_
ACCOUNT.
Montly_charge:
“$4.50”
Entity class:
“Branch”
“Employee”
Attributes:
“Employee.Address”
“Employee.Name”
Role:
“Each branch must
be managed by
exactly one
Employee”
Objects:
“Entity Class”
“Attribute”
“Role”
Objects:
“Table”
“Column”
Objects:
“Program
module”
“Language”
Data about
a database
(a data
model)
Elements of
metadata
(metadata
model)
Data about
real-world
things 
(a database)
Real-
world
things
Data
Management
(Metadata)
IT Operations
(Instance
Data)
Fig. 1–1: Data and metadata.
This last point is illustrated in Figure 1–1. Here, the bottom row shows exam-
ples of things in the world that are often described in information systems. “Julia
Roberts” is a real human being. The “Wall Street branch” of a bank is a physical
place were business is performed. Checking account “09743569” is a particular
account held in that bank by a particular customer (Julia Roberts, for example).
The customer of that account may then perform an actual “ATM Withdrawal” at
a speciﬁc time.
The next row up shows, in the ﬁrst three columns, the data that might describe
those three things: (1) A Customer has the name “Julia Roberts” and the “Birth-
date” of “10/28/67”. (2) A Branch has the address “111 Wall Street” and a manager,
“Sam Sneed”. (3) The checking account has an account number “09743569”
and a monthly charge, “$4.50”. In the fourth column, the ﬁrst row from the
an elderly lady. “You are very clever, young man, very clever,” she forcefully declared, “but there
is something you do not understand about Indian cosmology: it’s turtles all the way down!”

4
ABOUT METADATA MODELS
bottom shows that a particular program, called here “Java code”, is responsible
for a “Withdrawal Transaction”. These are the things that would concern a per-
son managing data for a banking business. Note that each of the terms was
described as to what it was: customer name, branch manager, account number, and
so forth.
The third row from the bottom collects those descriptors and labels them in
turn. This is to create what we in the data administration world call the metadata.
There are two components to these labels. First are the names of the things
of signiﬁcance being described by the business data, such as the entity classes
“Customer” and “Branch”. Second, each of these is in turn described by attributes,
such as “Name”, “Address”, and “Birthdate”. We also discover, in the case of
the bank branch, that there is really an additional entity class, “Manager”, and
that it is related to “Branch”. (“Each Branch must be managed by exactly one
Employee.”)
In the checking account column, we see that a checking account is actually
the subject of a table in a database. The table is called “CHECKING_ACCOUNT”
and has columns “Account_number” and “Monthly_charge”. The ATM program
described in the second row simply as “Java code” is actually a program module
with the name “ATM Controller” written in the language “Java”. As we can see,
the metadata row itself encompasses several different types of objects (“Entity
class”, “Attribute”, “Table”, “Column”, “Program module”, and “Language”).
The assignment of this book, represented by the top row, is to show how these
objects relate to one another.
Metadata don’t just describe data. They describe how the organization under-
stands not only its data, but also its activities, people and organizations, geography,
timing, and motivation. Yes, metadata describe the entity classes and attributes
of an entity-relationship model, and the tables and columns by which these
are implemented in a computer system. They also provide, however, structure
for describing the activities of the organization and the computerized processes
that implement these activities. They describe who has access to data, and why.
They describe the types of events and responses that are the nature of an orga-
nization’s activities. They describe where the data and processes are, and they
describe the motivation and business rules that drive the entire thing. So, from
all of this comes the following deﬁnition of metadata.
Metadata are the data that describe the structure and workings of an organization’s
use of information, and which describe the systems it uses to manage that information.

IN SEARCH OF METADATA
5
One anomaly has revealed itself in the line between business data and metadata.
The information about what constitutes a legal value for a product category or an
account type in the business model is often captured in separate reference tables.
To reﬂect these validation structures, a typical data model often has many “type”
entity classes (account type, status, day of the week, and so on) describing legal
values for attributes. These are part of the business data model.
But because they are in fact constraints on the values of other attributes in the
same data model, they are also included in the category of metadata. Where a table
designer would be required to specify the domain of a column, the data modeler
(who is instructing the designer) must now provide the values that constitute that
domain. Here you have business data acting as metadata.
Be aware, of course, that even this line between business data and metadata
is not as clear-cut as it seems. product type, for example, is about reference
data that constrain many attributes in a business model. Even so, speciﬁcation of
the list of product types is very much the domain of the business, not the data
administrator. This plays both the roles of business data and metadata. Probably
more in the metadata manager’s domain would be product category. There
should be relatively fewer of these, and the list should be relatively stable.
IN SEARCH OF METADATA
Metadata repository is a pretentious term for nothing other than a computerized
database containing metadata to support the development, maintenance, and oper-
ations of a major portion of an enterprise’s systems. Among other things, such a
repository can be the foundation for a data warehouse.
The idea has been interpreted in many different ways over the past thirty years
or so. The ﬁrst metadata repositories were the data dictionaries and copy libraries
that accompanied programs in the 1970s and 1980s. A data dictionary was simply
a listing of the ﬁelds contained in a record of a particular type in the ﬁles of a
traditional mainframe data processing application. Sometimes this was accompa-
nied by deﬁnitions of the meanings of each ﬁle and ﬁeld. A copy library is a ﬁle
containing data deﬁnition sections to be used for more than one program (typi-
cally a COBOL program, but other languages used copy libraries as well). Speciﬁc
programs would then make use of the copy library to get their data speciﬁcations.
This was rarely accompanied by a deﬁnition of each term in the program code.

6
ABOUT METADATA MODELS
The IBM user group GUIDE addressed the issue of how to organize data dic-
tionary and copy library data with white papers on a “Repository Data Model”
in 1987 and 1989 [GUIDE 1987, 1989]. Since the 1980s, computer-aided systems
engineering (CASE) tools have always captured descriptions of the structures they
create and manage in an organization, and some CASE tool vendors have made
available models of their own underlying data structures. (Typically these are
models of data and activities as captured in data and function models and the doc-
umentation behind them) Even now, the business information gathered during
requirements analysis is typically the ﬁrst component of metadata captured in
any development project.
Along the same lines, “encyclopedias” have been developed to support other
types of tools such as extraction, transfer, and load (ETL) facilities. During the
1980s and early 1990s, IBM expended enormous effort toward developing a uni-
versal metadata management tool called Repository Manager MVS (RM/MVS).
This tool was the centerpiece of the AD/Cycle tool activity that IBM developed
as a part of the CASE movement. IBM worked with a number of CASE partners
and other organizations in an attempt to build a universal, end-to-end metadata
management schema for all of application development from planning through
operations.
Various software vendors have attempted to improve communications between
CASE tools, which has required them to model the internal structure of metadata.
This structure is usually proprietary, however, and these vendors have not been
motivated to publish their versions. In recent years, with the advent of the data
warehouse movement, the literature about metadata repositories has proliferated.
There is a plethora of books and magazine articles describing the importance
of metadata and their signiﬁcance to corporations operating in the twenty-ﬁrst
century.
Ms. Tannenbaum’s and Messrs. Brackett’s and Marco’s original books (alluded
to previously in this chapter) contain the deﬁnitions cited previously, and are
currently the best available on the subject of metadata and their signiﬁcance to
modern commerce. But while they describe the importance and implications of
metadata their descriptions of what should be in a metadata repository don’t
present a complete model.
Ms. Tannenbaum does present a list categorizing what should be included
[Tannenbaum 2002], but she does not attempt to model these. In his 2000 book
Mr. Marco presents a simple model, but even he concedes that this is only a
starting point. His latest book [Marco and Jennings 2004] is a better version of

THE ARCHITECTURE FRAMEWORK
7
a practical metamodel for a data warehouse design, but as such it misses much that
could be included: it does not go far enough to address the underlying structure
of our industry as a whole.
Several companies in the 1990s offered metadata repository products, each
consisting of an empty database and tools for manipulating the metadata such
a database could contain. These products, however, only described some of the
required information—largely just table and column structures, along with the
ability to keep track of the history of updates.
The Meta Data Coalition (MDC) attempted to develop a more comprehensive
model of metadata, and in 1999 published its model, the Object Information
Model. It was extremely convoluted and abstract, however, and very difﬁcult
to understand. The MDC has since been absorbed into the Object Management
Group (OMG), and the combined organization has now published the Common
Warehouse Metamodel (CWM) and the Meta Object Facility (MOF). These are
described by John Poole and his colleagues in Common Warehouse Metamodel
[Poole et al. 2002]. A more detailed description can be found on the OMG’s web
site at http://www.omg.org/cwm/.
The CWM is intended to be a model of business metadata, whereas the MOF
is intended to be a meta-metadata model of metadata themselves. Although
much better than the MDC model, both models suffer from being developed
in an object-oriented design environment and focusing on elements that are
appropriate to deﬁning an object-oriented design, not to displaying the concepts
themselves to the public. Both have many abstractions that serve their design
purposes but confuse the presentation of the core concepts. These models are
not really accessible to those who just want to see how to represent concepts
such as business rules, entity classes and relationships, or functional hierar-
chies. So where does all this leave us? What should we include in a metadata
repository?
THE ARCHITECTURE FRAMEWORK∗
Because the model presented here is intended to represent the information man-
agement industry as a whole, an Architecture Framework is needed to organize
∗This section is based on a similar description of the Architecture Framework in your author’s book
Requirements Analysis: From Business Views to Architecture [Hay 2003].

8
ABOUT METADATA MODELS
the body of knowledge concerned. The Architecture Framework used here is based
on John Zachman’s 1987 and 1992 Enterprise Architecture Framework [Zachman
1987; Sowa and Zachman 1992].
The Zachman Framework consists of a matrix in which the rows represent
perspectives different people have on an information technology project and the
columns represent what they are seeing from each perspective. The latter includes
data, activities, motivation, and so forth. (The Architecture Framework used here
is concerned with the same matrix, but differs slightly in its deﬁnition of rows
from Mr. Zachman’s version. Even so, the principal concepts are the same. This is
further explored below.)
It turns out that everything we want to know about an information system is
contained in one or more of the cells in this matrix, and the set of cells represents
a very useful basis for organizing this book. Each part of the model presented
here describes the content of one or more of these cells. After this introductory
chapter, one chapter will address each column.
The Architecture Framework is diagrammed in Figure 1–2. The rows in the
framework represent the perspectives of different actors in the system develop-
ment process, and the columns represent the things viewed from each perspective.
Although the concepts are the same, some of the names of rows are different from
those used by Mr. Zachman in his original paper.
The Rows
Each row in the Framework represents the perspective of one of the categories
of players in the systems development process, whereas each column represents
a different aspect of the process. The perspectives are:
•
Scope (Planner’s View): This deﬁnes the enterprise’s direction and business
purpose. This is necessary in order to establish the context for any system
development effort. It includes deﬁnitions of the boundaries of system or other
projects.
•
Model of the business (Business Owner’s View): This deﬁnes—in business
terms—the nature of the business, including its structure, processes, orga-
nization, and so forth. There are usually multiple business owners’ views of a
given enterprise, and these may overlap or even contradict each other. These
business owners’ views may be classiﬁed into two groups.

THE ARCHITECTURE FRAMEWORK
9
Data
(What)
List of things
important to
the enterprise
List of
functions the
enterprise
performs
List of
enterprise
locations
Organization
approaches
Language,
divergent
data model
Business
process
model
Logistics
network
Organization
chart
State/ 
transition
diagram
Business
strategies,
tactics,
policies, rules
Convergent
e/r model
Essential
data ﬂow
diagram
Locations
of roles
The 
viable system,
use cases
Entity 
Life
History
Business
rule
model
Database
design
System design,
program
structure
Hardware,
software
distribution
User
interface,
security
design
Event
processing
Business
rule
design
Physical
storage
design
Detailed
program
design
Network
architecture,
protocols
Screens,
security coding
Timing
deﬁnitions
Rules
speciﬁcation
program
logic
Databases
Program
inventory,
logs
Communications
facilities
Trained
people
Business
events
Enforced
rules
Objectives/
Scope
(Planner’s
View)
Enterprise
Model
(Business
Owner’s
View)
Model of
Fundamental
Concepts
(Architect’s
View)
Technology
Model
(Designer’s
View)
Detailed
Representation
(Builder’s 
View)
Functioning
System
Activities
(How)
Locations
(Where)
(Working System)
People
(Who)
Time
(When)
Motivation
(Why)
Business
master
schedule
Business
vision
and mission
Fig. 1–2: The Architecture Framework.

10
ABOUT METADATA MODELS
◦
Views of the tangible current nature of the business: Most people in a busi-
ness are concerned with the speciﬁc organization, computer systems, forms,
and procedures required to carry out a business the way it exists now.
This view of the world constitutes what the American National Standards
Institute in 1975 called the “external schema” [ANSI 1975].
◦
A single view of the underlying nature of the business: Individual things
seen by each business owner are usually examples of more general and
fundamental things. This view is relatively abstract, although it is not yet
structured to use as the basis for designing computer systems. This is the
beginning of the “conceptual” schema (model) of the business [ANSI 1975].
The essence of this row is its capture of the semantics of the organization.
That is, this row is about the vocabulary of the business as seen by business
owners.
•
Model of the fundamental concepts (Architect’s View): This perspective sees
the underlying structures of Row Two rendered in a more disciplined fashion,
completing the conceptual model of the business. This is still without reference
to any particular technology.
For example, business owners’ views of business rules encompass all con-
straints that might be imposed on a business, whereas the Architect’s View is
only of constraints that affect the updating of data or the processes of doing
such updating. A Business Owner’s View of data can include many-to-many
relationships, relationships among three or more entity classes (n-ary rela-
tionships), and multi-valued attributes.∗The architect’s perspective eliminates
all of these.
Mr. Zachman originally called this the “Information Designer’s View”
because of its role in making the structures suitable for automation. The word
designer, however, has the connotation of applying technology to the solution
of a problem, even though this row really simply represents the ﬁnal stage in
describing the enterprise as rigorously as possible. It is the architect of a build-
ing project who describes its structure with emphasis on design as opposed
to the technology. For this reason, it seems more appropriate to call this the
“Architect’s View.”
∗Multi-valued attributes are those that can take on more than one value for a row, such as using
Address as an attribute when it can have more than one value for a person.

THE ARCHITECTURE FRAMEWORK
11
•
Technology model (Designer’s View): This describes how technology may
be used to address the information-processing needs identiﬁed in the rows
described above. Here, object-oriented databases are chosen over relational
ones (or vice versa), types of programming languages are selected (third- or
fourth-generation, object-oriented, and so on), program structures are deﬁned,
user interfaces are speciﬁed, and so forth.
The previous three views are views of the business. This is the ﬁrst view
that is of information technology.
The ANSI view of data called this the “logical” schema [ANSI 1975], but
in later years this has taken on the name “physical model.” Indeed, even
Mr. Zachman calls this perspective “the Builder’s View.” This is unfortunate,
in that it is the next row that seems more appropriately the domain of the
“builder” and all things “physical.” This fourth row is about the design of new
artifacts, not their construction.
•
Detailed representations (Builder’s View): The builder sees the details of a
particular language, database storage speciﬁcations, networks, and so forth.
This is what ANSI called the “physical” schema [ANSI 1975].
Mr. Zachman called this the “subcontractor’s view”.
•
Functioning system (Inventory View): Finally, a new view is presented to
the organization in the form of a new system. This is the view of actual com-
puter systems installed in particular places, along with their databases. A single
system design from Row Four may be implemented in numerous functioning
systems.
The Columns
Each column in the Architecture Framework represents an area of interest for each
perspective. The columns describe the dimensions of the systems development
effort. These are:
•
Data: Each of the rows in this column addresses understanding and dealing
with the things of signiﬁcance to an enterprise, about which information is
to be held. In Row One, this is about the most signiﬁcant objects treated by
the enterprise. In Row Two, it is about the language used—terms, facts, and
deﬁnitions—and in Row Three it is about speciﬁcally deﬁned entity classes
and their relationships to each other. Row Four concerns the representation of

12
ABOUT METADATA MODELS
data by computer software and database management systems. This may be in
terms of tables and columns, object classes, or the artifacts of any other system
development approach. In Row Five, this is about the way data are physically
stored on the computer with a particular data management technology. This
row is described in terms of table spaces, disk drive cylinders, and so forth.
Row Six is about the physical inventory of databases.
•
Activities: The rows in the second column are concerned with what the enter-
prise does to support itself. In Row One, these are the overall functions of
the business. In Row Two, these are the physical processes used to carry out
those functions. In Row Three, they are the essential activities underlying the
Row Two processes. Row Four concerns the workings of programs, and the
Row Five perspective is of the speciﬁcs of programming languages. Row Six is
about the physical inventory of program code.
•
Locations: This column is concerned with the geographical distribution of the
enterprise’s operations and how its elements communicate with one another.
In Row One, it is concerned with the parts of the world where the enter-
prise operates. In Row Two, it is concerned speciﬁcally with the enterprise’s
various ofﬁces and how they are related to each other. In Row Three, it is con-
cerned with the roles played in each location, and how they communicate with
those in other locations. Row Four is about the design of computer networks
and communications, whereas Row Five is about the protocols and particular
components of a communications network. Row Six is about the physical com-
ponents and locations of each node in the networks, and the communications
facilities that link them.
•
People: This column describes who is involved in the business and in the intro-
duction and management of technology. Row One addresses the enterprise’s
attitudes and philosophy concerning the management of human resources.
Row Two is concerned speciﬁcally with people’s responsibilities for the Row
Two artifacts of language, processes, and the like. Row Three addresses steward-
ship for deﬁnitions and architecture. Row Four is concerned with the design of
man/machine interfaces, including issues of security and access, whereas Row
Five (in conjunction with the activities column) is concerned with the pro-
gramming of those interfaces. Row Six is about the trained people interacting
with systems in a secure and effective environment.
•
Time: This column describes the effects of time on the enterprise. This includes
annual planning at Row One, business events at Row Two, and data-related

METAMODELS AND THE FRAMEWORK
13
events at Row Three. Row Four translates the data-related events into system
triggers. Row Five is concerned with the implementation of those triggers.
Row Six is about keeping track of actual events.
•
Motivation: As Mr. Zachman originally described this column, it concerned
the translation of business goals and strategies into speciﬁc ends and means.
This has since been expanded to include the entire set of constraints (business
rules) that apply to an enterprise’s efforts, because it is these constraints that
often determine why people do what they do. Row One is concerned with the
enterprise’s vision and mission. Row Two addresses its goals, objectives, strat-
egy, and tactics, as they are translated into business policies and business rules.
Row Three addresses the speciﬁc articulation of system constraints in terms of
their effects on data. Row Four is about the design of the programs that will
implement those effects (along with constraints applied to activities), and Row
Five is about the construction of those programs. Row Six is the collection of
programs (including database management systems) that implement the rules.
METAMODELS AND THE FRAMEWORK
Each framework cell, then, contains a description of some aspect of an enterprise
from a particular point of view. Typically, this description is rendered in the form
of one or more models, although most of the Row One artifacts are simply lists.
Descriptions of these descriptions (models or lists) are metadata. The model that
is the subject of this book, then, is a model of these descriptions.
This book is organized by column, but the underlying model is organized by
row. That is, each perspective yields a model that encompasses all framework cells
(row/column intersections) in that row. In presenting a cell, concepts of the model
will be introduced as “belonging” to that cell in that column, but it will almost
always be shown in the context of concepts from cells in other columns in the
same row.
Because of the overlap between columns, it will be a little tricky presenting
them in sequence. In some cases, concepts will have to be introduced before
introducing the column they apply to. Patience is required.
For the most part, there is not the same degree of overlap between rows.
Most of the concepts are the domain of one perspective only. There are excep-
tions, however. First, the Data Column in Row Two is concerned with the idea of

14
ABOUT METADATA MODELS
business concept. In Row Three, entity class and attribute are shown as sub-
types (examples) of business concept. There are a few other cases of inter-row
overlap as well. More commonly though, in each column there are examples of
entity classes simply linking concepts from different rows (such as attribute col-
umn mapping between the attributes described in Row Three and the columns of
Row Four).
The model presented in this book is itself an artifact of the data column, where
the “enterprise” involved is the set of people involved with the development,
maintenance, and operation of information systems. It is a cross between an
external Business Owner’s View and the conceptual Architect’s View. It is ﬁrst an
architect’s conceptual model, in that it follows all of the data modeling disciplines
of normalization and it is represented entirely in terms of binary relationships.∗
Among other things, this entails resolving many-to-many relationships. It is
also a coherent, uniﬁed view—a single model of the entire range of metadata
management elements.
The model also resembles a Business Owner’s View, however, in that it is
entirely in the language of the metadata manager and the system developer. It uses
abstractions from these terms only rarely, and where abstraction is necessary the
rationale (and result) is explained. This model provides a vocabulary for discussing
metadata, and the terms of this vocabulary are deﬁned both in the text and in the
glossary at the back of the book.
This book’s model sets out to describe metadata for all columns for Rows Two
through Four of the Architecture Framework. That is, it presents diagrams of the
portion of each column that reﬂects, in succession, the Business Owner’s View,
the Architect’s View, and the Designer’s View. In addition, it will cover Row
Six (the Functioning System) of the Data, Activities, Location, and Motivation
columns. To establish context, occasionally references will be made to models of
other rows.
All of this should demonstrate that the cells of the framework are not tidy.
In some cases the differences between rows are nothing other than the content of
the models. In others, the metamodel of a column makes use of elements from
other perspectives on the same column. In still other examples, a diagram may
describe elements from more than one column. Speciﬁcally, the model is organized
as outlined in the following sections.
∗Binary relationships, in this context, are relationships between only two entity classes.

METAMODELS AND THE FRAMEWORK
15
Data
Data consists of the following:
•
RowTwo is concerned with the language of the business. It deals with concepts,
facts, words, and symbols. This part of the model is derived from the seminal
work by the Business Rules Team, in conjunction with the Object Management
Group [BRT 2005].
•
Row Three is about the entity-relationship model (the “conceptual” data
model). That is, it is concerned with entity classes, attributes, and relation-
ships that describe the things of signiﬁcance to a business in rigorous terms.
These are in fact sub-types of the concepts described in Row Two.
•
Row Four describes the structure of data as used for a particular technol-
ogy. In the ﬁrst three rows, the nature of the business is being described,
whereas in Row Four models are of design artifacts—relational database
tables, object-oriented design classes, and so forth. The tables or classes in
this row are fundamentally different from the entity classes that appear in
Row Three.
The technology chosen affects the metamodel on this row. The model of
relational database design is different from the model of object-oriented classes.
Note that the modeling notation UML was originally intended as a way to
model object-oriented designs in Row Four. That some of the symbols in a
UML class diagram can also be used to create a Row Three entity-relationship
diagram does not change the fact that the meaning of a Row Three model is
fundamentally different from that of a Row Four model.
•
Row Six describes the actual instances of tables and columns that constitute a
real database.
Activities
Activities consist of the following:
•
Row Two describes both the functions (in a function hierarchy) of a business
(without regard to timing or mechanism) and the particular business processes
(with mechanisms, participants, and timing) that carry out those functions.
•
Row Three models essential system processes with sequence and timing, but
without mechanisms. Most signiﬁcantly, the essential data ﬂow diagram

16
ABOUT METADATA MODELS
models the way data are passed from one process to another and the
transformations performed by each process.
•
Row Four describes computer processing according to the technique being
employed. Here you will see references to program modules, their structures,
and the data they use and produce.
•
Row Six is about the inventory of actual program modules and the log of
their runs.
Locations
Locations consist of the following:
•
All rows: This model makes use of the business model for geography, but links
the relevant concepts there to concepts in the metamodel for each row of the
framework. In the world of metadata we are concerned with where activities
take place, where data are captured and catalogued, and so forth, just as in the
business model we are concerned with where people live, facilities are located,
and production takes place. Distinctions between rows have to do with the
types of things in each location.
People and Organizations
People and organizations consist of the following:
•
All rows: Similarly, the model for people and organizations at a meta level
makes extensive use of business-level concepts. In the repository, we want to
record who is responsible for an entity class or program module, just as in the
business we want to know who is responsible for a product or contract. Again,
the only distinctions across levels are about what each person or organization
is responsible for.
Timing
Timing consists of the following:
•
Rows Two and Three are both concerned with the state-transition diagram—
showing the states an entity class (or business concept) can go through and

THE NOTATION: OBJECT AND ENTITY CLASSES
17
the events that trigger those state changes. In Row Three we add references to
an entity life history, and revisit the essential data ﬂow diagram.
•
Row Four has its own model, describing the triggers for program elements.
Motivation
Motivation includes the following:
•
Rows One and Two are the model of motivation in the running of a business.
Row One describes the enterprise’s vision and mission, while Row Two is con-
cerned with goals, objectives, strategies, tactics, business policies, and business
rules. Note that the business objectives may include business requirements for
new systems.
•
Row Three is the model of constraints on data, including domains. Business
rules are translated into constraints on the values of attributes, the existence of
relationships, and the existence of entity class occurrences. These constraints
may in turn serve as the basis for system requirements.
•
Row Four is the model of how program modules implement the system
requirements deﬁned for Row Three. This includes referential integrity and
uniqueness constraints usually managed by a database management system,
as well as other constraints that must be implemented by stored procedures
and other programs.
•
Row Six is about the enforcement of data quality procedures in real
databases.
THE NOTATION: OBJECT AND ENTITY CLASSES
The model of a metadata repository is a graphic representation of the structure
of a body of data. As such, it may be represented by any of the techniques
available for describing data structure. These include various forms of entity-
relationship modeling, information engineering, UML, and so forth. Before
getting into the details of the metamodel, it is worth exploring the issue of nota-
tion. Because the metadata being presented are in fact data, let’s delve into the
Data column of the Architecture Framework to explore the concepts behind a data
model.

18
ABOUT METADATA MODELS
Class Model (UML)
UML is becoming a popular notation for representing models of data.∗In a UML
class diagram, we can represent an object class as the deﬁnition of a business
object—a thing of signiﬁcance to an organization about which it wishes to cap-
ture information. The UML class diagram in Figure 1–3 shows an example of a
model we might prepare to describe the sales business. The boxes (“Customer”,
“SalesOrder”, “LineItem”, and “ProductType”) represent object classes; that is,
things of signiﬁcance to the business about which it wishes to hold information.
Within each object class box are listed attributes, describing the information
to be captured about each object class. For example, “Customer” is described
by “Name”, “Shipping address”, and “Billing address”. For each occurrence of
Customer, each attribute must have at least one value, but may have no more than
one, as indicated by “[1..1]”. Each of these is of data type “string”, meaning that
its value will be a piece of text. Note that both “Description” and “Unit cost”
for the object class ProductType are shown with the designator “[0..1]”, which
means that an occurrence of ProductType can have no value for either of those
two attributes, if appropriate.
Note that usually the object classes are related to each other in pairs, as indicated
by the lines between them. A line connecting two boxes means that an occurrence
of one object class is associated in some way to occurrences of another object
class. The relationship names are intended to be read in each direction as, for
example, “Each Customer may be the buyer in one or more SalesOrders”, and
“Each SalesOrder must be from one and only one Customer”.
In this book, for clarity, a convention has been applied to relationship names
that is not usually followed by practitioners of UML. Each role name is designed to
be part of a structured sentence that exactly conveys the optionality and cardinality
constraints.
Each
<object class name 1>
must be (if the first character next to the second entity class is “1”)
(or)
∗There are at least six different types of models in UML. The “class” diagram, representing data
structure, is but one of them.

LineItem
SalesOrder
part of
0..*
0..*
1..1
1..1
composed
of
for
sold via
Order Number [1..1] integer
Order Date [1..1] date
Order Taker [0..1] string
ProductType
Product Number [1..1] string
Product Name [1..1] string
Description [0..1] string
Unit Cost [0..1] real number
Order Number [1..1]
integer
Order Date [1..1] date
Order Taker [0..1] string
Customer
from
0..*
1..1
the buyer
in
Name [1..1] string
Shipping Address [1..1] string
Billing Address [1..1] string
Fig. 1–3: A UML class diagram.

20
ABOUT METADATA MODELS
may be (if the first character next to the second entity class is “0”)
<role name>
one or more (if the second character next to the second entity class
is “*”)
(or)
one and only one (if the second character next to the second entity
class is “1”)
<object class name 2>
For example, each role may be read as follows: “Each Customer may be the buyer
in one or more SalesOrders”, and “Each SalesOrder must be from one and only
one Customer”.∗
With that introduction, let’s begin modeling the language we will use to create
the model of the language we will use. Figure 1–4 shows the beginning of an
object model of object modeling.∗∗In this model, ObjectClass is itself an example
of an object class, as is Attribute.
An attribute is the deﬁnition of a piece of information about an object
class. In a UML diagram, attributes are shown inside each of the object class
boxes as text. Because ObjectClass is itself an object class in this model, it has
Attribute
ObjectClass
about
0..*
1..1
described
by
Name [1..1]:string
Data Type [0..1]:string
Maximum Length [0..1]:number
Average Length [0..1]:number
Decimal [0..1]:number
Optionality [1..1]:string
Name [1..1]:string
Fig. 1–4: Object Classes.
∗Note that this book adopts the convention that the relationship names and multiplicity indicators
(“[1..1]”, “[0..*]”, and so on) are to be read in a clockwise direction.
∗∗Recursion (see Recursion).

THE NOTATION: OBJECT AND ENTITY CLASSES
21
attributes—well, one, at least (its “Name”). This is shown in Figure 1–4, along
with the type of data the attribute can contain—in this case, “string”. In addition,
the “[1..1]” next to “Name” means that it is mandatory and that it can have no
more than one value.∗That is, for every occurrence of ObjectClass there must be
exactly one value for “Name”.
Because it is a thing we are interested in, “Attribute” is also an example of
an object class on the diagram. Attribute also has attributes, which include its
“Name”, as well as its “Data Type”, “Maximum Length”, “Average Length”,
“number of Decimal places”, and “Optionality”. Again, “Name” is mandatory, as
is “Optionality”, but other attributes may have either zero or one value for each—
they are optional. This is shown by the “[1..1]” next to the mandatory attributes
and “[0..∗]” next to the optional ones. Because we are building a conceptual busi-
ness model in a relational environment, in practice each attribute is constrained
to have no more than one value, indicated by the “[..1]” part of the annotation.
UML does permit relaxing that constraint and allowing multiple values for each
instance of an attribute, but your author does not.
If the model in Figure 1–4 were converted into a relational database design, you
would have a table called ObjectClasses, and the occurrences would be shown (as
in Table 1–1) with the names “ObjectClass” and “Attribute”. You would also have
a table called Attributes (as is also shown in Table 1–1). Columns of the table
Attributes are “Name” (from the table ObjectClasses), “Name”, “Data Type”,
“Maximum Length”, and so forth.
Table 1–1: Object classes and attributes.
Object Classes
Attributes
Name
Object Class (Name)
Name
Data Type
Max. Length
…
ObjectClass
ObjectClass
Name
String
15
Attribute
Attribute
Name
String
15
Attribute
Data Type
String
10
Attribute
Maximum Length
Number
3
Attribute
. . .
∗Because these are very common, the notations “0..*” and “1..1” are often abbreviated to “*” and
“1”, respectively.

22
ABOUT METADATA MODELS
Role
ObjectClass
connected to
connected
to
connected
from
0..*
1..1
1..1
1..1
connected via
a super-type of
a sub-type of
about
0..*
1..1
described
by
Name [1..1]:string
Cardinality [1..1]:string
Optionality [1..1]:boolean
Name [1..1]:string
Attribute
Name [1..1]:string
Data Type [0..1]:string
Maximum Length [0..1]:number
Average Length [0..1]:number
Decimal [0..1]:number
Optionality [1..1]:number
0..1
0..2..*
Fig. 1–5: Roles.
Object classes may be associated with each other. As we saw previously, an
association is represented graphically in UML by means of an annotated line
between the object classes.
Each half of the association (going in one direction) is a role. “Role” is then
another object class in our metamodel, as shown in Figure 1–5. One attribute
of Role is “Cardinality”, which is the maximum number of occurrences of an
associated class that may be related to an occurrence of the class playing the role.
Another attribute is “Optionality”, a binary variable determining whether or not
an occurrence of the role must be present in the ﬁrst place. Each role, of course,
must have a “Name”.
Optionality in the model drawing is represented by the ﬁrst half of the symbols
next to the box representing the object class playing the role. As we saw before,
the character “1” in the initial position means that each occurrence of the opposite
object class must be associated with at least one occurrence of the adjacent object
class. Thus, the role is mandatory. (The Optionality attribute for the Role takes
the value “False”). The character “0” means that each occurrence of the opposite
object class may be associated with no occurrence of the adjacent object class.

THE NOTATION: OBJECT AND ENTITY CLASSES
23
That is, the role is optional. (The Optionality attribute for the Role takes the
value “True”). Using the metamodel itself as an example, “each Role must be
connected to one and only one ObjectClass”, but “each ObjectClass may or may
not be connected via a Role”.
Cardinality in the model drawing is represented by the second half of the sym-
bols next to each object class box. The character “1” in the second position means
that each occurrence of the opposite object class may be associated with no more
than one occurrence of the adjacent object. (That is, the Cardinality attribute of
the Role takes the value “1”). The character “*” means that each occurrence of
the opposite object class may be associated with one or more occurrence of the
adjacent object class. (The Cardinality attribute of the Role takes the value “*”, or
a particular number.) For example, in Figure 1–5 “each Role must be connected to
one and only one ObjectClass”, but “each ObjectClass may be connected via one
or more Roles”.
In the model, then (as we saw previously), each attribute must be associated
with exactly one “[1..1]” occurrence of ObjectClass. Each ObjectClass may be
associated with zero, one, or more “[0..*]” occurrences of Attribute. Similarly,
each ObjectClass may be connected via one or more Roles, each of which must
be connected to another Role, which in turn must be connected to the same or
another ObjectClass.
The same symbols apply to attributes. As we saw previously, the “[1..1]” next
to “Name” means that Name must have exactly one value for any occurrence of
Attribute. The “[0..1]” next to “Data Type” means that an occurrence of Attribute
may exist without a value for Data Type, but it can have no more than one value.
Thus, Optionality is an attribute of Attribute, but Cardinality is not.∗
A sub-type is an object class that contains some of the occurrences of a super-
type object class. That is, the occurrences of a super-type may be categorized into
two or more sub-types. For example, the object class “Person” might have as
sub-types “MalePerson” and “FemalePerson”. Figure 1–5, then, shows that each
object class may be a super-type of two or more other object classes (zero, two,
∗Because data modeling usually takes place in a relational environment, multi-valued attributes are
not permitted. That is, an attribute may not have a cardinality of anything but 1, so there is no need
for an explicit attribute “Cardinality” (the second part is always “..1”). UML does allow it, however,
so the model could be made more complete by adding the attribute.

24
ABOUT METADATA MODELS
or more). Each object class, in turn, may be a sub-type of one and only one other
object class (zero or one).∗
Entity-Relationship Model
So much for object classes and associations. Suppose you are one of those old-
fashioned people who still models with entity classes and relationships. What does
that model look like? Figure 1–6 shows an object model of entity-relationship
modeling.
Attribute
0..*
connected
to
1
1
0..1
0..2..*
connected
from
about
1..1
described
by
connected
to
0..*
1..1
connected
via
a super-type of
a sub-type of
Name [1]:string
Data Type [0..1]:string
Maximum Length [0..1]:number
Average Length [0..1]:number
Decimal [0..1]:number
RelationshipEnd
Name [1]:string
Cardinality [1]:string
Optionality [1]:boolean
EntityType
Name [1]:string
Fig. 1–6: The Entity-Relationship Model version.
∗Yes, some would assert that an object class may be a sub-type of more than one other object
class, but it is my contention that this adds unnecessary complexity and that it can be avoided by
approaching the model from a different direction. It is therefore not used in this model. I of course
cannot prevent you from making this relationship “many-to-many,” should you want to. Be sure
to add an intersect object class.

THE NOTATION: OBJECT AND ENTITY CLASSES
25
Speciﬁcally:
•
Each EntityType may be described by one or more Attributes. (Each attribute
must be about one and only one EntityType.)
•
Each EntityType may be connected via one or more RelationshipEnds, where
each RelationshipEnd must be connected to one and only one other Relation-
shipEnd. This second RelationshipEnd, then, must be connected to another
EntityType.
•
Each EntityType may be a super-type of two or more other EntityTypes (Each
EntityType may be a sub-type of one and only one other EntityType).
Funny thing about the metamodel of entities and relationships: with a couple
of names changed, Figure 1–6 (a metamodel of entity types and relationship
ends) looks just like Figure 1–5’s metamodel of objects and roles. This is not a
coincidence. They in fact represent the same things.
An object class model (at least as far as we have determined so far) is in fact an
entity-relationship model. Both an entity type and an object class represent the
deﬁnition of a kind of thing of signiﬁcance to the business about which it wishes
to hold information. The two models are sufﬁciently alike, for that matter, such
that a UML repository model itself can be represented as an entity-relationship
diagram.
Note, however, that UML class notation has other features not appropriate
to a conceptual architect’s model. It departs from entity-relationship modeling
when it describes not business objects but system objects. It also has numer-
ous symbols (not appropriate to entity-relationship modeling) that describe
object-oriented design considerations. These include symbols for composition,
association navigation, and so forth.
Figure 1–7 shows the entity-relationship diagram (ERD) that is a version of
our model. It makes use of a notation from the Structured Systems Analysis
and Design (SSADM) method [Eva 1994], sponsored by the British Government.
This notation is used widely in Europe and is the entity-relationship notation used
by the Oracle Corporation in its Designer CASE tool.
The entity class names have been changed in an attempt to bring the language
of the object-oriented and entity-relationship worlds together. This has been done
without loss of meaning. A “type” of entity can as easily be called a “class” of
entity, and each end of a relationship does indeed describe one “relationship role”.

26
ABOUT METADATA MODELS
played by
connected
to
connected
from
player of
about
described by
a sub-type 
of
a super-
type of (2+)
RELATIONSHIP ROLE
# Name
* Cardinality indicator
* Default optionality indicator
ATTRIBUTE
# Name
° Default value
* Format
° Maximum length
° Average length
° Decimal
° Formula text
° Cardinality indicator
* Default optionality indicator
ENTITY
CLASS
# Name
Fig. 1–7: Entity-relationship diagram of entity and object classes.
UML and entity-relationship notations are of course different. There are three
main differences between the two approaches.
First and most obviously, the typography and the graphics (syntax) are dif-
ferent. The entity-relationship notation shown here has been chosen to improve
the readability of the diagrams for nontechnical viewers. This is important if the
models are to be presented to the user community for validation. For example,
the world at large expects to see spaces between words in names.
Instead of the ﬁrst character “0” in the relationship notation, you see a dashed
line half adjacent to the ﬁrst entity class. This means that the relationship is
optional (“may be” in the previous association sentences). Instead of the ﬁrst
character “1”, you see a solid line half adjacent to the ﬁrst entity class. This rep-
resents a mandatory relationship (“must be” in the previous sentence examples).

THE NOTATION: OBJECT AND ENTITY CLASSES
27
Instead of the second character “*” you see a “crow’s-foot” symbol for “one
or more”. Absence of a crow’s-foot represents the second UML character “1” and
stands for “one and only one”. Entity class names are in all capitals, and spaces
are inserted between words.
These differences have no affect whatsoever on the content (semantics) of
the model. Consequently, the syntax for reading relationships in an entity-
relationship diagram is now as follows.
Each
<entity class 1>
must be (if the line next to the first entity class is solid)
(or)
may be (if the line next to the first entity class is dashed)
<role>
one or more (if a “crow’s-foot” appears next to the second entity
class)
(or)
one and only one (if a “crow’s-foot” does not appear next to the
second entity class)
<entity class 2>
So, using the metamodel as an example, each entity class may be described
by one or more attributes and each attribute must be about one and only one
entity class. Also, the model says that each entity class may be connected via one
or more relationship roles and that each relationship role must be connected
to one and only one entity class. As before, each relationship role must be
connected to exactly one other relationship role that must itself be connected
to one and only one entity class.
A second difference between the entity-relationship notation and UML is in
the information represented about each attribute. Because these models are for
exposition only, and not the basis for design, it is not necessary to describe
the data type for each attribute on the picture. To do so unnecessarily clutters

28
ABOUT METADATA MODELS
the diagram.∗(Of course, that information should be captured in the repository
that supports the drawings.)
It is useful, however, to be able to see if values for an attribute are required, and
thus next to each attribute name is still an “optionality” symbol. If the symbol
is an asterisk (*) or an octothorpe (#), every occurrence of the entity class must
have a value for the attribute (equivalent to 1.. in UML). If the symbol is an
open circle (o), an occurrence of the entity class may or may not have a value
for the attribute in question (equivalent to 0.. in UML). Again, because this is a
normalized conceptual model—and in no case can an attribute have more than
one value—there is no reason for ERD notation to show that the second half of
the UML cardinality notation (“..1” and “..*”).
The entity-relationship model is more expressive than the UML model in the
area of identiﬁers. In object-oriented design, every object class is assumed to have
an object identiﬁer (OID) to identify occurrences of a class. Therefore, there is
no requirement to explicitly designate attributes or roles as identifying. In the
relational word supported by entity-relationship models, however, the identiﬁer
of an entity instance is very important, in that it is expected to consist explicitly
of visible attributes or relationships.
Figure 1–7 shows an octothorpe (#) next to “Name” in each of the entity
classes. This means that in each case the attribute is at least partially responsible
for identifying instances of the entity class. For example, it is assumed here that
every entity class will be given one unique name. In the case of relationship
role, however, it is possible that more than one relationshiprole occurrence may
have the same name. In this case, a mark is also made across the relationship to
entity class to indicate that it is necessary to specify the entity class involved, (as
well as its Name) to uniquely identify each occurrence of the relationship role.
The one place where the entity-relationship model is not quite as expressive
as a UML class diagram is in describing complex cardinality. The UML version
can assert that “each entity class may be a super-type of two or more entity
classes.” The standard entity-relationship notation can say only that an entity
class may be a super-type of one or more other entities. It cannot constrain the
statement to two or more. For purposes of this model, however, our notation has
been modiﬁed to show just that.
∗It is noteworthy that different tools for producing UML class models show different types of
information about each attribute.

LEVEL OF ABSTRACTION
29
Which notation to use has been the basis for extensive debates in the informa-
tion technology industry over the years. Different notations have been developed
to serve different purposes and different audiences. Where the UML class
diagram is a notation for communicating with object-oriented developers, entity-
relationship diagramming was speciﬁcally designed to support the discussion of
concepts with business people untutored in data modeling. For this reason it is
somewhat more accessible to the casual reader. Because the purpose of this book
is to explain concepts, rather than to provide a schematic for building a system,
this is the notation used here.
The UML class diagram, then, is not a grand new conceptualization of the
system development process. The notation is simply another way of creating
conceptual entity-relationship models. What is new is its ability to represent
object-oriented designs.∗In coming chapters, the various types of models available
under the umbrella of UML, as well as the additional notations of the class model,
are addressed in this metamodel.
LEVEL OF ABSTRACTION
It is possible to model anything at varying degrees of abstraction. Anytime one
tries to create a data model, the question arises as to how abstract to make it.
Make it too abstract and it makes no sense to the people who want to understand
it. Make it not abstract enough, and it is vulnerable to changes in the business.
Achieving exactly the right balance is as much art as science.
Ultimately, the model of all metadata could be a variation on the one shown
in Figure 1–8. Here, all things of interest in the model are represented simply as
thing. Each thing must be an example of one and only one thing type, where a
thing type is the deﬁnition of a class of things.
Each thing may be related to another thing, as shown by the relationship that
each thing may be on one side of one or more thing relationships, each of which
is to another thing. Similarly, each thing type may be on one side of one or more
thing type relationships, each of which is to another thing type.
∗For a more comprehensive comparison of many different notations for doing entity-relationship
models, see Appendix B of David C. Hay’s Requirements Analysis: From Business Views to
Architecture [Hay 2003].

30
ABOUT METADATA MODELS
Each thing type may be the object of one or more attribute assignments of
a attribute. That is, knowledge of the type of thing something is tells you what
characteristics should be collected for it. The actual value of an attribute for a
thing is shown in Figure 1–8 as attribute value, which not surprisingly must be
of an attribute and for a thing.
ATTRIBUTE
ASSIGNMENT
THING
ATTRIBUTE VALUE
ATTRIBUTE
THING TYPE
RELATIONSHIP
THING 
RELATIONSHIP
THING TYPE
from
on one
side of
on the other
side of
to
to
of
evaluated
with
subject
to
from
embodied
in
on one 
side of
an example
of
described by
for
on the other
side of
the
object
of
to
of
Fig. 1–8: The ultimate metamodel.

LEVEL OF ABSTRACTION
31
This model can actually describe anything we might want to include in our
repository. In this case, it could represent entity classes, classes, program units,
people, concepts, and the like.
The concrete models we know, then, could each be considered views of this more
abstract model. For example, an entity class could be deﬁned as “a thing that is
an example of the thing type ‘entity class’.” Another view could deﬁne attribute
as “a thing which is an example of the thing type ‘attribute’.” A thing type rela-
tionship would be deﬁned from thingtype “entity class” to thingtype “attribute”
with the name “described by”. Another thingtype relationship would be deﬁned
from thing type “attribute” to thing type “entity class” with the name “about”.
Actually, the model in Figure 1–8 could made even more abstract by show-
ing it as consisting only of thing and thing relationship. After all, the
association of thing to thing type is itself simply an association between two
higher-level things.
In effect, all entity classes contained in this book are but views of the entity
classes in Figure 1–8.∗It is perfectly reasonable, then, for a metadata repository to
have a physical structure based on the abstract model of Figure 1–8. This allows
the tool managing the repository to have the maximum ﬂexibility in addressing
future requirements. As a description of our metadata business, however, it does
not tell us very much about what is really going on. When people go to a repository
for information, they will want to use a vocabulary considerably richer than this.
They will be seeking information about the deﬁnition of a business term, when a
program has been run, or how data are constrained.
It is important, therefore, to present users of the repository with a set of views
in a vocabulary more appropriate to their needs. For this reason, in this book we
must produce a model that is not quite as abstract as that presented in Figure 1–8.
In preparing this book, your author has worked hard to reach the right level of
abstraction. It is for you, the reader, to determine whether he has been successful.
∗But you don’t have to know that in order for them to make sense.

This Page Intentionally Left Blank

2
DATA
The kinds of question we ask are as many as the kinds of things which we know. They are
in fact four:
1. whether the connexion of an attribute with a thing is a fact,
2. what is the reason of the connexion,
3. whether a thing exists,
4. what is the nature of the thing.
Thus when our question concerns a complex of thing and attribute and we ask whether the
thing is thus or otherwise qualiﬁed—whether, e.g., the sun suffers eclipse or not—then we
are asking as to the fact of a connexion.
—Aristotle [350 BCE]
Posterior Analytics
DATA AND THE ARCHITECTURE FRAMEWORK
The Data column of the architecture framework is concerned with what is
signiﬁcant to an organization from the six points of view.
•
The planner looks at aggregate groups of major things of signiﬁcance that
are the domain of the business.
•
The business owner is concerned with the nature of the business itself, in terms
of the tangible things that constitute the organizational environment. Both the
planner and the business owner are also responsible for deﬁning the language
used by the business. The metamodel for Row Two, then, is concerned with the
concepts behind the business and facts that link them, along with the means
of describing those concepts.
33

34
DATA
•
The architect is concerned with the structural elements of the enterprise that
will be the basis for automating it. The third row is the conceptual entity-
relationship model that codiﬁes the enterprise’s language and gives it a rigorous
structure suitable for use in information processing.
•
The designer uses the architect’s rigorous structure as the basis for deﬁning
how data management technology can be used to solve speciﬁc problems. Row
Four is concerned with relational tables and columns, object-oriented classes,
or other approaches for using a particular data manipulation technology.
•
The builder deﬁnes places for data on a particular data storage medium.
•
The functioning system consists of an inventory of physical databases.
Figure 2–1 shows the architecture framework, with the cells to be discussed
in this chapter (for the Business Owner, the Architect, the Designer, and the
Functioning System) highlighted.
THE BUSINESS OWNER AND BUSINESS RULES
The Business Rules Group (formerly the GUIDE Project on Business Rules) pub-
lished a paper in 1995 describing categories of business rules [Business Rules
Group 1995]. The paper essentially addressed the Architect’s View of busi-
ness rules, concentrating on how to capture and organize them for eventual
implementation in an information system.
Among other observations, that paper included recognition that a business rule
at Row Three is best understood as a statement that deﬁnes or constrains data
about an enterprise. To be sure, some rules are more appropriately described in
terms of events and activities, but a preponderance of them are best expressed
in terms of permissible states of data. The categories identiﬁed by the Business
Rules Group paper are:
•
Terms (and the business concepts these terms describe): The deﬁnition of a busi-
ness term is itself a rule that describes how people think and talk about things.
Thus, according to this view the deﬁnition of terms (that is, their underlying
business concepts) establishes a category of business rule. For example, this
can be a term used in a data model (such as product type) or one simply used
in the business, such as prestige client.

THE BUSINESS OWNER AND BUSINESS RULES
35
Data
(What)
List of things
important to
the enterprise
List of
functions the
enterprise
performs
List of
enterprise
locations
Organization
approaches
Business
process
model
Logistics
network
Organization
chart
State/ 
transition
diagram
Business
strategies,
tactics,
policies, rules
Convergent
e/r model
Essential
data ﬂow
diagram
Locations
of roles
The 
viable system,
use cases
Entity 
Life
History
Business
rule
model
System design,
program
structure
Hardware,
software
distribution
User
interface,
security
design
Event
processing
Business
rule
design
Physical
storage
design
Detailed
program
design
Network
architecture,
protocols
Screens,
security coding
Timing
deﬁnitions
Rules
speciﬁcation
program
logic
Program
inventory,
logs
Communications
facilities
Trained
people
Business
events
Enforced
rules
Objectives/ 
Scope
(Planner’s
View)
Enterprise
Model
(Business
Owner’s
View)
Model of
Fundamental
Concepts
(Architect’s
View)
Technology
Model
(Designer’s
View)
Detailed
Representation
(Builder’s 
View)
Functioning
System
Activities
(How)
Locations
(Where)
(Working System)
People
(Who)
Time
(When)
Motivation
(Why)
Business
master
schedule
Business
vision
and mission
Language,
divergent
data model
Database
design
Databases
1
Fig. 2–1: The Data Column.

36
DATA
•
Facts: These link terms. Both the nature and operational structure of an orga-
nization can be described in terms of the facts that relate the enterprise’s terms
to one another. To say that a customer can place an order, for example, is a
fact; and is therefore a business rule. Facts can be documented as natural lan-
guage sentences or as relationships, attributes, or generalization structures in
a graphical model. For example, a fact may be expressed in a sentence, such as
“Each product instance may be located in one or more sites.”
•
Derivations: These are business rules (including laws of nature) that deﬁne how
knowledge in one form may be transformed into other knowledge, possibly in
a different form. Calculations for product cost and proﬁtability are examples
of this category.
•
Constraints: Every enterprise constrains behavior in some way, and this is
closely related to constraints on what data may or may not be updated. These
include business constraints such as those controlling to whom you will issue
credit, and data constraints such as those on the values data elements can take
[Business Rules Group 1995, p. 6].
In the Business Rules Group paper, terms and facts are called structural asser-
tions, whereas constraints are called action assertions. Derivations are a separate
category, although the results of derivations are derived facts (structural asser-
tions). For the most part, structural assertions (terms and facts) are data-column
artifacts—which can be represented in entity-relationship (or object) models—
whereas action assertions (constraints) are motivation-column artifacts which for
the most part cannot be represented in an entity-relationship model. Derived
terms (attributes) are structural assertions that can be presented in a data model,
although the logic of their derivations cannot.
Since publication of that original paper, the Business Rules Group has teamed
with other organizations and the Object Management Group to form what they
call the “Business Rules Team”.∗Their charge is to attempt to deal in more detail
with the Data and Motivation columns not from the Architect’s View (Row Three)
but from the Business Owner’s View (Row Two). They set out speciﬁcally with
the practical objective of describing the characteristics of a language that could be
∗The Business Rules Team now includes vendors as members, whereas the Business Rules Group
did not.

ROW TWO: BUSINESS TERMS, CONCEPTS, AND FACT TYPES
37
used both to describe a business in business owners’ terms and (using formal logic)
to convey that meaning in a rigorous way to be useful to technology designers.
From this work, they have come up with some signiﬁcant insights into the role
language plays in the manipulation of both business concepts and technology
[BRT 2006].
One of the conclusions the group came to was that terms and facts are not,
strictly speaking, business rules. First, it is the business concepts behind the terms
that are important. Second, the deﬁnition of a set of facts (fact types, actually, but
more on that later) is more useful for understanding the nature of an enterprise
than the facts themselves. Neither of these, strictly speaking, are business rules.
Instead, the Business Rules Team asserts that business rules (the former action
assertions) are built on fact types, which in turn are built on the business concepts
behind terms.
Another term for this ﬁrst major category—structural assertion—is universe
of discourse. This consists of the business concepts that are the meaning behind
the terms and fact types, each of which is the deﬁnition of a category of facts.
Terms, concepts, and fact types are the domain of the Data column of
the Business Owner’s View at Row Two of the architecture framework. These
will be described more rigorously in the following section. Row Two business
rules (and the data and database management system constraints that follow
from them) fall under the Motivation column, and are more fully explored in
Chapter Seven.
ROW TWO: BUSINESS TERMS, CONCEPTS,
AND FACT TYPES
Examination of Row Two begins with a description of the concrete and tangi-
ble (albeit often narrow) world seen by each business user. This view describes
speciﬁc occurrences of things (e.g., “the A-26 lathe”), and is often intertwined
with current systems (e.g., “My job is to look at the Framis report and determine
which items need maintenance”). The ﬁrst step from here is to generalize these
observations into structures that apply more widely. The generalized structure in
the example, then, might be “Pieces of equipment” and “Determine maintenance
requirements”.

38
DATA
These structures are still unconstrained, however. The model here may include
many-to-many relationships, ternary (and higher-order) relationships, multi-
valued attributes, and other normalization issues. These constraints are added in
Row Three models.
In the Data column, Row Two is primarily concerned with the semantics of
an organization. Semantics is the branch of philosophy concerned with meaning
[Kemerling 1997–2002a], and the assignment here is to determine what the busi-
ness means when it uses certain language. Semantics has recently been explicitly
recognized as an important ﬁeld in the development of knowledge-based systems,
and indeed, even when unrecognized as such, it has always been important in
developing any system capable of working smoothly in an organization. When
you discuss the way parts of an organization communicate with one another, you
are discussing semantics.
Terms and Concepts
Figure 2–2 shows that for our purposes a business term is deﬁned to be the use
of a single word or phrase to represent a single business concept.∗A business
concept is simply something we understand to exist or to be the case. In this con-
text, a business concept is an aspect of an enterprise’s operations or environment.
It may be about something tangible or it may be an abstract idea generalized from
particular instances. It is the set of business concepts that give meaning to our
language.
This may be something we data modelers characterize as an entity class (such
as “Product”), an attribute of such a class (such as “color”), or an instance of a
class (such as “IBM ThinkPad Model T24”). More signiﬁcantly, however, it may
also be something of importance to the business that is not necessarily included
in our data model (such as “ICD 10”, the medical world’s catalogue of diseases, or
completion—an oil industry term for the part of a well with holes in it, through
which oil passes from the ground to the well).
A phrase may be composed of one or more words. a word may be a part in
one or more phrases. A word usage, then, is the use of one word in one phrase.
Whereas in conventional language term is nearly equivalent to word or phrase, the
∗As described previously, major parts of this section are inspired by the work of the Business Rules
Team [BRT 2005]. The results shown here, however, are my own.

ROW TWO: BUSINESS TERMS, CONCEPTS, AND FACT TYPES
39
BUSINESS TERM
BUSINESS
CONCEPT
# ID
* Name
* Primary definition
PHRASE
° Phrase text
WORD
* Word text
° Pronunciation guide
WORD USAGE
used
in
the use of
composed
of
used
in
in
a part
in
of
the use of
to represent
the meaning
of
Fig. 2–2: Business terms.
constrained deﬁnition of business term used here allows us to deal with the fact
that the same business concept may be described by many different words or
phrases (synonyms) and the same word or phrase may represent many business
concepts (homonyms).
For example, client, customer, and account are often synonyms. Alternatively,
facility in an oil company is a large complex of equipment assembled to perform a
function, whereas facility in a bank is an internal agreement to extend a speciﬁed
amount of credit to a particular customer.∗These are homonyms. Thus, it is very
useful to constrain a business term to be the assignment of a single word or
phrase to just one meaning.
The business terms we are concerned with here may be the use of any words
commonly used to describe the organization and its workings (such as product).
∗And of course in the United States, the “facilities” in a restaurant mean something else altogether.

40
DATA
They may, however, also be the industry-speciﬁc (or company-speciﬁc) words that
describe technical aspects of processes or other aspects of the enterprise (such as
a bank’s use of the word “instrument”, which describes a completely different
concept from an orchestra’s use of the word “instrument”).
Note that there is an anomaly in this model: in the model, we cannot discuss
instances of business concept without using words to do so. Hence, “Name”
shows up as a perfectly reasonable attribute. In fact, however, no language can
be used to refer to a business concept that is not in terms of the words and
phrases that are used in the business terms that are to represent the business
concept. Indeed, it is important to state that a business concept has an existence
independent of our ability to describe it.
Business Rule∗
At the very least, each business concept must be represented by the
business term, which is the use of a word or phrase that is equivalent to
the value of the business concept’s “Name” attribute.
Neither business concepts nor the words used to describe them exist in
isolation. People must use them. In Figure 2–3, each business concept must be
the shared understanding of a semantic community. That is, concepts are only
recognized if a group of people does so. A semantic community is the set of
people who agree on the meaning of a set of business concepts, such as oil well
wranglers or data modelers.∗∗
In Figure 2–4, a speech community is deﬁned as any group of people who are
part of a semantic community and who are speakers of a particular language.
At a general level, this could be “The population of the United Kingdom” or
simply “English speakers”, but it could also be as speciﬁc as a particular dialect.
∗As should become evident in this book, business rules are very different things from what is
normally displayed in a data model. This requires us to document them separately. The Metadata
Model portrayed in this book has just as many business rules behind it as would be expected in any
corporate model of comparable size. So, here, we add them to the text in this form.
∗∗Well, some data modelers.

ROW TWO: BUSINESS TERMS, CONCEPTS, AND FACT TYPES
41
BUSINESS TERM
BUSINESS
CONCEPT
# ID
* Name
* Primary definition
PHRASE
° Phrase text
WORD
* Word text
° Pronunciation guide
WORD USAGE
used
in
the use of
composed
of
used
in
in
a part
in
of
the use of
to represent
represented
by
sharing in the
understanding of
the shared
understanding
of
SEMANTIC
COMMUNITY 
# Name
° Description
Fig. 2–3: Semantic communities.
Hence, a speech community may be composed of one or more other speech
communities.
By deﬁnition, all members of a speech community are speakers of the same
language and part of the same semantic community. In Figure 2–4, each busi-
ness term is shown to be in the language of exactly one speech community.
Even if a word or phrase (such as “fortran”) exists in multiple languages (and
therefore in multiple speech communities), its use in each of these constitutes a
separate business term.
Similarly, each business term is also shown in Figure 2–5 to be in exactly
one symbol context, where a symbol context provides a scope for the business
term. For example, in a rental car company the word “site” means different things
in the context of a rental than it does in the context of a repair.
To summarize, a business term is the use of a single word or phrase in the
language of a particular speech community to represent a single business concept
in a particular symbol context.
As shown in Figure 2–6 (see page 44), in addition to a business term’s repre-
senting a business concept, an icon (which is the use of a graphic) can do this

BUSINESS TERM
BUSINESS
CONCEPT
# ID
* Name
* Primary definition
PHRASE
° Phrase text
SPEECH
COMMUNITY
# Name
* Description
WORD
* Word text
° Pronunciation guide
WORD USAGE
used
in
the use of
composed
of
used
in
the owner
of
in
a part
in
of
the use of
in the
language
of
part
of
composed
of
speakers of
spoken by
to represent
represented by
sharing in the
understanding of
the shared
understanding
of
SEMANTIC
COMMUNITY 
# Name
° Description
LANGUAGE
# ID
* Name
° Linguistic family
part of
composed of
Fig. 2–4: Speech communities.
42

BUSINESS TERM
BUSINESS
CONCEPT
# ID
* Name
* Primary definition
PHRASE
° Phrase text
SPEECH
COMMUNITY
# Name
* Description
SYMBOL
CONTEXT
# Name
* Description
WORD
* Word text
° Pronunciation guide
WORD USAGE
used
in
the use of
composed
of
used
in
the owner
of
in
a part
in
of
the use of
in the
language
of
the basis
for
in
part
of
composed
of
speakers
of
spoken
by
to represent
represented
by
sharing in the
understanding of
the shared
understanding
of
SEMANTIC
COMMUNITY
# Name
° Description
LANGUAGE
# ID
* Name
° Linguistic family
part of
composed
of
Fig. 2–5: Symbol contexts.
43

SYMBOL
CONTEXT
# Name
* Description
SPEECH
COMMUNITY
# Name
* Description
WORD USAGE
LANGUAGE
# ID
* Name
° Linguistic family
SEMANTIC COMMUNITY
# Name
° Description
BUSINESS CONCEPT
# ID
* Name
* Primary definition
SYMBOL
# Sequence number
* Effective date 
° Until date
° Comment
ICON
BUSINESS TERM
to represent
represented
by
in the language of
the use of
in
in
of
the
basis
for
used
as
the
owner
of
speakers
of
the shared
understanding of
sharing in the
understanding of
spoken by
part of
composed
of
SIGNIFIER
# ID
WORD
* Word text
° Pronunciation guide
PHRASE
° Phrase text
GRAPHIC
° Graphic blob
composed
of
a part
in
composed
of
part
of
Fig. 2–6: Symbols and signiﬁers.

ROW TWO: BUSINESS TERMS, CONCEPTS, AND FACT TYPES
45
as well. Business term and icon are shown in the ﬁgure as sub-types of symbol.
This means that the representation of a business concept may be represented by
an icon as well as by a term.
Indeed, the entity class signiﬁer has been added to encompass graphic, word,
and phrase. In other words, a symbol is deﬁned as the use of a signiﬁer to
represent a business concept in a symbol context and in the language of a speech
community. For example, the graphic >−can be used for the icon “Crow’s-foot”,
which (in the symbol context of “Information Engineering Entity-relationship
Models”) is to represent the business concept with the primary deﬁnition “upper
limit is more than 1”.
Business Rules
1. Each icon must be the use (only) of one and only one graphic (not a
word or phrase).
2. Each business term must be the use (only) of one and only one word
or phrase (not a graphic).
Ontologies
A set of symbols constitutes a vocabulary for an organization or semantic com-
munity. Another word for vocabulary is ontology. This term is derived from the
branch of philosophy concerned with identifying, in the most general terms, the
kinds of things that actually exist [Kemerling 1997–2002b]. That is, an ontology
is a representation of a body of knowledge. The assignment of a systems analyst
is to compile an ontology that represents the semantics of the organization. What
are the things that exist in that organization?
According to McComb [2004], ontology “is closely related to semantics, the
primary distinction being that ontology concerns itself with the organization of
knowledge once you know what it means. Semantics concerns itself directly with
what something means.” In Figure 2–7, each symbol may be subject to one or
more ontological classiﬁcations, each of which must be into an ontology.
Each ontology, in turn, must be deﬁned by one semantic community.

SYMBOL
# Sequence number
* Effective date
° Until date
° Comment
SYMBOL
CONTEXT
# Name
* Description
SIGNIFIER
# ID
the
basis
for
in
used in
the use of
composed of
part of
SPEECH
COMMUNITY
the owner
of
in the
language
of
subject
to
of
into
the object of
part of
ONTOLOGICAL
CLASSIFICATION
# Sequence number
* Effective date
° Until date
WORD
* Word text
° Pronunciation guide
GRAPHIC
° Graphic blob
PHRASE
° Phrase text
defined
by
composed of
ONTOLOGY
# Name
* Description
° Purpose
BUSINESS CONCEPT
# ID
* Name
* Primary definition
speakers of
spoken by
to represent
represented
by
embodied in
sharing in the
understanding
of
definer
of
a sub-
type of
a super-type
of (2+)
an example
of
BUSINESS
CONCEPT TYPE
# Code
* Description 
LANGUAGE
° Linguistic family
SEMANTIC
COMMUNITY
the shared
understanding
of
TAXONOMY
OTHER
ONTOLOGY
ICON
BUSINESS TERM
Fig. 2–7: Ontologies.

ROW TWO: BUSINESS TERMS, CONCEPTS, AND FACT TYPES
47
Business Rule
Any ontology that is an ontological classiﬁcation of a symbol must
be deﬁned by the same semantic community that is sharing in the under-
standing of a business concept represented by the symbol. In other words,
the semantic community that deﬁnes an ontology must be the same
semantic community that is the source of all the symbols in the ontology.
The ﬁrst assignment of any systems analyst is to reconcile the language of the
different semantic communities within an organization. This is challenging, but
it is aided by the fact that most industries have a basic vocabulary common to most
companies in that industry. One thing the semantic approach in the information
processing industry is beginning to do is to codify these industry vocabularies.
Ontologies are beginning to appear on the World Wide Web in a form that allows
them to be incorporated into company ontologies.∗
Indeed, there is movement afoot to make ontologies a fundamental part of
the Web. From the beginning, Tim Berners-Lee (the web’s inventor) envisioned
that eventually it would go beyond its original objective of being a collabora-
tive medium to the objective of being a semantic web—understandable, and thus
processable, by machines. That is, a semantic web is “a machine-processable
web of smart data, [where] smart data is data that is application-independent,
composeable, classiﬁed, and part of a larger information ecosystem (ontology)”
[Daconta et al. 2003, p. 4]. The semantic Web is expected to do this by including
ontologies to support techniques for searching not only the tags of documents
but the text of documents themselves. A search for a topic would ﬁnd not only
documents explicitly identiﬁed as being on that topic but also those whose text
referred to it.
A particular type of ontology is called taxonomy. This is a hierarchical organi-
zation of concepts. The most commonly known of these is biological classiﬁcation
of the structure of life itself. This is described in terms of phylum, family, genus,
species, and so on. Unfortunately, many areas of interest in an enterprise do
∗For example, for a geographic ontology see http://www.getty.edu/research/conducting_research/
vocabularies/tgn/index.html.

48
DATA
not lend themselves easily to a hierarchical representation, convenient though it
may be.
Propositions
A proposition is an assertion that may be true or false. Propositions link con-
cepts together. It is propositions that describe what a business does and how it
does it.
Each proposition links business concepts together. That is, each proposition
must be composed of two or more proposition elements, each of which must be
about a business concept. This is shown in Figure 2-8.
Also note that in Figure 2-8, each proposition must be an example of exactly
one proposition type, which is itself a kind of business concept. And just as
each proposition must be composed of two or more proposition elements, so
too must each proposition type be composed of two or more proposition type
elements. Since proposition type is an example of a business concept, it seems
appropriate to identify a business concept element, that is a component in (part
of) a business concept. This is the super-type of proposition type element.
The truth of all propositions of a particular proposition type may be
–
Deontic – This is an assertion of obligation (something is required to be
so), or permission (Something is permitted to be so). This is the realm of
Business Rules.
–
Alethic – This is an assertion of necessity (Something must be true), or
possibility (Something is possible). This is the realm of physics.
–
Epistemological – This is an assertion that something is known to be the case.
Epistomological propositions are presented in a typical data model.
This is represented by the proposition type attribute “Modal type”.
An attribute of proposition element is “Predicate” where a predicate is
“something that is afﬁrmed or denied of the subject in a proposition in logic”
[Merriam-Webster 2005]. The proposition “The sun will rise tomorrow,” consists
of two proposition elements. One connects to the business concept “tomorrow”
with the predicate “will rise”. The other connects to the business concept “The
sun” with the predicate <subject>, signifying that “The sun” is the subject of the
proposition.

ROW TWO: BUSINESS TERMS, CONCEPTS, AND FACT TYPES
49
embodied
embodied
inin
BUSINESS CONCEPT ELEMENT
PROPOSITION TYPE
ELEMENT
* Predicate 
* Effective date
° Until date
OTHER
BUSINESS
CONCEPT
ELEMENT
BUSINESS CONCEPT
# ID
* Name
* Primary definition
PROPOSITION
TYPE
° Modal type
OTHER
BUSINESS
CONCEPT
STATEMENT
LANGUAGE
# Name
° Linguistic family
BUSINESS
CONCEPT TYPE
# Code
* Description
SYMBOL
CONTEXT
# Name
* Description
SPEECH
COMMUNITY
SEMANTIC
COMMUNITY
WORD USAGE
# Sequence number
GRAPHIC
° Graphic blob
PHRASE
° Phrase text
WORD
* Word text
° Pronunciation guide
SIGNIFIER
# ID
PROPOSITION
# Name
PROPOSITION ELEMENT
SYMBOL
# Sequence number
* Effective date
° Until date
° Comment
ICON
BUSINESS TERM
of
via
used
for
described
by
composed
of (2+)
part of
an
example
of
embodied
in
about
the
object
of
an
example
of
embodied
in
represented
by
about
part of
composed
of
to
represent
to represent
represented
by
in the
language
of
composed
of
part of
speakers
of
spoken
by
in
in
in
of
used
as
a part
in
composed
of
basis
for
basis
for
the
owner
of
in
the
basis
for
the
use
of
a super-
type of (2+)
a sub-
type of
the shared
understanding of
sharing in the
understanding of
embodied 
in
an
example 
of
Fig. 2–8: Propositions.
Fact Types
A fact is a proposition that must always be true. Thus, the metamodel in
Figure 2-9 shows that fact is a kind of proposition. A fact might be that

50
DATA
embodied
embodied
inin
an
an
example
example
of
of
BUSINESS CONCEPT ELEMENT
FACT
* Effective date
° Until date
OTHER
PROPOSITION
BUSINESS CONCEPT
# ID
* Name
* Primary definition
PROPOSITION TYPE
° Modal type
FACT TYPE
* Effective date
° Until date
PROPOSITION TYPE ELEMENT
* Predicate
* Effective date
° Until date
FACT TYPE
ELEMENT
OTHER
PROPOSITION
TYPE ELEMENT
OTHER
PROPOSITION
TYPE
STATEMENT
LANGUAGE
# Name
° Linguistic family
BUSINESS
CONCEPT TYPE
# Code
* Description
SYMBOL
CONTEXT
# Name
* Description
SPEECH
COMMUNITY
SEMANTIC
COMMUNITY
WORD USAGE
# Sequence number
GRAPHIC
° Graphic blob
PHRASE
° Phrase text
WORD
* Word text
° Pronunciation guide
SIGNIFIER
# ID
PROPOSITION
# Name
PROPOSITION ELEMENT
SYMBOL
# Sequence number
* Effective date
° Until date
° Comment
of
via
used
for
described
by
composed
of (2+)
part of
an example
of
embodied
in
about
the
object
of
composed
of
part of
about
the
object
of
to
represent
to represent
represented by
in the
language
of
composed
of
part of
speakers
of
spoken
by
in
in
in
of
used
as
a part
in
composed
of
basis
for
basis
for
the
owner
of
in
the
basis
for
the
use
of
represented
by
a super-
type of (2+)
a sub-
type of
the shared
understanding of
sharing in the
understanding of
embodied
in
an
example of
an
example
of
embodied
in
ICON
BUSINESS TERM
Fig. 2–9: Facts.

ROW TWO: BUSINESS TERMS, CONCEPTS, AND FACT TYPES
51
“Charlie was assigned to Project Z on January 14, 2005”. This links together the
business concept “Charlie” with business concepts “Project Z” and “January
14, 2005”, using the predicates “was assigned to” and “was assigned on,”
respectively.
Each fact must be composed of two or more proposition elements, each about
one business concept.
A fact type is the deﬁnition of a set of similar kinds of facts. Each fact type
must be composed of two or more fact type elements, each descriptive of a
business concept. An attribute of fact type is “Predicate”.
Facts and fact elements might include:
–
Order 359823-A was placed by MacDonalds..

Predicate: <subject>; Business concept: “Order 359823-A”

Predicate: “was placed by”; Business concept: “MacDonalds”
–
Order 359823-A was placed on June 23, 2005.

Predicate: <subject>; Business concept: “Order 35923-A”

Predicate: “was placed on”; Business concept: “June 23, 2005””
–
Product Type 33 is identiﬁed by part number “33”..

Predicate: <subject>; Business concept: “Product Type 33”

Predicate: “is identiﬁed by”; Business concept: “part number 33””
Instances of fact types might include such statements as:
–
An “order” is placed by a “customer”..

Predicate: <subject>; Business concept: “order”.

Predicate: placed by; Business concept: “customer”..
–
“Order Date” is an attribute of order.

Predicate: <attribute>; Business concept: “order date”.

Predicate: an attribute of: Business concept: order.

52
DATA
–
“Part number” is an identiﬁer of product type.

Predicate: <subject>; Business concept: “Part number”.

Predicate: an identiﬁer of; Business concept: product type.
–
And so forth.
Characteristics
One kind of fact type, as shown in Figure 2–10, is characteristic. A charac-
teristic is something you can measure about one or more business concepts.
The fact that a particular characteristic is about a particular business concept
is shown on the model as a characteristic assignment, a kind of fact type
element.
The speciﬁcation of an instance of a business concept is in its use of a speciﬁed
set of characteristics. “Amount of disk space”, “Amount of memory”, “Length”,
and “Width” are characteristics that could be applied to computers and other
things. For example, a characteristic assignment might link the characteristic
“Amount of random-access memory” to the other business concept “Laptop
computer”.
An example of characteristic and characteristic assignment was shown in
the abstract model in Chapter One. There it was used to describe a thing type,
and to collect values for things.
Note the attributes of characteristic assignment “Essential indicator” and
“Delimiting indicator”. If Essential indicator is “True”, this characteristic is
required for instances of the business concept that it is linked to via character-
istic assignment. If Delimiting indicator is “True”, values of this characteristic
will distinguish one instance of the business concept from another.
Business Rule
The “Delimiting indicator” may not be set to “True” unless “Essential
indicator” has been set to “True”.

BUSINESS CONCEPT ELEMENT
BUSINESS CONCEPT
# ID
* Name
* Primary definition
PROPOSITION TYPE
° Modal type
PROPOSITION TYPE ELEMENT
* Predicate
* Effective date
° Until date
BUSINESS
CONCEPT TYPE
# Code
* Description
SEMANTIC
COMMUNITY
composed
of
part of
about
the
object
of
the
object
of
to
represent
to represent
represented by
represented
by
a super-
type of (2+)
a sub-
type of
the shared
understanding of
sharing
in the
understanding
of
embodied in
an
example of
SYMBOL
# Sequence number
* Effective date
° Until date
° Comment
in
the use of
the owner
of
in the
language 
of
SYMBOL
CONTEXT
# Name
* Description
SIGNIFIER
# ID
the
basis
for
used as
composed
of
composed
of
part of
WORD USAGE
# Sequence number
LANGUAGE
# Name
° Linguistic family
SPEECH
COMMUNITY
WORD
* Word text
° Pronunciation guide
GRAPHIC
° Graphic blob
PHRASE
° Phrase text
in
a part
in
of
spoken
by
speakers
of
BUSINESS TERM
ICON
FACT TYPE ELEMENT
OTHER FACT 
TYPE
ELEMENT
CHARACTERISTIC
ASSIGNMENT
* Essential indicator
* Delimiting indicator
FACT TYPE
* Effective date
° Until date
CHARACTERISTIC
* Description
OTHER FACT  
TYPE
of
to
used in
OTHER BUSINESS CONCEPT
OTHER BUSINESS CONCEPT ELEMENT
Fig. 2–10: Characteristics.

54
DATA
This reveals the problem of trying to include general concepts and speciﬁc
concepts in the same model. It is true that characteristic is a kind of busi-
ness concept, and characteristic assignment is a kind of business concept
element. It is also true that the relationship between characteristic assignment
and characteristic (“of”) is in effect a sub-type of the relationship between
business concept element and business concept (“part of”).
Similarly, the relationship role “each characteristic assignment must be to
one and only one business concept” is a sub-type of “each proposition type
element must be descriptive of one and only one business concept”. The problem
is that the names of the relationships really should be different, but it is impossible
to show both without appearing redundant. Both are shown here for the sake of
clarity, and this is not the only place where this has come up.∗As an alternative,
the following business rule can be recorded if the redundant relationships are
not shown.
Business Rule
Each business concept element that is a characteristic assignment
must be part of one and only one business concept that is a characteristic.
Resources
Where does the information represented by these symbols (business terms and
icons) come from? Typically it is initially recorded on some sort of document:
a speciﬁcation, videotape, e-mail, and so on. Figure 2–11 shows resource to be
the source of one or more symbols. A resource is any collection of a set of
symbols.
Because each symbol may also be created from one or more resources, the
“intersect” entity class resource element is deﬁned to be the fact that a particular
symbol was referred to in one resource. That is, each resource element must
be part of exactly one resource, and a reference to exactly one symbol. Note that
∗Anyone wanting to use a CASE tool to create a default database design from this model should
beware.

ROW TWO: BUSINESS TERMS, CONCEPTS, AND FACT TYPES
55
SYMBOL
# Sequence number
* Effective date
° Until date
° Comment
BUSINESS TERM
in
the use of
to  represent
to
represent
a sub-
type of
an example
of
part of
the
source
of
embodied in
presented
as
a super-
type of
(2+)
the owner
of
in the
language 
of
ICON
SYMBOL
CONTEXT
# Name
* Description
SIGNIFIER
# ID
the
basis
for
used as
composed of
composed of
part of
part of
composed of
WORD USAGE
# Sequence number
LANGUAGE
# Name
° Linguistic family
SPEECH
COMMUNITY
WORD
* Word text
° Pronunciation guide
GRAPHIC
° Graphic blob
PHRASE
° Phrase text
in
a part in
of
spoken by
speakers of
BUSINESS CONCEPT ELEMENT
BUSINESS CONCEPT
# ID
* Name
* Primary definition
PROPOSITION TYPE ELEMENT
* Predicate
* Effective date
° Until date
of
represented by
represented
by
FACT TYPE
* Effective date
° Until date
PROPOSITION TYPE
* Modal type
OTHER BUSINESS 
CONCEPT
OTHER BUSINESS CONCEPT ELEMENT
CHARACTERISTIC
* Description
CHARACTERISTIC
ASSIGNMENT
* Essential indicator
* Delimiting indicator
FACT TYPE ELEMENT
the shared
understanding of
an
example
of
to
part of
the
object
of
composed
of
the
object
of
used in
sharing in the
understanding of
a sub-
type of
a super-type
of (2+)
SEMANTIC
COMMUNITY
embodied in
BUSINESS
CONCEPT TYPE
# Code
* Description
about
RESOURCE
TYPE
RESOURCE
# ID
° URI
* Title
° Subject
° Abstract
° Description
° Date created
RESOURCE
TOPIC
# Sequence number
° Description
* Authority indicator
DOCUMENT
OTHER
RESOURCE
a
reference
to
Fig. 2–11: Resources.
an attribute of resource element is “authority indicator”, denoting whether this
particular resource is the authoritative source of the deﬁnition for this symbol
(business term or icon).
Attributes of resource include:
•
Uniform resource identiﬁer (URI): A way of identifying the resource.
•
Title: Text that names the resource.

56
DATA
•
Subject: Text that brieﬂy describes the primary purpose of the resource.
•
Abstract: A description, no more than a couple of paragraphs in length, of the
content of the resource.
•
Description: An alternative to an abstract that is a longer description of the
resource.
•
Date created.
Each resource must be an example of exactly one resourcetype, but the list of
possible resource types is far more extensive than simply the document shown
as a sub-type of resource (although again that is one example of resource type).
The identiﬁcation and deﬁnition of business concepts could also be caused by
an event of some sort, or even the carrying out of a service. Dublin Core is an
organization attempting to standardize the metadata describing documents. It has
identiﬁed the following resource types.
–
Document

Collection

Data Set

Image

Interactive Resource

Moving Image

Physical Object

Software

Sound

Still Image

Text (a document) [DCMI 2004]
–
Other Resource Types

Event

Service
Each resource type may be a super-type of (2+) other resource types. Note
that each resource may be the source of one or more symbols, each of which could
in principle be in a different language. In most cases, though, it is more likely

ROW TWO: BUSINESS TERMS, CONCEPTS, AND FACT TYPES
57
that all symbols presented as a resource are in one language. This, however, is
not shown in the model.
In Figure 2–12, resource structure is the fact that one resource is related to
another in a speciﬁed way. That is, the resource structure is an example of one
resource structure type. Currently, candidate resource structure types (again,
from the Dublin Core) are:

A reference to

The source of

Bibliographic citation

Conforms to

Structure

Has format of

Replacement for

Required by

Updated version of

Derived from [DCMI 2005]
Others are certainly possible.
Authorship
Figure 2–13 introduces the entity class party, which is more fully described in
Chapter Five. It is highlighted because it “belongs” to a different column than the
one we are discussing here.∗
The entity class party refers to a person or organization that is of interest in
some way to the enterprise. In the more expanded view presented in Chapter Five,
a party can, for example, be a person who is an employee or an organization
that is a vendor. That is, the principal sub-types of party are person (any human
being of interest) and organization (any enterprise, government agency, or other
organized group of people of interest).
Party is signiﬁcant here because a party may be involved in the creation of
one or more resources. Because a resource may also be worked on by one or
∗Throughout the book you will see examples like this of entity classes borrowed from other chapters.
In each case, there will be a brief deﬁnition where it is ﬁrst introduced, but you should go to its
home chapter to get a fuller description.

an example of
the use
in
the use
of
part of
composed of
embodied in
RESOURCE
STRUCTURE
# Effective date
° Until date
RESOURCE
STRUCTURE TYPE
# Name
° Description
RESOURCE
# ID
° URI
* Title
° Subject
° Abstract
° Description
° Date created
RESOURCE 
TOPIC
# Sequence number
° Description
* Authority indicator
RESOURCE TYPE
# Name
* Description
DOCUMENT
OTHER
RESOURCE
embodied in
an example of
part of
the
source
of
a super-
type of 
(2+)
a sub-
type of
Fig. 2–12: Resource structures.
58

an example of
the use in
the use of
part of
composed of
embodied in
RESOURCE
STRUCTURE
# Effective date
° Until date
RESOURCE
STRUCTURE TYPE
# Name
° Description
PARTY
# ID
RESOURCE
# ID
° URI
* Title
° Subject
° Abstract
° Description
° Date created
RESOURCE TYPE
# Name
* Description
DOCUMENT
OTHER
RESOURCE
PERSON
* Given name
° Middle initial
* Surname
ORGANIZATION
* Organization name
* Description
embodied in
an example of
a super-
type of (2+)
a sub-
type of
by
for
created via
creator in
AUTHORSHIP ROLE
Fig. 2–13: Authorship roles.
59

60
DATA
more parties, authorship role is deﬁned as the fact that a particular party was
involved in creating a particular resource. According to the Dublin-Core/ISO
standard, the following are kinds of authorship role, among others.
–
Author
–
Contributor
–
Publisher
–
Rights Holder [ISO 2003]
Document Distribution
A resource is inherently abstract. It is the expression that can be copyrighted,
independently of its physical manifestation. In particular, its existence is a collec-
tion of descriptions of symbols. Its physical embodiment is shown in Figure 2–14
as copy. That is, each resource must be embodied in at least one (and potentially
more) copy. A copy may be a physical copy (such as a book or journal) or a
virtual copy, such as an e-mail or web site.
Site is another example of an entity class that is more fully deﬁned in another
chapter—in this case Chapter Four. A site is a location designated for a particular
purpose, such as a house, an ofﬁce, or a warehouse.
Each copy is sent to one or more parties and/or one or more sites. Speciﬁcally,
a resource distribution is the fact that a particular copy was sent, at a particular
time, to either a speciﬁc party or to a site (when the party involved was not
identiﬁed).
Coverage
Figure 2–15 shows geographic location, another entity class borrowed from
Chapter Four. A geographic location is a place on the Earth’s surface with
clearly identiﬁed boundaries, such as a state or province, a sales region, or a
surveyed plot of land. The ﬁgure also shows that each resource may be used to
describe an aspect of one or more coverages, where a coverage is the fact that a
resource is about a particular geographic location. That is, a coverage must be
by a resource and of one geographic location.
A geographic location is either a geographic area (shown) or a geographic
point (described in Chapter Four). A geographic area, in turn, is either a
geopolitical area (such as a city, state, country, and so on), a management

an example of
the
use
in
the
use
of
part of
composed
of
embodied in
RESOURCE
STRUCTURE
# Effective date
° Until date
RESOURCE
STRUCTURE TYPE
# Name
° Description
SITE
# Name
* Description
COPY
# Sequence number
° Comment
* Format
RESOURCE
# ID
° URI
* Title
° Subject
° Abstract
° Description
° Date created
RESOURCE TYPE
# Name
* Description
DOCUMENT
PHYSICAL
COPY
VIRTUAL
COPY
OTHER
RESOURCE
VIRTUAL SITE
...
PHYSICAL SITE
° Street address 1
° Street address 2
° (City)
° (State)
° (Postal area)
° (Country)
embodied in
an example of
a super-
type of 
(2+)
a sub-
type of
to
embodied in
the embodiment
of
PARTY
# ID
RESOURCE
DISTRIBUTION
# Sequence number
* Distribution date
PERSON
* Given name
° Middle initial
* Surname
ORGANIZATION
* Organization name
* Description
to
recipient of
recipient of
distributed
via
of
Fig. 2–14: Resource distribution.

62
DATA
an
example
of
the
use
in
the
use
of
part of
composed
of
embodied
in
RESOURCE
STRUCTURE
# Effective date
° Until date
RESOURCE
STRUCTURE TYPE
# Name
° Description
GEOGRAPHIC LOCATION
# Name
* Description
RESOURCE
# ID
° URI
* Title
° Subject
° Abstract
° Description
° Date created
RESOURCE TYPE
# Name
* Description
DOCUMENT
GEOGRAPHIC AREA
SURVEYED AREA
MANAGEMENT
AREA
NATURAL AREA
GEOPOLITICAL
AREA
OTHER
RESOURCE
embodied
in
an example
of
a super-
type of 
(2+)
a sub-
type of
used for
by
COVERAGE
° Comment
described by
of
Fig. 2–15: Coverage.
area (whose boundaries are deﬁned by the enterprise, such as “Southwestern
Sales Region”), a natural area (such as a habitat or a lake), or a surveyed
area (whose boundaries are speciﬁcally measured in terms of townships, sec-
tions, and so on). Of these, only geopolitical area and management area are
usually of interest in the metadata arena, but any of them could be described by
a resource.

ROW TWO: BUSINESS TERMS, CONCEPTS, AND FACT TYPES
63
The Dublin Core
The Dublin Core, referred to previously, has obtained ISO certiﬁcation for a basic
standard set of attributes required to describe a resource for data. As you can see,
the complete model is a bit more complex than a simple set of attributes describing
a document, but all of the Dublin/ISO attributes are in fact covered by this model,
as shown in Table 2–1 [ISO 2003; DCMI 2005]. Additional attributes speciﬁed by
the Dublin Core as “Other Elements and Element Reﬁnements” are also covered
by this model, most of them in the form of resource structure types.
Table 2–1: Dublin Core equivalents.
Dublin Core Term
Metadata Element
Contributor
Created via authorship role/ that are an example of
authorship role type Contributor
Coverage
To describe an aspect of coverages/ of a geographic location
Creator
Created via authorship roles/ an example of authorship
role type Creator
Date
resource: Date Created
Description
resource: Description
Format
Embodied in copy: Format
Identiﬁer
resource: ID; resource: URI
Language
The source of resource elements/ a reference to asymbol/ in
the language of a speech community/ speaker of a language∗
Publisher
Created via authorship roles/ an example of authorship
role type Publisher
Relation
Part of aresource structure/ the use of another resource
Rights
Created via authorship roles/ an example of authorship
role type Rights holder
Source
Part of resource structure/ an example of resource
structure type Source
Subject
resource: Subject
Title
resource: Title
Type
resource type: Name
∗Read “/” as that is (are). . .
Note: Each line in the table should be read as if this phrase precedes it: “Each resource may be . . .”.

64
DATA
SYMBOL
# Sequence number
* Effective date
° Until date
° Comment
in
the
use
of
to  represent
the
owner
of
in the
language 
of
SYMBOL
CONTEXT
# Name
* Description
SIGNIFIER
# ID
the
basis
for
used as
composed of
composed of
composed of
composed of
part of
part of
WORD USAGE
# Sequence number
LANGUAGE
# Name
° Linguistic family
SPEECH
COMMUNITY
WORD
* Word text
° Pronunciation guide
GRAPHIC
° Graphic blob
PHRASE
° Phrase text
in
a part in
of
spoken by
speakers of
represented by
represented
by
to
represent
the shared
understanding 
of
an
example
of
part of
sharing in the
understanding of
a sub-
type of
a super-
type
of (2+)
SEMANTIC
COMMUNITY
embodied
in
BUSINESS CONCEPT 
TYPE
# Code
* Description
PARTY
# ID
PERSON
* Given name
° Middle initial
* Surname
ORGANIZATION
* Organization name
* Description
for
for
for
identified by
player of
played by
defined by
ICON
BUSINESS TERM
MANAGEMENT
ROLE
BUSINESS CONCEPT ELEMENT
BUSINESS CONCEPT
# ID
* Name
* Primary definition
identified by
Fig. 2–16: Data stewardship.

ROW THREE: THE ENTITY-RELATIONSHIP DIAGRAM
65
Data Stewardship
Chapter Five takes up in detail the issue of the roles people, organizations,
jobs,
and so on play in managing metadata.
Here,
however,
the speciﬁc
responsibility for deﬁning the representation (symbols) of business concepts
is shown in Figure 2–16. In the diagram, management role is the fact that a
party has a speciﬁc role to play in managing either a business concept or a
symbol. That is, if the metadata are to be maintained reliably someone must
be assigned responsibility for doing so. Note that both party and manage-
ment role are more fully described in Chapter Five, which is about people and
organizations.
ROW THREE: THE ENTITY-RELATIONSHIP DIAGRAM
In general, the models for the rows of the architecture framework are different,
linked only by entity classes that connect one row’s concepts to those of another
row. These entity classes show how the elements in one row are derived from
those in another row. For example, each table entity class mapping (described in
the following section on Row Four) portrays the fact that one entity class is part
of the basis for deﬁning one table.
An exception to this is in the Data column between the Business Owner’s
View and the Architect’s View. Because the notion of business concept is so
all-encompassing, and because an entity-relationship diagram is in its own way
trying to represent the nature of the business, it is more appropriate to desig-
nate the major components of an entity-relationship diagram as instances of
business concept and fact type. To be sure, the mapping approach could also
be taken, but that would require mapping from business concept and/or fact
type to virtually every element of the Row Three model. In the author’s judg-
ment, the sub-type approach will more effectively reveal exactly what each of
these elements really is.
In reading this chapter on the entity-relationship model, note that some ele-
ments of such a model really are constraints. These include unique identiﬁers,
cardinality and optionality, domains, and derived attributes. For this reason, they
are discussed not here but in Chapter Seven, under the section on Row Three
constraints.

66
DATA
Sample Entity-Relationship Model
Figure 2–17 shows a sample business model that embodies the concepts we have
just seen. entity classes include:
–
party
–
person
–
organization
–
order
–
sales order
–
purchase order
–
line item
–
service type
–
product type
As we have already seen, by the conventions of this notation attributes for
each entity class are shown inside their respective entity class boxes. Party is
described by the attribute “ID”; person is described by “Given name”, “Middle
initial”, and “Surname”; and so forth. Each attribute is marked with a symbol
representing its “Default optionality indicator”. A circle means that the attribute is
optional, and an asterisk means that it is mandatory. An octothorpe (#) means that
it participates in the entity class’s unique identiﬁer, and is therefore mandatory.
(To learn about unique identiﬁers, see Chapter Seven.)
Relationships composed of two associative roles link the main entity classes:
order and party, order and line item, line item and product type, and line item
and service type. Note the arc between the two for roles from line item. Each
line item must be for either one product type or one service type, but not both.
Fig. 2–17: Sample entity-relationship model.

ROW THREE: THE ENTITY-RELATIONSHIP DIAGRAM
67
This is an example of an exclusion constraint. In UML and Object Role Modeling
notations, a broad range of interrelationship constraints are available, but in the
notation used here only the “exclusive or” constraint is possible. The metamodel
for this constraint is discussed in Chapter Seven.
Entity Classes and Attributes
In the world of requirements analysis data modeling, we create data models in
order to capture the business concepts that refer to classes of things (including
abstract things) about which an organization wishes to capture and hold informa-
tion. Data models also describe the elements of that information, and relationships
between them. These are examples of the business concept called entity class
(the deﬁnition of a thing), attribute (a descriptor of a thing), and relation-
ship role (which links things together). The metamodel for this was introduced
in Chapter One, consisting of entity class, attribute, and relationship role.
Figure 2–18 shows how that model ﬁts into the scheme of business terms,
business concepts, and business concept elements.
Business terms include the names of attributes, entity classes, and other
business concepts as well as instance names. The names of instances of entity
class and attribute are clearly examples of words and phrases used as business
terms to represent them. Each of these must be to represent an occurrence of
an entity class or an attribute. For example, “Colorado” is a word used as an
instance name for the entity class that is state. (“State” is a word used as an
entity class name for the entity class state. Note that “Name”, an attribute of
business concept, will be the ﬁrst other businessterm to represent any business
concept.)
Of course, there is all the rest of the language used by the enterprise that will
not appear in an entity-relationship model at all, and this comprises all the words
and phrases used as other businessterms to represent other business concepts
or business concept elements.
Business Rules
1. An entity class name must be speciﬁcally to represent only an entity
class, not any other kind of business concept or business concept
element.

SYMBOL
# Sequence number
* Effective date
° Until date
° Comment
BUSINESS TERM
ICON
OTHER
BUSINESS
CONCEPT
ELEMENT
OTHER BUSINESS
CONCEPT
OTHER
CHARACTERISTIC
ASSIGNMENT
SIGNIFIER
# ID
WORD
* Word text
° Pronunciation guide
GRAPHIC
° Graphic blob
PHRASE
° Phrase text
ABBREVIATION
to represent
to represent
constrained by
a super-
type of
(2+)
a sub-
type of
ENTITY CLASS
BUSINESS CONCEPT ELEMENT
PROPOSITION TYPE ELEMENT
* Predicate
* Effective date
° Until date
FACT TYPE ELEMENT
INSTANCE NAME
ENTITY CLASS
NAME
CHARACTERISTIC ASSIGNMENT
* Essential indicator
* Delimiting indicator
OTHER
CHARACTERISTIC
BUSINESS CONCEPT
# ID
* Name
* Primary definition
PROPOSITION TYPE
° Modal type
FACT TYPE
* Effective date
° Until date
CHARACTERISTIC
* Description
ATTRIBUTE
NAME
OTHER INSTANCE
NAME
used as
the use of
represented by
a constraint
on
of
used in
to
the
object
of
about
the
object
of
part of
composed
of
represented
by
about
described
by
OTHER
BUSINESS
TERM
ATTRIBUTE
° Default value
° Formula text
° Cardinality indicator
* Default optionality indicator
DOMAIN
* Format
° Description
° Maximum length
° Decimal length
° Default value
Fig. 2–18: Entity classes and attributes.

ROW THREE: THE ENTITY-RELATIONSHIP DIAGRAM
69
2. An attribute name must be speciﬁcally to represent only an attribute,
not any other kind of business concept or business concept element.
Note that attribute is shown as a kind of characteristic assignment (a fact
type element) of a characteristic that is a domain. That is, each attribute
must be constrained by a domain. What this is saying is that a domain is a
characteristic in the abstract, which can be assigned to many entity classes.
An attribute is the fact that a particular domain applies to a particular entity
class. Often we are not aware of the domain when we say that product has
“Name”, “Length”, and “Width” as attributes, but it is there. It is the deﬁnition
of what we mean by the attribute. It can be as simple as speciﬁcation of a format or
as complex as a calculated constraint, but implicitly or explicitly it is there. Note
that domain is highlighted. It is actually documented more fully as a constraint
in Chapter Seven.
We have already seen that the relationship “each characteristic assignment
must be of one characteristic” is a more speciﬁc sub-type of the relationship
“each business concept element must be part of one business concept”. Simi-
larly, the relationship “each attribute must be constrained by one and only one
domain” is a further sub-type of the other relationships. Similarly, the asser-
tion that “each attribute must be about one entity class” is a special case of
the relationship “each proposition type element must be descriptive of a busi-
ness concept“. To eliminate the redundant representation would require explicit
statement of the following business rules.
Business Rules
1. Each characteristic assignment is a business concept element that
must be part of one business concept that is a characteristic.
2. Each attribute is a business concept that must be part of one and only
one fact type that is a domain.
3. Each attribute is a business concept that must be descriptive of one
and only one business concept that is an entity class.

70
DATA
Attributes of attribute include “Default value”, “Format”, “Maximum
length”, “Average Length”, and number of “Decimal places”. “Default option-
ality” is an attribute as well, used to specify, in general, whether the attribute
is mandatory or not. In fact, optionality is a concept that will require a more
sophisticated representation than this (see Chapter Seven), but deﬁning a “Default
optionality indicator” will do for initially drawing a data model.
“Cardinality indicator” is included in this model for completeness, but it too is
a constraint and is discussed more extensively in Chapter Seven. It lets you specify
the maximum number of occurrences of values for this attribute in this entity
class. If a normalized relational model is the object of this exercise, this must
always have the value “1”. Some environments are not normalized, however, and
therefore if you wish to capture that fact this is where it would be recorded. (UML
provides the ability to specify this.)
Relationships and Relationship Roles
As we saw in Chapter One, a relationship role is the fact that an entity class
participates in a relationship with another entity class. Each relationship role
must be played by exactly one entity class and must be connected to another
relationship role being played by the same or another entity class. Figure 2–19
shows this.
Relationship Roles
Note that each relationship role must be connected to exactly one other rela-
tionship role that in turn must be played by either the same or another entity
class. Thus, two occurrences of entity classes (or two occurrences of the same
entity class) are connected via two relationship roles. These two roles are part
of a relationship, which is the entire relationship between the two entity classes.
That is, each relationship must be composed of one or more (in this case, exactly
two) relationship roles.
The relationship role “Each relationship role must be played by one and
only one entity class” is equivalent to the statement that “each relationship
role may be composed of a proposition type element (actually a fact type
element) that is about a business concept that is an entity class”. The direct
relationship is more concise and easier to understand, but it is redundant.

OTHER 
PROPOSITION
TYPE
RELATIONSHIP
# Name
° Description
OTHER BUSINESS
CONCEPT
OTHER
CHARACTERISTIC
ASSIGNMENT
ATTRIBUTE
° Default value
° Formula text
° Cardinality indicator
* Default optionality indicator
constrained by
a super-
type of
(2+)
a sub-
type of
ENTITY CLASS
BUSINESS CONCEPT ELEMENT
PROPOSITION TYPE ELEMENT
* Predicate
* Effective date
° Until date
FACT TYPE ELEMENT
a super-
type of
a sub-
type of
a sub-
type of
a super-
type of (2+)
CHARACTERISTIC ASSIGNMENT
* Essential indicator
* Delimiting indicator
OTHER
CHARACTERISTIC
DOMAIN
* Format
° Description
° Maximum length
° Decimal length
° Default value
BUSINESS CONCEPT
# ID
* Name
* Primary definition
PROPOSITION TYPE
° Modal type
FACT TYPE
* Effective date
° Until date
CHARACTERISTIC
* Description
ASSOCIATIVE ROLE
° Cardinality indicator
° Default optionality indicator
GENERALIZATION ROLE
SUPER-TYPE ROLE
SUB-TYPE ROLE
RELATIONSHIP ROLE
a constraint
on
of
used in
to
the
object
of
about
the
object
of
part of
composed of
part of
composed
of
about
described
by
player
of
played by
connected to
connected by
Fig. 2–19: Relationship Roles.

72
DATA
For that matter, the relationships themselves between relationship role and
entity class and between relationship role and itself are similarly redundant.
Each of these is an example of the fact that each business concept (in this case,
relationship role) may be composed of one or more business concept elements
(in this case, relationship role elements, such as played by and connected to).
Each of these in turn must be about one or more business concepts (in these
cases, entity class and relationship role, respectively). The cardinality of the
relationships is conveyed by the attribute “Cardinality indicator”, but the fact
that the explicit relationships are required cannot be expressed directly through
these more indirect relationships.
In other words, each relationship may be a super-type of two or more other
relationships. Rather than showing redundant relationship sub-types, the same
constraints can be expressed as business rules.
Business Rules
1. Each business concept that is a relationship role must be composed
of only one business concept that is a proposition type element (with
the Name “played by”), which must be about the business concept that
is entity class.
2. Each business concept that is a relationship role must be composed of
only one business concept element that is a proposition type element
(with the Name “connected to”), which must be about the business
concept that is relationship role.
3. Each business concept that is a relationship role must be composed of
only one business concept element that is a proposition type element
(with the Name “connected from”), which must be about the business
concept that is relationship role.
Note that the relationship role “each entity class may be a super-type of
another entity class” (and its inverse) is not redundant, in that entity class is
neither a proposition type nor a proposition type element.
Figure 2–19 shows that a relationship role is either an associative role
or a generalization role. An associative role describes the relationship from
one entity class to another when the entity classes represent fundamentally
different things (or different occurrences of the same thing, as in a recursive

ROW THREE: THE ENTITY-RELATIONSHIP DIAGRAM
73
bill of materials structure associating one product type with another). Using this
model as an example of a data model, the entity class that is a business concept
element is player of the associative role “part of”, which is connected to the
associative role “composed of” that is played by the entity class that is business
concept.
A generalization role describes the fact that an instance of one entity class
is in fact an instance of another. A generalization role must be either a sub-type
role or a super-type role. If an entity class is a player of a sub-type role, this
must be connected to a super-type role that is played by another entity class.
An occurrence of the ﬁrst entity class is then by deﬁnition also an occurrence of
the second entity class.
Again, using this model as an example, the entity class that is other business
concept is player of the sub-type role that is connected to the super-type role
that is played by the entity class that is business concept. The entity class asso-
ciative role has two attributes: “Cardinality Indicator” and “Default Optionality
Indicator”. Both of these are discussed in more detail in Chapter Seven.
Using Figure 2–19 itself as an example of an entity-relationship diagram, the
“Cardinality indicator” of the associative role from entity class to relationship
role that is named player of is “True”, meaning that the role of entity class is
to more than one occurrence of relationship role. The “Cardinality indicator”
of the associative role named “played by” is “False”, meaning that the role of
relationship role is to only one occurrence of entity class. Alternatively, the
attribute could be called “Cardinality value” with values “1”, “*”, “<2”, and so
on. In information engineering and other similar notations, cardinality may only
be “one and only one” (“False” or “1”) or “one or more” (“True” or “*”); however,
in UML, other values can be implied, such as “>4”, “2, 4, or 6”, and so on.
As with attribute, the attribute of associative role that by all rights should
be called “Optionality indicator” is in fact called “Default optionality indicator”
because the optionality of an associative role may be a function of either its
state or the state of the affected entity class. (See Chapter Seven.) For the
moment, however, we will assume that its default is only one “Optionality indica-
tor” value. For the role in this model named “player of”, this is “true”—meaning
that each occurrence of entity class may or may not be the player of at least one
relationship role. The “Default optionality indicator” of the relationship role
named “played by” is “False”, meaning that no occurrence of relationship role
may be created that is not played by at least one entity class.

74
DATA
Association Class Roles
The roles described previously are called information engineering roles because
they are constrained by that technique. In information engineering and related
disciplines, such as the Barker/Structured Systems Analysis and Design Method
(SSADM) approach used in these drawings, all relationships are assumed to be
binary in that they are between only two entity classes. This provides a certain
rigor to the exercise, which your author deems highly desirable. There are other
notations, however, that are not as constrained.
UML, for example, primarily uses the information engineering approach, but it
also has a special way of addressing many-to-many relationships. In information
engineering or SSADM, when confronted with a many-to-many relationship,
the response is to create a new entity class whose occurrences each represent an
occurrence of one entity class being related to one occurrence of another entity
class.
For example, imagine the model shown in Figure 2–20, where there is a
many-to-many relationship between project and person (each project may be
the work site for one or more people; each person may be assigned to one or
more projects). In this case, the information engineering response (using UML
notation, in this case) would be to create an intersect entity class (as shown in
Figure 2–21) as project assignment. Each occurrence of the intersect entity class
project assignment is the fact that a particular person was assigned to a partic-
ular project at a particular time. That is, each project assignment must be of
one person to one project at a particular time. The intersect entity class has all
of the characteristics of any entity class.
UML, however, also provides the option of creating an association class. This
is an entity class that represents the relationship itself, not simply a set of inter-
actions between the base entity classes. A sample association class is shown in
Person
Project
assigned
to
0..*
0..*
work site
for
name:string
name:string
Fig. 2–20: A many-to-many relationship.

ROW THREE: THE ENTITY-RELATIONSHIP DIAGRAM
75
Person
Project
0..*
subject
to
of
0..*
to
1...1
the
object of
1...1
name:string
name:string
ProjectAssignment
sequenceNumber
startDate:start
endDate:end
Fig. 2–21: Sample intersect entity class.
Figure 2–22 as ProjectAssignment. This entity class is not related to any other
entity class, but only to the relationship itself.
Note that this is a very constrained device. As shown, it assumes that there will
be no more than one occurrence of a particular person assigned to a particular
project, since, by deﬁnition, each occurrence of the association class is identiﬁed
by a combination of the identities of the two base entity classes.
If Charlie works for the Brooklyn Bridge Project for a few months, goes away,
and is then reassigned to that project, this cannot be recorded here. In that case,
you must use the intersect entity class shown in Figure 2–22. Note that the
intersect entity approach allows speciﬁcation of the attribute “sequenceNumber”,
which can be included in the unique identiﬁer to keep instances distinct from
each other. Then there can be an unlimited number of occurrences of project
assignment of a particular person to a particular project.
In the case of multiple assignments of project to person, you could use the
association class if you added the attribute “Cumulative number of assignments”

76
DATA
Person
Project
assigned
to
0..*
0..*
work site
for
name:string
name:string
ProjectAssignment
startDate:date
endDate:date
Fig. 2–22: An association class.
to either person or project, but this would not allow you to specify the dates of
each assignment.
This feature of UML calls for the deﬁnition of a new kind of relationship role
in our metamodel, the association class role, as shown in Figure 2–23. Here
again, each relationship must be composed of one or more relationship roles,
but this time instead of a role being connected to another relationship role,
each association class role must be to describe another relationship.
A new entity class sub-type has also been created here—association entity
class—to describe what is at the end of an association class role.
This is a kind of entity class, and as such it may be a player of one or more
relationship roles, but in this case it is constrained to playing an associa-
tion class role. The relationship role discussed previously is here rendered as
information engineering role to distinguish it from association class role.
An information engineering role is used in entity-relationship diagrams, both
in the original information engineering technique and techniques derived from
that (including the Barker/SSADM notation used in this book). The association
class role occurs only in UML and IDEF1X, although both primarily use the
information engineering roles.

BUSINESS CONCEPT ELEMENT
FACT TYPE ELEMENT
FACT TYPE
* Effective date
° Until date
CHARACTERISTIC
* Description
RELATIONSHIP ROLE
RELATIONSHIP
# Name
° Description            
DOMAIN
* Format
° Description
° Maximum length
° Decimal length
° Default value
composed of
described by
to 
describe
player
of
a sub-
type of
a super-
type of
(2+)
of
used in
constrained by
to
the
object
of
part of
a constraint
on
connected
to
played
by
connected
from
OTHER 
CHARACTERISTIC
OTHER
PROPOSITION
TYPE
ASSOCIATIVE ROLE
° Cardinality indicator 
° Default optionality indicator
SUPER-TYPE ROLE
SUB-TYPE ROLE
GENERALIZATION ROLE
ENTITY CLASS
ASSOCIATION
ENTITY CLASS
OTHER 
BUSINESS
CONCEPT
about
described by
about
the
object
of
part of
composed
of
BUSINESS CONCEPT
# ID
* Name
* Primary definition
PROPOSITION TYPE ELEMENT
* Predicate
* Effective date
° Until date
CHARACTERISTIC ASSIGNMENT
* Essential indicator
* Delimiting indicator
OTHER
CHARACTERISTIC
ASSIGNMENT
ATTRIBUTE
° Default value
° Formula text
° Cardinality indicator
* Default optionality indicator
PROPOSITION TYPE
* Effective date
° Until date
a sub-type of
a super-type of (2+)
OTHER ENTITY
CLASS
INFORMATION ENGINEERING
ROLE
ASSOCIATION 
CLASS ROLE
a super-
type of
a sub-
type of
Fig. 2–23: Association class role.

78
DATA
Business Rules
1. An association class role must be played by an association entity
class. Conversely, an association entity class must be a player of one
and only one association class role.∗
2. In Figure 2–23, an information engineering role may only be played
by an other entity class. (More about this later.)
3. If a relationship is composed of association classes, it is composed of
only one such class.
4. If a relationship is composed of information engineering classes, it is
composed of exactly two such classes.
N-ary Relationships
Even with the addition of association class roles, UML is still primarily con-
cerned with binary relationships. But what about notations (including UML)
that permit true ternary and higher-order relationships? Predominant among
those that do are object role modeling (ORM) and Chen notation. In these,
multiple objects (entity classes and attributes) can be related to each other
without constraint. Figure 2–24 shows, for each of the notations, an example
of a Project being related to a Person, as previously discussed, but in this case
there is a third participant in the relationship (“Location”). That is, this model
asserts that a Person may be assigned to a Project in a particular Location.
Note that in UML, an association class role may also be added to describe
(add attributes to) the ternary relationship itself. In ORM, the lines with arrow-
heads mean that each Project/Person combination is unique. This constraint was
implicit on the UML association class in the previous example. One person can
work on a project only once. In ORM, this constraint is explicit and is under the
control of the modeler. Whereas a person can work on a project only once, a
person could work at the same location multiple times, just as a project could be
in a location multiple times.
This calls for a further reﬁnement of our model. Figure 2–25 shows how
a relationship must be composed of (three) or more n-ary roles, without
∗Here, a business rule is used instead of explicitly depicting that each association class role must
be played by one association entity class.

0..*
0..*
0..*
Project 
Assignment
Person
Location
Project
Person
effective date: date
n
p
m
Project
Location
Person
Project
Location
Chen notation
UML notation
Assignment
of
Placement
in
Assignment
to
ORM notation
Fig. 2–24: Sample ternary relationship.

CHARACTERISTIC ASSIGNMENT
* Essential indicator
* Delimiting indicator
CHARACTERISTIC ASSIGNMENT
* Essential indicator
* Delimiting indicator
BUSINESS CONCEPT ELEMENT
CHARACTERISTIC ASSIGNMENT
constrained by
of
to
about
part of
ATTRIBUTE
° Default value
° Formula text
° Cardinality indicator
* Default optionality indicator
OTHER
CHARACTERISTIC
ASSIGNMENT
about
80

played
played
by
by
BUSINESS CONCEPT
# ID
# Name
* Primary definition
PROPOSITION TYPE
FACT TYPE
# Effective date
° Until date
CHARACTERISTIC
* Description
RELATIONSHIP ROLE
INFORMATION ENGINEERING ROLE
composed of
described by
connected
from
connected
to
a sub-type of
a super-type of (2+)
ASSOCIATIVE ROLE
° Cardinality indicator 
° Default optionality indicator
SUPER-TYPE ROLE
SUB-TYPE ROLE
GENERALIZATION ROLE
the 
use
of
part of
to
describe
used 
in
part of
composed 
of
IDENTIFICATION
ROLE ELEMENT
# Effective date
° Until date
IDENTIFICATION
ROLE
# Name
* Description
the
object
of
a
constraint
on
used in
the
object
of
composed
of
played
by
OTHER
CHARACTERISTIC
DOMAIN
* Format
° Description
° Maximum length
° Decimal length
° Default value
ASSOCIATION
CLASS ROLE
RELATIONSHIP
# Name
° Description
N-ARY ROLE
° Cardinality indicator 
° Default optionality indicator
OTHER
PROPOSITION
TYPE
player 
of
described
by
a sub-
type of
a super-
type of
(2+)
ENTITY CLASS
OTHER BUSINESS CONCEPT
OTHER ENTITY
CLASS
ASSOCIATION ENTITY
CLASS
Fig. 2–25: N-ary roles.
81

82
DATA
restriction as to how many are involved. In the UML example, a relationship
will be composed of three n-ary roles and one association class role.
Business Rule
An n-ary role must be played by one and only one other entity class.
Note that because ORM includes the notation for uniquely identifying combi-
nations of n-ary roles, Figure 2–25 adds the concept of an identiﬁcation role.
Each n-ary role may be used in one or more identiﬁcation role elements, each
of which must be part of one identiﬁcation role. In the previous ORM exam-
ple, an identiﬁcation role is composed of the n-ary roles assignment of and
assignment to.
Entity Class Views
The Row Three conceptual data model is constrained to entity classes that
represent fundamental, often abstract, things of signiﬁcance to the business.
The things seen by Row Two’s business owners, however, tend to be more concrete,
and are usually examples, combinations, or subcategories of the entity classes in
the conceptual model.
We have previously speciﬁed that multiple business terms can be to represent
a business concept (entity class or attribute), but this is often not adequate
to describe the detailed interactions between the two kinds of language. What we
need are virtual entity classes that represent the business owner’s language, but
which can be explicitly mapped to more fundamental classes.
In the original ANSI three-schema architecture, the external schema was con-
sidered a “view” of the conceptual model, and relational database management
vendors have implemented the concept of a view derived from one or more tables
that in all respects behave like a table.
No modeling tool currently (as of this writing in 2005) supports this, but it is
reasonable to hypothesize the similar concept of an entity view. In Figure 2–26,
a virtual entity class is a view derived from underlying elementary entity
classes.

ROW THREE: THE ENTITY-RELATIONSHIP DIAGRAM
83
Both virtual entity class and elementary entity class are sub-types of
standard entity class, which means that a previously cited business rule should
actually read as follows.
Business Rule
Each information engineering role must be played by a standard
entity class or by an other entity class.
Each virtual entity class is deﬁned in terms of the entity classes and attributes
that make it up, plus the selection criteria used to select occurrences of the under-
lying entity classes. Speciﬁcally, each virtual entity class must be deﬁned in
terms of one or more entity class selections, each of which must be of one
and only one other (other) entity class. In addition, each entity class selection
must be composed of one or more attribute selections, each of which must be
of one and only one attribute.
In addition, each virtual entity class may be populated by rows deﬁned in
terms of one or more selection conditions, each of which must be either in
terms of an attribute or in terms of a relationship role. Attributes of selection
condition deﬁne the criteria for selecting rows to be part of the virtual entity
class: an “Operator” evaluates the attribute or relationship role involved,
comparing each occurrence’s value with the selection condition’s “Value”. For
example, rows from the entity class that is “Part” could be selected if the
selection condition is in terms of the attribute “Length” (which is also about
the entity class “Part”), the operator is “Less than”, and the value is “24”. That
is, the view will be populated with all parts that are less than 24 (units)∗long.
As another example, in the sample model shown in Figure 2–17, suppose you
wanted to deﬁne the view customer which was the set of rows from the entity
class party (which were buyers in an order). To do so, the virtual entity cus-
tomer would be deﬁned in terms of the entity class selection that is of the
entity class party. This in turn would be composed of the attribute selections
shown in Table 2–2.
∗This presumes that units of measure have been dealt with elsewhere.

BUSINESS CONCEPT ELEMENT
ATTRIBUTE SELECTION
* Effective date
° Until date
SELECTION CONDITION
* Effective date
° Until date
* Operator
* Value
CHARACTERISTIC
ASSIGNMENT
* Essential indicator
* Delimiting indicator
in terms of
in 
terms 
of
part of
composed
of
of
used for
term
for
constrained by
of
to
about
part of
ATTRIBUTE
° Default value
° Formula text
° Cardinality indicator
* Default optionality indicator
OTHER
CHARACTERISTIC
ASSIGNMENT
about
part 
of the
definition
of
of
part 
of the
definition
of
ENTITY CLASS SELECTION
* Effective date
° Until date
84

BUSINESS CONCEPT
# ID
# Name
* Primary definition
PROPOSITION TYPE 
° Model type
FACT TYPE
# Effective date
° Until date
CHARACTERISTIC
* Description
RELATIONSHIP ROLE
INFORMATION ENGINEERING ROLE
composed of
described by
connected
from
connected
to
a sub-type of
a super-type of (2+)
ASSOCIATIVE ROLE
° Cardinality indicator 
° Default optionality indicator
SUPER-TYPE ROLE
SUB-TYPE ROLE
GENERALIZATION ROLE
the use
of
part of
to describe
used in
part
of
composed
of
IDENTIFICATION
ROLE
ELEMENT
# Effective date
° Until date
IDENTIFICATION 
ROLE
# Name
* Description
the
object
of
a
constraint
on
used in
the
object
of
composed
of
played by
player 
of
term for
OTHER
CHARACTERISTIC
DOMAIN
* Format
° Description
° Maximum length
° Decimal length
° Default value
ASSOCIATION
CLASS ROLE
RELATIONSHIP
# Name
° Description
N-ARY ROLE
° Cardinality indicator 
° Default optionality indicator
OTHER
PROPOSITION
TYPE
described
by
used for
defined
in terms of
defined
in terms of
a sub-
type of
a super-
type of
(2+)
ENTITY CLASS
STANDARD 
ENTITY CLASS
ELEMENTARY ENTITY CLASS
VIRTUAL ENTITY CLASS
* Definition
OTHER BUSINESS CONCEPT
OTHER ENTITY
CLASS
ASSOCIATION
ENTITY CLASS
Fig. 2–26: Entity class views.
85

86
DATA
Table 2–2: Virtual entity class example.
About
Which One
Which Implies
attribute
Party ID
entity class Party
attribute
Person given name
entity class Person
attribute
Person surname
entity class Person
attribute
Person middle initial
entity class Person
attribute
Organization name
entity class Organization
In addition, the virtual entity customer would also be deﬁned in terms of one
selectioncriterion that is intermsof the relationshiprole “buyerin” (which in
turn is played by the same party). The Operator in selection criterion would be
“equal to”. The process of constructing a virtual entity class, then, is controlled
by the following business rule.
Business Rule
Each occurrence of attribute selection must be of an attribute that is
about an entity class. Each occurrence of attribute must also be part of
an entity class selection that is of an entity class. For each attribute
selection, the same entity class must be at the end of both of those
navigations.
About Reference Data
In every business data model there are some entity classes that are not dependent
on other entity classes. That is, reference data have no mandatory relationships.
Typically, these are the entity classes that contain the terms of reference used by
the others. Reference data include such things as values for status, currency,
event type, license type, and so forth. Usually each of these has only a few
values, deﬁned by the organization. They represent the legal values for terms
used elsewhere in the model. As such, making sure that instances of these are

ROW FOUR: DATA DESIGN
87
deﬁned correctly is appropriately the job of the people creating the system that
uses them—and for this reason they are often considered part of the metadata.
These reference entity classes are not represented separately here, because they
do not add anything to the structure of a model. The people managing metadata
must take note of these reference data, however, and manage them along with
managing the structure of any system that uses them.
In the quotation that begins this chapter, Aristotle asserts that a connection
between two or more things is indeed a fact. And yes, we are concerned with
whether the things involved (the business concepts) exist. We are also concerned
with the nature of the business concepts (as revealed by the facts). The question
of why the connection exists is beyond the scope of this book.
ROW FOUR: DATA DESIGN
Row Four of the architecture framework is the Designer’s View. In the case of
the Data column, this is in terms of the particular kind of data manipulation
technology brought in to manage the data described in Row Three. As of 2006,
the most commonly used technologies are relational databases and object-oriented
program design.
Relational technology focuses on how data are stored, whereas object-oriented
technology addresses how they are manipulated in programs. In principle, these
should be compatible, in that stored data must be manipulated by programs
somehow and manipulated data usually must be stored.
The priority in managing databases is to see that the design of them is as non-
redundant as possible, and to control modiﬁcations to data structure and access to
data. The relational approach to database implementation supports this approach.
It makes use of database management system (DBMS) software to store and
manipulate data organized as two-dimensional tables. According to E. F. Codd’s
relational theory [Codd 1970], storing data according to relational rules minimizes
redundancy in storage,∗but it does not in any way restrict how programs are
written to use and manipulate the data so stored.
∗A brief description of the normalization process can also be found in David C. Hay’s Requirements
Analysis: From Business Views to Architecture [Hay 2003, pp. 91–111].

88
DATA
Although one component of database design addresses performance issues,
database administrators are indifferent as to how data are used in programs. The
object-oriented approach to data, on the other hand, emphasizes the proper design
and writing of programs. Data structure is embedded in programs, describing
what are called classes of “objects.” These may correspond to the business entity
classes described previously for the Row Three conceptual model, or they may
be classes of objects used by the program only. Processes (called “behaviors”) are
then attached to these classes.
When the objects of an object-oriented program must be made persistent—with
values retained after the program terminates—the data involved must be stored
somewhere. Here there is no single object-oriented approach, so, although it is
not the only solution, its pervasiveness in the industry suggests that a relational
database is a reasonable place to store such persistent data. To do so, however,
requires translation of the program’s object structure into the tables and columns
of the database. If both the object and the database structures closely approximate
the structure of the conceptual model, this should be straightforward. In both
cases, the data assume a structure, and in principle both structures should come
from the same Row Three model. In practice, however, the mapping is often not
so easy.
Whether translating from an entity-relationship model or from an object-
oriented design, relational databases’ lack of facility to deal with inheritance makes
translation in that direction a serious effort requiring thought.
In addition, both relational designers and object-oriented designers modify the
structure to accommodate processing bottlenecks, but they view what constitutes
such a bottleneck quite differently.
Data stored in a relational DBMS is subject to extensive rules to protect their
integrity and control access to them. These rules do not necessarily apply to data
structures as they are used in programs. The remainder of this chapter describes
the metamodel of both the relational and the object-oriented approaches, revealing
the similarities and differences between the two views of data.
Relational Database Design
Codd’s original relational model described data in terms of relations, attributes,
and tuples. These are reﬂected in the conceptual model as entity classes, attributes,

ROW FOUR: DATA DESIGN
89
COLUMN
# Sequence number 
* Label
* Format
° Length
° Decimal places
* Mandatory indicator
° Default value
TABLE
part of
composed of
Fig. 2–27: Column and table views.
and occurrences. In a relational database design, they are implemented as tables,
columns, and rows, respectively.
Tables and Columns
The entity classes table and column are shown in Figure 2–27. This structure is
similar to that for entity class and attribute, described previously. A table is
a collection of data about something, organized into a set of rows and columns.
That is, the structure of a table is deﬁned by a set of columns. Thus, each table
may be composed of one or more columns, whereas each column must be part
of a single table.
A column cannot be duplicated in a table and deﬁnes one particular thing to
be described by the table. A row is an occurrence of the thing the table is about.
Both rows and columns be in any order. There is no meaning attributed to the
sequence of either.
Business Rules (Relational Theory Version)
1. Each column may appear only once in a table.
2. Each instance of column (that is, a column’s occurrence in a row) may
contain only one value at a time.
3. There is no implied sequence in the way columns are presented in a
table.
4. There is no implied sequence in the way rows appear in a table.

90
DATA
Each column is described by a “Label”, which, among other things, may be
displayed whenever the column appears on a screen or in a report. A column’s
characteristics are deﬁned by its “Format”, and optionally by its “Length” and
(number of) “Decimal places”. Its “Mandatory indicator” determines whether a
value must be supplied for this column for all rows. An instance of a column
may be assigned a “Default value”.
Sample Database Design
Figure 2–28 shows a diagram of a database design that could be derived from
the sample entity class model of Figure 2–17. This is a generic database design
diagram, produced by Oracle’s Designer Modeling tool. Other tools could present
the same information differently. In this diagram, each table is represented by a
rectangle, with columns listed inside the rectangle. As in the entity class model,
an asterisk is next to a required column and an open circle is next to an optional
column. In addition, a solid circle is next to a column that is part of a primary key
(discussed in Chapter Seven). Also next to each column is a symbol representing
its data type. A capital “A” means that it is alphanumeric, whereas a diagonal
“7-8-9” means it is numeric.
Thus, in this example “Parties”, “Orders”, “Line Items”, “Product types”,
and “Service types” are all examples of the entity class table in Figure 2–27.
Note that in this design the arc notation has been preserved from the concep-
tual model. In this case, it means that a stored procedure or some other kind of
programmed constraint must enforce the exclusivity. Either “Pdty_pdty_id” or
“St_service__type_id” must be null. In addition, depending on the constraint in
the conceptual model the other column must be either “null” or “not null”.
Much of what goes into database design involves providing for constraints:
primary keys, foreign keys, domains, column constraints, arcs, and so forth.
Because these are the implementation of business rules, discussion of these in
detail is deferred to Chapter Seven.
Views
SQL, the language of the relational database, provides the ability to deﬁne views,
which are collections of data organized as though they were tables, but which are
in fact derived from other tables. Figure 2–29 shows view and table as sub-types

ORD_ORDER_NUMBER
LINE_NUMBER
QUANTITY
VALUE
PDTY_PDTY_ID
ST_SERVICE_TYPE_ID
# *  A
# *  789
   *  789
      789 
      789 
      789
LINE_ITEMS
FK_PART_OF
FK_FROM
PDTY_ID
PRICE
PRODUCT_TYPE_ID
PRODUCT_TYPES
# *  789 123
      789 
   *  789
SERVICE_TYPE_ID
RATE_PER_HOUR
# *  789 
      789 
SERVICE_TYPES
FK_FOR_PROD
FK_FOR_SVC
ID
PARTY_TYPE 
ORGANIZATION_NAME 
GIVEN_NAME 
MIDDLE_INITIAL
SURNAME
# *   789 
   *   A
       A
       A
       A
       A
PARTIES
ORD_ORDER_NUMBER
ORDER_TYPE
TOTAL_VALUE
PART_ID_TO
PART_ID_FROM
# *   A
   *   A
       789
   *   789 
   *   789
ORDERS
FK_TO
Fig. 2–28: Sample database design.

to define
to define
compared
with
in terms
of
part of
composed of
the use 
of
composed
 of
part of
the use of
used for
subject
to
the 
object
of
used as
DATA GROUP
# ID
° Description
VIEW
* SQL expression
* Effective date
° Until date
COLUMN
# Sequence number
* Label
* Format
° Length
° Decimal places
* Mandatory indicator
° Default value
TABLE
VIEW SELECTION
CONDITION
# Sequence number
* Operator
° Constant
COLUMN
SELECTION
# Effective date
° Until date
TABLE
SELECTION
# Effective date
° Until date
defined in terms of
defined by
defined in terms of
defined by
Fig. 2–29: Table views.

ROW FOUR: DATA DESIGN
93
of the more general concept data group. A data group is any organized collection
of data, either a table, or a view derived from one or more other tables. This is
the same structure described previously for entity class model views.
A view must be deﬁned by one or more table selections, where each table
selection is the use of another data group (table or view). Each table selection,
in turn, may be composed of one or more column selections, each the use of one
column from that table. The view is populated from the data in component data
groups by evaluating the selected data groups and columns in terms of one
or more view selection conditions. Each view selection criterion compares
values of a speciﬁed column with either a “Constant” or the value in another
column.
Business Rule
Any column used for a column selection that is part of a table
selection must be part of the data group that is used in that same table
selection.
For example, in the sample database design shown in Figure 2–28, a view
could be constructed for customer, an instance of which is deﬁned as a party
that participates in an order (The “Party_ID_from”), where the party that is the
“Party_ID_to” is us. In SQL, the view deﬁnition looks like this:
CREATE VIEW CUSTOMER AS
SELECT P.ID,P.PARTY_TYPE,P.ORGANIZATION_NAME,
P.GIVEN_NAME,P.MIDDLE_INITIAL, P.SURNAME
FROM ORDERS O, PARTIES P
WHERE O.PART_ID_TO = <the ‘party id’ of our company>
AND O.PART_ID_FROM = P.ID
AND O.PART_ID_FROM <> <the ‘party id’ of our company>
In our model, this translates into a view with the name “Customer” that is
deﬁned by the following table selections:
–
The use of the data group (table) “Orders”

94
DATA
–
The use of the data group (table) “Parties”, and composed of the following
columns that are part of the data group (table) “Parties”

ID

Party_type

Organization_name

Given_name

Middle_initial

Surname
–
Deﬁned in terms of the following table selection conditions that are
comparing the following columns

Deﬁned in terms of ﬁrst table selection condition
•
In terms of column “Party_id_from” that is part of table “Order”
•
Operator = “equal”
•
Compared with = column “ID” that is part of table “Party”
<and>
•
In terms of column “Party_id_from” that is part of table “Order”
•
Operator = “equal”
•
Constant = <the party id of our company>

Deﬁned in terms of second table selection condition
•
In terms of column “Party_id_to” that is part of table “Order”
•
Operator = “not equal”
•
Constant = <the party id of our company>
The SQL statement deﬁning the view is the value of “SQL expression”—an
attribute of view. To the extent that design views are derived from analysis virtual
entity classes, each table selection must be based on an entity class selec-
tion (as shown in Figure 2–30), each column selection must be based on one
attribute selection, and each table selection condition must be based on one
selection criterion.

VIEW SELECTION CONDITION
# Sequence number
* Operator
° Constant
COLUMN SELECTION
# Effective date
° Until date
TABLE
SELECTION
# Effective date
° Until date
VIEW
* SQL expression
* Effective date
° Until date
TABLE
CONTINUOUS
COLUMN
° Maximum value
° Minimum value
ATTRIBUTE SELECTION
* Effective date
° Until date
ENTRY CLASS SELECTION
* Effective date
° Until date
ENTITY CLASS
SELECTION CONDITIONS
* Effective date
° Until date
* Operator
* Value
ATTRIBUTE
° Default value
° Formula text
° Cardinality indicator
* Default optionality indicator
in terms of
the 
object 
of
subject to
compared with
used for
about
the use of
based on
of
based on
part of
to define
defined in terms of
defined by
defined in terms of
composed of
COLUMN
* Label
* Format
° Length
° Decimal places
° Mandatory indicator
° Default value
DISCRETE
COLUMN
the basis for
used for
used for
in terms of
part
of the
definition 
of
part of the
definition of
defined in
terms of
of
based on
term for
the basis for
the basis for
part of
part of
composed of
composed of
defined in
terms of
VIRTUAL ENTITTY
CLASS
* Definition
ELEMENTARY
ENTITY CLASS
a super-
type of
(2+)
a sub-
type of
DATA GROUP
the use of
used as
to define
defined by
described by
Fig. 2–30: Entity class and table views.

96
DATA
Data Group Collections and Application Systems
Figure 2–31 shows that tables and views can be grouped for the purpose of conve-
nience. This may have to do with the way development and implementation were
organized, or it may be of functional signiﬁcance. However the data groups are
organized, ultimately they should be organized by application system. This book
presents the metamodel as though this were the case, even though it is recognized
that not all actual information technology departments will do so. For our pur-
poses, an application system is a grouping of data to fulﬁll a business function.
(Programs are also part of the deﬁnition of an application system, and Chapter
Three will go into more detail about this, as well as about how an application
system serves a corporate function.)
COLUMN
* Label
* Format
° Length
° Decimal places
* Mandatory indicator
° Default value
part of
composed of
part of
composed of
part of
composed
of
VIEW
* SQL expression
* Effective date
° Until date
DATA GROUP
TABLE
DATA GROUP COLLECTION
# Name
° Purpose
APPLICATION 
SYSTEM
# Name
* Description
Fig. 2–31: Application systems.

ROW FOUR: DATA DESIGN
97
Object-Oriented Data Design
An alternative way of describing data is the approach taken by those using the
object-oriented approach to designing programs. This is less concerned with the
way data are stored than with the way they are manipulated in programs.
The structures are relevant here, however, because they are derived from the
conceptual model as well.
The notation most commonly used in 2005 to represent object-oriented data is
the UML class diagram, which was developed by a consortium of designers in the
mid 1990s [OMG 2003]. It is similar to the entity-relationship notation described
previously, and in fact (as we saw in Chapter One) a subset of UML can be used
to draw an entity-relationship diagram.
One of the claims made about the virtues of UML is that the same symbols
used to describe business entity classes during requirements analysis can also
be used to describe the classes that are program code created for a computer
system. This is unfortunate, in that these are not the same thing, and to use the
same symbol and terminology to describe both is misleading. As we shall see
here, an object-oriented design model is quite different from an analysis model,
whatever its notation.
Classes
In the relational world, the distinction is made between entities that represent
things of signiﬁcance to the business and tables and columns that are represen-
tations of these things in the computer. It is true that many data modelers in
the relational world confuse them, but at least in principle entities and tables can
be treated separately. Indeed, although the database design should be based on the
entity model it is often appropriate for the designer to depart from that structure
for reasons of performance or other physical characteristics of the system.
Similarly, in the world of object-orientation classes of things in the world
remain very different from classes that are computer artifacts. The confusion
between these things can be unfortunate. Even in the object-oriented world, the
bits of code that describe classes are not the same things as the entity classes the
code describes.
Moreover, an object-oriented program is also concerned with things not visible
to the business at all. These are objects deﬁned strictly for the purpose of aiding in
computer processing. Even so, as in the relational world, if it is to be responsive to

98
DATA
business requirements the class structure for an object-oriented design should be
derived from that of the business’s entity-relationship model. Like the relational
model, however, the object-oriented design model may also diverge from the
entity-relationship model for good and valid design reasons.
Because of the importance of distinguishing between the real-world “class” of
requirements analysis from the computerized “class” of design, the former will
continue to be referred to here as entity class. The latter will here be called
class implementation. Figure 2–32 shows class implementation, representing
the piece of code that describes a class. Because it refers to a piece of program code,
class implementation will be described in more detail in Chapter Three, and the
type is in gray here.
Unlike in the relational world, sub-types and super-types can be implemented
directly in an object-oriented design. That is, each class may be a generaliza-
tion of one or more other classes, and each class may be inheriting from one
and only one other class. (For philosophical reasons, in this book we are ruling
out multiple inheritance. Although, of course, the model could be changed to
accommodate it.)∗Meilir Page-Jones describes a class implementation as being
in one of four categories, represented here as sub-types of class implementation
[Page-Jones 2000, pp. 233–240].∗∗
–
A business class represents something in the business, which may be any of
the following.

A class of entity, such as “Person” or “Contract”

An attribute class, which provides a data type for instance attributes
(described in material to follow), such as a “Balance” (of a bank account)
or a “Unit cost” (of a product)

A role class such as “customer” or “patient”

A relationship class,
such as “AccountOwnership” or “Patient-
Supervision” (analogous to an intersect entity in a Row Three entity-
relationship diagram)
∗Okay, if you insist, change the model to say that “each class may be inheriting from one or
more other classes”. You realize of course that this means you will have to add an intersect entity,
such as class structure.
∗∗Mr. Page-Jones calls each category a domain, but we are already using that word to mean
something else, so here it is category.

CLASS IMPLEMENTATION
# ID
* Name
* Description
* Defined date
° Expiry date
EVENT RECOGNIZER
CLASS IMPLEMENTATION
TYPE
# Name
* Description
EVENT MANAGER
APPLICATION CLASS
an example
of
embodied
in
a sub-
type of
a super-
type of (2+)
a 
generalization 
of
inheriting 
from
ARCHITECTURAL CLASS
DATABASE
MANIPULATION CLASS
MACHINE
COMMUNICATION
CLASS
HUMAN INTERFACE
CLASS
FOUNDATION CLASS
FUNDAMENTAL
CLASS
STRUCTURAL
CLASS
SEMANTIC CLASS
BUSINESS CLASS
CLASS OF ENTITY
ROLE CLASS
ATTRIBUTE CLASS
RELATIONSHIP
CLASS
Fig. 2–32: Class implementations.

100
DATA
These correspond to (and should be based on) the conceptual model’s entity
classes, attributes, relationship roles, and association classes, respectively. The fol-
lowing remaining categories are only the concern of the object-oriented designer
and programmer.
–
An architectural class concerns the speciﬁcs of an implementation in a
particular computer. This might be one of the following.

A human interface class such as a “Window” or “CommandButton”

A database manipulation class such as a “Transaction” or “Backup”

A machine-communication class, such as “Port” or “RemoteMachine”
–
A foundation class, which is usable widely. foundation classes include the
following.

A fundamental class, such as “Integer”, “Boolean”, and “Char”.

A structural class that implements a data structure, such as “Stack”,
“Queue”, and so on.

A semantic class, such as “Date”, “Time”, “Angle”, and so forth. (These
classes have richer meaning than the fundamental classes. In addition,
their attribute values may be expressed in speciﬁc units, such as “feet” or
“seconds” [Page-Jones 2000, pp. 233–240].)
–
An application class represents something speciﬁc to an application, and may
be either of the following.

An event-recognizer, which is a software construct that monitors input
to check for the occurrence of speciﬁc events in (messages from) the
environment. For example, this might be a “Patient-TemperatureMonitor”
that looks for the event “Patient becomes hypothermic”.

An event-manager that carries out the appropriate policy when an
event of a given type occurs. For example, the event “Patient becomes
hypothermic” is a message from the appropriate event-recognizer to the
class “WarmHypothermicPatient”, which in turn sends the appropriate
messages to other objects to increase the patient’s warmth and to summon
medical attention.

ROW FOUR: DATA DESIGN
101
To provide for a bit more ﬂexibility, the model redundantly also asserts that
each class implementation must be an example of one and only one class
implementation type. These are the same categories represented previously as
sub-types. That is, “Business class”, “Application class”, “Architectural class”, and
“Foundation class” are all class implementation types. In addition, each class
type may be a super-type of two or more other class implementation types.
The class implementation type structure allows for further speciﬁcation of the
subcategories listed, which may not be shown on the model as sub-types.
Business Rule
The ﬁrst instances of class implementation type must be “Business
class”, “Architectural class”, “Foundation class”, and “Application class”.
“Business class” must be listed as a super-type of a “Class of entity”,
“Attribute class”, “Role class”, and a “Relationship class”. Similarly,
other instances of class type must include the other sub-types shown in
Figure 2–32.
The attributes shown in Figure 2–32 for class implementation (“Name” and
“ID”) are discussed in detail in Chapter Three in conjunction with program
modules. Figure 2–33 shows that each class implementation can be described
by one or more class elements. A class element is an attribute of one and only
one class implementation describing it. This is analogous to attribute, which
was about an entity class in the Row Three model shown previously. In object-
oriented design, however, there are two kinds of class elements. An instance
attribute takes on a different value for every occurrence of the class. The
instance attribute “Name”, for example, for the class implementation “Person”
is uniquely assigned to each person.
You can also have class attributes. In entity-relationship modeling these are
usually handled by creating a parent entity, but in object-oriented design they
can be dealt with more directly and more intimately within the entity being
described. A class attribute for contract, for example, could be “Next Contract
Number”.
Note that class element also has the attribute “Visibility”. This indicates the
extent to which this class element (this instance attribute, for example) is

CLASS ELEMENT
# Sequence number
* Name
* Visibility
INSTANCE
ATTRIBUTE
CLASS
ATTRIBUTE
composed of
used as
the use
of
part of
EVENT RECOGNIZER
CLASS IMPLEMENTATION
TYPE
# Name
* Description
EVENT MANAGER
APPLICATION CLASS
ARCHITECTURAL CLASS
BUSINESS CLASS
FOUNDATION CLASS
DATABASE
MANIPULATION CLASS
MACHINE
COMMUNICATION
CLASS
HUMAN INTERFACE
CLASS
FUNDAMENTAL
CLASS
STRUCTURAL
CLASS
SEMANTIC CLASS
CLASS OF ENTITY
ROLE CLASS
ATTRIBUTE CLASS
RELATIONSHIP
CLASS
an example
of
embodied
in
a super-
type
of (2+)
a
generalization
of
inheriting
from
CLASS IMPLEMENTATION
a sub-
type of
Fig. 2–33: Class elements.

ROW FOUR: DATA DESIGN
103
available to any part of a system outside the class it is part of. Visibility is of at
least three kinds:
–
Public: The class element may be seen and used by any other class
implementation or operation.
–
Protected: The class element may be seen and used only within its class
implementation and by classes that are inheriting from that class.
–
Private: The class element may only be seen within the context of its
class implementation.
Other kinds of visibility are implemented by speciﬁc object-oriented languages,
but these three are the most commonly used. Note that a class element may itself
be the use of another class implementation—speciﬁcally, a foundation class
or an architecture class. For example, the instance attribute “Name” could
itself be an attribute class. Note also that although class implementation is
grayed out—because as program code it is really owned by the Activities column
(Chapter Three)—class element is not. It only appears here in the Data column.
Objects
Figure 2–34 shows that a class may be embodied in one or more actual objects;
that is, an object is an instance of one and only one class.∗
The Conceptual Model to Relational Database Design
Figure 2–35 shows how the column and table deﬁnitions may be based on
attribute and entity class deﬁnitions—via column attribute mappings and
table entity class mappings. In principle, an initial database design should be
directly derived from the entity-relationship model structure. In most cases, a
table should be based on a single entity class. Things are not always as tidy
as that, of course, because, among other things, the super-type/sub-type struc-
tures in an entity-relationship model cannot be directly implemented in a purely
relational database.
∗This, strictly speaking, is not part of the metamodel, but of the business model itself. Objects
contain the actual data values of an application. It is useful to show it here, though, because some
important metamodel concepts can only be described in terms of actual objects.

104
DATA
CLASS ELEMENT
# Sequence number
* Name
* Visibility
INSTANCE
ATTRIBUTE
CLASS
ATTRIBUTE
composed of
an instance
of
embodied
in
used as
part of
the use
of
OBJECT
# Name
* Program code
CLASS IMPLEMENTATION
EVENT RECOGNIZER
EVENT MANAGER
APPLICATION CLASS
CLASS IMPLEMENTATION 
TYPE
# Name
* Description
an example
of
embodied
in
a sub-
type of
a super-
type of (2+)
a
generalization
of
inheriting
from
ARCHITECTURAL CLASS
DATABASE
MANIPULATION CLASS
MACHINE
COMMUNICATION
CLASS
HUMAN INTERFACE
CLASS
FOUNDATION CLASS
FUNDAMENTAL
CLASS
STRUCTURAL
CLASS
SEMANTIC CLASS
BUSINESS CLASS
CLASS OF ENTITY
ROLE CLASS
ATTRIBUTE CLASS
RELATIONSHIP
CLASS
Fig. 2–34: Objects.
There are fundamentally three different approaches to mapping super-type/
sub-type structures to ﬂat relational tables. Each has advantages and disadvantages,
so the selection of an approach must be made with some care:
–
A table can be deﬁned for each super-type, encompassing all of its sub-types.
Columns are then deﬁned both for the super-type attributes and for those in

COLUMN
* Label
* Format
° Length
° Decimal places
* Mandatory indicator
° Default value
BUSINESS CONCEPT
# ID
* Name
* Primary definition
ATTRIBUTE
° Default value
° Formula text
° Cardinality indicator
* Default optionality indicator
DATA GROUP
TABLE ENTITY CLASS MAPPING
# Effective date
° Until date
from
to
TABLE
VIEW
* SQL expression
* Effective date
° Until date
subject
to
part of
composed 
of
from
to
COLUMN
ATTRIBUTE
MAPPING
# Effective date
° Until date
the object of
about
described by
ENTITY CLASS
the object of
a sub-
type of
a super-
type of
(2+)
to
OTHER BUSINESS
CONCEPT
Fig. 2–35: Tables and entity classes.

106
DATA
each sub-type. This has the advantage of simplicity, but it means that many
columns will have null values. Moreover, it will not be possible to require
values for any of the sub-type columns. A column that describes a sub-type
will only have values for rows that represent occurrences of that sub-type.
–
One table can be deﬁned for each sub-type, to include both columns derived
from its attributes and columns for all inherited super-type attributes. This
allows for requiring a value for each row of a column, but it adds complexity
to the structure. Any relationship pointing to the super-type, for example, must
now be implemented (via an exclusionary arc) with foreign keys pointing to
each of the corresponding sub-type tables. In addition, the columns for the
super-type must be deﬁned redundantly for each sub-type.
–
One table can be deﬁned for the super-type and for each sub-type, with foreign
keys pointing from the super-type to each sub-type. This approach is the most
elegant, with the least redundancy and best control, but it is also the most
complex to implement.
In principle, it should not be necessary to connect entity class and table, since
that relationship is implied by the mapping entity class, column attribute map-
ping, between attribute and column. Frequently, though, in the design process
the relationships between entity classes and tables are identiﬁed before the individ-
ual columns and attributes are mapped. The conﬁguration shown here provides the
ability to make such provisional design decisions. Again, this is provisional. Once
the column attribute mappings are complete, the table entity class mapping
entity class is redundant.
The Conceptual Model to Object-Oriented Design
As implied by the deﬁnition given previously, a business class may be derived
directly from the conceptual model created during requirements analysis. Specif-
ically, as shown in Figure 2–36 a business class may be based on one or more
class deﬁnitions, each of which is in turn the use of an attribute, entity class,
or relationship role. Because each of these may be used in one or more busi-
ness classes, the intersect entity class class deﬁnition element is deﬁned to be
the fact that a particular class deﬁnition is using a particular attribute, entity
class, or relationship role.
Similarly, an attribute deﬁnition is the fact that a particular attribute from
the entity-relationship model is implemented as an instance attribute. That is,

ATTRIBUTE
° Default value
° Formula text
° Cardinality indicator
* Default optionality indicator
CLASS DEFINITION ELEMENT
# Sequence number
CLASS DEFINITION
# Sequence number
* Effective date
° Until date 
the use
of
as
the use of
the use of
the use of
part of
composed of
used in
used in
used in
about
about
used in
played by
player of
connected to
connected
from
RELATIONSHIP ROLE
ASSOCIATION
CLASS ROLE
N-ARY ROLE
* Cardinality indicator 
* Default optionalitry indicator
ASSOCIATIVE ROLE
° Cardinality indicator 
° Default optionalitry indicator
INFORMATION ENGIENERING
ROLE
GENERALIZATION
ROLE
ATTRIBUTE
DEFINITION
# Effective date
° Until date
as
described by
ENTITY CLASS
a super-type
of (2+)
a sub-type
of 
composed
of
part of
used as
an 
example
of
inheriting
from
embodied in
ARCHITECTURAL CLASS
APPLICATION CLASS
FOUNDATION CLASS
CLASS IMPLEMENTATION
BUSINESS CLASS
RELATIONSHIP 
CLASS
CLASS OF ENTITY
ROLE CLASS
ATTRIBUTE CLASS
CLASS ELEMENT
# Sequence number
* Name
* Visibility
INSTANCE
ATTRIBUTE
CLASS
ATTRIBUTE
a sub-
type of
a super-
type of (2+)
CLASS IMPLEMENTATION  TYPE
# Name
* Description
a
generalization
of
described by
the use
of
based on
based on
Fig. 2–36: Class deﬁnitions.

108
DATA
an attribute deﬁnition is the use of an attribute as an instance attribute.
(As pointed out previously, the instance attribute may itself be the use of
another class.)
Among other things, this means that an attribute in a Row Three entity-
relationship model may be either used in the deﬁnition of an instance attribute
or used in the deﬁnition of a business class. Note that although the validation
logic of the conceptual model can be drawn also for the object-oriented model
the logic behind derived attributes does not apply here. This is because in the
object-oriented world all attributes are considered derived, even if the derivation
is “simply retrieve a value for the attribute”. This derivation is more appropriately
covered in the discussion of activities in Chapter Three.
Note that where a discrete instance attribute is based on an attribute deﬁ-
nition that is the use of a discrete attribute the set of discrete instance legal
values will be the same as the corresponding set of attribute legal values. The
model does not show domain, however, because nowhere in the object-oriented
literature your author has studied does the concept come up.
Object-Oriented Model to Relational Model: Persistence
Object-oriented programming may not have to be concerned with a physi-
cal database at all. Object-oriented design originated in the world of real-time
systems, where it is perfectly common to deﬁne objects that only survive for the
period the program deﬁning them is running. In business applications, however,
it is usually necessary to preserve an object’s identity and data beyond the life of
the program. That is, it is necessary to maintain persistent objects. A persistent
object is an object whose existence continues after the program involved stops
running. Given current technology, this is typically done by storing the objects
as data in relational tables and columns.
Figure 2–37 shows that each class implementation may be made persistent
in one or more persistence mechanisms. Currently, the most common persis-
tence mechanisms are tables and columns in a relational database management
system. Class implementations are typically made persistent in tables, and
instance attributes are typically made persistent in columns. This does not
mean, however, that an other persistence mechanism might not also be used.
Historically, they have been such things as ISAM ﬁles, network databases, or even
simple ﬁles.

a sub-
type of
embodied in
inheriting
from
a
generalization
of
an example of
a super-
type of (2+)
CLASS IMPLEMENTATION  TYPE
# Name
* Description
part of
made
persistent in
used by
made persistent in
used by
part
of
composed
of
the use
of
used as
an instance
of
embodied
in
composed
of
CLASS ELEMENT
# Sequence number
* Name
* Visibility
INSTANCE
ATTRIBUTE
CLASS
ATTRIBUTE
COLUMN
* Label
* Format
° Length
° Decimal places
* Mandatory indicator
° Default value
VIEW
* SQL expression
* Effective date
° Until date
CLASS IMPLEMENTATION
ARCHITECTURAL CLASS
APPLICATION CLASS
FOUNDATION CLASS
BUSINESS CLASS
OTHER PERSISTENCE 
MECHANISM
OBJECT
# Name
* Program code
DATA GROUP
TABLE
PERSISTENCE
MECHANISM
# Name
* Description
Fig. 2–37: Persistence class implementation.

110
DATA
Note that class implementations can made persistent in views. It is, after
all, common for an object-oriented class implementation to be derived from
someone’s view of a collection of tables.
Business Rule
In a relational environment, an instance attribute may be made persis-
tent only in a column. A class implementation may be made persistent
only in a data group.
Extensible Markup Language
The Extensible Markup Language (XML) is a language for describing and giving
structure to text and numeric data so that they can be transmitted from one place
to another. It makes use of tags (like HTML tags) that identify data and the
data’s relationship to other data. It is analogous to data modeling in that it gives
structure to data, but rather than being a graphic notation it is a means of labeling
data with text. The following is an example of XML used to describe a data record
that might be presented in a document.
<?XML version=“1.0”?>
<!–
**** Basket ****
–>
<PRODUCT>
<product_id>98756</product_id>
<product_name>basket</product_name>
<unit_of_measure>each</unit_of_measure>
<specification>
<variable>color</variable>
<value>blue</value>
</specification>
<specification>
<variable>size</variable>
<value>large</value>
</specification>
<specification></specification>
</specification>
</PRODUCT>

ROW FOUR: DATA DESIGN
111
Most of what you see is descriptive of structure. The only data elements are
the values shown in boldface. Around each data element are tags describing it.
Each tag is enclosed in <angle brackets>. Each tag is paired. The ﬁrst is a word
or phrase (for example, <PRODUCT>); the second, further down, has the same word
or phrase preceded by a right slash (for example, </PRODUCT>). According to the
rules of XML, an end tag is always required in order to specify a set of data,
although there may be no data between the beginning tag and end tag (e.g.,
<specification></specification>). A single tag can represent this, with the right
slash simply following the initial tag phrase (such as <specification/>).
Tags can be nested. In the previous example, the tag <PRODUCT> contains (among
others) the tag for <specification>, which in turn contains tags for <variable>
and <value>. The data model in Figure 2–38 shows that an xml document may be
composed of one or more xml tags, each of which in turn may also be composed
of yet more xml tags. Note the attribute “Tag” for xml tags, which contains the
word or phrase that is the tag for the element.
Note that the previous XML example, like all XML ﬁles, began with a standard
header that revealed the version of XML the document uses. That is, each xml
document is deﬁned in terms of the rules appropriate to the xml version it is an
example of.
You may have noticed that in the example <PRODUCT> was described by one
each of <product_id>, <product_name>, and <unit_of_measure>, but multiple occur-
rences of <specification>. There is nothing in XML by itself to determine which
tags should be used where, but this nesting structure can be controlled by a spe-
cialized XML document called a document type declaration (DTD). The DTD for
the example looks as follows.
<!DOCTYPE PRODUCT [
<!ELEMENT PRODUCT (product_id, product_name,
unit_of_measure?, specification*)>
<!ELEMENT product_id (#PCDATA)>
<!ELEMENT product_name (#PCDATA)>
<!ELEMENT unit_of_measure (#PCDATA)>
<!ELEMENT specification (variable, value)>
<!ELEMENT variable (#PCDATA)>
<!ELEMENT value (#PCDATA)>
]

112
DATA
XML 
DOCUMENT
# ID
* Name
° Description
XML VERSION
# Version number
* Date released
XML TAG
# Tag
* Description
XML 
CONTENT 
TAG
XML 
BLANK 
TAG
part of
part of
composed 
of
composed
of
an example
of
embodied 
in
Fig. 2–38: XML documents and elements.
Because the subject of the DOCUMENT is products, the doctype is called PRODUCT.
The ﬁrst ELEMENT of this speciﬁcation identiﬁes the ﬁrst tag (also PRODUCT), followed
by a list of the tags contained with in it (product_id, product_name, unit of
measure, and specification).
The question mark (?) following unit_of_measure means that whenever a
<PRODUCT> is speciﬁed there may be one <unit_of_measure> tag, but there may
be no more than one group following it. The asterisk (*) following speciﬁcation
means there may be one or more <specification> tag groups following <PRODUCT>,
or there may not. If there had been a plus sign (+) after any tag, that would mean
must be one or more. That is, the tag must appear after the parent tag, but it could

ROW FOUR: DATA DESIGN
113
appear multiple times. Absence of an asterisk or a question mark (as in “<product
id>” and “<product name>”) means that there must be one and only one value for
each occurrence of <PRODUCT>.
After the list of tags within PRODUCT, each tag gets its own ELEMENT line. In
most cases the argument with each is (#PCDATA), meaning simply that this tag will
describe data. Specification, on the other hand, has its own list of arguments,
“variable” and “value”, just as product did. Its tags are then listed as their own
elements.
Figure 2–39 shows that each xml document must be constrained by exactly
one document type declaration. (Actually, you can create an xml document
XML ELEMENT
# Tag
* Description
XML DOCUMENT 
TYPE DECLARATION
# ID
* Name
* Description
part of
composed of
an example 
of
an example
of
composed 
of
embodied 
in
composed of
constrained
by
a constraint
on
the sponsor
of
sponsored
by
part of
embodied
in
XML 
DOCUMENT
# ID
* Name
° Description
XML
VERSION
# Version number
* Date released
SEMANTIC 
COMMUNITY
# Name
° Description
part of
XML TAG
# Tag
* Description
XML 
CONTENT 
TAG
XML 
BLANK 
TAG
Fig. 2–39: XML document type declaration.

114
DATA
XML ELEMENT
# Tag
* Description
XML
ATTRIBUTE
VALUE
# Sequence number
* Value
XML ATTRIBUTE
# Sequence number
* Name
° Description
* Data type
* Required indicator
part of
composed
of
an example
of
an example of
embodied in
part of
composed
of
part
of
composed 
of
constrained by
a constraint on
for
evaluated
with
a qualifier
of
qualified
by
described
by
of
the sponsor
of
sponsored
by
embodied 
in
SEMANTIC 
COMMUNITY
XML DOCUMENT
TYPE
DECLARATION
# ID
* Name
* Description
XML DOCUMENT
# ID
* Name
° Description
XML
VERSION
# Version number
* Date released
XML TAG
# Tag
* Description
XML 
CONTENT 
TAG
XML 
BLANK 
TAG
part of
composed
of
Fig. 2–40: XML attributes.

ROW SIX: THE PRODUCTION SYSTEM
115
without a dtd, but it is not recommended.) Each document type declaration,
then, must be composed of one or more xml elements, where each xml element
may be embodied in one or more xml tags on real xml documents.
In addition to specifying data between beginning and ending tags, you can
specify values for XML attributes in the beginning tag. For example, an alternative
to the previous example might be the following.
<PRODUCT product_id=98756><\PRODUCT>
This would effectively “hard code” the document to be about product 98756. The
DTD speciﬁcation for that would look like this:
<!ELEMENT PRODUCT (#PCDATA)>
<!ATTLIST PRODUCT
product_id CDATA #REQUIRED>
In Figure 2–40, xml attribute is a qualiﬁer of an xml element. It is evaluated
with an xml attribute value for a tag that is part of an xml document.
XML is clearly a Row Four designer’s way of representing data. Its strength
is its ability to provide deﬁnitions for formats so that different organizations can
communicate with each other. But it is hierarchical, so it is limited in its ability to
express concepts. If it is only used to send batches of data, this is not a problem,
but use of XML has to take into account this fundamental limitation.∗
What is reasonable to do is to map the tags to elements in a conceptual data
model, so that the implications of their relationships can be fully understood.
Figure 2–41 shows how one or more xml tag deﬁnitions deﬁne either an xml
element (from a DTD) or an xml tag using an attribute or an entity class.
Similarly, an xml content tag may be the container of one or more business
terms via an xml element content.
ROW SIX: THE PRODUCTION SYSTEM
To model Row Five, the builder’s view, would require intricate metamodels
describing the inner workings of Oracle, DB2, SQL Server, Sybase, and the rest.
That is beyond the scope of this book.
∗Some people are indeed creating databases using XML. This is very worrisome.

XML TAG DEFINITION
# ID
* Effective date
° Until date
SYMBOL
# Sequence number
* Effective date
° Until date
° Comment
BUSINESS TERM
used as
of
provided by
the use of
the use of
of
of
ICON
the use
of
used as
represented by
the basis
for
the owner
of
in
in the
language
of
to represent
SYMBOL
CONTEXT
# Name
* Description
SPEECH
COMMUNITY
SIGNIFIER
# ID
PHRASE
° Phrase text
BUSINESS CONCEPT
# ID
* Name
* Primary definition
FACT TYPE ELEMENT
CHARACTERISTIC ASSIGNMENT
* Effective date
° Until date
* Essential indicator
* Delimiting indicator
ATTRIBUTE
° Default value
° Formula text
° Cardinality indicator
* Default optionality
ENTITY
CLASS
a super-
type of (2+)
a sub-
type of
XML ELEMENT CONTENT
# ID
* Effective date
° Until date
about
described
by
used 
in
used in
described
by
descriptive
of
descriptive
of
GRAPHIC
° Graphic blob
WORD
* Word text
° Pronunciation guide
the shared
understanding
of
Fig. 2–41: XML element deﬁnitions.
116

defined by
defined by
XML ATTRIBUTE
# Sequence number
* Name
° Description
* Data type
* Required indicator
XML DOCUMENT
TYPE DECLARATION
# ID
* Name
* Description
XML DOCUMENT
# ID
* Name
° Description
XML ATTRIBUTE
VALUE
# Sequence number
* Value
XML TAG
# Tag
* Description
XML CONTENT 
TAG
XML BLANK
TAG
XML ELEMENT
# Tag
* Description
XML VERSION
# Version number
* Date released
of
evaluated
with
described
by
embodied
in
embodied
in
a constraint
on
the sponsor
of
an
example
of
constrained
by
composed
of
composed
of
sponsored
by
part of
composed
of
sharing in the
understanding of
part
of
composed
of
part of
an
example
of
a qualifier
of
part of
qualified by
for
SEMANTIC 
COMMUNITY
container of
container of
Fig. 2–41: continued.
117

PERSISTENCE MECHANISM
# Name
* Description
COLUMN
* Label
* Format
° Length
° Decimal places
* Mandatory indicator
° Default value
VIEW
* SQL expression
* Effective date
° Until date
TABLE
DATA GROUP
implemented as
the basis
for
in
in
part of
part of
based
on
composed
of
a reference
for
a reference
for
composed
of
implementation
of
part of
part of
composed 
 of
composed
of
composed
of
part of
DATA GROUP COLLECTION
# Name
° Purpose
APPLICATION SYSTEM
# Name
* Description
CELL INSTANCE
° Date last updated
ROW
INSTANCE
# ID
TABLE INSTANCE
# ID
* Name
* Date created
COLUMN
INSTANCE
# ID
* Name
Fig. 2–42: Table instances.

ROW SIX: THE PRODUCTION SYSTEM
119
What is useful, however, is to take a moment to look at the model of a built,
existing database. This is shown in Figure 2–42. Each data group is implemented
in one or more table instances, which by deﬁnition must each be composed
of row instances and column instances. The intersection of one row and one
column is a cell instance. Each datum in the database corresponds to one cell
instance.
As shown in Figure 2–43, the collections of cells that constitute table
instances must reside somewhere. In fact, they are kept in a database instance,
which is a kind of virtual site (described further in Chapter Four). Each database
instance and table instance must in turn be created on a program copy of a
database management system (DBMS).
A database management system is created by a company, such as Oracle,
Microsoft, IBM, Sybase, or the like. Note that database management systems
change over time, and when a program copy of a new one is installed this brings
with it a new set of database instances and table instances. The new set of
table instances can still be an implementation of the older data group, just as
the new set of columns can still be based on the older column designs.
Business Rule
A database instance must be created only on a program copy that is
of a database management system.

owned by
SITE
# Name
* Description
VIRTUAL SITE
* Creation date
° Removal date
DATABASE INSTANCE
# ID
* Creation date
° Removal date
PROGRAM COPY
# Sequence number
° Name
the site of
created on
of
replicated in
DATABASE MANAGEMENT
SYSTEM
created
by
PROGRAM MODULE
# ID
* Name
* Description
* Version
° Scenario
° Program code
EXECUTABLE MODULE
the location of
the location of
in
in
part of
kept in
part of
based 
on
composed
of
a reference
for
a reference
for
composed
of
an
implementation
of
CELL INSTANCE
° Date last updated
ROW
INSTANCE
# ID
TABLE INSTANCE
# ID
* Name
* Date created
° Date removed
COLUMN
INSTANCE
# ID
* Name
120

composed of
responsible
for
responsible
for
owned by
DATA GROUP
COLLECTION
# Name
° Purpose
APPLICATION SYSTEM
# Name
* Description
COMPANY
* Date of incorporation
the creator
of
PARTY
# ID
PERSISTENCE MECHANISM
# Name
* Description
VIEW
* SQL expression
* Effective date
° Until date
COLUMN
* Label
* Format
° Length
° Decimal places
* Mandatory indr
° Default value
TABLE
DATA GROUP
implemented
as
the basis 
for
part
of
part of
composed 
of
ORGANIZATION
* Organization name
* Description
Fig. 2–43: The physical database.
121

This Page Intentionally Left Blank

3
ACTIVITIES, FUNCTIONS,
AND PROCESSES
The test of a ﬁrst-rate intelligence is the ability to hold two opposed ideas in the mind at the same
time, and still retain the ability to function.
—F. Scott Fitzgerald
Home computers are being called upon to perform many new functions, including the consumption
of homework formerly eaten by the dog.
—Doug Larson
Cats are intended to teach us that not everything in nature has a function.
—Unknown
ACTIVITIES AND THE ARCHITECTURE FRAMEWORK
The Activities column (see Figure 3–1) of the architecture framework is concerned
with how the enterprise carries out its work.
–
The planner looks at the vision and mission of the enterprise and lays out an
approach to how the organization will function.
–
The business owner sees the overall functions of the business, as well as the
actual processes that occupy its daily life, in terms of the mechanisms used to
carry them out, the people involved, and the way the two communicate.
–
The architect sees processes as expressions of business function, without regard
to the systems and other mechanisms required to carry them out. The architect
then organizes them in terms of responses to external events.
–
The designer is concerned with the structure of the programs to be created to
assist in carrying out the processes.
–
The builder is deeply involved in the intricacies of programming languages
and the other technologies required to create the systems.
–
The functioning system is the inventory of programs and other technologies
and the processes for keeping track of their use.
123

124
ACTIVITIES, FUNCTIONS, AND PROCESSES
Data
(What)
List of things
important to
the enterprise
List of
functions the
enterprise
performs
List of
enterprise
locations
Organization
approaches
Language,
divergent
data model
Business
process
model
Logistics
network
Organization
chart
State / 
transition
diagram
Business
strategies,
tactics,
policies, rules
Convergent
e/r model
Essential
data ﬂow
diagram
Locations
of roles
The 
viable system,
use cases
Entity 
Life
History
Business
rule
model
Database
design
System design,
program
structure
Hardware,
software
distribution
User
interface,
security
design
Event
processing
Business
rule
design
Physical
storage
design
Detailed
program
design
Network
architecture,
protocols
Screens,
security coding
Timing
deﬁnitions
Rule
speciﬁcation
program
logic
Databases
Program
inventory,
logs
Communications
facilities
Trained
people
Business
events
Enforced
rules
Objectives/ 
Scope
(Planner’s
View)
Enterprise
Model
(Business
Owner’s
View)
Model of
Fundamental
Concepts
(Architect’s
View)
Technology
Model
(Designer’s
View)
Detailed
Representation
(Builder’s 
View)
Functioning
System
Activities
(How)
Locations
(Where)
(Working System)
People
(Who)
Time
(When)
Motivation
(Why)
Business
master
schedule
Business
vision
and mission
Fig. 3–1: Activities column.

DEFINITIONS
125
Figure 3–1 shows the framework with the cells to be addressed by this chapter
highlighted. These cells represent the views of the business owner, the architect,
the designer, and the functioning system.
DEFINITIONS
In his original framework, John Zachman labeled Column Two Function. In
both the original data ﬂow diagram notations and later in business process
re-engineering, what a company does was called a process. In common conver-
sation, we talk of activities. Indeed, in common conversation all three terms are
bandied about as though they were synonymous. For our purposes, however, it is
important to make distinctions among these terms.
–
An activity: the most general super-type that encompasses all the following
terms.
–
A function is a type of activity to carry out an objective of the enterprise. It
is described solely in terms of what it is intended to accomplish, and without
regard to the technology used to carry it out or who is to perform it.∗This
is also described without reference to time. Functions represent a conceptual
version of the Business Owner’s View in Row Two. They begin from a global
perspective (What is the mission of the enterprise?) and may be broken down
to reveal a considerable amount of detail.
–
A process is a type of activity performed by the enterprise to produce a speciﬁc
output or to achieve a goal. It may or may not be described in terms of the
mechanisms used or the parties performing it. A set of processes is usually
described in sequence.
A business process describes an activity as carried out by business peo-
ple, including the mechanisms involved. This is in the domain of Row Two,
the Business Owner’s View. Alternatively, the Architect in Row Three sees a
system process that is about the data transformations involved in carrying out
∗Note that this is different from the colloquial reference to system functions.

126
ACTIVITIES, FUNCTIONS, AND PROCESSES
ACTIVITY
# ID
* Name
° Description
* Date established
° Date discontinued
BUSINESS PROCESS
° Scheduled start date
° Scheduled end date
° Actual start date
° Actual end date
FUNCTION
part of
composed
of
part of
composed
of
Fig. 3–2: Activities, functions, and processes.
a business process.∗In either case, processes can be viewed at a high level or
in atomic detail.
Figure 3–2 shows the Row Two (Business Owner’s View) of activity, with
function and business process as sub-types. More about this later.
The terms are compared in Table 3–1. For this book, the term activity will
be used as the title of the Architecture Framework column, in that it encom-
passes all of these concepts, although in this model activity will be distinguished
from system process, which is described in the Row Three section (see pages 142
through 157).
∗Note that in spite of the use of the word system to distinguish what are Row Three activities
from the business processes of the Business Owner’s View this is still not describing any particular
computer system technology. It is only concerned with what processing of data might be carried
out, and remains completely independent of any particular technology that might be used.

TYPES OF PROCESS MODELS
127
Table 3–1: Activity types.
Term
Framework row
With mechanisms and parties?
In sequence?
Function
2
No
No
Business Process
2
Yes
Yes
System Process
3
No
Yes
Activity
2,3
Yes/no
Yes/no
This book primarily discusses functions and business processes (see Figure 3–2)
when talking about the Business Owner’s View and system processes when talking
about the Architect’s View.
TYPES OF PROCESS MODELS
One difﬁculty in trying to describe activity modeling is that there are so many
different ways to do it! To be sure, the underlying concepts are pretty universal,
but you would never know it to look at the variety of techniques available.
The ﬁrst type of process model in general use was introduced almost simulta-
neously by Tom DeMarco [DeMarco 1978] and by Chris Gane and Trish Sarson
[Gane and Sarson 1979]. This was the data ﬂow diagram, which provided a means
of representing the ﬂows of data among processes, external entities (the ultimate
sources and destinations of data), and data stores (where data could reside tem-
porarily between processes). It included the ability to decompose processes into
more detail. In addition, the authors made a distinction between the physical data
ﬂow diagram and the logical data ﬂow diagram. Mr. DeMarco extended these
ideas to describe the process of moving from a current physical data ﬂow diagram
to a logical data ﬂow diagram to a new physical data ﬂow diagram.
Mr. DeMarco was a little fuzzy, however, as to how one distinguished a phys-
ical data ﬂow diagram from a logical one. It was not until James McMenamin
and John Palmer published Essential Systems Analysis [McMenamin and Palmer
1984] that this process was formalized. Messrs. McMenamin and Palmer came
up with the idea of the essential data ﬂow diagram. Its characteristic is that it
consists of essential processes, which are deﬁned to be the complete responses to
an external event. Essential processes, in turn, are subdivided into fundamental

128
ACTIVITIES, FUNCTIONS, AND PROCESSES
processes, which carry out the work of the enterprise, and custodial processes,
which maintain the data required by fundamental processes.
In the early 1990s the subject of business process re-engineering became pop-
ular and resulted in the rise of something Geary Rummler and Alan Brache called
a process map [Rummler and Brache 1995]. These are similar to physical data
ﬂow diagrams, but they organize processes according to the departments or peo-
ple who perform them. They focus less on the data being communicated than
on the sequence of tasks expressed in common language, and instead of being
concerned with physical and logical data ﬂows they simply reﬂect the structure
of tasks that currently exist (“as is”) and that are planned as the result of the
analysis (“to be”).
Shortly after this, use cases became popular in the object-oriented world. This
technique was originally described by Ivar Jacobson [Jacobson 1992] and then
elaborated on by, among others, Alistair Cockburn [Cockburn 2000]. These are
also similar to data ﬂow diagrams, in that they have communications between
external entities (here called “actors”) and processes, but the assumption is that
the processes involved represent computer systems (typically shown only as a
single process representing the entire system). The content of data ﬂows are
not documented, and rather than being decomposed into lower-level detail, these
details are simply described in text as “steps”. There is no notion of storing data
in intermediate data stores.
Meanwhile, back when Ms. Sarson and Messrs. DeMarco and Gane were
inventing data ﬂow diagrams, the federal government was embarking on its Inte-
grated Computer Aided Manufacturing (ICAM) project. This was an approach to
designing and building aircraft. Out of this work came some modeling techniques
that were later codiﬁed by ITT as a Structured Analysis and Design Technique
(SADT). In 1981, the Air Force recognized the value of SADT and requested a
version for the Air Force. This was the source of the IDEF series of modeling
techniques.∗
“The full IDEF set (IDEF0, IDEF1, and IDEF3—later expanded to include
IDEF1X, IDEF4 and IDEF5)∗∗was designed to support systems analysis, where
a ‘system’ may be a computer system, a non-computerized process, or an entire
enterprise” [Feldmann 1998, p. 7]. IDEF1 is a general approach to modeling data,
∗IDEF stands for ICAM Deﬁnition.
∗∗For a very good summary of all IDEF techniques, see the web site sponsored by Knowledge Based
Systems at http://www.idef.com [Knowledge Based Systems 2005].

ROW TWO: FUNCTIONS AND BUSINESS PROCESSES
129
whereas IDEF1X speciﬁcally addresses the design of relational databases. IDEF4 is
a way of looking at object-oriented design. IDEF5 provides a method that assists
in the creation, modiﬁcation, and maintenance of ontologies.
IDEF3 is an approach to describing ﬂows in terms of decisions made, whereas
IDEF0 is for simply laying out an enterprise’s functions. According to the IDEF
web site, “IDEF0 is a method designed to model the decisions, actions, and
activities of an organization or system” [KBSI 2005]. In this sense, the idea is that
it is modeling functions rather than processes. The same site describes IDEF3 as
providing “a mechanism for collecting and documenting processes. IDEF3 captures
precedence and causality relations between situations and events in a form natu-
ral to domain experts by providing a structured method for expressing knowledge
about how a system, process, or organization works” [KBSI 2005].
In 1998, Clarence Feldmann published The Practical Guide to Business Process
Re-engineering Using IDEF0 [Feldmann 1998], which is a very clear description
of IDEF0. It discusses “actions”, however, which leaves the subtler distinctions
between function and process unresolved.
IDEF0 is very similar to data ﬂow diagramming in its discipline, although
it does not explicitly document the external entities or data stores involved. It
models the logical structure of each process, but it includes the ability in each
case to add an arrow describing the mechanism used for the process. In addition,
unlike any other technique it distinguishes between data used by the process and
controls that affect it and trigger it.
One of the model types provided with UML is a process model [Rumbaugh
et al. 1999]. This is organized like a BPR process model, in terms of who is doing
the processing, and it does have data stores in the form of “objects”. It also has
an explicit symbol for representing processes occurring in parallel.
Table 3–2 shows the techniques just described and their primary characteris-
tics. It is the objective of the metamodel in this book to encompass nearly all
concepts revealed by all of these techniques. By necessity, each entity class can
have only one name (and many of them come from data ﬂow diagramming), but
the intention is to provide a structure that can accommodate all approaches.
ROW TWO: FUNCTIONS AND BUSINESS PROCESSES
The sections that follow explore functions and business processes.

130
ACTIVITIES, FUNCTIONS, AND PROCESSES
Table 3–2: Comparison of techniques.
Framework
External
Identify
Swim
Decompose
Technique
row
Mechanisms?
entities?
controls?
lanes?
processes?
Physical DFD
2,4
Yes
Yes
No
No
Yes
Logical/essential
3
No
Yes
No
No
Yes
DFD
Process Map
2
Yes
Yes
No
Yes
Yes
UML Process
3,4
No
No
(Use state
Yes
No
Model
chart instead)
Use Case
3,4
No
Yes
Yes
No
No
IDEF0
2,3,4
Yes
No
Yes
No
Yes
Functions
A function is an activity performed by the business, described without regard
to any mechanisms, sequence, or actors involved with doing it. Each function is
intended to carry out the mission of the business, which is why they are usually
presented in hierarchical form, with the mission at the top. That is, underneath the
mission are typically presented between ﬁve and nine functions to carry it out.
Each of these, then, is further decomposed into another ﬁve to nine functions.
The process is repeated until one arrives at a set of elementary business functions
that constitute the bottom of the hierarchy.
An elementary business function is deﬁned as a function at the lowest level
of detail. This is a function that once started cannot be stopped without changing
the nature of the function [Barker and Longman 1992, p. 40]. A sample function
hierarchy diagram for a public library is shown in Figure 3–3.∗
The mission of an organization differs from its functions, in that the former
sets the tone for everything the company does. More than describing just a thing
to be done, it is a statement of the overall method for the ongoing operation of the
organization. Where functions tend to be terse verb-object combinations (“Hire
employees”), the mission tends to be a complex sentence not only describing what
the organization is out to do (“Provide donuts to the community”) but including
∗This example is taken from the author’s Requirements Analysis: From Business Views to
Architecture [Hay 2003].

ROW TWO: FUNCTIONS AND BUSINESS PROCESSES
131
Provide materials and services for the information, learning,
and popular reading needs for all citizens and organizations
of Dinosaur County.
Mission
Manage patron accounts
1.0
Check out books to patrons
2.0
Acquire books and other materials
3.0
Manage library facilities
4.0
Conduct public service programs
5.0
Acquire books and other materials
3.0
Choose book to order
3.1
Order set of books
3.2
Confirm order
3.3
Receive each book
3.4
Catalogue book
3.5
Fig. 3–3: Sample function hierarchy.
descriptions of why it wants to do that. It includes value statements such as
“. . .thereby increasing that community’s joy and pleasure”.
In the case of the library whose function hierarchy is shown in Figure 3–3,
its mission is to “Provide materials and services for the information, learning,

132
ACTIVITIES, FUNCTIONS, AND PROCESSES
ELEMENTARY 
BUSINESS 
FUNCTION
OTHER 
FUNCTION
BUSINESS PROCESS
° Scheduled start date
° Scheduled end date
° Actual start date
° Actual end date
ACTIVITY
# ID
* Name
° Description
* Date established
° Date discontinued
FUNCTION
part
of
composed
of
to carry
out
carried
out via
to implement
implemented via
MISSION
Fig. 3–4: Functions.
and popular reading needs for all citizens and organizations of Dinosaur County.”
More succinctly, functions include “Manage patron accounts”, “Check out books
to patrons”, and so forth. Note that “Acquire books and other materials” is further
broken down into ﬁve sub-functions.
Figure 3–4 shows the metamodel of function as a hierarchy, starting with the
mission of the organization at the top, and numerous business functions under-
neath it, culminating with a set of elementary business functions at the bottom.
That is, a mission may be carried out via one or more functions. Each other
function (that is, each function that is not an elementary business function)
may then be composed of one or more other functions or elementary business
functions.
Each function, then, must be to carry out either one mission or one other
function. Note that mission is gray. It is here borrowed from Chapter Seven.

ROW TWO: FUNCTIONS AND BUSINESS PROCESSES
133
Previously, it was stated that “between ﬁve and nine” functions are to appear at
each level. These numbers are not arrived at by accident: In a fascinating 1956
study, “The Magical Number Seven, Plus or Minus Two: Some Limits on Our
Capacity for Processing Information” [Miller 1956], G. A. Miller postulated that
the human brain can only hold seven (plus or minus two) “things” in active
memory.
This is why we used to be able to remember seven-digit phone numbers, but
now that area codes are meaningless we have a terrible time learning our friends’
new 10-digit numbers. When confronted with a display of two or three points in
a presentation, we see it as trivial.∗When confronted with 10 or more points, it
looks complex. In short, to make a function hierarchy understandable each row
in the hierarchy should have only seven plus or minus two functions.
It is possible to establish a hierarchy of functions, where every function meets
the standards described previously (no mechanisms or actors, and no sequence)
all the way to elementary business functions. As you get further down, however,
the temptation is to describe the actual business processes being carried out
to implement each of these functions. This is also shown in Figure 3–4.
Business Processes
A business process is an activity that transforms either physical materials or data
from one state into another. As the output of one process is typically used by the
next, a sequence is implied. It is possible also to describe the particular mechanisms
(forms, equipment, computer systems, and so on) used to carry out each process.
Figure 3–5 shows that a function may be implemented via one or more
business processes. As with functions, each other business process may be
composed of one or more other business processes or elementary business
processes.
By deﬁnition, an elementary business process is at the bottom of the tree,
so it may not be composed of any other business processes. Note that although
each function must be to carry out either a mission or an other function a
business process may exist by itself.
Figure 3–5 shows that a business process differs from a function in that it
may be the user of one or more mechanism types, where a mechanism type is
∗After all, trivial comes from the Latin words for “three” and “way”.

134
ACTIVITIES, FUNCTIONS, AND PROCESSES
ELEMENTARY 
BUSINESS 
PROCESS
OTHER 
BUSINESS 
PROCESS
BUSINESS PROCESS
° Scheduled start date
° Scheduled end date
° Actual start date
° Actual end date
ACTIVITY
# ID
* Name
° Description
* Date established
° Date discontinued
FUNCTION
ELEMENTARY 
BUSINESS 
FUNCTION
OTHER FUNCTION
composed
of
user of
used
in
the use
of
used as
implemented via
to
implement
composed of
part of
part of
to carry
out
carried out
via
MECHANISM
# Effective date
° Expiry date
MECHANISM
TYPE
# ID
* Name
° Description
° Technology
OTHER
MECHANISM
SYSTEM
MISSION
Fig. 3–5: Business processes.

ROW TWO: FUNCTIONS AND BUSINESS PROCESSES
135
the deﬁnition of a system, form, or some other tangible tool required to carry out
the business process. Because of the many-to-many nature of that relationship,
mechanism is inserted to represent the fact that a particular business process
(such as “take order”) is the user of a particular mechanism type (such as the
“Terminal attached to the Framis System”).
Business process also differs from function in that a business process may
be the source of one or more internal business eventtypes (shown in Figure 3–6),
ELEMENTARY 
BUSINESS 
PROCESS
OTHER 
BUSINESS 
PROCESS
BUSINESS PROCESS
° Scheduled start date
° Scheduled end date
° Actual start date
° Actual end date
ACTIVITY
# ID
* Name
° Description
* Date established
° Date discontinued
MECHANISM
# Effective date
° Expiry date
composed of
part of
to
implement
user
of
the trigger of
triggered by
the source
of
the action of
the use of
used in
used as
implemented via
FUNCTION
ELEMENTARY 
BUSINESS 
FUNCTION
OTHER FUNCTION
composed of
part of
to carry
out
carried out
via
INTERNAL
BUSINESS EVENT 
TYPE
* Position flag
° Lag quantity
° Lag unit of measure
MISSION
MECHANISM TYPE
# ID
* Name
° Description
° Technology
OTHER
MECHANISM
SYSTEM
Fig. 3–6: Decisions and events.

136
ACTIVITIES, FUNCTIONS, AND PROCESSES
each of which must then be the trigger of another business process. (Business
event types are deﬁned and discussed in detail in Chapter Six.)
Note that although some process modeling techniques have a separate symbol
(usually a diamond shape) to represent the decision point this is unnecessary
in the metamodel. As long as we can represent one or more internal business
event types as the action of a business process, the alternative decision values are
implicit in the deﬁnition of the business process itself. For example, an instance
of the business process (“Evaluate credit rating”) may be the cause of either the
internal business event type “loan granted” or the internal business event type
“loan refused”. “Loan granted” will then be the trigger of the business process
to process the loan, and “loan refused” will be the trigger of the business process
to “close the application”.
Because events are going to be an important concept in the pages to follow, it is
important to realize that in a metamodel we are only concerned with event types,
not actual events. That is, a business event type is the deﬁnition of a category
of events: “Receive order from a customer on a date”, not “Receive order from
Smith Co. on July 18, 2005.” Actual events are the subject of the business model,
not the metamodel.
By deﬁnition, both a business event type and a business event represent an
instant in time, whereas a business process takes place over a period in time.
For this reason, when a business process is the decision to trigger a business
event type only a speciﬁed point in the business process is involved. This is
identiﬁed by the “Position ﬂag”, an attribute of business event type. It can have
the values “Start”, “End”, or “Lag”, meaning the event takes place at the start of
the business process, the end of it, or at some speciﬁed point during it. If the
value of “Position ﬂag” is “Lag”, then the attribute “Lag quantity” tells how far
into the process constitutes the event. “Lag unit of measure” deﬁnes whether the
Lag quantity is in “days”, “weeks”, or even “hours”.
Figure 3–7 introduces the essential business process, which is deﬁned as the
collection of elementary business processes that constitutes a complete response
to an external business event type. As discussed in more detail in Chapter Six,
an external business event type is something that occurs in the world, outside
the control of the enterprise. This may not only be something that happens, such
as the receipt of an order; it may simply be the passage of time, as in “the end of
the quarter” or “the ﬁrst day of the month”. In this case, the “Temporal indicator”
attribute of external business event type must be set to “True”. This is distinct

ELEMENTARY 
BUSINESS 
PROCESS
BUSINESS PROCESS
° Scheduled start date
° Scheduled end date
° Actual start date
° Actual end date
ACTIVITY
# ID
* Name
° Description
* Date established
° Date discontinued
FUNCTION
ELEMENTARY 
BUSINESS 
FUNCTION
OTHER FUNCTION
composed
of
composed
of
part of
to
implement
implemented
via
part of
to carry
out
INTERNAL
BUSINESS EVENT 
TYPE
* Position flag
° Lag quantity
° Lag unit of measure
MECHANISM
# Effective date
° Expiry date
the use of
used in
user of
the basis
for
the trigger
of
triggered
by
based
on
composed of
part of
the source of
used as
BUSINESS EVENT TYPE
# ID
* Name
* Description
EXTERNAL 
BUSINESS EVENT 
TYPE
* Temporal indicator
ESSENTIAL BUSINESS PROCESS
FUNDAMENTAL 
BUSINESS 
PROCESS
CUSTODIAL
BUSINESS 
PROCESS
the action
of
OTHER BUSINESS 
PROCESS
MECHANISM TYPE
# ID
* Name
° Description
° Technology
OTHER
MECHANISM
SYSTEM
carried
out via
MISSION
Fig. 3–7: Essential business processes.

138
ACTIVITIES, FUNCTIONS, AND PROCESSES
from an internal business event type, which is the action of another business
process within the enterprise itself.
An essential business process must be either a fundamental business
process (which is directly to implement a business function) or a custodial
business process, which provides data required for a fundamental business
process. For example, the process to “Maintain product deﬁnitions” is a custo-
dial business function required to support the fundamental business process,
“Sell products”. An internal event type must be the trigger of any type of
business process, but an external event type must speciﬁcally be the basis for
(deﬁning) an essential business process.
Sample Process Model
Figure 3–8 shows a detailed process model for functions 3.4 and 3.5 of the library
described in the function hierarchy model shown previously. It is organized in
terms of “swim lanes” so that all processes carried out by the same department
are in the same swim lane. In this example, the Receiving Department work begins
with the event “Receipt of book”. The department then conﬁrms that the shipment
is correct, based on comparison with the “blue” copy of a purchase order on ﬁle.
(Presumably, when the books were ordered the blue copy of the purchase order
was sent to the Receiving department for this purpose.) The book is handed off to
the Cataloguing department, which in turn assigns a Dewey Decimal number to
it, thereby identifying its classiﬁcation—and from that its proper location in the
library. The book is then added to the shelves, and a catalogue card is prepared,
describing the book and recording its Dewey number.∗
The Receiving department also marks the blue purchase order copy “Received”
and sends it to the Accounts Payable department. (This is equivalent to sending
a message “Book received”.) When that department subsequently receives an
invoice from the vendor, it pays for the book. Figure 3–8 shows three elementary
business processes.
–
Conﬁrm title, quantity
–
Classify book
–
Pay invoice
∗Yes, this is an old library, with paper purchase orders and a card catalogue. It seems ripe for some
systems updating, yes?

ROW TWO: FUNCTIONS AND BUSINESS PROCESSES
139
Accounts
payable
Receiving
Cataloguing
Receipt
of invoice
Receipt
of book
Pay
invoice
Held for
invoice
Confirm
title,
quantity
Invoice
Payment
Marked
“Blue”
order
Marked
“Blue”
order
“Book
received”
Pending
orders
“Blue”
order
Receipt
of book
Receive
book
Roll up to
“Essential”
Business
Process
Pending
orders
“Blue”
order
Classify
book
Book
on shelf
Updated
Card
Catalogue
Book
card
Classified
book
Book
Book
Book on
shelf
Held for
invoice
Updated
Card
Catalogue
Marked
“Blue”
order
(received
book)
(confirmed
book)
Fig. 3–8: Sample Business Process Model.
In addition, four data stores are shown:
–
Pending orders
–
Held for invoice
–
Book on shelf
–
Updated Card Catalogue

140
ACTIVITIES, FUNCTIONS, AND PROCESSES
All of these elements, except for the two concerning invoices, can be rolled up into
the essential business process “Receive each book”. The controlling external
business event type in this case is “Receipt of book”. “Pay invoice” is not part
of this essential business process, because it is not triggered by the “Receipt of
book” event. Instead, it is triggered by a combination of the external event type
“Receipt of invoice” and the internal event type “Book received”.
In addition to external event types, other business processes within the
organization often trigger elementary business processes and other business
processes. These triggerings (like the message “Book received”, described pre-
viously) are examples of internal business event types. That is, these describe
events internal to the enterprise and under its control.
Motivating Business Processes
In Chapter Seven, we will learn about the means and ends that are the foundation
of a company’s motivation. It is useful to understand these concepts here, however,
at least to some extent. In that chapter you will learn that the means by which an
enterprise can achieve its objectives can be either a mission or a course of action.
In this case, a course of action must be either a strategy or a tactic.
As shown in Figure 3–9, it is important to note that these means have an
effect on business processes. Predominant among the possible effects is an effort
invoked by a course of action through the use of a business process to achieve
a desired result.
For example, the library’s objective of increasing circulation by 10% this year
may be achieved via an effort that is invoked by the tactic of “increasing the
advertising budget” through the use of the business process of “Place advertise-
ments in the local newspaper”. The most signiﬁcant type of effort is the project,
which in most companies is a unit of work and accomplishments. Often, these are
grouped into an overall program, which encapsulates the effort of a year or so.
Access Roles
Chapter Five describes the effect of people and organizations have on (as well
as the roles they play within) various parts of the metamodel. There, you will
see a more complex model showing how people are assigned to positions, along
with the responsibilities that accompany those positions, but a couple of the
deﬁnitions should sufﬁce for our purposes here. Chapter Two introduced party,

BUSINESS PROCESS
° Scheduled start date
° Scheduled end date
° Actual start date
° Actual end date
ACTIVITY
# ID
* Name
° Description
* Date established
° Date discontinued
composed
of
composed
of
part
of
to
implement
implemented via
EXTERNAL 
BUSINESS 
EVENT TYPE
INTERNAL
BUSINESS EVENT 
TYPE
* Position flag
° Lag quantity
° Lag unit of measure
MECHANISM
# Effective date
° Expiry date
used in
the use of
user of
the trigger
of
triggered
by
part of
composed of
employed in
the source
of
based
on
used as
ELEMENTARY 
BUSINESS 
PROCESS
BUSINESS EVENT TYPE
# ID
* Name
* Description
the action
of
the basis
for
OTHER BUSINESS 
PROCESS
FUNDAMENTAL 
BUSINESS 
PROCESS
CUSTODIAL 
BUSINESS 
PROCESS
ESSENTIAL BUSINESS PROCESS
MECHANISM TYPE
# ID
* Name
° Description
° Technology
OTHER
MECHANISM
SYSTEM
FUNCTION
ELEMENTARY 
BUSINESS 
FUNCTION
OTHER FUNCTION
part of
to carry out
carried out
via
COURSE OF ACTION
TACTIC
STRATEGY
implementer
of
implemented
by
composed
of
invoked via
part
of
implemented
via
to carry
out
MISSION
EFFORT
° Scheduled start date
° Scheduled end date
OTHER EFFORT
through the use of
PROJECT
part of
part of
composed of
to achieve
invoked
by
composed of
achieved via
DESIRED RESULT
OBJECTIVE
GOAL
quantifier of
quantified by
composed of
part of
PROGRAM
Fig. 3–9: Efforts.

142
ACTIVITIES, FUNCTIONS, AND PROCESSES
which is a person or organization of interest to the enterprise. Position is a
speciﬁc set of responsibilities deﬁned by an organization (such as a department)
for carrying out its business.
Figure 3–10 shows that either a party (a person or an organization) or a
deﬁned position may be the player of one or more access roles for a business
process. This addresses the “swim lanes” of the process model. An access role
is simply the fact that a party or a position (or other dimensions of position,
but more on that in Chapter Five∗) is in some way involved in some aspect of
the enterprise. In this context, an access role must be a management role, a
speciﬁcation role, or a permission role, or it may be on other access role.
Speciﬁcally:
–
A management role is about the party or position that manages an activity.
–
A speciﬁcation role describes how a party or postion is responsible for
specifying exactly what the activity, the effort, or the means is.
–
A permission role asserts that a party or position is permitted or prohibited
from participating in the business process.
In the previous example, the position “Cataloguer” (that is, the responsibility of
the organization “Catalogue Department”) is the player of a management role
for the elementary business process “Book classiﬁed”.
ROW THREE: PROCESSING DATA
If business processes describe what the business does, how do we describe the
corresponding data processes that support those activities? These “data processes”
(herein called system processes) are described in detail in this section. Again,
remember that by “system” is meant only that it is deﬁned with the rigor that
will be necessary to automate it. This makes its deﬁnitions more rigorous than
the “business processes” described for the business owner’s perspective. A system
process is not concerned with any technology that might be employed.
∗Chapter Five will show that access role is granted to (for) a wide variety of elements throughout
the model, not just business process. It is also played by a wide variety of actors, not just party
and position.

BUSINESS PROCESS
° Scheduled start date
° Scheduled end date
° Actual start date
° Actual end date
DESIRED RESULT
ACCESS ROLE
# ID
* Effective date
° Until date
* Description
ACTIVITY
# ID
* Name
° Description
* Date established
° Date discontinued
FUNCTION
MEANS
# Name
* Description
* Effective date
° Until date
COURSE OF ACTION
TACTIC
composed
of
part
of
implemented
by
implemented
via
implementer
of
to carry
out
quantifier of
composed of
part of
the
source
of
for
managed
via
managed
via
through
the use of
for
for
played by
quantified
by
MANAGEMENT 
ROLE
PERMISSION 
ROLE
OTHER ACCESS
ROLE
SPECIFICATION 
ROLE
EFFORT
° Scheduled start date
° Scheduled end date
OTHER 
EFFORT
PROJECT
PROGRAM
part of
composed
of
employed in
to implement
to carry
out
implemented via
POSITION
# Name
* Description
the 
responsibility
of
managed
via
player
of
achieved via
to achieve
of
composed of
part of
OBJECTIVE
GOAL
TACTIC
STRATEGY
MISSION
carried out
via
PARTY
# ID
PERSON
* Given name
° Middle initial
* Surname
ORGANIZATION
* Organization name
* Description
played
by
player of
responsible
for
Fig. 3–10: Access roles.

144
ACTIVITIES, FUNCTIONS, AND PROCESSES
A Data Flow Diagram
A venerable and still commonly used model for describing the structure of system
processes and their communications with each other is the data ﬂow diagram.
Figure 3–11 displays a data ﬂow diagram.∗This diagram differs from the Row Two
process model described previously (Figure 3–8) in several ways. First, it has more
data details, speciﬁcally describing the content of each data ﬂow and including a
process for “Record arrival of shipment”.
Second, it is not represented in terms of the forms and mechanisms involved.
For example, the Card catalogue from the process model is described here simply
as a “Book archive”. This helps free people from assuming that in future systems
it has to be in the form of 3-inch by 5-inch paper cards.
Third, data stores—places where data rest while awaiting another process—
are shown explicitly as open-sided rectangles. Finally, the system process model
is different from the business process model because it is not organized into swim
lanes. Indeed, although in this example each system process is identiﬁed as to
what department is doing it, even this is often not done in order not to prejudice
any future implementation.
Note that this notation can also be used to produce Row Two process models.
The “Physical” data ﬂow diagram describes both processes and ﬂows in terms of
the mechanisms used, just as the Process Model described before did. Indeed, it
is a good way to do that because it does provide for more detail in describing the
data ﬂows and stores.
To get to the Row Three “Logical” (or “Essential”) data ﬂow diagram, it is
necessary to:
–
Remove all references to physical mechanisms, changing the terms to describe
the actual data involved.
–
Remove any data stores that are only “buffers”, accounting for differences in
processing speed between the two processes.
–
Remove any processes that are simply validating the results of the previous
process. (Instead, ﬁx the previous process.)
∗This example is taken from the author’s Requirements Analysis: From Business Views to
Architecture [Hay 2003].

ROW THREE: PROCESSING DATA
145
Choose
book to
order.
3.1
Title,
author of
desired
book
Departments
Order set
of books.
3.2
Title, author
of book to order
Order of
books
Purchasing
Confirm
book
order.
3.3
Order
details
Confir-
mation
Book title,
author
Order
details
Purchasing
Receive
each set
of books.
3.4
Order details
Received quantity
Shipment
of books, invoice
Incorrect
books
returned
Purchasing
Patron
r
Book
Supplier
b
Catalogue
each
book.
3.5
Catalogue
scheme
Invoice
Cataloguing
Catalogue
Service
s
Dinosaur
County
d
3/1
Pending
Purchase Order
Order details
1
Book Archive
Book title, author,
classification
Fig. 3–11: Sample data ﬂow diagram.
Figure 3–12 crosses the boundary between Row Two and Row Three of the
framework. It shows that each business process may be carried out via one or
more business process designs, where each business process design is described
in terms of one system process. Thus, the business process of receiving a
shipment is carried out via the system (data) processes of: “Record receipt”,

146
ACTIVITIES, FUNCTIONS, AND PROCESSES
ACTIVITY
# ID
* Name
° Description
* Date established
° Date discontinued
BUSINESS PROCESS
° Scheduled start date
° Scheduled end date
° Actual start date
° Actual end date
FUNCTION
carried out
via
described in
terms of
for
used for
part of
composed
of
SYSTEM PROCESS
# Identifier
* Name
* Description
BUSINESS PROCESS DESIGN
* Effective date
° Until date
Fig. 3–12: Business processes and system processes.
“Record discrepancy”, “Send message to Accounts Payable that goods are
received”, and so on.
Note that as with functions and business processes each system process may
be composed of one or more other system processes. This relationship is actually
more complex than this, as will be shown below, but as shown here, the concept
is valid. This supports the idea of taking one of the processes cited previously
(such as “Receive each book”) and creating another data ﬂow diagram from it,
revealing its component processes.
System Processes and Data Flows
The data ﬂow diagram of Figure 3–11 shows round-cornered boxes representing
system processes, where data are transformed from one structure to another. Data
ﬂows (such as “Title, author of desired book”, “Order details”, and so forth) are
represented by labeled arrows. By deﬁnition, all data originate and ultimately

ROW THREE: PROCESSING DATA
147
arrive at the square-cornered boxes, called external entities, such as “Patron”,
“Book Supplier”, and so forth. In terms of our metamodel, these external entities
nearly always correspond to our parties—either people or organizations.
In the diagram, examples of system processes include “Choose book to order”,
“Order a set of books”, and so forth. The rectangles that are open on the right
represent data stores, where data may sit for a period of time before being further
processed. The diagram shows two data stores: “Pending purchase order” (a list
of orders awaiting the arrival of books) and “Book archive” (a modern word for
what used to be called the card catalogue). As stated above, the arrows represent
data ﬂows from one system process, external entity, or data store to another.
The data ﬂow arrows and the data stores are labeled with the content of the
ﬂows and stores in normal English. Each of these represents a view of a set
of the data entity classes, relationships, and attributes of the sort discussed in
Chapter Two. That is, each represents a virtual entity class that contains a refor-
mulated collection of basic entity classes, relationship roles, and attributes
(as described in Chapter Two).
Figure 3–13 shows the beginning of the metamodel for a data ﬂow diagram.
Here, a data ﬂow deﬁnes how data (a virtual entity class) can be moved from
one system process to another. That is, a system process may be the source of one
or more data ﬂows, each to another system process. In the library example cited
previously, the virtual entity class “Title, author of book to order” is a data
ﬂow from the system process “Choose book to order” to the system process
“Order set of books”.
Processing is often not continuous over time. It may be necessary for data to be
queued before it can be processed. In a Row Three model, this can only be because
the system process is awaiting another piece of data. In a Row Two model, it could
be a “buffer”, which exists only because a process simply does not operate at the
same speed as business processes that feed it. Such data stores must be removed
for a Row Three model. Figure 3–14 shows that a data store is also the use of a
virtual entity class, and that it may also be the source of and/or the destination
of a data ﬂow. That is, a data ﬂow may either be from a system process or
from a data store, and it may also either be to a system process or to a data
store.
In the example, “Pending purchase order” is a data store that is the use of
a virtual entity class probably of the same name. That virtual entity class is
assembled from entity classes for “Patron”, “Order”, “Line Item”, and “Book”.

ACTIVITY
# ID
* Name
° Description
* Date established
° Date discontinued
BUSINESS PROCESS
° Scheduled start date
° Scheduled end date
° Actual start date
° Actual end date
FUNCTION
SYSTEM PROCESS
# Identifier
* Name
* Description
carried out via
described in
terms of
for
to
of
used
for
from
destination of
source of
used by
DATA FLOW
# Name
* Description
* Create indicator
* Retrieve indicator
* Update indicator
* Delete indicator
BUSINESS PROCESS DESIGN
* Effective date
° Until date
VIRTUAL ENTITY CLASS
* Definition
BUSINESS CONCEPT
# ID
* Name
* Primary definition
OTHER 
BUSINESS
CONCEPT
ENTITY CLASS
ELEMENTARY ENTITY CLASS
a super-
type of (2+)
a sub-
type of
Fig. 3–13: Data ﬂows and system processes.
148

SYSTEM PROCESS
# Identifier
* Name
* Description
carried out
via
used
for
described in
terms of
to
to
from
from
destination of
expressed as
the use
of
source of
destination of
source of
the use of
DATA FLOW
# Name
* Description
* Create indicator
* Retrieve indicator
* Update indicator
* Delete indicator
BUSINESS PROCESS DESIGN
* Effective date
° Until date
for
VIRTUAL ENTITY CLASS
* Definition
DATA STORE
OTHER 
BUSINESS
CONCEPT
ELEMENTARY ENTITY CLASS
a super-
type of (2+)
a sub-
type of
used
by
BUSINESS PROCESS
° Scheduled start date
° Scheduled end date
° Actual start date
° Actual end date
FUNCTION
ACTIVITY
# ID
* Name
° Description
* Date established
° Date discontinued
BUSINESS CONCEPT
# ID
* Name
* Primary definition
ENTITY CLASS
Fig. 3–14: Data stores.
149

150
ACTIVITIES, FUNCTIONS, AND PROCESSES
“Order detail” is a ﬂow of this virtual entity class from the data store “Pending
purchase order” to the system process “Receive each book”.
As perceived by business owners, processes are rarely seen separate from the
mechanisms and the people who perform them. By the time a Row Three data ﬂow
diagram is created, however, mechanisms should no longer be represented. It is
necessary in a Row Three data ﬂow, though, to show the sources and destinations
of all data, so Figure 3–15 again introduces party and position entity classes from
column 3.
Here you can see that in addition to what has been seen so far, a data ﬂow
may be from or to a speciﬁed party (such as “Sarah Jones” or “The Accounting
Department”) or simply deﬁned as being from or to a position, such as “Chief
Bookkeeper”. These are examples of external entity. In the example, the exter-
nal entities “Catalogue service” and “Book supplier” would be companies (a type
of organization); “Dinosaur County” (Government) is a government agency;
and “Patron” can be treated as a party type.
Note that in Row Three it is actually rare to see a data ﬂow identiﬁed as to or
from an individual person. The party involved is usually an organization, such
as a vendor company or a department.∗Figure 3–15, then, shows that a data ﬂow
must be from one of the following.
–
party
–
party type
–
position
–
system process
–
data store
Moreover, it also must be to one of the same entity classes.
Access Roles and System Events
In the previous sample diagram, the data ﬂow line from the external entity “Book
Supplier” to the process “Receive each book” is labeled “Shipment of books”.
This ﬂow need not actually contain any information, other than the fact that the
∗On rare occasions, it may seem reasonable for a computer system to take on the role of external
entity, but this is invariably when the system is being a mechanism used by a party (speciﬁcally, an
organization) to process data. Although that is okay in a Row Two model, it should be vigorously
resisted in the architect’s model.

ROW THREE: PROCESSING DATA
151
expressed as
the use
of
source of
to
to
destination
of
destination
of
the
responsibility
of
responsible
for
source
of
source of
from
to
from
to
of
from
from
destination of
source of
destination of
used
by
DATA FLOW
# Name
* Description
* Create indicator
* Retrieve indicator
* Update indicator
* Delete indicator
VIRTUAL ENTITY CLASS
* Definition
DATA STORE
POSITION
# Name
* Description
OTHER 
BUSINESS
CONCEPT
ELEMENTARY ENTITY CLASS
a super-
type of (2+)
a sub-
type of
ACTIVITY
# ID
* Name
° Description
* Date established
° Date discontinued
BUSINESS PROCESS
° Scheduled start date
° Scheduled end date
° Actual start date
° Actual end date
FUNCTION
SYSTEM PROCESS
# Identifier
* Name
* Description
carried out via
described in
terms of
used
for
for
BUSINESS PROCESS DESIGN
* Effective date
° Until date
ORGANIZATION
* Organization name
* Description
PERSON
* Given name
° Middle name
* Surname
PARTY
#ID
ENTITY CLASS
BUSINESS CONCEPT
# ID
* Name
* Primary definition
Fig. 3–15: External entities.

152
ACTIVITIES, FUNCTIONS, AND PROCESSES
books were received. For this reason, it is not so much a data ﬂow as a system
event type, as shown in Figure 3–16. That is, a system event type is a message
to a process that causes something to happen. It may not contain any of the data
to be processed. Rather, it is simply a trigger of the process. The system event
type must have come from either another system process or from a party or
a position, or it must be the action of another system process. In the latter
case, since a system event type is a moment in time, while a system process
takes place over time, system event type has the same attributes as business
event type—described previously as “Position”, “Lag quantity”, and “Lag unit of
measure”.
As mentioned previously, we are here only concerned with event types, the
deﬁnition of types of events. The example is about the idea of receiving books,
not an actual receipt on July 18. Note that the management role that applied to
business process also applies to system process.
Essential System Processes
In speaking of functions and business processes previously, much was made
of the fact that at the lowest level one could ﬁnd elementary functions and
elementary business processes. As shown in Figure 3–17, something similar may
be found in analyzing the hierarchy of system processes—the elementary system
process. As with elementary functions and elementary business processes, an
elementary system process is the smallest unit of work that retains its identity.
You can identify this most atomic process by realizing that once started it is not
meaningful to say that it can be stopped before it is completed. Thus, each other
system process may be composed of either one or more other system processes,
essential system processes, and/or elementary system processes.
Externalbusinesseventtypes group elementarybusinessprocesses together
into essential business processes. Similarly, elementary system processes may
be grouped by system event types to create an essential system process
[McMenamin and Palmer 1984].
Previously we asserted that a system process can be triggered by a system
eventtype. Again, we are looking for the level of process that represents acomplete
response to an external event. For example, when a customer order is received
(a system event type) there might be numerous steps required for ﬁrst ﬁlling out
the order, and then for ﬁlling it. Each of these steps could reasonably be called

SYSTEM EVENT TYPE
# Name
* Description
* External indicator
* Temporal indicator
° Position flag
° Lag quantity
° Lag unit of measure
DATA FLOW
# Name
* Description
* Create indicator
* Retrieve indicator
* Update indicator
* Delete indicator
OTHER BUSINESS CONCEPT
VIRTUAL ENTITY CLASS
* Definition
DATA STORE
destination of
source of
used by
expressed as
to
from
from
to
to
a trigger of
the action of
from
from
to
from
from
 the source
of
 the source of
the use
of
the use
of
ELEMENTARY ENTITY CLASS
a super-type
of (2+)
a sub-type
of
ACCESS ROLE
# ID
* Effective date
° Until date
* Description
MANAGEMENT
ROLE
BUSINESS PROCESS DESIGN
* Effective date
° Until date
PARTY
# ID
POSITION
# Name
* Description
ORGANIZATION
* Organization name
* Description
PERSON
* Given name
° Middle initial
* Surname
OTHER ACCESS
ROLE
SYSTEM PROCESS
# Identifier
* Name
* Description
ACTIVITY
# ID
* Name
° Description
* Date established
° Date discontinued
BUSINESS PROCESS
° Scheduled start date
° Scheduled end date
° Actual start date
° Actual end date
FUNCTION
for
used
for
described
in terms of
managed
via
carried out via
destination of
responsible for
responsible for
source of
for
the
responsibility
of
destination of
source of
destination of
source of
triggered by
in the role of
player of
player of
played by
played by
responsible for
BUSINESS CONCEPT
# ID
* Name
* Primary definition
ENTITY CLASS
Fig. 3–16: System event types.

SYSTEM EVENT TYPE
# Name
* Description
* External indicator
* Temporal indicator
° Position
° Lag quantity
° Lag unit of measure
DATA FLOW
# Name
* Description
* Create indicator
* Retrieve indicator
* Update indicator
* Delete indicator
VIRTUAL ENTITY CLASS
* Definition
destination of
source of
used by
expressed as
to
from
from
to
to
a trigger of
the basis for
from
from
to
from
from
the use of
the use
of
OTHER BUSINESS CONCEPT
ELEMENTARY ENTITY CLASS
a super-type
of (2+)
a sub-type
of
DATA STORE
responsible for
responsible for
PARTY
# ID
BUSINESS PROCESS DESIGN
* Effective date
° Until date
POSITION
# Name
* Description
ORGANIZATION
* Organization name
* Description
PERSON
* Given name
° Middle initial
* Surname
SYSTEM PROCESS
# Identifier
* Name
* Description
ACTIVITY
# ID
* Name
° Description
* Date established
° Date discontinued
BUSINESS PROCESS
° Scheduled start date
° Scheduled end date
° Actual start date
° Actual end date
FUNCTION
for
part of
used
for
described
in terms of
carried out via
composed of
destination of
part of
responsible for
source of
the
responsibility
of
destination of
source of
destination of
source of
triggered by
the source
of
defined
by
composed
of
the source of
source of
ESSENTIAL SYSTEM
PROCESS
ELEMENTARY
SYSTEM
PROCESS
OTHER SYSTEM 
PROCESS
FUNDAMENTAL
SYSTEM PROCESS
CUSTODIAL SYSTEM
PROCESS
the action of
BUSINESS CONCEPT
# ID
* Name
* Primary definition
ENTITY CLASS
Fig. 3–17: Essential system processes.

ROW THREE: PROCESSING DATA
155
a system process (speciﬁcally, an elementary system process). But the objective
of the entire effort is to complete the order.
The system process that encompasses all of those elementary system
processes is here called an essential system process. That is, by deﬁnition
an essential system process must be the complete response to (deﬁned by) a
particular event type. Note that although each essential system process must
be deﬁned by exactly one system event type it may be composed of one or more
elementary system processes.
As with essential business processes, it is important to recognize that
only external system events can be the basis for deﬁning an essential system
process. Where in the case of business event type this distinction is depicted in
the sub-types external business event and internal business event, it is here
shown by the attribute “External indicator”. If the system event type is external,
this attribute has the value “True”. Otherwise, it is “False”.∗
Business Rule
If a system event type is the basis for an essential system process, the
value of the attribute “External indicator” must be “True”.
Figure 3–17 also shows that as was the case with essential business process
there are two types of essential system process. A fundamental system process
is one that contributes directly to the business objective implied by the external
event that triggered it. To carry out this fundamental system process, however,
some data are required that may not have come directly from the process. So, a
custodial system process is deﬁned as one responsible for compiling data to be
used by a fundamental process. Custodial system processes typically maintain
reference data. These are not deﬁned by system event types.
Figure 3–18 shows the collection of elementary system processes that were
assembled to constitute the essential system process “Receive each set of books”.
This is also a good example of decomposition. Note that at the lower level there
∗Sub-types will not work here because, as you shall soon see, there are other ways to categorize
system event type.

156
ACTIVITIES, FUNCTIONS, AND PROCESSES
Receive
each set
of books.
3.4
3.4 Receive each set of books.
Receipt of books
Book received
Check shipment
against purchase
order.
3.4.2
Receiving
Book
Supplier
b
Record
arrival of
shipment.
3.4.1
Receipt
of books
Book
Supplier
b
Accounts
Payable
r
Book received
Accounts
Payable
d
3/1
Pending purchase order
3/2
Book Archive
Title,
classification
number
Titles,
quantities
received
Titles,
quantities
due
Receiving
Classify
book.
3.4.3
Cataloguing
3/1
Pending purchase order
Titles,
quantities due
Titles,
quantities
received
Titles,
quantities
Return of books
Classification guidelines
Classi-
fication
Service
c
3/1
Book Archive
Title, “book
received”
Title, etc.
classi-
fication
Return
of books
Fig. 3–18: Sample essential data ﬂow diagram.

ROW FOUR: PROGRAM MODULES
157
are external entities (organizations) that are removed for simplicity’s sake at the
higher level.
The data ﬂows to these external entities in the detailed diagram have an
X across them at the boundary of the upper-level process. It is the remaining
external entity “Book Supplier” that provided the external system event that
deﬁned the essential system process. In addition to that event, however, there
were other communications that were not carried to the summary level. These
are also marked with an X at the boundary.
Business Rules
1. External entities, data ﬂows, and data stores recognized in a decomposed
process need not appear in higher-level processes.
2. Every data store, external entity, and data ﬂow portrayed in a higher-level
process must appear in its decomposition.
ROW FOUR: PROGRAM MODULES
Once activities—processes and functions—have been mapped, it is then possible
to ask which of these should be automated. In addition, when the business rules
(described in Chapter Seven) have been fully documented it is appropriate to ask
how they will be implemented. This implementation will be via program modules.
Row Four is concerned with the design of these modules. So, the Activities column
of the designer’s row is all about programs.
Basic Module Structure
A program module∗is a piece of program code that performs a task for the
business. This may be the processing of input data, the creation of a report, or
some internal processing or calculation. Each program module must be written
∗I am told that program module is passé (actually, dated was the term used). More appropriate
apparently would be component, binary, service, executable, or interface. Because the ﬁrst two
words do not add any information, and the last three are explicit types of programs, program
module still seems the best term for any piece of program code, regardless of its purpose.

158
ACTIVITIES, FUNCTIONS, AND PROCESSES
PROGRAM MODULE
# ID
* Name
* Description
* Version
° Scenario
° Program code
PROGRAMMING
LANGUAGE
# Name
* Description
PROGRAM MODULE
TYPE
# Name
* Description
the language
of
embodied in
written in
an example of
DATABASE
MANAGEMENT
SYSTEM
INTERACTIVE
MODULE
OTHER
EXECUTABLE
MODULE
STORED
PROCEDURE
UTILITY
DBMS
TRIGGER
SYSTEM
MODULE
a super-
type
of (2+)
a sub-
type of
Fig. 3–19: Modules.
in a programming language, such as Java, C++, COBOL, or even FORTRAN.
This is shown in Figure 3–19. In the ﬁgure, seven types of program modules are
shown. More will be added later, when we discuss object-orientation, but these
will do for now.
–
dbms trigger: A piece of code linked to a database table or column, to be
activated when a speciﬁed action takes place, such as updating the column
–
stored procedure: Program code stored in a database management system to
control the updating and retrieval of data

ROW FOUR: PROGRAM MODULES
159
–
database management system: A complex piece of software that performs
many useful functions related to the storage and retrieval of data and that
plays a key role in protecting the integrity of data
–
system module: An operating system or a portion of an operating system
(including server software and services)
–
utility:A program that performs a support function, providing a service to the
user of other software
–
interactive module: Program code that controls the elements of a screen (its
windows, cursors, and so on)
–
other executable module: Everything else
The model also shows that each program module must be an example of
exactly one program module type. The ﬁrst of these are the same types shown
as sub-types of the program module itself. Each program module type may be
a super-type of two or more other program module types. This structure, as we
have seen before, allows the user of a system based on it to deﬁne types in more
detail than is shown in the model.
Business Rule
The ﬁrst instances of program module type must be “DBMS Trig-
ger”, “Stored procedure”, and so on to correspond to the sub-types shown
previously.
It is possible to describe a scenario that represents the processing of the module.
This, plus the program code itself, are attributes of program module. Program
modules can be linked in at least three different ways.
First, program module may be composed of one or more other program
modules. Figure 3–20, then, shows that each program module composition
must be the use of a program module . . .in another program module.
Second, the ﬁgure shows that each program module may be dependent on
another program module. That is, each program module may be called by
another program module, shown here as the fact that each program module
may be subject to one or more program module dependencies, each of which
must be on another program module.

160
ACTIVITIES, FUNCTIONS, AND PROCESSES
to
to
to
to
PROGRAM MODULE
# ID
* Name
* Description
* Version
° Scenario
° Program code
PROGRAMMING
LANGUAGE
# Name
* Description
PROGRAM MODULE
TYPE
# Name
* Description
the language
of
embodied in
source of
written in
the
object
of
on
subject
to
of
an example
of
DATABASE
MANAGEMENT
SYSTEM
INTERACTIVE
MODULE
OTHER
EXECUTABLE
MODULE
STORED
PROCEDURE
UTILITY
DBMS
TRIGGER
SYSTEM
MODULE
a super-type
of (2+)
a sub-
type of
PROGRAM
MODULE
DEPENDENCY
the use
of
composed
of
part of
the use
in
the
source
of
the
destination
of
from
to
PROGRAM MODULE
COMMUNICATION
PROGRAM MODULE
COMPOSITION
an
implementation
of
implemented
by
DATA FLOW
# Name
* Description
* Create indicator
* Retrieve indicator
* Update indicator
* Delete indicator
SYSTEM PROCESS
# Identifier
* Name
* Description
DATA STORE
PARTY
# ID
from
destination of
to
source of
from
from
destination of
to
source of
destination of
to
from
from
from
from
Fig. 3–20: Program module links.
Third, each program module may be the source of one or more program
module communications to other program modules. Note that each of these
Row Four program module communications may be an implementation of a
Row Three data ﬂow described previously.

ROW FOUR: PROGRAM MODULES
161
Before the advent of database management systems and object-oriented design,
pretty much all programs were in the category of other executable module.
In recent years, however, these distinctions have become more important, as will
be seen in the remainder of this chapter.
Figure 3–21 summarizes the links from Figure 3–20. Program module struc-
ture is a super-type encompassing program module dependency, program
module communication, and program module composition, while adding the
possibility of an other program module structure. Thus, each program module
structure must be from one program module and to another program module.
Just as entity types have super-types, so too can relationships have super-
types. Unfortunately, this is not something that can be easily shown in an
entity-relationship diagram. In this case, the relationship “Each program module
structure must be from one and only one program module” has the following
sub-types.
–
Each program module dependency must be of one and only one program
module. This includes subroutine calls.
–
Each program module communication must be from one and only one pro-
gram module, including message types sent from one program module to
another. Messages are discussed in the section on object modules (see page 171).
–
Each program module decomposition must be the use of one and only one
program module. A large program module (actually a program module
group) may be composed of one or more other program modules.
Of course, the reverse relationship roles also have a corresponding sub-type
structure. This is signiﬁcant because, to explain the concepts presented here clearly,
it is sometimes necessary to present the relationship between two sub-types before
presenting the more general super-type relationships. Unfortunately, the language
used at the sub-type level does not always correspond to that at the super-type
level.
In this book, your author has tried both approaches. In this case, the sub-
type relationship names seen in Figure 3–20 do not appear in Figure 3–21,
although they continue to exist in the underlying model.∗In other cases, the
∗Note to anyone trying to implement this: Make sure you have reduced the number of relationships
in the conceptual model before trying to generate a trial database design. If you don’t, you will wind
up with extra foreign keys.

162
ACTIVITIES, FUNCTIONS, AND PROCESSES
PROGRAM MODULE
# ID
* Name
* Description
* Version
° Scenario
° Program code
PROGRAMMING
LANGUAGE
# Name
* Description
PROGRAM MODULE
TYPE
# Name
* Description
the
language
of
embodied
in
written in
an example
of
DATABASE
MANAGEMENT
SYSTEM
INTERACTIVE
MODULE
OTHER
EXECUTABLE
MODULE
STORED
PROCEDURE
UTILITY
DBMS
TRIGGER
SYSTEM
MODULE
source
of
destination of
from
to
PROGRAM MODULE STRUCTURE
# Effective date
° Until date
OTHER PROGRAM
MODULE STRUCTURE
PROGRAM MODULE
COMPOSITION
PROGRAM MODULE
DEPENDENCY
PROGRAM MODULE
COMMUNICATION
Fig. 3–21: Program module structure.

ROW FOUR: PROGRAM MODULES
163
super-type names have been used exclusively in describing the details—at the
cost of readability. In those cases, business rules must be added to describe the
sub-type constraints.
Figure 3–22 shows that each program module must be part of a single applica-
tion system. This expands Chapter Two’s deﬁnition—a collection of data groups
PROGRAM MODULE
# ID
* Name
* Description
* Version
° Scenario
° Program code
PROGRAMMING
LANGUAGE
# Name
* Description
PROGRAM MODULE
TYPE
# Name
* Description
the
language
of
embodied in
written in
an example
of
source
of
destination of
from
to
PROGRAM MODULE STRUCTURE
# Effective date
° Until date
OTHER PROGRAM
MODULE STRUCTURE
PROGRAM MODULE
COMPOSITION
PROGRAM MODULE
DEPENDENCY
PROGRAM MODULE
COMMUNICATION
a super-
type
of (2+)
a sub-
type of
responsible for
owned by
responsible for
owned by
APPLICATION SYSTEM
# Name
* Description
DATA GROUP
COLLECTION
# Name
° Purpose
composed of
part of
DATA GROUP
TABLE
VIEW
* SQL expression
* Effective date
° Until date
Fig. 3–22: Application systems.

164
ACTIVITIES, FUNCTIONS, AND PROCESSES
assembled—to now include program modules. That is, an application system
is a collection of data groups and program modules to carry out a business
function.
Remember that a program module communication from one program
module to another is the fact that one is designed to communicate in some way
with another. Figure 3–23 shows that although one application system may be
responsible for a program module and a data group collection there is noth-
ing to prevent any program module from being the source of or destination of
a program module communication of any table, view, or column.
Remember that a data ﬂow and a data store are the use of virtual entity
classes—views of other entity classes and attributes. Similarly, the program
module communication that is an implementation of a data ﬂow will usually
be of a view of other tables and columns.
While the modulecommunication describes how programs communicate with
each other, it does not really describe the effect of the communication on the
data. Figure 3–24 shows module data usage—the fact that a particular program
module speciﬁcally creates, retrieves, updates or deletes instances of either a
data group as a whole or a particular column. Each attribute of module data
usage (“Create indicator”, “Retrieve indicator”, etc.) identiﬁes whether the action
is done.
Program Roles
Different people and organizations play different roles in the creation of program
modules, be they individual program modules or more complex application
systems. These roles might include programmers, managers, or administrators
of various types. Figure 3–25 borrows from Chapter Five to show party, access
role, and access role type. Access role is a complex topic, discussed at length
in Chapter Five, but here three sub-types of access role are shown:
–
programming role: Simply the fact that a party (or position, and so on)
has something to do with some aspect of creating a program module or
application system.
–
management role: The fact that a party is responsible for the development or
deployment of a program module or application system.
–
permission role: The fact that a party is either allowed or prohibited access
to the program module or the application system as a whole. The attribute

destination of
implemented
by
an  implementation of
to
source of
from
PROGRAM MODULE STRUCTURE
# Effective date
° Until date
PROGRAM MODULE
# ID
* Name
* Description
* Version
° Scenario
° Program code
DATA FLOW
# Name
* Description
* Create indicator
* Retrieve indicator
* Update indicator
* Delete indicator
PERSISTENCE MECHANISM
# Name
* Description
COLUMN
* Label
* Format
° Length
° Decimal places
* Mandatory indicator
° Default value
DATA GROUP COLLECTION
# Name
° Purpose
DATA GROUP
used in
of
PROGRAMMING 
LANGUAGE
# Name
* Description
responsible for
owned by
APPLICATION SYSTEM
# Name
* Description
embodied in
an example
of
composed of
part of
composed of
part of
responsible for
owned by
the
language
of
written in
PROGRAM MODULE
TYPE
# Name
* Description
SYSTEM
PROCESS
# Identifier
PROGRAM MODULE COMMUNICATION
PROGRAM MODULE
COMPOSITION
PROGRAM 
MODULE
DEPENDENCY
DBMS 
TRIGGER
STORED
PROCEDURE
DATABASE
MANAGEMENT
SYSTEM
OTHER
EXECUTABLE
MODULE
INTERACTIVE
MODULE
SYSTEM
MODULE
UTILITY
TABLE
VIEW
* SQL expression
* Effective date
° Until date
OTHER
PROGRAM
MODULE
STRUCTURE
destination of
to
source of
from
PARTY
# ID
destination of
to
source of
from
DATA STORE
destination of
to
source of
from
a super-
type of
(2+)
a sub-
type of
Fig. 3–23: Module communication.

implemented
by
an  implementation of
destination of
to
source of
from
PROGRAM MODULE STRUCTURE
# Effective date
° Until date
PROGRAM MODULE
# ID
* Name
* Description
* Version
° Scenario
° Program code
DATA FLOW
# Name
* Description
* Create indicator
* Retrieve indicator
* Update indicator
* Delete indicator
MODULE DATA USAGE
# Sequence number
* Create indicator
* Retrieve indicator
* Update indicator
* Delete indicator
PERSISTENCE MECHANISM
# Name
* Description
COLUMN
* Label
* Format
° Length
° Decimal places
* Mandatory indr
° Default value
DATA GROUP COLLECTION
# Name
° Purpose
DATA GROUP
user of
in
used in
of
used in
of
PROGRAMMING 
LANGUAGE
# Name
* Description
responsible for
owned by
APPLICATION SYSTEM
# Name
* Description
embodied in
an example of
composed of
part of
composed of
part of
responsible for
owned by
the
language
of
written in
PROGRAM MODULE
TYPE
# Name
* Description
SYSTEM
PROCESS
# Identifier
* Name
* Description
PROGRAM MODULE COMMUNICATION
PROGRAM MODULE
COMPOSITION
PROGRAM 
MODULE
DEPENDENCY
DBMS 
TRIGGER
STORED
PROCEDURE
DATABASE
MANAGEMENT
SYSTEM
OTHER
EXECUTABLE
MODULE
INTERACTIVE
MODULE
SYSTEM
MODULE
UTILITY
TABLE
VIEW
* SQL expression
* Effective date
° Until date
OTHER
PROGRAM
MODULE
STRUCTURE
destination of
to
source of
from
PARTY
# ID
destination of
to
source of
from
DATA STORE
destination of
to
source of
from
a super-
type of
(2+)
a sub-
type of
Fig. 3–24: Module data usage.

ROW FOUR: PROGRAM MODULES
167
PROGRAM MODULE STRUCTURE
# Effective date
° Until date
ACCESS ROLE
# ID
* Effective date
° Until date
* Description
OTHER PROGRAM
MODULE STRUCTURE
PROGRAM MODULE
COMPOSITION
PROGRAM MODULE
DEPENDENCY
PROGRAMMING ROLE
MANAGEMENT ROLE
PERMISSION ROLE
* Prohibition indicator
PROGRAM MODULE
COMMUNICATION
PROGRAM MODULE
# ID
* Name
* Description
* Version
° Scenario
° Program code
DBMS 
TRIGGER
STORED
PROCEDURE
DATABASE
MANAGEMENT
SYSTEM
OTHER
EXECUTABLE
MODULE
INTERACTIVE
MODULE
SYSTEM
MODULE
OTHER
ACCESS
ROLE
UTILITY
DATA GROUP COLLECTION
# Name
° Purpose
DATA GROUP
PROGRAMMING 
LANGUAGE
# Name
* Description
responsible for
owned by
APPLICATION SYSTEM
# Name
* Description
embodied in
an example of
embodied
in
an example
of
player of
played by
composed of
part of
responsible for
owned by
the
language
of
written in
for
for
from
to
source of
managed
via
managed
via
destination of
PROGRAM MODULE
TYPE
# Name
* Description
TABLE
VIEW
* SQL expression
* Effective date
° Until date
PERSON
* Given name
° Middle name
* Surname
ORGANIZATION
* Organization name
* Description
PARTY
# ID
ACCESS ROLE TYPE
# Name 
* Description
a super-
type of
(2+)
a sub-
type of
a super-
type of
(2+)
a sub-
type of
Fig. 3–25: Access roles.

168
ACTIVITIES, FUNCTIONS, AND PROCESSES
“Prohibition indicator” is “True” if the role indicates that the party is prohib-
ited from access to the program module or application system, and is “False”
if the role indicates permission.
Here we introduce the assertion that each access role must be an example
of one access role type. These, of course, must include “Programming role”,
“Management role”, and “Permission role”. Each access role type may be a
super-type of two or more other access role types, so “Program module role”
may be asuper-typeof, for example, “Programmer” and “Programming manager”.
Alternatively, if no further detail is required “Programmer” and “Programming
manager” could simply be instances of program module role.
Business Rules
1. One instance of access role type must be “Programming role”.
2. If an access role is a programming role, it may only be for a program
module or an application system.
Common usage of the words application system is often much less disciplined
than was described previously. Often companies imagine that a program module
or a table is owned by multiple application systems. But if they are to be managed
successfully, responsibility for each element of a system must be designated in
terms of the particular project (application system) responsible for its creation in
the ﬁrst place.
Given that responsibility, permission for access can be widely spread. Once
application systems have been carefully deﬁned, as often as not, access roles
can be deﬁned entirely in terms of them, with minimal requirement to give access
to speciﬁc program modules or tables.
Sometimes program modules can be written for the purpose of generating
other program modules. Figure 3–26 shows that a generation speciﬁcation
can be for a program module and is according to a data group, which contains
the actual speciﬁcations for the program module. Once the program module
that is the generator in the generation speciﬁcation has been created, when it
is run (on a “Generation date”) it will be the basis for one or more generations
of other program modules.

ROW FOUR: PROGRAM MODULES
169
PROGRAM MODULE STRUCTURE
# Effective date
°  Until date
PROGRAM MODULE COMMUNICATION
PROGRAM
MODULE
DEPENDENCY
PROGRAM
MODULE
COMPOSITION
OTHER
PROGRAM
MODULE
STRUCTURE
GENERATION
# Generation date
GENERATION
SPECIFICATION
# Sequence number
* Name
DATA FLOW
# Name
* Description
* Create indicator
* Retrieve indicator
* Update indicator
* Delete indicator
SYSTEM
PROCESS
# Identifier
* Name
* Description
PARTY
# ID
DATA
STORE
PROGRAM MODULE
# ID
* Name
* Description
* Version
° Scenario
° Program code
PROGRAMMING
LANGUAGE
# Name
* Description
to
implemented by
an implementation of
from
destination of
source of
the
language
of
written in
owned by
an example of
to
of
of
based
on
basis
for
for
according
to
specifications
for
generator
in
part of
part of
composed
of
composed of
owned by
responsible for
responsible for
created
by
used in
destination of
from
source of
to
destination of
from
source of
to
destination of
from
source of
PERSISTENCE MECHANISM
# Name
* Description
COLUMN
* Label
* Format
° Length
° Decimal places
* Mandatory INDR
° Default value
DATA GROUP
TABLE
VIEW
* SQL expression
* Effective date
° Until date
DATA GROUP COLLECTION
# Name
° Purpose
APPLICATION SYSTEM
# Name
* Description
PROGRAM MODULE
TYPE
# Name
* Description
embodied in
Fig. 3–26: Module generation.
Figure 3–27 shows that the Row Four artifact program module is also based
on one or more Row Three system processes. Speciﬁcally, it may be based on
one or more process implementations, each of which must be of one and only
one system process. Note that a system process, however, may be the source of

170
ACTIVITIES, FUNCTIONS, AND PROCESSES
PROCESS IMPLEMENTATION
# Effective date
* Until date
° Description
SYSTEM PROCESS
# Identifier
* Name
* Description
DATA GROUP
COLLECTION
# Name
° Purpose
APPLICATION SYSTEM
# Name
* Description
PROGRAM MODULE
TYPE
# Name
* Description
PROGRAMMING
LANGUAGE
# Name
* Description
PROGRAM NODULE
# ID
* Name
* Description
° Scenario
° Program code
VIEW
* SQL expression
* Effective date
° Until date
DATA GROUP
TABLE
as
as
of
in
based on
an example
of
owned
by
written in
embodied in
the
language
of
composed of
part of
owned
by
responsible
for
responsible
for
based on
Fig. 3–27: Process implementations.

ROW FOUR: PROGRAM MODULES
171
either an individual program module or an entire application system. That is, a
system process may not only be in one or more implementations as individual
program modules but in one or more implementations as complete application
systems.
Object Modules
Figure 3–28 shows two new types of program module. First, a class implemen-
tation (as described in Chapter Two) plays the role of a Row Four data thing,
but it is in fact a piece of code. So, it is shown in that chapter and highlighted
here. class implementation was described in Chapter Two as a piece of code that
describes a category of (“class” of) objects. This can refer to a business entity
class, or it can categorize “objects” that are part of a computer system, such as
window cursors, screen windows, and other elements.
The second type of program module is an executable module. This is the
code that old-timers will remember simply as what was once called a “computer
program”. That is, it is any program (or program component) that does some-
thing. Note that (as shown in Figure 3–28) executable module includes the
seven sub-types previously presented, plus two new ones, speciﬁcally for object
orientation:
–
method: Program code to carry out an operation, as described next
–
package: A collection of class implementations. That is, a package may be
composed of one or more class implementations.
Figure 3–29 includes class element (described in Chapter Two), and adds
what object-oriented design calls operation to the model. An operation is a
function performed by objects in a class implementation and implemented by an
executable module that is a method.
Typically, an operation is on one or more instance attributes, although it
might not be. “Visibility” is also an attribute of operation. That is, as with class
elements an operation may be seen throughout the system, within its own class,
or only within its class and its sub-types.
Note that what relational programmers would consider an attribute may in
fact be implemented as a call to an operation that returns the requested value.
In object-oriented land, it does not matter whether the value was stored in a table
or derived in some other way.

172
ACTIVITIES, FUNCTIONS, AND PROCESSES
CLASS IMPLEMENTATION
EXECUTABLE MODULE
ARCHITECTURAL
CLASS
BUSINESS
CLASS
FOUNDATION
CLASS
PACKAGE
INTERACTIVE
MODULE
acted on by
inheriting
from
a
generalization
of
part of
composed
of
part of
composed
of
to act
on
DATABASE
MANAGEMENT
SYSTEM
DBMS TRIGGER
STORED
PROCEDURE
OTHER
EXECUTABLE
MODULE
SYSTEM
MODULE
UTILITY
METHOD
APPLICATION
CLASS
PROGRAM MODULE
# ID
* Name
* Description
* Version
° Scenario
° Program code
Fig. 3–28: Types of executable module.

OPERATION
# ID
° Description
* Visibility
PROGRAM MODULE
# ID
* Name
* Description
* Version
° Scenario
° Program code
OBJECT
# Name
* Program code
PERSISTENCE
MECHANISM
# Name
* Description
COLUMN
* Label
* Format
° Length
° Decimal places
* Mandatory indicator
° Default value
DATA GROUP
VIEW
* SQL expression
* Effective date
° Until date
TABLE
PROGRAM MODULE
COMMUNICATION
INSTANCE
ATTRIBUTE
CLASS
ATTRIBUTE
CLASS IMPLEMENTATION
METHOD
PACKAGE
OTHER
EXECUTABLE
MODULE
implemented
by
performed
by objects
in
on
a call to
made persistent in
part of
the
use
of
the
destination
of
the
source
of
an instance
of
used by
made
persistent
in
embodied in
a generalization
of
inheriting
from
part of
used as
composed
of
source of
an
implementation
of
acted on by
to act on
composed
of
part
of
composed
of
to
from
of
used in
part of
composed
of
used by
EXECUTABLE MODULE
CLASS ELEMENT
# Sequence number
* Name
* Visibility
Fig. 3–29: Operations.
173

174
ACTIVITIES, FUNCTIONS, AND PROCESSES
Business Rule
An instance attribute may be either a call to an operation that is
performed by objects in a class implementation or the use of a class
implementation directly, but not both.
Meilir Page-Jones uses an example in his book, written in his version of a
generic object-oriented language [Page-Jones 2000, p. 6]. His class Hominoid is a
video game character that turns right or left and goes forward. It can also detect
if it is facing a wall and must turn. It is described as follows.
Hominoid
New: Hominoid
// creates and returns a new instance of Hominoid
(Operations)
turnLeft
// turns the hominoid counterclockwise by 90◦
turnRight
// turns the hominoid clockwise by 90◦
advance (noOfSquares: Integer, out advanceOK: Boolean)
// moves the hominoid a certain number of squares
// along the direction that it’s facing and
// returns whether successful
display
// shows the hominoid as an icon on the screen
(Instance attributes that are really operations)
location: Square
// returns the current square that the
// hominoid is on
facingWall: Boolean
// returns whether or not the hominoid is at a
// wall of the grid
Essentially, the deﬁnition of the class hominoid is in terms of its operations.
These include New, which creates an instance of hominid at runtime, plus turnLeft,

ROW FOUR: PROGRAM MODULES
175
turnRight, advance, and display. It does have two instance attributes
(location and facingWall), but as noted previously these are each a call to
an operation that will return a value. So, even the instance attributes refer to
operations.
An operation must be implemented by a method, a piece of program code
that carries it out. Like other types of program code, this is a type of program
module; speciﬁcally, an executable module. Another type of executable module
is a package, which is a collection of class implementations. Actually, because
a program module may be composed of other program modules so a method
may be composed of other methods, and a package may be composed of other
packages.
When a program is run, an object behaves by having its operations send
messages to other objects. As shown in Figure 3–30, a message is from one
object to another object. A message is also sent by one operation to invoke
another operation.
If the messages are asynchronous, there may be a message queue in front
of the receiving object to store messages until they can be processed. That is,
messages that are concurrent or asynchronous must be stored until the receiving
object can process them. Hence, each message must be either to an object or to
a message queue for an object.
A message, being between objects, is an actual communication that occurs
when a program module is running. Each message, then, must be an exam-
ple of a message type, where a message type is designed as part of program
module. Speciﬁcally, each message type must be sent by an operation, and may
be to invoke an other operation. Each message type must also be via a program
module communication, a link between two program modules. A message type
must be one of the following.
–
informative message type, which provides an object with information to
update itself
–
interrogative message type, which requests an object to reveal something of
itself
–
imperative message type, which requests an object to take some action upon
itself
Each message may include one or more input or output message arguments, as
shown in Figure 3–31. Each message argument must be for a particular message

176
ACTIVITIES, FUNCTIONS, AND PROCESSES
MESSAGE
# Sequence number
* Name
* Message text
MESSAGE TYPE
# Name
* Description
INTERROGATIVE
MESSAGE TYPE
INFORMATIVE
MESSAGE TYPE
IMPERATIVE
MESSAGE TYPE
MESSAGE
QUEUE
# ID
° Name
from
source of
an
instance
of
part of
composed
of
used in
of
from
to
the destination of
the source
of
embodied in
made
persistent
in
used by
part of
a generalization
of
inheriting
from
part of
acted on
by
source of
CLASS IMPLEMENTATION
PACKAGE
METHOD
OTHER
EXECUTABLE
MODULE
EXECUTABLE MODULE
composed
of
to act on
an implementation
of
composed
of
destination
of
the site
of
temporary
holder of
embodied
in
invoked
by
an example
of
via
sent
by
to invoke
a medium
for
sender of
implemented
by
performed by
objects in
for
to
to
OBJECT
# Name
* Program code
PERSISTENCE
MECHANISM
# Name
* Description
OPERATION
# ID
° Description
* Visibility
PROGRAM MODULE
# ID
* Name
* Description
* Version
° Scenario
° Program code
PROGRAM MODULE
COMMUNICATION
COLUMN
* Label
* Format
° Length
° Decimal places
* Mandatory Indicator
° Default value
VIEW
* SQL expression
* Effective date
° Until date
DATA GROUP
TABLE
Fig. 3–30: Messages.

MESSAGE ARGUMENT
# Sequence number
* Value
MESSAGE ARGUMENT TYPE
# Sequence number
* Discrete indicator
* In indicator
* Out indicator
MESSAGE
# Sequence number
* Name
* Message text
OBJECT
# Name
* Program code
MESSAGE
QUEUE
# ID
° Name
MESSAGE TYPE
# Name
* Description
OPERATION
# ID
° Description
* Visibility
PROGRAM MODULE
# ID
* Name
* Description
* Version
° Scenario
° Program code
CLASS IMPLEMENTATION
OTHER
EXECUTABLE
MODULE
EXECUTABLE MODULE
METHOD
PACKAGE
PERSISTENCE
MECHANISM
# Name
* Description
PROGRAM
MODULE
COMMUNICATION
COLUMN
* Label
* Format
° Length
° Decimal places
* Mandatory indicator
° Default value
VIEW
* SQL expression
* Effective date
° Until date
DATA GROUP
TABLE
qualified
by
embodied
in
for
qualified by
a reference to
for
an
example
of
a reference to
referred to by
source of
from
to
to
an example of
embodied
in
destination of
the site of
an
instance
of
used in
of
via
sent
by
sender of
implemented
by
performed by
objects in
the
destination
of
referred
to by
source of
the
source
of
embodied in
part of
acted
on by
an
implementation
of
to act
on
composed
of
a generalization
of
inheriting
from
used by
to invoke
invoked
by
a medium
for
to
from
for
temporary
holder of
made
persistent
in
Fig. 3–31: Arguments.
177

178
ACTIVITIES, FUNCTIONS, AND PROCESSES
and may be a reference to another object. Again, because messages exist only
at runtime so do their message arguments. The deﬁnition of the message type
therefore also includes message argument type.
Message arguments may be either input arguments or output arguments, as
determined by the value of each message argumenttype’s “In indicator” and “Out
indicator”. Both indicators are present, since the same message argument type
could be both an input and an output argument. In a program, these arguments
are shown with input arguments ﬁrst (optionally preceded by the word “in”),
followed by the word “out” and the output arguments, optionally followed by
“inout” and any arguments that are both input and output arguments.
In Mr. Page-Jones’ example, if execution of the program module (a package)
hom1 creates an object of class Hominoid a message type advance would be spec-
iﬁed as hom1.advance(noOfSquares, out advanceOK). Here, noOfSquares is an
input parameter (the number of squares to advance) and advanceOK is an output
parameter (“True” or “False”, depending on whether the advance was successful)
[Page-Jones 2000, p. 22]. Again, a runtime occurrence of advance would have an
object ID and would in fact advance a particular number of squares (such as “5”).
Each message argument is itself typically a reference to an object, mir-
roring the fact that each message argument type may be a reference to a
class implementation. This can be a reference to an object in a “Foundation
Class”—for example, a type of integer, character, or some such. In the previous
example, the message argument type “noOfSquares” could refer to objects in the
implementation class “Integer”.
ROW SIX: PROGRAM INVENTORY∗
Row Six is concerned with the inventory of systems that exist. This includes
not only systems developed in-house but commercial off-the-shelf packages.
In Row Four we designed programs, determined their structures, and deﬁned
how they would use data. Row Five would be concerned with the coding involved.
Row Six is where we catalogue the actual program copies that have been produced,
along with the data produced and used by them (described in Chapter Two).
∗I am told that the chic word for this is now application portfolio. Because we are talking about a
collection of programs stored somewhere, the word inventory strikes me as more appropriate and
less pretentious.

ROW SIX: PROGRAM INVENTORY
179
SERVER
IMPLEMENTATION
# Name
* Description
* Effective date
° Until date
PHYSICAL PLATFORM
# Serial number
* Model name
* Model number
* Description
SERVER
PROGRAM COPY
# Sequence number
° Name
of
the
location
of
part of
composed of
part of
composed
of
owned by
responsible for
located on
of
replicated
in
owned by
responsible for
the use of
kept in
used as
SITE
# Name
* Description
DATABASE
INSTANCE
# ID
* Name
° Description
* Creation date
° Removal date
PERSISTENCE MECHANISM
# Name
* Description
PROGRAM MODULE
# ID
* Name
* Description
* Version
° Scenario
° Program code
APPLICATION SYSTEM
# Name
* Description
COLUMN
* Label
* Format
° Length
° Decimal places
* Mandatory INDR
° Default value
DATA GROUP
COLLECTION
# Name
° Purpose
DATA GROUP
VIRTUAL SITE
implemented via
the location of
Fig. 3–32: Program copies.
Figure 3–32 shows the program copies of each program module designed
at Row Four. Each program copy, then, must be of a program module, and
must be kept in a virtual site that is a server. Server, deﬁned in more detail
in Chapter Four, is a piece of an operating system that supports the continuous

TRANSFORMATION
RUN USAGE
# Sequence number
° Name
CELL
INSTANCE
° Date last
  updated
ROW
INSTANCE
# ID
TABLE
INSTANCE
# ID
* Name
* Date created
TRANSFORMATION
RUN ELEMENT
# Sequence number
° Formula
TRANSFORMATION
RUN
# Run date
° Formula
SERVER IMPLEMENTATION
# Name
* Description
* Effective date
° Until date
PHYSICAL PLATFORM
# Serial number
* Model name
* Model number
* Description
DATA GROUP
COLUMN
* Label
* Format
° Length
° Decimal places
* Mandatory indicator
° Default value
DATA GROUP
COLLECTION
# Name
° Purpose
PROGRAM COPY
# Sequence number
° Name
PROGRAM MODULE
# ID
* Name
* Description
* Version
° Scenario
° Program code
APPLICATION SYSTEM
# Name
* Description
to
implement
replicated
in
implemented by
composed of
part of
created from
to create
to place
a value in
evaluated
by
used by
in
part
of
a reference
for
composed
of
COLUMN
INSTANCE
# ID
* Name
in
part
of
a reference
for
composed
of
kept in
the location
of
the basis
for
part of
part of
composed
of
owned
by
responsible for
composed of
based on
of
used
as
the use of
of
of
owned by
responsible for
kept in
SITE
# Name
* Description
VIRTUAL SITE
* Creation date
° Removal date
DATABASE
INSTANCE
# ID
* Creation date
° Removal date
SERVER
located on
the
location
of
implemented via
the location of
PERSISTENCE MECHANISM
# Name
* Description
Fig. 3–33: Transformation runs.

ROW SIX: PROGRAM INVENTORY
181
running of a program, so that the program module can interact asynchronously
with other programs. That is, a server is itself implementedvia one or more server
implementations, each of which must be the use of another program copy.
This is to say that a program copy of, for example, the Oracle database man-
agement system may be used as one or more server implementations of separate
servers. This is also referred to as a database management system having multiple
instances.
Figure 3–33 describes the running of a program copy, the data it produced,
and the data it used to produce them. Speciﬁcally, a transformation run must be
an implementation of a program copy, executed on a particular “Run date”. Each
transformation run may then be composed of one or more transformation
run elements, each of which must be to place a value in a cell instance.
A cell instance is a particular column instance of a particular row instance
in a table instance. The transformation run element may then be composed of
one or more transformation run usages, each of a (presumably different) cell
instance. That is, a transformation run may read and operate on one or more
cell instances in order to place a value in another cell instance.

This Page Intentionally Left Blank

4
LOCATIONS
Network—Any thing reticulated, or decussated, at equal distances, with interstices between
the intersections.
—Samuel Johnson [1755]
ABOUT LOCATIONS
The Locations column of the architecture framework is concerned with where the
enterprise does business.
–
The planner sees a simple set of enterprise locations, typically by city.
–
The business owner sees a set of ofﬁces, factories, and warehouses that
constitute the enterprise’s logistics network.
–
The architect sees the roles played by each location in the processing of
information and communications.
–
The designer sees the potential distribution of hardware and software and the
design of communications networks.
–
The builder is concerned with the details of communications nodes and
protocols.
–
The functioning system consists of the facilities where communications take
place.
Figure 4–1 shows the architecture framework with the cells that will be the concern
of this chapter highlighted. Speciﬁcally, these are the views of the business owner,
the architect, the designer, and the functioning system.
The Locations column is both about where things are and the networks by
which they are connected to each other. Where is the business and how do its
components talk to each other? How are data communicated from place to place?
183

184
LOCATIONS
Data
(What)
List of things
important to
the enterprise
List of
functions the
enterprise
performs
List of
enterprise
locations
Organization
approaches
Language,
divergent
data model
Business
process
model
Logistics
network
Organization
chart
State / 
transition
diagram
Business
strategies,
tactics,
policies, rules
Convergent
e/r model
Essential
data ﬂow
diagram
Locations
of roles
The 
viable system,
use cases
Entity 
Life
History
Business
rule
model
Database
design
System design,
program
structure
Hardware,
software
distribution
User
interface,
security
design
Event
processing
Business
rule
design
Physical
storage
design
Detailed
program
design
Network
architecture,
protocols
Screens,
security coding
Timing
deﬁnitions
Rule
speciﬁcation
program
logic
Databases
Program
inventory,
logs
Trained
people
Business
events
Enforced
rules
Objectives/ 
Scope
(Planner’s
View)
Enterprise
Model
(Business
Owner’s
View)
Model of
Fundamental
Concepts
(Architect’s
View)
Technology
Model
(Designer’s
View)
Detailed
Representation
(Builder’s 
View)
Functioning
System
Activities
(How)
Locations
(Where)
(Working System)
People
(Who)
Time
(When)
Motivation
(Why)
Business
master
schedule
Business
vision
and mission
Communications
facilities
Fig. 4–1: Locations column.

ABOUT LOCATIONS
185
How will we wire technologies together? The answers to these questions are the
domain of the Locations column.
To model the structure of data entity classes or activities is not the same thing
as modeling the entity classes or the activities themselves in the business. In our
metamodel of data, we have been concerned with the concepts of, for example,
“entity class” and “attribute”. In our model of activities, we were concerned with
the concepts of “process” and “function.” The actual entity classes (e.g., product)
and processes (e.g., “Accept order”) that describe a particular company would
themselves be modeled in the course of developing systems for that company.
But for the most part, the realms of business data and metadata are quite different.
Locations, on the other hand, are basically modeled the same way at the busi-
ness level and meta level. As with the People and Organizations column, described
in Chapter Five, the central entity classes for the Locations column is actually taken
from the generic business model. In both the business model and the metamodel,
we must model the locations we are concerned with, whether we are conducting
business there or operating a system there. For this reason, as with Chapter Five,
the core of the model in this chapter makes extensive use of the business model for
locations presented in Data Model Patterns: Conventions of Thought [Hay 1996].
The Locations and People column share another characteristic: the Locations
column and the People and Organizations column are primarily about the location
of and management of the other columns. Speciﬁcally, the location part of the
model shows the location of activities, business rules, tables, and so forth.
Site
All perspectives in the Locations column make use of the same core entity class,
site, shown in Figure 4–2. A site which also could be called address, is a means
for locating people, organizations, or other resources. There are two primary types
of sites.
–
A physical site is a tangible place on Earth that has a purpose, such as an ofﬁce
building, a home, or an oil well. An alternative name is facility. This must be
one of the following:

street address: This includes a reference to one or more streets, plus the
city, state or province, and country where the site is located.

186
LOCATIONS
SITE
# Name
* Description
an example of
embodied in
PHYSICAL SITE
* (City)
 (State or province)
 (Postal code)
* (Country)
VIRTUAL SITE
* Creation date
 Removal date
STREET ADDRESS
* Street number
* Street
POST OFFICE BOX
* Post office box number
a sub-
type of
a super-
type of
(2+)
SITE TYPE
# Name
* Description
composed of
part of
DATABASE
INSTANCE
E-MAIL SITE
* Domain name
* E-mail address
TELEPHONIC SITE
 Country code
* Area code
* Exchange
* Telephone number
 Extension
SERVER
WEB SITE
* Uniform resource identifier
OTHER
VIRTUAL
SITE
Fig. 4–2: Sites.

post ofﬁce box: Because a post ofﬁce box has a single physical location
as well, physical site also includes those.
–
A virtual site does not have a physical reality beyond bits in a computer some-
where. It is identiﬁed by an address that is meaningful only in an electronic
environment. This includes:

e-mail site, identiﬁed by an e-mail address (contained in the attributes
“Domain name” and “E-mail address”).

ABOUT LOCATIONS
187

web site, identiﬁed by a “Uniform resource locator (URL)”, “the generic
term for all types of names and addresses that refer to objects on the
World Wide Web”.∗

telephonic site, identiﬁed by a telephone number (contained in the
attributes “Country code”, “Area code”, “Exchange”, “Telephone num-
ber” and “Extension”).

database instance, which is where data may be located.

server, a portion of the operating system that controls the running of a
system to which access is gained asynchronously.

other virtual site, a virtual site that is not one of the preceding.
As was done elsewhere in the metamodel, the entity class sitetype redundantly
represents the sub-types shown for site. This structure allows us to show the
displayed sub-types as fundamental to the nature of the entity class site, while
providing ﬂexibility in the more detailed sub-types as necessary. Each site type
may be a super-type of two or more other site types. For example, sub-types of
“Physical site” could be added, such as “Ofﬁce building”, “Home”, “Warehouse”,
and so forth.
Business Rule
The ﬁrst instances of site type must include “Physical site”, “Virtual
site”, “E-mail site” (a sub-type of “Virtual site”), “Telephonic site” (also a
sub-type of “Virtual site”), and so forth.
Figure 4–3 introduces the concept of site structure, which must be a physical
communication link (the fact that it is possible to send messages from one site
to another), a site composition (the fact that one site contains another), or an
other site structure. The attribute of site composition, “Overlap indicator”,
∗There are copious of references on both sides arguing deﬁnitively that it should be either a
“uniform” resource locator or a “universal” one. Tim Berners-Lee uses uniform though so that
is good enough for your author [Berners-Lee 1988].

SITE
# Name
* Description
an example of
embodied in
PHYSICAL SITE
* (City)
° (State or province) 
° (Postal code)
* (Country)
VIRTUAL SITE
* Creation date
° Removal date
STREET ADDRESS
* Street number
* Street
POST OFFICE BOX
* Post office box number
E-MAIL SITE
* Domain name
* E-mail address
DATABASE INSTANCE
SERVER
WEB SITE
* Uniform resource identifier
TELEPHONIC SITE
° Country code
* Area code
* Exchange
* Telephone number
° Extension
OTHER VIRTUAL
SITE
a sub-
type of
a super-
type of
(2+)
SITE TYPE
# Name
* Description
SITE STRUCTURE
# Name
* Description
* Effective date
° Until date
SITE STRUCTURE
TYPE
# Name
* Description
PHYSICAL
COMMUNICATION
LINK
OTHER SITE
STRUCTURE
SITE
COMPOSITION
the source
of
from
the destination
of
to
embodied in
an example
of
a sub-
type of
a super-
type of (2+)
Fig. 4–3: Site structures.

ABOUT LOCATIONS
189
determines whether the two sites overlap (True) or one is contained entirely
within the other (False).
Each site structure must be an example of one and only one site structure
type. Each site structure type may be a super-type of at least two other site
structure types.
Business Rule
By deﬁnition, the ﬁrst instances of site structure type must be “Site
composition”, “Physical communication link”, and “Other site structure”.
Geographic Location
If a physical site is a place with a purpose, where is it? Figure 4–4 shows a
geographic location to be simply any identiﬁed place on the Earth. This may be
either a geographic area or a geographic point.∗A geographic area is either
a geopolitical area or a management area. A geopolitical area, such as a state
or postal area, has boundaries deﬁned by law or treaty. A management area,
such as the “Southeastern sales region”, has boundaries deﬁned by the company
itself.
A geographic point is simply a point in one dimension. In this model the
attributes are shown as the components of latitude and longitude, plus elevation.
Schemes of reference can be much more complex than this, but this is sufﬁcient
for metadata purposes. As with other entity classes in this model, each geo-
graphic location must be an example of exactly one geographic location type,
where the ﬁrst instances of geographic location type correspond to the sub-
types explicitly shown for geographic location. Sub-types of Geopolitical area
can then be “State”, “Country”, “Postal area”, “City”, and so forth. A sub-type
of administrative area can be “Postal area”.
∗In the oil industry, it is necessary to also have a geographic solid to describe oil reservoirs, but
that is beyond the scope of this book.

190
LOCATIONS
GEOGRAPHIC LOCATION
# Name
* Description
GEOGRAPHIC
LOCATION
TYPE
# Name
* Description
SITE
LOCATION
# Effective date
 Until date
GEOGRAPHIC STRUCTURE
# Effective date
* Until date
* Overlap indicator
GEOGRAPHIC AREA
GEOGRAPHIC POINT
* Latitude degrees
* Latitude minutes
* Latitude seconds
* Longitude degrees
* Longitude minutes
* Longitude seconds
* Altitude
the placement
of
the placement
in
part
of
composed
 of
of
located via
located via
at
the location
of
an example
of
embodied
in
a sub-
type of
a super-
type of 
(2+)
GEOPOLITICAL
AREA
MANAGEMENT
AREA
part of
composed
of
SITE STRUCTURE
# Name
* Description
* Effective date
 Until date
SITE
COMPOSITION
SITE STRUCTURE
TYPE
# Name
* Description
embodied in
an example
of
a sub-
type of
a super-
type of (2+)
SITE
# Name
* Description
an example
of
embodied in
PHYSICAL SITE
* (City)
 (State or province)
 (Postal code)
* (Country)
VIRTUAL SITE
* Creation date
 Removal date
STREET ADDRESS
* Street number
* Street
POST OFFICE BOX
* Post office box number
E-MAIL SITE
* Domain name
* E-mail address
DATABASE INSTANCE
SERVER
WEB SITE
* Uniform resource identifier
TELEPHONIC SITE
 Country code
* Area code
* Exchange
* Telephone number
 Extension
OTHER VIRTUAL
SITE
a sub-
type of
a super-
type of
(2+)
SITE TYPE
# Name
* Description
PHYSICAL
COMMUNICATION
LINK
OTHER SITE
STRUCTURE
the source
of
from
the destination
of
to
located via
Fig. 4–4: Geographic locations.

ABOUT LOCATIONS
191
Business Rule
The ﬁrst two instances of geographic location type must be “Geo-
graphic area”, “Geographic point”, “Geopolitical area”, and “Management
area”, where “Geopolitical area” and “Management area” are both sub-types
of “Geographic area”.
Since the some physical site can be in more than one geographic location
and vice versa, the intersect entity class site location represents the fact of a
single physical site being located in a particular geographic location. Note that
the “(City)”, “(State)”, “(Country)”, and “(Postal area)” as attributes of physical
site are shown with parentheses to denote that they are really derived attributes.
They are derived from the geographic location entity class via the site location
entity class, where site location is the fact that a particular site is located in a
particular geographic location. For example, the value of (City) in physical
site is actually the “Name” of the geographic location that is an example of the
geographic location type “City”, and that is the location of the site location
that is of the physical site involved.
Business Rule
Although a physical site may be associated with multiple geographic
locations, it may only be associated with one each of “City”, “State”,
“Country”, and “Postal area”.
A geographic location can be complex. For example, it is possible for one U.S.
“Postal area” to be in two (or more?) cities. Thus, it is necessary to add the entity
class geographic structure, which allows any geographic location to be part
of one or more (geographic structures, each of which must be the placement in
one and only one) other geographic location. The attribute “Overlap indicator”
describes whether one geographic location is entirely contained within the other
(“False”) or if they simply overlap (“True”).
Note that among other things this permits each geographic area to be deﬁned
in terms of the set of geographic points that demark its boundary. Because each

192
LOCATIONS
physical site may be located via one or more geographic location and each
geographic location may be the location of one or more physical sites, each
instance of the entity class site location is the fact that one physical site is
located in one geographic location.
ROW TWO: PLACING PARTIES, BUSINESS
PROCESSES, AND MOTIVATION
Business Locations
In addition to the relationship between party and site (from the People and
Organizations column, discussed in Chapter Five on pages 218 and 219), two
other columns have a strong association with site. Figure 4–5 shows the rela-
tionships among site, and business process (from the Activity column, which
is discussed in Chapter Three). Speciﬁcally, as shown in Figure 4–5, business
location is deﬁned to be the fact that one site is associated with (for) one busi-
ness process at a particular time. The timing of the location is constrained by
the attributes “Effective date” and “Until date”. The nature of the association is
deﬁned by business location type, which may be “Conducted in”, “Managed
via”, and so forth.
Means, End, and Effort
Figure 4–6 reproduces a part of the model from Chapter Seven about the Motiva-
tion column. In particular, this is from the Row Two view of the model, showing
end, means, and effort. An end for an organization is simply something it sets
out to accomplish. Primary among these, of course, is the company’s vision—its
overall view of what it wants to be. Other ends include various types of desired
result, each of which is a state or target the enterprise intends to achieve or
maintain.
A means is any capability that may be called on, activated, or enforced in
order to achieve one or more ends. This entity class describes the nature of the
ongoing operational activities of the enterprise—what the business is or will be
doing on a day-to-day basis. The principal types of means are course of action
and directive. A course of action is an approach or plan for conﬁguring some

ROW TWO: PLACING PARTIES, BUSINESS PROCESSES, AND MOTIVATION 193
SITE
# Name
* Description
PHYSICAL SITE
* (City)
° (State or province) 
° (Postal code)
* (Country)
ACTIVITY
# ID
* Name
° Description
* Date established
° Date discontinued
BUSINESS PROCESS
° Scheduled start date
° Scheduled end date
° Actual start date
° Actual end date
VIRTUAL SITE
* Creation date
° Removal date
E-MAIL SITE
* Domain name
* E-mail address
WEB SITE
* Uniform resource identifier
TELEPHONIC SITE
° Country code
* Area code
* Exchange
* Telephone number
° Extension
OTHER VIRTUAL SITE
BUSINESS LOCATION
# Effective date
* Until date
BUSINESS LOCATION
TYPE
# Name
* Description
conducted
at
for
the site of
in
embodied in
an example
of
Fig. 4–5: Business process locations.

SITE
# Name
* Description
PHYSICAL SITE
° Street address 1
° Street address 2
* (City)
° (State) 
° (Postal area)
* (Country)
BUSINESS PROCESS
° Scheduled start date
° Scheduled end date
° Actual start date
° Actual end date
VIRTUAL SITE
* Creation date
° Removal date
E-MAIL SITE
* Domain name
* E-mail address
WEB SITE
* Uniform resource identifier
TELEPHONIC SITE
° Country code
* Area code
* Exchange
* Telephone number
° Extension
OTHER VIRTUAL SITE
BUSINESS LOCATION
# Effective date
* Until date
BUSINESS LOCATION
TYPE
# Name
* Description
employed
in
through the
use of
the site
of
in
conducted
at
for
embodied in
an 
example
of
EFFORT
° Scheduled start date
° Scheduled end date
MEANS
# Name
* Description
* Effective date
° Until date
END
# Name
* Description
* Effective date
° Expiry date
VISION
DESIRED RESULT
OTHER
EFFORT
DIRECTIVE
BUSINESS RULE
BUSINESS 
POLICY
COURSE OF ACTION
TACTIC
STRATEGY
PROGRAM
the source
of
of
governed
by
to govern
invoked
via
invoked
by
achieved via
to
achieve
composed
of
part of
formulated
based on
the source
of
made
operative
by
to make
operative
implemented by
implemented via
implementer
of
to carry
out
part
of
composed
of
part of
composed of
part of
composed of
MISSION
PROJECT
ACTIVITY
# ID
* Name
° Description
* Date established
° Date discontinued
Fig. 4–6: Efforts.

ROW THREE: DATA FLOW DIAGRAMS
195
aspect of the enterprise, whereas a directive is a speciﬁcation—such as a business
policy or a business rule—that constrains course of action.
As shown in Figure 4–6, effort is the application of a business activity to
carry out a course of action. Speciﬁcally, an effort is either a project or a
program that is a group of objects. Each effort, then, must be invoked by a
course of action to achieve a desired result through the use of a business
process.
Means, end, and effort are shown in Figure 4–6 to prepare the way for
locating them at a site. Figure 4–7 introduces (again, borrowed from Chapter
Seven) an inﬂuencer. An inﬂuencer is anything that can produce an effect on
the enterprise without apparent exertion of tangible force or direct exercise of
command. An inﬂuencer often acts without deliberate effort or intent.
Inﬂuencers are either internal inﬂuencers (internal to the company,
that is)—such as “limitations on available technology”—or external inﬂuencers,
such as “competition” or “supply problems”. See Chapter Seven for more on
inﬂuencers. The point of all this is that a motivation location at a site may be
of an inﬂuencer. Figure 4–7 shows that a motivation location at a site must
be the location of an effort, directive, or inﬂuencer.
ROW THREE: DATA FLOW DIAGRAMS
For the most part, Row Three is a conceptual model, describing processes and
data ﬂows without respect to where these are going to happen. It is for Row Two
(where things happen in the business), Row Four (where things are intended to
happen), and Row Six (where systems are installed) to accommodate the Locations
column. It is possible to deﬁne that a system process in Row Three might be done
at a site, but this is only if the site is somehow central to the meaning of the
system process. Normally, this would not be speciﬁed in an essential data ﬂow
diagram.
The concept of network, however, will be important to a system’s design, and
it does apply here, primarily in the form of data ﬂows. Figure 4–8 is derived
from the Chapter Three (activities) view of the metamodel, showing data ﬂows
and the system processes, data stores, parties, and positions they link. As just
stated, this is a conceptual network, without regard to mechanisms, identiﬁed
people, or ofﬁces. It is possible, however, to identify that this data ﬂow may be

EFFORT
° Scheduled start date
° Scheduled end date
MEANS
# Name
* Description
* Effective date
° Until date
END
# Name
* Description
* Effective date
° Expiry date
VISION
DESIRED RESULT
OTHER
EFFORT
DIRECTIVE
BUSINESS RULE
BUSINESS 
POLICY
COURSE OF ACTION
MISSION
TACTIC
STRATEGY
the source
of
of
governed
by
to
govern
achieved
via
to achieve
formulated
based on
the source
of
made operative by
to make
operative
implemented
by
implemented via
implementer
of
to carry out
part
of
composed
of
part of
composed of
of
specific to
embodied in
of
specific to
INFLUENCER
TYPE
# Name
* Description
the
object
of
the
object
of
MOTIVATION LOCATION
# Effective date
° Until date
of
specific
to
subject
to
an example of
INFLUENCER
# Name
* Description
* Effective date
° Expiry date
ASSESSMENT
# Effective date
* Description
° Until date
ASSESSMENT
ELEMENT
# Effective date
° Until date
INTERNAL INFLUENCER
EXTERNAL
INFLUENCER
on
of
composed
of
in
on
Fig. 4–7: Motivation locations.
196

ACTIVITY
# ID
* Name
° Description
* Date established
° Date discontinued
BUSINESS PROCESS
° Scheduled start date
° Scheduled end date
° Actual start date
° Actual end date
BUSINESS LOCATION
# Effective date
* Until date
BUSINESS 
LOCATION
TYPE
# Name
* Description
employed
in
through 
the use 
of
the site of
in
conducted
at
for
embodied
in
an 
example
of
PROGRAM
composed
of
the site
of
at
SITE
# Name
* Description
PHYSICAL SITE
° Street address 1
° Street address 2
* (City)
° (State) 
° (Postal area)
* (Country)
VIRTUAL SITE
* Creation date
° Removal date
E-MAIL SITE
* Domain name
* E-mail address
WEB SITE
* Uniform resource identifier
TELEPHONIC SITE
° Country code
* Area code
* Exchange
* Telephone number
° Extension
OTHER VIRTUAL SITE
PROJECT
part of
Fig. 4–7: continued.
197

198
LOCATIONS
SITE
# Name
* Description
PHYSICAL SITE
* (City)
° (State or province) 
° (Postal code)
* (Country)
SITE STRUCTURE
# Name
* Description
* Effective date
° Until date
SITE STRUCTURE TYPE
# Name
* Description
PHYSICAL
COMMUNICATION
LINK
VIRTUAL SITE
* Creation date
° Removal date
DATA FLOW
# Name
* Description
* Create indicator
* Retrieve indicator
* Update indicator
* Delete indicator
from
to
the
responsibility
of
destination of
source of
POSITION
# Name
* Description
PARTY
# ID
DATA STORE
SYSTEM PROCESS
# Identifier
* Name
* Description
VIRTUAL ENTITY CLASS
* Definition
ORGANIZATION
* Organization name
* Description
PERSON
* Given name
° Middle initial
* Surname
responsible for
from
to
destination of
source of
from
to
destination of
source of
used by
expressed as
from
via
to
the use of
the use of
destination of
source of
used for
used for
location of
done at
the source
of
from
embodied in
an example of
the
destination
of
to
ELEMENTARY ENTITY CLASS
used for
via
used for
STANDARD ENTITY CLASS
Fig. 4–8: Data ﬂow diagrams.

ROW FOUR: PLACING DATA AND PROGRAMS
199
via a physical communication link between two sites (described previously), as
a way of documenting what is meant in the Row Three model. Again, this would
not be done in an essential data ﬂow diagram.
ROW FOUR: PLACING DATA AND PROGRAMS
Row Four is concerned with the design of systems, and that design must take into
account where programs and data will be placed and how the programs will com-
municate with each other. Figure 4–9 shows part of the designer’s Row Four model
as discussed in Chapters Two and Three. In it we see the entity classes of class
implementation, class element, and persistence mechanism (particularly table,
view, and column). To that we add site, and link it to the tables and columns with
persistence mechanism location. That is, a persistence mechanism location
is the fact that a particular table, view, or column is expected to be kept in a
particular site.
Note that this allows us to place a table not only in the Cleveland data cen-
ter (for example) but in a particular database. That is, a persistence mechanism
may be speciﬁc to a persistence mechanism location at a site type. From the
designer’s point of view, it is probably premature to specify a particular site.
Instead, by making a persistence mechanism location at a site type the designer
simply speciﬁes whether the location will be a physical site (such as the aforemen-
tioned Cleveland data center) or a virtual site (such as the WHIMSY∗database
instance).
This is an opportunity to expand on the list of site types through the super-
type of relationship. Naturally, site structure also allows you to specify that
the WHIMSY database instance is part of the Cleveland data center physical
site, so it is not necessary to specify a persistence mechanism location for both
of them.
Figure 4–10 borrows from the object-oriented part of the model in Chapter
Three, and shows that a module location can link a site type with either a
program module or a particular operation.
∗The “Warehouse Information System,” of course . . .

200
LOCATIONS
SITE STRUCTURE
# Name
* Description
* Effective date
° Until date
SITE STRUCTURE TYPE
# Name
* Description
PERSISTENCE MECHANISM
# Name
* Description
COLUMN
* Label
* Format
° Length
° Decimal places
* Mandatory indicator
° Default value
DATA GROUP
TABLE
the source
of
from
used by
made
persistent
in
inheriting
from
a
generalization
of
used
by
embodied in
an example of
CLASS TYPE
# Name
* Description
embodied in
an example of
composed
of
part of
used
as
the use of
composed
of
part of
SITE TYPE
# Name
* Description
embodied in
a super-type of (2+)
a sub-type of
an example of
the
destination
of
to
SITE
# Name
* Description
PHYSICAL SITE
° Street address 1
° Street address 2
° (City)
° (State) 
° (Postal area)
° (Country)
VIRTUAL SITE
SERVER
DATABASE INSTANCE
# ID
* Name
° Description
* Creation date
° Removal date
OTHER VIRTUAL SITE
VIEW
* SQL expression
* Effective date
° Until date
DISCRETE INSTANCE ATTRIBUTE
OTHER INSTANCE ATTRIBUTE
OTHER
DISCRETE
INSTANCE
ATTRIBUTE
STATE
CLASS IMPLEMENTATION
APPLICATION CLASS
CLASS ATTRIBUTE
FOUNDATION CLASS
BUSINESS CLASS
ARCHITECTURAL
CLASS
CLASS ELEMENT
# Sequence number
* Name
* Visibility
INSTANCE ATTRIBUTE
part
of
composed
of
PERSISTENCE MECHANISM LOCATION
# Effective date
° Until date
* Directory structure
specific to
of
the site
of
at
made 
persistent
in
Fig. 4–9: Persistence mechanisms.

ROW FOUR: PLACING DATA AND PROGRAMS
201
OPERATION
# ID
° Description
* Visibility
an
implementation
of
implemented
by
composed of
part
of
sent by
sender
of
to invoke
invoked
by
to act
on
acted
on by
source of
performed by
objects in
SITE TYPE
# Name
* Description
embodied in
a super-type of (2+)
a sub-type of
an example of
MESSAGE TYPE
# Name
* Description
METHOD
DATABASE MANAGEMENT
SYSTEM
PACKAGE
CLASS IMPLEMENTATION
DBMS TRIGGER
UTILITY
STORED
PROCEDURE
OTHER EXECUTABLE
MODULE
SYSTEM MODULE
EXECUTABLE MODULE
a generalization
of
inheriting
from
MODULE LOCATION
# Effective date
° Until date
specific
to
specific to
the site
of
at
of
of
SITE
# Name
* Description
PHYSICAL SITE
° Street address 1
° Street address 2
° (City)
° (State or province) 
° (Postal code)
° (Country)
VIRTUAL SITE
* Creation date
° Removal date
SERVER
DATABASE INSTANCE
# ID
* Creation date
° Removal date
PROGRAM MODULE
# ID
* Name
* Description
* Version
° Scenario
° Program code
Fig. 4–10: Module locations.

202
LOCATIONS
MODULE LOCATION
# Effective date
° Until date
MESSAGE TYPE
# Name
* Description
DESIGN LINK
# Effective date
° Until date
of
of
at
for
the
use
of
by means
of
a medium
for
via
sent
by
to
invoke
sender of
performed by
objects in
implemented
by
invoked by
OPERATION
# Descritption
° Visibility
specific to
specific to
the
source
of
the
destination
of
from
to
used
for
a sub-type
of
a super-type
of (2+)
embodied
in
an
example
of
to
the destination
of
the
source
of
the
site
of
from
SITE STRUCTURE TYPE
# Name
* Description
SITE STRUCTURE
# Name
* Description
* Effective date
° Until date
PHYSICAL
COMMUNICATION
LINK
PROGRAM MODULE
COMMUNICATION
an
implementation
of
composed of
part of
to act
on
acted
on by
source of
METHOD
DATABASE MANAGEMENT
SYSTEM
PACKAGE
CLASS IMPLEMENTATION
DBMS TRIGGER
UTILITY
STORED
PROCEDURE
OTHER EXECUTABLE
MODULE
SYSTEM MODULE
a generalization
of
inheriting
from
SITE
# Name
* Description
PHYSICAL SITE
° (City)
° (State or province) 
° (Postal code)
° (Country)
VIRTUAL SITE
* Creation date
° Removal date
SERVER
DATABASE INSTANCE
# ID
* Creation date
° Removal date
PROGRAM MODULE
# ID
* Name
* Description
* Version
° Scenario
° Program code
EXECUTABLE MODULE
Fig. 4–11: Design links.

ROW SIX: SYSTEM INVENTORY
203
Figure 4–11 shows a second way a network can be designed. First, “Physical
communication link” is a site structure type that can be a super-type of one or
more other site structure types. Thus, we have a way of cataloguing the types
of “Physical communication links” that are possible.
As described in Chapter Three, a program module communication is the
fact that as part of its operation one program module will send messages to
another. In Figure 4–11 design link is the fact that a program module commu-
nication makes use of a particular site structure type. Speciﬁcally, a design
link must be for a program module communication, and must be the use
of a particular site structure type, speciﬁcally one that is a sub-type of the
site structure type “Physical communication link”. For example, a program
module communication might describe program module a invoking program
module b. A site structure type might describe the fact that a headquarters data
center communicates with Field ofﬁce data centers. A design link, then would
assert that the module a/b connection can make use of the Headquarters/Field
ofﬁce link.
Business Rule
Each design link must be the use of a site structure type that is a
sub-type of “Physical communication link”.
ROW SIX: SYSTEM INVENTORY
Database Instances
Database instance is a specialized virtual site that is solely the home of the
table instances that were described for Row Six in Chapter Two. This is shown
in Figure 4–12. Table instance is deﬁned as the fact that a particular data group
(table or view) is installed into a particular database instance. Over the life of
a system, a data group may be kept in one or more database instances, and
thus the entity class table instance has “Date created” and “Date removed” as
attributes.

204
LOCATIONS
OTHER SITE 
STRUCTURE
SITE
COMPOSITION
PHYSICAL
COMMUNICATION LINK
from
the
source of
the
destination of
to
SITE
# Name
* Description
VIRTUAL SITE
* Creation date
° Removal date
TABLE INSTANCE
# ID
* Name
* Date created
° Date removed
ROW
INSTANCE
# ID
COLUMN
INSTANCE
# ID
* Name
CELL INSTANCE
° Date last updated
SITE STRUCTURE
# Name
* Description
* Effective date
° Until date
PARTY
# ID
COMPANY
* Date of incorporation
SERVER
DATABASE INSTANCE
# ID
* Creation date
° Removal date
PHYSICAL SITE
° Street address 1
° Street address 2
° (City)
° (State)
° (Postal area)
° (Country)
created on
the location of
the location of
embodied
in
kept in
PROGRAM MODULE
# ID
* Name
* Description
* Version
° Scenario
° Program code
APPLICATION SYSTEM
# Name
* Description
DATA GROUP
COLLECTION
# Name
° Purpose
DATABASE
MANAGEMENT
SYSTEM
created by
the creator 
of
owned
by
owned
by
responsible
for
responsible
for
composed
of
an implementation of
a
reference
for
part of
in
in
composed
of
part of
based on
composed
of
a
reference
for
COLUMN
* Label
* Format
° Length
° Decimal places
* Mandatory indr
° Default value
PERSISTENCE MECHANISM
# Name
* Description
VIEW
* SQL expression
* Effective date
° Until date
TABLE
DATA GROUP
part
of
composed
of
part of
implemented
as
the basis for
the location of
EXECUTABLE MODULE
ORGANIZATION
* Organization name
* Description
Fig. 4–12: Data implementation.

ROW SIX: SYSTEM INVENTORY
205
Note that the fact that a site may be part of another site (via site
composition—a kind of site structure) allows representation of the fact that
a particular database instance may be located in a particular physical data
center.
Also note that, each database instance must be created on a particular
database management system, which must be created by a (vendor) company.
Servers
Figure 4–13 shows program copy as it is kept in a server. A server, a virtual site,
is a piece of an operating system that controls the running of an asynchronous
program. That is, the program runs continuously, and responds to inputs as they
happen.
The server is itself implemented via a program copy of a program module;
speciﬁcally, an executable module that is a system module. Because a program
copy may be used as more than one server, server implementation is the fact
that one program copy is being used as one server.
In Figure 4–14, we see that a server must be located on a physical platform—
that is, a computer. A physical platform, of course, must be currently located
at a physical site, and this is shown in the ﬁgure by its having been located via
a movement from one physical site to another physical site. The physical site
that is the destination of the movement with the latest “Movement date” is, of
course, the current location.
The physical implementation of a network is through a series of physical
communication links from one site to another, as shown in Figure 4–15. Each
program copy, then, is the user of one or more physical communication links.
Because each physical communication link may be used in one or more pro-
gram copies, the entity class physical unit implementation is the fact that one
program copy is the user of one physical communication link. That is, each
physical link implementation must be of one program copy and in one physical
communication link.
Each physical link implementation must be of one and only one design
link. The attribute “Input indicator” in physical link implementation describes
whether the link is input to the physical communication link (“True”) or output
from it (“False”).

SERVER
IMPLEMENTATION
# Name
* Description
* Effective date
° Until date
PROGRAM COPY
# Sequence number
° Name
of
the use of
kept in
of
an example of
embodied in
to
the destination
of
from
the source
of
replicated
in
used as
PHYSICAL SITE
° Street address 1
° Street address 2
° (City)
° (State)
° (Postal area)
° (Country)
SITE
# Name
* Description
SERVER
DATABASE INSTANCE
# ID
* Name
° Description
* Creation date
° Removal date
VIRTUAL SITE
OTHER VIRTUAL SITE
SITE STRUCTURE
# Name
* Description
* Effective date
° Until date
SITE STRUCTURE TYPE
# Name
* Description
PROGRAM MODULE
# ID
* Name
* Description
* Version
° Scenario
° Program code
EXECUTABLE MODULE
OTHER
EXECUTABLE
MODULE
SYSTEM
MODULE
PHYSICAL
COMMUNICATION LINK
SITE COMPOSITION
OTHER SITE STRUCTURE
implemented via
implemented via
implemented via
the location of
the location of
the location of
Fig. 4–13: Program locations.
206

PHYSICAL SITE
° Street address 1
° Street address 2
° (City)
° (State)
° (Postal area)
° (Country)
SERVER
DATABASE INSTANCE
# ID
* Name
° Description
* Creation date
° Removal date
VIRTUAL SITE
OTHER VIRTUAL SITE
MOVEMENT
# Movement date
PHYSICAL PLATFORM
# Serial number
* Model name
* Model number
* Description
of
to
from
source
of
destination
of
SITE
# Name
* Description
located on
located via
the location
of
an example of
embodied in
replicated in
of
used as
the use of
kept in
of
to
the 
destination 
of
from
the source
of
SERVER IMPLEMENTATION
# Name
* Description
* Effective date
° Until date
SITE STRUCTURE TYPE
# Name
* Description
PROGRAM COPY
# Sequence number
° Name
PROGRAM MODULE
# ID
* Name
* Description
* Version
SITE STRUCTURE
# Name
* Description
* Effective date
° Until date
PHYSICAL
COMMUNICATION LINK
SITE COMPOSITION
OTHER SITE STRUCTURE
implemented via
implemented via
the location of
the location of
implemented via
the location of
Fig. 4–14: Physical platforms.
207

208
LOCATIONS
PHYSICAL LINK IMPLEMENTATION
# Effective date
° Until date
° Description
* Input indicator
used by
of
of
SERVER
IMPLEMENTATION
# Name
* Description
* Effective date
° Until date
PROGRAM COPY
# Sequence number
° Name
PROGRAM MODULE
# ID
* Name
* Description
* Version
DESIGN LINK
# Effective date
° Until date
PROGRAM MODULE
STRUCTURE
# Effective date
° Until date
PROGRAM MODULE
COMMUNICATION
an example of
used in
destination of
by means of
embodied in
used
for
source
of
replicated
in
from
to
SITE STRUCTURE TYPE
# Name
* Description
of
of
of
the
use
of
the use of
user
of
used as
kept in
SITE
# Name
* Description
to
the
destination
of
implemented via
from
the
source
of
SERVER
PHYSICAL SITE
° Street address 1
° Street address 2
° (City)
° (State)
° (Postal area)
° (Country)
DATABASE INSTANCE
# ID
* Name
° Description
* Creation date
° Removal date
VIRTUAL SITE
OTHER VIRTUAL SITE
SITE STRUCTURE
# Name
* Description
* Effective date
° Until date
PHYSICAL
COMMUNICATION LINK
SITE COMPOSITION
OTHER SITE STRUCTURE
the location of
the location of
implemented via
implemented via
the location of
implemented via
Fig. 4–15: Physical networks.

5
PEOPLE AND ORGANIZATIONS
One of the many reasons for the bewildering and tragic character of human existence is
the fact that social organization is at once necessary and fatal. Men are forever creating
such organizations for their own convenience and forever ﬁnding themselves the victims
of their home-made monsters.
—Aldous Huxley [1950]
THE PEOPLE AND ORGANIZATIONS COLUMN
The People and Organizations view encompasses the following.
–
The planner is responsible for a statement of the organization’s philosophy and
approach to managing human resources. Is this an authoritarian organization,
such as the Army or more informal, such as a commune?
–
The business owner sees the organization chart.
How is the enterprise
organized in terms of reporting structures and overall responsibilities?
–
The architect captures and describes roles and responsibilities. In terms of roles
and positions, what is each person responsible for in the operation of the
company?
–
The designer speciﬁes user interfaces and security requirements. First, how
will people interact with any prospective system? Second, what elements are
involved in providing security for access to data?
–
The builder is responsible for the actual construction of user interfaces and
security schemes.
–
The functioningsystem consists of the actual mechanisms for controlling access
to systems and databases.
209

210
PEOPLE AND ORGANIZATIONS
Figure 5–1 shows the architecture framework with the cells highlighted that
we will cover in this chapter. Speciﬁcally, these include the views of the business
owner, the architect, the designer, and the functioning system.
ABOUT PEOPLE AND ORGANIZATIONS
As with locations, described in Chapter Four, people and organizations are modeled
the same way at the business level and the meta levels. We must model the people
and organizations we are concerned with, whether they are conducting business
or managing a data warehouse. For this reason, the models in this chapter are
going to look much like the business models for people and organizations in Data
Model Patterns: Conventions of Thought [Hay 1996]. The difference is that the
primary entity classes from the business will be related not to other business entity
classes but to the metamodel entity classes we have been discussing. Moreover,
the business entity classes borrowed by the metamodel will be used in all rows.
Figure 5–2 shows the primary entity classes in this topic. Just as person is an
important entity class in any business model, it is also essential for our meta-
model. Included here are records of all people of interest to a particular effort. In
the business, these are employees, customers, vendors, agents, and so forth. In the
metamodel world, people also play many roles (database administrator, program-
mer, data steward, etc.), but these are for producing systems and maintaining the
quality (accuracy, currency, and so on) of each datum∗used by an enterprise.
Groups of people are organizations. Organizations of interest both to
the business and to the data manager might include company, government
agency, and internal organization. A company is organized to conduct busi-
ness. In the United States, a company is a corporation, a sole proprietorship, or a
partnership.
A government agency is an organization in a national, state or provincial,
or local government. This also includes nation states as well as international
organizations, such as the European Union and the United Nations. An internal
organization is any permanent or temporary department, section, branch, or
other group within either a company or a government agency. This includes
∗If data are plural, you have to use datum for the singular, right?

ABOUT PEOPLE AND ORGANIZATIONS
211
Data
(What)
Activities
(How)
Locations
(Where)
People
(Who)
Time
(When)
Motivation
(Why)
Objectives/
Scope
(Planner’s
View)
Enterprise
Model
(Business
Owner’s
View)
Model of
Fundamental
Concepts
(Architect’s
View)
Technology
Model
(Designer’s
View)
Detailed
Representation
(Builder’s
View)
Functioning
System
(Working system)
Databases
Program
inventory,
logs
Communi-
cations
facilities
Trained
people
Business
events
Enforced
rules
Physical
storage
design
Detailed
program
design
Network
architecture,
protocols
Screens,
security
coding
Timing
definitions
Rule
specification
program
logic
Database
design
System
design,
program
structure
Hardware,
software
distribution
User
interface,
security
design
Event
processing
Business rule
design
Convergent
e/r model
Essential
data flow
diagram
Locations
of roles
The viable
system, use
cases
Entity life
history
Business rule
model
Language,
divergent
data model
Business
process
model
Logistics
network
Organization
chart
State/
transition
diagram
Business
strategies,
tactics,
policies, rule
List of things
important
to the
enterprise
List of
functions the
enterprise
performs
List of
enterprise
locations
Organization
approaches
Business
master
schedule
Business
vision and
mission
Fig. 5–1: People and Organizations column.

212
PEOPLE AND ORGANIZATIONS
PERSON
* Given name
° Middle initial
* Surname
ORGANIZATION
* Organization name
* Description
COMPANY
* Date of incorporation
INTERNAL
ORGANIZATION
GOVERNMENT
AGENCY
OTHER
ORGANIZATION
Fig. 5–2: People and organizations.
temporary organizations, such as project teams and task forces. In addition, there
are other organizations that do not fall into these categories. These might be
labor unions, professional societies, or households.
Of greatest interest in the metadata world are the organizations that are the
source of business rules, data quality standards, and the like. These will largely
be internal organizations, although in many industries government agencies
will be a factor as well.
There are numerous examples of relationships that apply to either a person or
an organization. For this reason, it is convenient to invent the concept of party,
which is either a person or an organization of interest to us. This is shown in
Figure 5–3.
As it happens, parties are often related to each other. “Corporate structure”
refers to an internal organization’s being part of another internal organiza-
tion or of a company; “Employment” describes a person’s being employed by

ABOUT PEOPLE AND ORGANIZATIONS
213
PARTY
# ID
PERSON
* Given name
° Middle initial
* Surname
ORGANIZATION
* Organization name
* Description
COMPANY
* Date of incorporation
GOVERNMENT
AGENCY
INTERNAL
ORGANIZATION
OTHER
ORGANIZATION
Fig. 5–3: Parties.
a company or by a government agency; and so forth. A person is married to
another person.∗Figure 5–4 shows that a party relationship is the fact that one
party is related to another party. That is, each party relationship must be from
one party and to another party.
In Figure 5–5, each party relationship is seen to be an example of one and only
one party relationship type. Examples of party relationship types are as just
presented. “Corporate structure” refers to an internal organization’s being part
of another internal organization or of a company, “Employment” describes a
person’s being employed by a company or by a government agency, and so forth.
∗I know, this has nothing to do with metadata, but it is a good example of a party relationship.

214
PEOPLE AND ORGANIZATIONS
PARTY
# ID
PARTY RELATIONSHIP
# Effective date
° Until date
PERSON
* Given name
° Middle initial
* Surname
ORGANIZATION
* Organization name
* Description
COMPANY
* Date of incorporation
GOVERNMENT
AGENCY
INTERNAL
ORGANIZATION
OTHER
ORGANIZATION
from
on one
side of
to
on the
other
side of
Fig. 5–4: Party relationships.
An employment is a special type of party relationship that is always of
a person and with an organization.∗
Note that this is an alternative to
having employee as an entity class. If you think about it, a person is not
inherently an employee. He or she only becomes one by virtue of maintaining
an employment relationship with an organization.
This is another case where the · · ·type entity class reproduces the sub-type
structure of the parent entity class. In this case, the ﬁrst two instances of
party relationship type must be “Employment” and “Other party relationship”.
∗Note that in a business setting it is reasonable to assert that each employment must always be
with an organization, but in a more general case, an individual can hire a maid or a chauffer and
thus the purer version of this model would have party rather than organization be the sponser of
an employment. In our metadata environment, however, the version presented seems suitable.

ABOUT PEOPLE AND ORGANIZATIONS
215
PARTY
# ID
PERSON
* Given name
° Middle initial
* Surname
ORGANIZATION
* Organization name
* Description
COMPANY
* Date of incorporation
GOVERNMENT
AGENCY
INTERNAL
ORGANIZATION
OTHER
ORGANIZATION
PARTY RELATIONSHIP
# Effective date
° Until date
PARTY RELATIONSHIP
TYPE
# Name
* Description
EMPLOYMENT
* Effective date
° Until date
OTHER PARTY
RELATIONSHIP
of
with
from
on one
side of
to
on the
other
side of
embodied in
an example
of
sponsor of
subject to
Fig. 5–5: Employment.
Each party relationship type, however, may be a super-type of two or more
other party relationship types so it would be possible to specify other sub-
types of other party relationship as instances of this entity class. These might
include “Organization structure”, “Corporate ownership”, and so forth. contract
employment is not shown explicitly as a sub-type on this diagram, but it could be
included as another instance of party relationship type. Depending on company

216
PEOPLE AND ORGANIZATIONS
policy, “Contractor” could be considered a sub-type of “Employment”, or it could
simply be a sub-type of “Other party relationship”.
Business Rule
The ﬁrst instances of party relationship type must be “Employment”
and “Other party relationship”.
An employment (and by extension, a party) may be a holder of one or more
position assignments, and each position assignment must be to one and only
one position. A position is the deﬁnition of a particular category of work to be
done by someone with a speciﬁc set of skills. A position assignment, therefore,
is the fact that a particular employment (that is, a particular employed person)
is holder of a particular position. Figure 5–6 shows this, with each position the
responsibility of one and only one organization.
Note that a person’s employment can involve multiple position assignments
to positions over time. This also includes being seconded∗to a different depart-
ment temporarily. This also means that at any point in time the number of persons
employed by a department (via an employment) is not necessarily the same as
the number of persons actually working for the department in positions it is
responsible for.
A position responsibility (see Figure 5–7) is a type of task given to either a
person in a position assignment (to a position) or to anyone holding that posi-
tion. For example, anyone holding the position “Database Administrator” has,
among others, the position responsibility“Install new DBMS versions”. Because
a position assignment may be holder of multiple position responsibilities and
each position responsibility may be held in one or more postion assignments
or one or more positions, the entity class position responsibility holding is the
fact that a particular position or position assignment holds a particular position
responsibility. That is, each position responsibility holding must be by either
a position assignment or a position, and it must be of a particular position
responsibility.
∗To my American readers: “Seconded” is a Britishism for being temporarily assigned elsewhere.
A wonderful word!

ABOUT PEOPLE AND ORGANIZATIONS
217
responsible for
responsible for
PARTY
# ID
PERSON
* Given name
° Middle initial
* Surname
ORGANIZATION
* Organization name
* Description
COMPANY
* Date of incorporation
GOVERNMENT
AGENCY
INTERNAL
ORGANIZATION
OTHER
ORGANIZATION
PARTY RELATIONSHIP TYPE
# Name
* Description
EMPLOYMENT
OTHER PARTY
RELATIONSHIP
of
with
from
on one
side of
to
on the
other
side of
embodied in
an example
of
POSITION ASSIGNMENT
# Effective date
° Until date
* Description
POSITION
# Name
* Description
to
the responsibility of
responsible for
of
holder of
populated via
subject to
sponsor of
PARTY RELATIONSHIP
# Effective date
° Until date
Fig. 5–6: Positions.

218
PEOPLE AND ORGANIZATIONS
POSITION
RESPONSIBILITY
HOLDING
# ID
* Effective date
° Until date
° Comment
POSITION
RESPONSIBILITY
# Name
* Description
by
holder
in
by
of
held in
holder
in
PARTY
# ID
PERSON
* Given name
° Middle initial
* Surname
ORGANIZATION
* Organization name
* Description
COMPANY
* Date of incorporation
GOVERNMENT
AGENCY
INTERNAL
ORGANIZATION
OTHER
ORGANIZATION
PARTY RELATIONSHIP TYPE
# Name
* Description
EMPLOYMENT
OTHER PARTY
RELATIONSHIP
of
with
from
on one
side of
to
on the
other
side of
embodied in
an example
of
POSITION ASSIGNMENT
# Effective date
° Until date
* Description
POSITION
# Name
* Description
to
the responsibility of
of
holder of
populated via
subject to
sponsor of
responsible for
PARTY RELATIONSHIP
# Effective date
° Until date
Fig. 5–7: Position responsibilities.
ROW TWO: THE BUSINESS OWNER’S VIEW
Access Roles
Now that we have described the business environment for metadata—people and
their jobs with organizations—we can start to see how the business entity classes
are related to the metadata entity classes that have concerned us so far. The ﬁgures
that follow, starting with Figure 5–8, show that an access role is the fact that

POSITION
RESPONSIBILITY
HOLDING
# ID
* Effective date
° Until date
° Comment
POSITION
RESPONSIBILITY
# Name
* Description
by
holder
in
by
of
holder
in
EMPLOYMENT
* Effective date
° Until date
OTHER PARTY
RELATIONSHIP
of
with
POSITION ASSIGNMENT
# Effective date
° Until date
* Description
POSITION
# Name
* Description
to
the responsibility of
of
holder of
populated via
ACCESS ROLE
# ID
* Effective date
° Until date
* Description
SITE
# Name
* Description
VIRTUAL SITE
* Creation date
° Removal date
PHYSICAL SITE
° (City)
° (State or province)
° (Postal code)
° (Country)
played by
played by
played by
for
player
of
player
of
managed
via
played by
player 
of
held
in
player 
of
PERMISSION ROLE
* Prohibition indicator
PLACEMENT
ROLE
MANAGEMENT
ROLE
OTHER ACCESS
ROLE
from
to
ACCESS
ROLE TYPE
# Name
* Description
an
example
of
played by
embodied
in
a sub-
type of
a super-
type of
(2+)
player
of
PARTY
# ID
PERSON
* Given name
° Middle initial
* Surname
ORGANIZATION
* Organization name
* Description
COMPANY
* Date of incorporation
GOVERNMENT
AGENCY
INTERNAL
ORGANIZATION
OTHER
ORGANIZATION
on one
side of
on the
other
side of
subject to
responsible for
sponsor of
PARTY RELATIONSHIP
# Effective date
° Until date
Fig. 5–8: Access roles and sites.

220
PEOPLE AND ORGANIZATIONS
someone plays a role in the management of some aspect of (in this case) enterprise
systems. Speciﬁcally, an access role must be played by one of the following:
–
A particular party (person or organization)
–
A position assignment of a person employed with an organization to a
position
–
Anyone in a speciﬁed position
–
A position responsibility holding of a postion responsiblity by anyone
–
Anyone holding a particular position responsiblity
Initially, we can say that an access role must be one of the following:
–
A placement role, which places the person, position, and so on, physically
in the thing involved
–
A permission role, granting the person, position, and so on permission to
have access to something. (The attribute “Prohibition indicator”, if “True”,
indicates that the role is in fact a prohibition of the party, and so on, from
having access.)
–
A management role, asserting that the person, position, and so on, has
management responsibility over the thing involving the access role
–
An other access role, which covers any role other than the previous ones
Each access role must be an example of an access role type. Again, note
that this entity class redundantly represents the same facts as are shown in the
sub-type structure of access role.
As this chapter progresses, we will see that an access role can be for many
different things in the metamodel. To begin with, in Figure 5–8 an access role
may be for a site,∗where a site is a place for locating people, organizations, or
other resources as was deﬁned in the previous chapter. A particular person, for
example, might be a player of an access role—a placement role—that asserts
that he or she is located at a particular (physical or virtual) site. A permission
role, on the other hand, is the fact that this person has permission to get into
∗The relationship says must be because, as you will soon see, this is part of an extensive arc, and
it is true that each access role must be for one of the alternatives. As we discuss each alternative,
however, that alternative is clearly optional.

ROW TWO: THE BUSINESS OWNER’S VIEW
221
the site. Or, most common of all, the party may simply be responsible (player of
a management role) for the site.
Business Rule
The ﬁrst instances of access role type must be “Enforcement Role”,
“Placement Role”, and so on.
Concepts, Symbols, and Signiﬁers
In Chapter Two, we saw that a symbol was a signiﬁer (a word, phrase, or
graphic) that represented a business concept or a business concept element,
where a business concept is simply something we understand to exist or to be the
case. The set of business terms and the business concepts that they represent
constitute the organization’s vocabulary or ontology.
Figure 5–9 shows that parties and the like have roles to play—that is, access
roles—for symbols, business concepts, and business concept elements. Of
the access role sub-types listed before, only management role (and of course,
other access role) apply here. But the following two new sub-types have been
added.
–
enforcement role: To be played by a data steward, ensuring that consistent
deﬁnitions of words and phrases are used throughout the organization∗
–
speciﬁcation role: To be played by appropriate people for the original
deﬁnition of business concepts and symbols and their ongoing maintenance
Note the arc, by the way. By implication, it is also across the relationship we
saw previously for one and only one site. That is, each access role must be
for one site, or for one symbol, or for one business concept, and so forth. As
other elements of this model are added, by implication the arc will extend to them
as well.
∗Yes, the model says that a particular signiﬁer can represent more than one business concept, and
it often does, but the objective of data management is to reduce the occurrences of that as much as
possible. And, of course, someone also must be responsible for management of the deﬁnition of the
business concept in the ﬁrst place.

ACCESS ROLE
# ID
* Effective date
° Until date
* Description
SYMBOL
# Sequence number
* Effective date
° Until date
° Comment
BUSINESS
TERM
ICON
SIGNIFIER
# ID
BUSINESS CONCEPT ELEMENT
PROPOSITION TYPE
ELEMENT
* Effective date
° Until date
° Predicate
OTHER  
BUSINESS
CONCEPT
ELEMENT
OTHER  
BUSINESS
CONCEPT
FACT TYPE
ELEMENT
FACT TYPE
* Effective date
° Until date
OTHER
PROPOSITION
TYPE ELEMENT
OTHER
PROPOSITION
TYPE 
BUSINESS CONCEPT
# ID
* Name
* Primary definition
represented
by
represented
by
identified
by
used
as
to
represent
to
represent
identified
by
for
the
use
of
part of
about
the object
of
composed
of
for
defined
by
for
ENFORCEMENT
ROLE
PROPOSITION TYPE
Fig. 5–9: Concepts and symbols.
222

POSITION
RESPONSIBILITY
HOLDING
# ID
* Effective date
° Until date
° Comment
POSITION
# Name
* Description
POSITION
RESPONSIBILITY
# Name
* Description
by
by
of
played
by
played
by
player of
player
of
holder in
held in
played
by
player
of
SPECIFICATION
ROLE
subject to
subject to
sponsor of
sponsor of
EMPLOYMENT
* Effective date
° Until date
OTHER PARTY
RELATIONSHIP
of
with
from
to
PARTY
# ID
PERSON
* Given name
° Middle initial
* Surname
ORGANIZATION
* Organization name
* Description
COMPANY
GOVERNMENT
AGENCY
INTERNAL
ORGANIZATION
OTHER
ORGANIZATION
subject to
sponsor of
on one
side of
on the
other
side of
POSITION ASSIGNMENT
# Effective date
° Until date
* Description
ACCESS
ROLE TYPE
# Name
* Description
the responsibility of
holder
in
to
of
populated via
played
by
an
example
of
played
by
player
of
player
of
embodied
in
MANAGEMENT
ROLE
OTHER ACCESS
ROLE
holder of
responsible for
PARTY RELATIONSHIP
# Effective date
° Until date
Fig. 5–9: continued.
223

224
PEOPLE AND ORGANIZATIONS
In addition to the business concepts and business concept elements (and
the symbols and signiﬁers that represent them), access roles can be deﬁned
for either the resources that supply and record them or for physical copies of
those resources. (resources and copies are described in Chapter Two.) This is
shown in Figure 5–10. In addition to the management role and permission role
described previously, the ﬁgure introduces the following:
–
Authorshiprole: This applies to a resource only (all copies) and describes the
creators of the resource. Access role types that are sub-types of “Authorship
role” could be “author”, “publisher”, “editor”, and so on.
Business Rule
Each authorship role must speciﬁcally be for one and only one
resource. (This is typically a document, but possibly for an other
resource.)
Recall from Chapter Two that according to the Dublin Core the types of author-
ship role (and thus the sub-types of the access roletype that is “Authorship role”)
are (among others):
–
Author
–
Contributor
–
Publisher
–
Rights holder [ISO 2003]
Activities, Decisions, and Events
An access role may be for an activity. (Activity was deﬁned in Chapter Three.)
This is shown in Figure 5–11 (see pages 226 and 227) . Thus, a party (or a party
in a position or with a position responsibility) may be player of an access role
for an activity. This may apply to either a function or a business process.
In particular, the access roles that are for an activity include speciﬁca-
tion role (deﬁning the nature of the activity); enforcement role (requiring
that the activity be carried out under appropriate circumstances); permission

ROW TWO: THE BUSINESS OWNER’S VIEW
225
role (permitting or prohibiting participation in the activity); management role
(in charge of the overall conduct of the activity); and, as always, other access
role. Again, note that the relationship for one activity is “arced” with the access
roles for the other relationships we have seen.
Means and Ends
Chapter Seven describes the Motivation column in the Architecture Framework
more extensively than can be done here. To summarize, though, in the Business
Owner’s Row Two view in the Motivation column the cell describes the organiza-
tion’s goals and objectives, strategies and tactics, and directives (business policies
and business rules) that make it all work. Speciﬁcally, the model centers on the
following.
–
end: Something the organization is trying to achieve, such as:

A vision

A goal

An objective
–
means: A capability the organization uses to accomplish it, through:

A mission

A course of action, such as a strategy or a tactic

A directive, such as a business policy or a business rule
–
assessment of an inﬂuencer, such as “Competition” on either a means or
an end
These entity classes are relevant here, of course, because it is possible to specify
the parties who play an access role in either a means, an end, an inﬂuencer,
or an assessment (see Figure 5–12). The access role might be played by the
party (or position, and so on) responsible for enforcement of a directive, the
party responsible for management of an assessment, or the party responsible
for the management of an inﬂuencer, an end, or a means. Note that in general
in Row Two, and especially here, if an access role is played by a party, it is
probably being played by an internal organization, although it could be played
by a company or a government agency.

ACCESS ROLE
# ID
* Effective date
° Until date
* Description
COPY
# Sequence number
° Comment
* Format
RESOURCE
TOPIC
# Sequence number
° Description
* Authority Indicator
SIGNIFIER
# ID
PHYSICAL
COPY
VIRTUAL
COPY
RESOURCE
# ID
° URI
* Title
° Subject
° Abstract
° Description
° Date created
DOCUMENT
OTHER RESOURCE
embodied
in
presented
as
defined
by
SYMBOL
# Sequence number
* Effective date
° Until date
° Comment
ICON
BUSINESS TERM
the
embodiment
of
created
via
for
a
reference
to
the
source
of
part
of
used as
the use
of
for
distributed
by
for
AUTHORSHIP
ROLE
Fig. 5–10: Resources.
226

POSITION
RESPONSIBILITY
HOLDING
# ID
* Effective date
° Until date
° Comment
POSITION
RESPONSIBILITY
# Name
* Description
of
played
by
player
of
played
by
PARTY
# ID
POSITION
# Name
* Description
POSITION
# Name
* Description
by
holder
in
by
played
by
played
by
an
example
of
played
by
player
of
embodied in
a sub-
type of
a super-
type of
(2+)
MANAGEMENT
ROLE
OTHER ACCESS
ROLE
EMPLOYMENT
* Effective date
° Until date
OTHER PARTY
RELATIONSHIP
of
with
from
to
PARTY
# ID
PERSON
* Given name
° Middle initial
* Surname
ORGANIZATION
* Organization name
* Description
COMPANY
GOVERNMENT
AGENCY
INTERNAL
ORGANIZATION
OTHER
ORGANIZATION
on one
side of
on the
other
side of
POSITION ASSIGNMENT
# Effective date
° Until date
* Description
ACCESS ROLE TYPE
# Name
* Description
the responsibility of
to
of
holder of
player
of
subject to
sponsor of
PARTY RELATIONSHIP
# Effective date
° Until date
held in
player
of
populated via
player
of
holder in
responsible for
Fig. 5–10: continued.
227

to
EMPLOYMENT
* Effective date
° Until date
OTHER PARTY
RELATIONSHIP
of
with
from
to
PARTY
# ID
PERSON
* Given name
° Middle initial
* Surname
ORGANIZATION
* Organization name
* Description
COMPANY
GOVERNMENT
AGENCY
INTERNAL
ORGANIZATION
OTHER
ORGANIZATION
subject  to
sponsor  of
on one
side of
on the
other
side of
POSITION ASSIGNMENT
# Effective date
° Until date
* Description
the responsibility of
responsible  for
of
POSITION
RESPONSIBILITY
HOLDING
# ID
* Effective date
° Until date
° Comment
POSITION
RESPONSIBILITY
# Name
* Description
by
by
of
ACTIVITY
# ID
* Name
° Description
* Date established
° Date discontinued
played by
player
of
ACCESS ROLE
TYPE
# Name
* Description
POSITION
# Name
* Description
ACCESS ROLE
# ID
* Effective date
° Until date
* Description
ENFORCEMENT
ROLE
SPECIFICATION ROLE
MANAGEMENT
ROLE
OTHER ACCESS
ROLE
PERMISSION
ROLE
* Prohibition indicator
held in
holder
in
played by
player of
played by
player
of
populated
via
played by
player of
holder
in
an
example of
embodied
in
a sub-
type of
a super-
type of
(2+)
played by
player of
holder
of
to
implement
implemented
via
for
managed
via
BUSINESS PROCESS
° Scheduled start date
° Scheduled end date
° Actual start date
° Actual end date
FUNCTION
PARTY RELATIONSHIP
# Effective date
° Until date
Fig. 5–11: Activities and events.
228

ASSESSMENT
ELEMENT
# Effective date
° Until date
INFLUENCER
# Name
* Description
* Effective date
° Expiry date
for
managed via
managed
via
for
for
on
on
the
object
of
managed
via
of
subject
to
for
subject
to
the
object
of
MEANS
# Name
* Description
* Effective date
° Until date
END
# Name
* Description
* Effective date
° Expiry date
MISSION
DESIRED RESULT
VISION
DIRECTIVE
COURSE
OF ACTION
GOAL
OBJECTIVE
to
EMPLOYMENT
* Effective date
° Until date
OTHER PARTY
RELATIONSHIP
of
with
from
to
PARTY
# ID
PERSON
* Given name
° Middle initial
* Surname
ORGANIZATION
* Organization name
* Description
COMPANY
GOVERNMENT
AGENCY
INTERNAL
ORGANIZATION
OTHER
ORGANIZATION
on one
side of
on the
other
side of
POSITION ASSIGNMENT
# Effective date
° Until date
* Description
the responsibility of
responsible  for
of
POSITION
RESPONSIBILITY
HOLDING
# ID
* Effective date
° Until date
° Comment
POSITION
RESPONSIBILITY
# Name
* Description
by
by
of
played by
player of
ACCESS ROLE
TYPE
# Name
* Description
POSITION
# Name
* Description
held in
holder
in
played by
player of
played by
player of
populated
via
played by
player of
holder
in
an
example
of
embodied
in
a sub-
type of
a super-
type of
(2+)
played by
player of
holder
of
ACCESS ROLE
# ID
* Effective date
° Until date
* Description
MANAGEMENT ROLE
OTHER ACCESS ROLE
PARTY RELATIONSHIP
# Effective date
° Until date
subject  to
sponsor  of
Fig. 5–12: Means and ends.
229

230
PEOPLE AND ORGANIZATIONS
In addition, the Motivation column describes an effort (see Figure 5–13), such
as a project or a program, toachieve a desiredresult throughtheuseof a business
process. This effort may also be managed via a management role.
ROW THREE: THE ARCHITECT’S VIEW
Just as access role determines how parties and the like relate to Row Two
things, such as business concepts and activities, so too can it be used to rep-
resent people’s responsibilities for such Row Three artifacts as system processes
and data ﬂows. One of these is shown in Figure 5–14. Here, an access role,
played by any of the various entity classes shown, must be for one system
process.∗
Note that in a Row Three data ﬂow diagram typically we do not identify
who is performing the process. In describing a management role—being in
charge of the system process—this model allows for more than would typically
be shown.
Still, it is useful to be able to say that one of the entity classes that is a player
of an access role may be playing a speciﬁcation role deﬁning just who is
responsible for deﬁning the nature of the process in the ﬁrst place. The player of
an access role may be playing a permission role, controlling who is allowed to
carry out the system process. Alternatively, it may be playing an enforcement
role, ensuring that the conditions around the system process are met.
In addition, it is true that the external entities in a data ﬂow diagram do usually
refer to individual people or organizations. Hence, data ﬂow in Figure 5–14
has added that it may be to and from either a party (typically, an internal
organization) or a position.
Figure 5–15 highlights that some of the access roles that are for a busi-
ness concept, or for a business concept element, really are for an entity class
or an attribute. This is to show how the position responsibility data stew-
ard might be the player of a speciﬁcation role or a management role for the
∗Naturally, this relationship is under the same arc shown previously to designate all possible things
an access role can be for. For example, an access role must be for either a Row Two business
concept or a Row Three activity or system process.

GOAL
OBJECTIVE
to
EMPLOYMENT
* Effective date
° Until date
OTHER PARTY
RELATIONSHIP
of
with
from
to
PARTY
# ID
PERSON
* Given name
° Middle initial
* Surname
ORGANIZATION
* Organization name
* Description
COMPANY
GOVERNMENT
AGENCY
INTERNAL
ORGANIZATION
OTHER
ORGANIZATION
on one
side of
on the
other
side of
POSITION ASSIGNMENT
# Effective date
° Until date
* Description
the responsibility of
responsible  for
of
POSITION
RESPONSIBILITY
HOLDING
# ID
* Effective date
° Until date
° Comment
POSITION
RESPONSIBILITY
# Name
* Description
by
by
of
played by
player of
ACCESS ROLE
TYPE
# Name
* Description
POSITION
# Name
* Description
held in
holder
in
played by
player of
played by
player
of
populated
via
played by
player of
holder
in
an
example
of
embodied
in
a sub-
type of
a super-
type of
(2+)
played by
player of
holder
of
EFFORT
° Scheduled start date
° Scheduled end date
BUSINESS
PROCESS
° Scheduled start date
° Scheduled end date
° Actual start date
° Actual end date
part of
part of
ACCESS ROLE
# ID
* Effective date
° Until date
* Description
MANAGEMENT ROLE
DESIRED RESULT
OTHER ACCESS ROLE
managed 
via
composed of
composed of
for
managed
via
through the
use of
employed in
to
achieve
achieved
via
for
END
# Name
* Description
* Effective date
° Expiry date
VISION
OTHER EFFORT
PROJECT
PROJECT
PROGRAM
PROGRAM
subject  to
sponsor  of
PARTY RELATIONSHIP
# Effective date
° Until date
Fig. 5–13: Efforts.

DATA FLOW
# Name
* Description
* Create indicator
* Retrieve indicator
* Update indicator
* Delete indicator
ACCESS ROLE
# ID
* Effective date
° Until date
* Description
ENFORCEMENT
ROLE
MANAGEMENT
ROLE
OTHER ACCESS
ROLE
PERMISSION
ROLE
from
for
source of
managed
via
from
source of
to
destination of
from
source of
to
destination of
to
destination
of
to
EMPLOYMENT
* Effective date
° Until date
OTHER PARTY
RELATIONSHIP
of
with
from
to
PARTY
# ID
PERSON
* Given name
° Middle initial
* Surname
ORGANIZATION
* Organization name
* Description
COMPANY
GOVERNMENT
AGENCY
INTERNAL
ORGANIZATION
OTHER
ORGANIZATION
on one
side of
on the
other
side of
POSITION ASSIGNMENT
# Effective date
° Until date
* Description
the responsibility of
responsible  for
of
POSITION
RESPONSIBILITY
HOLDING
# ID
* Effective date
° Until date
° Comment
POSITION
RESPONSIBILITY
# Name
* Description
by
by
of
played by
player
of
ACCESS ROLE
TYPE
# Name
* Description
POSITION
# Name
* Description
held in
holder
in
played by
player of
played by
player
of
populated
via
played by
player of
holder
in
an
example
of
embodied in
played by
player of
holder
of
SYSTEM
PROCESS
# Identifier
* Name
* Description
subject  to
sponsor  of
PARTY RELATIONSHIP
# Effective date
° Until date
Fig. 5–14: System process roles.
232

ACCESS ROLE
# ID
* Effective date
° Until date
* Description
SPECIFICATION ROLE
MANAGEMENT ROLE
OTHER ACCESS ROLE
PERMISSION ROLE
* Prohibition indicator
for
for
managed
via
to
EMPLOYMENT
* Effective date
° Until date
OTHER PARTY
RELATIONSHIP
of
with
from
to
PARTY
# ID
PERSON
* Given name
° Middle initial
* Surname
ORGANIZATION
* Organization name
* Description
COMPANY
GOVERNMENT
AGENCY
INTERNAL
ORGANIZATION
OTHER
ORGANIZATION
on one
side of
on the
other
side of
POSITION ASSIGNMENT
# Effective date
° Until date
* Description
the responsibility of
responsible  for
of
POSITION
RESPONSIBILITY
HOLDING
# ID
* Effective date
° Until date
° Comment
POSITION
RESPONSIBILITY
# Name
* Description
by
by
of
played by
player
of
identified
by
ACCESS ROLE
TYPE
# Name
* Description
POSITION
# Name
* Description
for
held
in
holder
in
played by
player of
played by
player
of
populated
via
played by
player of
holder
in
an
example
of
embodied
in
played by
player
of
holder
of
SYSTEM
PROCESS
# Identifier
* Name
* Description
subject  to
sponsor  of
PARTY RELATIONSHIP
# Effective date
° Until date
described
by
to
part
of
composed
of
the
object
of
identified
by
BUSINESS CONCEPT ELEMENT
BUSINESS CONCEPT
# ID
* Name
* Primary definition
CHARACTERISTIC ASSIGNMENT
* Essential indicator
* Delimiting indicator
about
a sub-
type of
a super-type
of (2+)
ATTRIBUTE
° Default value
° Formula text
° Cardinality indicator
* Default optionality indicator
ENTITY CLASS
CHARACTERISTIC
* Description
Fig. 5–15: Entity Classes and Attributes.
233

234
PEOPLE AND ORGANIZATIONS
deﬁnitions of each entity class and attribute. This includes evaluating the sen-
sitivity of data or assigning a security classiﬁcation level. In addition, the data
steward plays an enforcement role in making sure the deﬁnitions are uniformly
published.
Figure 5–16 shows that people also play a role in enforcing business rules
(system constraints in the ﬁgure). The full nature of system constraints will
be revealed in Chapter Seven, but here we can see that each system constraint
must be to constrain either an attribute or an entity class.
ROW FOUR: THE DESIGNER’S VIEW
In Row Four, as shown in Figure 5–17, each access role may be for a program
module. Most signiﬁcant, as we saw in Chapter Three, is programming role.
This is the person who is the programmer or tester of the program module.
In addition, the speciﬁcation role describes the responsibility for designing the
module. Additional categories of access roles in play are typically concerned with
management, although permission roles (determining who is allowed to work
on or operate the program module) may also apply.
Among the tasks a program module must perform is to be the implementa-
tion of a database constraint, as is shown in Figure 5–18. Database constraint
and database constraint element are discussed in detail in Chapter Seven,
but here it is sufﬁcient to say that a database constraint places a restric-
tion on a database table: the constraint may be a foreign key, a uniqueness
constraint, or the fact that a column in the table is derived from a computa-
tion. A database constraint element is a reference to another table or column
exerting the constraint. A programming role, a speciﬁcation role, or a manage-
ment role may be for either a database constraint or a database constraint
element.
Figure 5–19 shows that someone may play a management role for each
persistence mechanism (table, view, or column). In addition, one type of
programming role would be the database designer who is responsible for deter-
mining the structure of the tables and columns. Other access roles include
permission role (having permission to see and/or manipulate the tables and
columns) and enforcement role (to ensure that proper design standards are
followed).

played by
player of
SYSTEM CONSTRAINT
# ID
° Description
* Condition indicator
ACCESS ROLE
# ID
* Effective date
° Until date
* Description
about
described
by
managed
via
connected to
connected from
constrained
by
constrained
by
to
constrain
constrained
by
to
constrain
for
RELATIONSHIP ROLE
INFORMATION ENGINEERING
ROLE
ENTITY CLASS
ATTRIBUTE
° Default value
° Formula text
° Cardinality indicator
* Default optionality
ASSOCIATIVE ROLE
° Cardinality indicator
° Default optionality indicator
ENFORCEMENT
ROLE
MANAGEMENT
ROLE
OTHER ACCESS
ROLE
to
constrain
part of
composed
of
a sub-
type of
a super-
type of
(2+)
to
EMPLOYMENT
* Effective date
° Until date
OTHER PARTY
RELATIONSHIP
of
with
from
to
PARTY
# ID
PERSON
* Given name
° Middle initial
* Surname
ORGANIZATION
* Organization name
* Description
COMPANY
GOVERNMENT
AGENCY
INTERNAL
ORGANIZATION
OTHER
ORGANIZATION
on one
side of
on the
other
side of
POSITION ASSIGNMENT
# Effective date
° Until date
* Description
the responsibility of
responsible  for
of
POSITION
RESPONSIBILITY
HOLDING
# ID
* Effective date
° Until date
° Comment
POSITION
RESPONSIBILITY
# Name
* Description
by
by
of
played by
player 
of
ACCESS ROLE
TYPE
# Name
* Description
POSITION
# Name
* Description
held
in
holder
in
played by
player of
played by
player
of
populated
via
played by
player of
holder
in
an
example
of
embodied
in
played by
player of
holder
of
PARTY RELATIONSHIP
# Effective date
° Until date
subject  to
sponsor  of
Fig. 5–16: System constraint roles.

236
PEOPLE AND ORGANIZATIONS
responsible for
responsible for
subject to
subject to
sponsor of
sponsor of
PROGRAM MODULE
# ID
* Name
* Description
* Version
° Scenario
° Program code
PROGRAMMING
ROLE
played by
player
of
POSITION ASSIGNMENT
# Effective date
° Until date
* Description
ACCESS ROLE
TYPE
# Name
* Description
EMPLOYMENT
# Effective date
° Until date
POSITION
# Name
* Description
ACCESS ROLE
# ID
* Effective date
° Until date
* Description
SPECIFICATION ROLE
of
held
in
by
by
holder
in
played by
player of
played by
player
of
populated
via
played by
player of
holder
in
of
with
from
on one
side of
to
on the
other
side of
the responsibility of
responsible for
an
example
of
embodied
in
played by
player
of
to
holder
of
of
OTHER PARTY
RELATIONSHIP
PARTY
# ID
PERSON
* Given name
° Middle initial
* Surname
ORGANIZATION
* Organization name
* Description
GOVERNMENT
AGENCY
INTERNAL
ORGANIZATION
OTHER
ORGANIZATION
COMPANY
POSITION
RESPONSIBILITY
HOLDING
* ID
* Effective date
° Until date
° Comment
POSITION
RESPONSIBILITY
# Name
* Description
for
managed via
MANAGEMENT ROLE
PERMISSION ROLE
OTHER ACCESS ROLE
subject to
sponsor of
PARTY RELATIONSHIP
# Effective date
° Until date
Fig. 5–17: Program modules.
Interactive Modules
As we have seen, the basic metamodel for addressing people and organizations is
the same as the business model for addressing people and organizations. The differ-
ence is that the metamodel describes the roles they play in managing information
and systems, rather than the roles they play in managing the business.
A large amount of the software written for modern computer systems concerns
the display and input of information on screens. Your author entered the computer

DATABASE CONSTRAINT
# ID
° Name
* Description
DATABASE CONSTRAINT
ELEMENT
# Sequence number
ACCESS ROLE
# ID
* Effective date
° Until date
* Description
COMPUTATION ELEMENT
* Operator
° Constant
COMPUTATION
# Sequnce number
* Formula
UNIQUE KEY ELEMENT
# Sequence number
OTHER CONSTRAINT
ELEMENT
FOREIGN KEY ELEMENT
FOREIGN KEY
# ID
° Name
* Referential integrity constraint
OTHER CONSTRAINT
UNIQUE KEY
PROGRAM MODULE
# ID
* Name
* Description
* Version
° Scenario
° Program code
for
managed
via
for
managed via
part of
composed
of
implemented
by
an
implementation
of
PROGRAMMING ROLE
SPECIFICATION ROLE
for
managed
via
MANAGEMENT ROLE
PERMISSION ROLE
* Prohibition indicator
OTHER ACCESS ROLE
to
EMPLOYMENT
* Effective date
° Until date
OTHER PARTY
RELATIONSHIP
of
with
from
to
PARTY
# ID
PERSON
* Given name
° Middle initial
* Surname
ORGANIZATION
* Organization name
* Description
COMPANY
GOVERNMENT
AGENCY
INTERNAL
ORGANIZATION
OTHER
ORGANIZATION
subject  to
sponsor  of
on one
side of
on the
other
side of
POSITION ASSIGNMENT
# Effective date
° Until date
* Description
the responsibility of
responsible  for
of
POSITION
RESPONSIBILITY
HOLDING
# ID
* Effective date
° Until date
° Comment
POSITION
RESPONSIBILITY
# Name
* Description
by
by
of
played by
player 
of
ACCESS ROLE
TYPE
# Name
* Description
POSITION
# Name
* Description
held
in
holder
in
played by
player of
played by
player
of
populated
via
played by
player of
holder
in
an
example
of
embodied
in
played by
player
of
holder
of
PARTY RELATIONSHIP
# Effective date
° Until date
Fig. 5–18: Database constraints.

DATA GROUP
TABLE
VIEW
* SQL expression
* Effective date
° Until date
ACCESS ROLE
# ID
* Effective date
° Until date
* Description
managed
via
managed via
part of
for
for
composed
of
part of
DATA GROUP COLLECTION
# Name
° Purpose
PERSISTENCE
MECHANISM
# Name
* Description
COLUMN
* Label
* Format
° Length
° Decimal places
* Mandatory indicator
° Default value
composed
of
PROGRAMMING ROLE
PERMISSION ROLE
* Prohibition indicator
MANAGEMENT ROLE
OTHER ACCESS ROLE
to
EMPLOYMENT
* Effective date
° Until date
OTHER PARTY
RELATIONSHIP
of
with
from
to
PARTY
# ID
PERSON
* Given name
° Middle initial
* Surname
ORGANIZATION
* Organization name
* Description
COMPANY
GOVERNMENT
AGENCY
INTERNAL
ORGANIZATION
OTHER
ORGANIZATION
sponsor  of
on one
side of
on the
other
side of
POSITION ASSIGNMENT
# Effective date
° Until date
* Description
the responsibility of
of
POSITION
RESPONSIBILITY
HOLDING
# ID
* Effective date
° Until date
° Comment
POSITION
RESPONSIBILITY
# Name
* Description
by
by
of
played by
player
of
ACCESS ROLE
TYPE
# Name
* Description
POSITION
# Name
* Description
held
in
holder
in
played by
player of
played by
player
of
populated
via
played by
player of
holder
in
an
example
of
embodied
in
played by
player
of
holder
of
PARTY RELATIONSHIP
# Effective date
° Until date
subject  to
responsible  for
Fig. 5–19: Persistence mechanisms.

ROW FOUR: THE DESIGNER’S VIEW
239
business in the late 1960s through a ﬂuke that had him working with a new
technology called computer time-sharing. At that time, most computers dealt
with using punched cards, and limited processing power meant that the entire
focus of the programming effort was on carrying out the calculations and other
tasks that constituted the work of the program.
With computer time-sharing, however, it was now possible to sit at a teletype
machine, type something in, and have the computer type something back. It
was a revolutionary idea! Among other things, in developing systems in this
environment, it very quickly became apparent that attention must be paid to the
nature of the dialogue between human and computer. In particular, the teletype
was very slow (only 10 characters per second, or 100 Baud∗), so it mattered if the
prompt for information was very long. No one had the patience to wait for the
computer to ask a very long question. But new users needed more help. So early
on, computer dialogues were designed for two modes: beginner and expert.
The point is that the code required to support the interaction was in addition
to the code required to do the work. More signiﬁcantly, it had to be designed
with skill. For many years, the time-sharing world was on the outside of main-
stream computing. People who talked about user interfaces were clearly speaking
in tongues to the rank-and-ﬁle COBOL group.
Then personal computers happened. Suddenly software was being developed
that was to be used by people unfamiliar with computers. Suddenly the character-
istics of human interaction with computers became important. At the same time,
the economics of computing was changing so that cycles could be spent on the
niceties of user interfaces.
In the twenty-ﬁrst century, the biggest part of most programs’ code is
devoted to that user interface, either directly or through calls to program libraries
for that purpose. To produce even a generic model of a user interface sets this
book up as vulnerable to future obsolescence, but the structure is so fundamental
in 2005 that it is worth looking at.
Figure 5–20 shows a new sub-type of executable module, the interactive
module. Like a package, an interactive module may be composed of one or
more class implementations, speciﬁcally architectural classes that are human
interface classes. Indeed, we observe here two speciﬁc types of human interface
∗Compare with the 54,000,000 Baud of today’s DSL lines!

a generalization of
inheriting from
part
of
composed
of
part
of
part of
composed
of
PROGRAM MODULE
# ID
* Name
* Description
° Scenario
° Program code
PERSISTENCE MECHANISM
# Name
* Description
COLUMN
* Label
* Format
° Length
° Decimal places
* Mandatory indicator
° Default value
DATA GROUP
CLASS IMPLEMENTATION
ARCHITECTURAL CLASS
HUMAN INTERFACE CLASS
TABLE
VIEW
* SQL expression
PACKAGE
METHOD
OTHER
EXECUTABLE
MODULE
DISPLAY
GROUP
# ID
* Name
WINDOW
# ID
* Name
* Modal indicator
a sub-
type of
a super-type
of (2+)
part of
made
persistent in
composed
of
used by
PROGRAMMING
LANGUAGE
# Name
* Description
PROGRAM
MODULE TYPE
# Name
* Description
written in
the language
of
an example
of
embodied
in
composed
of
INTERACTIVE
MODULE
EXECUTABLE MODULE
Fig. 5–20: Windows.

ROW FOUR: THE DESIGNER’S VIEW
241
classes: a window and a display group. A window is a deﬁned area on the screen
that can be implemented as an object in its own right. This may then be composed
of one or more display groups, where a display group is a set of ﬁelds or other
objects to be treated as a logical unit.
Each display group must be an example of one program module type that is
a sub-type of “Display group type”. A window may be “modal” in that no other
window can be acted on if it is open, or it may be “non-modal,” meaning that
other windows can be moved to the front and manipulated. The “Modal indicator”
attribute determines this.
These are examples of class implementation that are computer objects, not
analogues to something in the business world. They would not appear in an
entity-relationship diagram, even if it were drawn in UML. Note also that these
are not made persistent in a persistence mechanism.
Figure 5–21 shows that both a window and a display group may be composed
of one or more other human interface classes, this time interface elements.
An interface element must be one of the following.
–
A ﬁeld, which displays a column from the database or accepts a typed-in value
to be added to the database. That is, a ﬁeld must be the use or display of one
and only one persistence mechanism (that is, usually a column in a database).
A ﬁeld may also be a trigger of an executable module when the Enter key
is pressed.
–
A display element, which simply displays speciﬁc text or graphic elements.
–
An iconic trigger, which if touched by a cursor will cause another program
action (an iconic trigger must be of one and only one executable module).
–
An other interface element, which may be anything else (graphic or text)
displayed in a window.
Each interface element must be an example of exactly one “Interface element
type”.
Business Rule
The ﬁrst instances of the program moduletype “Interface element type”
must be “Field”, “Display element”, “Interface trigger”, and “Other inter-
face element”. Each of these may then be a super-type of other program
module types.

a generalization of
inheriting from
composed
of
part
of
part
of
composed
of
PROGRAM MODULE
# ID
* Name
* Description
° Scenario
° Program code
CLASS IMPLEMENTATION
ARCHITECTURAL CLASS
HUMAN INTERFACE CLASS
PACKAGE
METHOD
OTHER EXECUTABLE
MODULE
DISPLAY
GROUP
# ID
* Name
WINDOW
# ID
* Name
* Modal indicator
a sub-
type of
a super-type
of (2+)
part of
composed
of
PROGRAMMING
LANGUAGE
# Name
* Description
PROGRAM
MODULE TYPE
# Name
* Description
written in
the
language
of
an example
of
embodied
in
INTERACTIVE
MODULE
used by
part of
composed
of
INTERFACE ELEMENT
° Name
° Label
° Display order
OTHER
INTERFACE
ELEMENT
DISPLAY
ELEMENT
ICONIC
TRIGGER
FIELD
* Editable indicator
the  
use or
display
of
used in
composed
of
part of
composed
of
part of
triggered
by
of
triggered
by
the trigger of
PERSISTENCE MECHANISM
# Name
* Description
COLUMN
* Label
* Format
° Length
° Decimal places
* Mandatory indr
° Default value
DATA GROUP
TABLE
VIEW
* SQL expression
made
persistent
in
EXECUTABLE MODULE
Fig. 5–21: Interface elements.

ROW SIX: SECURITY AND GOVERNANCE
243
ROW SIX: SECURITY AND GOVERNANCE
The Functioning System view of the Framework is concerned with the actual
databases and programs of an application system. This means that in the Peo-
ple and Organizations column we are concerned with the access roles that
are for:
–
program copies
–
database instances
–
table instances
Figure 5–22 shows this, again along with, the access role for program module
(speciﬁcally when it is a database management system). Note that in this case
we are only granting access roles to named parties. In particular, these are
the enforcement role and permission role. Permission role, of course, is
simply the fact that a party has permission to enter a database instance or a
particular table instance. It also provides overall permission to make use of the
program copy of a database management system. The enforcement role is
the ability to establish the rules (and permission roles) for any of those three.
A management role or a programming role is responsible for taking care of
program copies.

PARTY
# ID
PERSON
* Given name
° Middle initial
* Surname
ORGANIZATION
* Organization name
* Description
GOVERNMENT
AGENCY
INTERNAL
ORGANIZATION
OTHER
ORGANIZATION
TABLE
INSTANCE
# ID
* Name
° Description
* Date created
° Date removed
ACCESS ROLE
TYPE
# Name
* Description
ACCESS ROLE
# ID
* Effective date
° Until date
* Description
ENFORCEMENT
ROLE
PROGRAMMING
ROLE
MANAGEMENT ROLE
OTHER ACCESS
ROLE
PERMISSION
ROLE
an
example
of
embodied
in
played by
player of
for
managed via
SITE
# Name
* Description
PROGRAM MODULE
# ID
* Name
* Description
* Version
° Scenario
° Program code
EXECUTABLE MODULE
VIRTUAL SITE
* Creation date
° Removal date
a super-
type of
(2+)
a sub-
type of
for
controlled
via
of
replicated
in
for
managed via
for
managed
via
created on
created
by
the site of
kept in
the location of
DATABASE INSTANCE
# ID
* Creation date
° Removal date
DATABASE MANAGEMENT
SYSTEM
PROGRAM COPY
# Sequence number
° Name
the creator of
COMPANY
* Date of incorporation
Fig. 5–22: Databases and programs.

6
EVENTS AND TIMING
Time is that quality of nature which keeps events from happening all at once. Lately it
doesn’t seem to be working.
—Unknown
When I can’t handle events, I let them handle themselves.
—Henry Ford
THE EVENTS AND TIMING COLUMN
The Activities column of the architecture framework is concerned with when the
enterprise carries out its work.
–
The planner lays out annual and longer-term plans and schedules.
–
The business owner sees the business event types that control what a
business does.
–
The architect sees the system event types that control the processing of data.
–
The designer deﬁnes program event types to cause speciﬁc program activities.
–
The builder is concerned with the detailed programming required to respond
to system events.
–
The functioning system is the system responding to events as they happen.
Figure 6–1 shows the architecture framework with this chapter’s cells high-
lighted. In particular, we will be looking at event types from three perspectives:
the business owner, the architect, and the designer.
245

246
EVENTS AND TIMING
Data
(What)
Activities
(How)
Locations
(Where)
People
(Who)
Time
(When)
Motivation
(Why)
Objectives/
Scope
(Planner’s
View)
Enterprise
Model
(Business
Owner’s
View)
Model of
Fundamental
Concepts
(Architect’s
View)
Technology
Model
(Designer’s
View)
Detailed
Representation
(Builder’s
View)
Functioning
System
(Working system)
Databases
Program
inventory,
logs
Communi-
cations
facilities
Trained
people
Business
events
Enforced
rules
Physical
storage
design
Detailed
program
design
Network
architecture,
protocols
Screens,
security
coding
Timing
definitions
Rule
specification
program
logic
Database
design
System
design,
program
structure
Hardware,
software
distribution
User
interface,
security
design
Event
processing
Business rule
design
Convergent
e/r model
Essential
data flow
diagram
Locations
of roles
The viable
system, use
cases
Entity life
history
Business rule
model
Language,
divergent
data model
Business
process
model
Logistics
network
Organization
chart
State/
transition
diagram
Business
strategies,
tactics,
policies, rule
List of things
important
to the
enterprise
List of
functions the
enterprise
performs
List of
enterprise
locations
Organization
approaches
Business
master
schedule
Business
vision and
mission
Fig. 6–1: Timing column.

ROW TWO: BUSINESS EVENT TYPES
247
ROW TWO: BUSINESS EVENT TYPES
Modeling the timing of business and system activities is really about modeling
types of events. An event is something happening that causes something else to
happen. This can be a business event that triggers an activity in the enterprise
or a technological event that causes something to happen in a computer system.
An event type is the deﬁnition of a category of events. Because we are concerned
here with metadata and not the data of the business, this model will cover event
types, not the actual events that occur on particular days.
Note that this includes the temporal event concept, which is simply the fact that
the clock (including the calendar) passed a certain point. For example, the end of
a month may be a temporal event triggering the closing of a company’s accounts.
A schedule, such as a manufacturing master schedule, is simply a collection of
temporal events.
The metamodel for the Timing column overlaps signiﬁcantly with the meta-
model for activities, described in detail in Chapter Three. Here, in Row Two, a
business event type is something that causes an occurrence of a business process
to be carried out.
External Business Event Types
In Chapter Three, we saw that an essential business process is deﬁned as the col-
lection of elementary business processes into a complete response to an external
event type. Figure 6–2 shows the part of the metamodel that covers this. Speciﬁ-
cally, we are deﬁning as part of the nature of an essential business process that it
must be based on an external business event type. An external business event
type deﬁnes something that happens in the world outside of the enterprise’s con-
trol. This includes such things as “Receipt of a payment”, “Arrival of a candidate
for a job”, and so forth. Note that this could also include something happening
within the organization’s facilities, such as “a ﬁre in the reﬁnery”, as long as it is
not in the enterprise’s control. This is as opposed to an internal business event
type that deﬁnes something happening under the control of the enterprise, such as
completion of a manufacturing step. (Internal business eventtypes are discussed
further in the material following.)
Note that an attribute of external business event type is a “Temporal indica-
tor”, which indicates whether events of this event type are temporal events. As
stated previously, a temporal event is one that is triggered by the passage of time,
such as “the ﬁrst of the month”, “December 25”, and so forth.

248
EVENTS AND TIMING
EXTERNAL BUSINESS 
EVENT TYPE
* Temporal indicator
the basis for
ACTIVITY
# ID
* Name
° Description
* Date established
° Date discontinued
ESSENTIAL BUSINESS PROCESS
based on
part of
part of
composed
of
BUSINESS PROCESS
° Scheduled start date
° Scheduled end date
° Actual start date
° Actual end date
ELEMENTARY 
BUSINESS 
PROCESS
OTHER
BUSINESS 
PROCESS
composed
of
Fig. 6–2: External event types and essential processes.
Figure 6–3 shows the detailed business process model for the library procure-
ment department originally described in Chapter Three. Note that two external
business event types drive the model: “Receipt of invoice” and “Receipt of book”.
“Receipt of book” triggers two elementary business processes, which can then be
rolled up into the essential business process “Book received”. It also sends the
message “Marked ‘Blue’ order” to the business process “Pay invoice”. Note that
“Pay invoice” cannot happen until an event that is an example of the external
business event type, “Receipt of invoice”, occurs.

ROW TWO: BUSINESS EVENT TYPES
249
Accounts
payable
Receiving
Cataloguing
Receipt
of invoice
Receipt
of book
Pay
invoice
Held for
invoice
Confirm
title,
quantity
confirmed
Invoice
Payment
Marked
“Blue”
order
Marked
“Blue”
order
“Book
received”
Pending
orders
“Blue”
order
Receipt
of book
Receive
book
Roll up to
“Essential”
Business
Process
Pending
orders
“Blue”
order
Classify
book
Book
on shelf
Updated
Card
Catalogue
Book
card
Book
card
Classified
book
Book
Book
Book on
shelf
Held for
invoice
Updated
Card
Catalogue
Marked
“Blue”
order
(received
book)
(confirmed
book)
Fig. 6–3: Sample essential business process model.
Internal Business Event Types
In addition to external business event types, elementary business processes,
and other business processes within the organization are also often triggered
by business processes. These triggerings (like the message “Book received”,

250
EVENTS AND TIMING
described previously) are examples of internal business event types.
That is,
they describe events that are internal to the enterprise and under its control.
In Figure 6–3 we saw elementary business processes that affect each other.
There are two types of ﬂows in this model. The thick lines are the movements of
the physical book itself. The thinner lines are movements of the set of mechanisms
(color-coded copies of purchase orders and the like) required to pass information
from one process to the next. Each of these latter ﬂows is, in effect, an internal
business event type (shown in Figure 6–4).
An internal business event type represents the fact that one business pro-
cess may trigger another. The internal business event type that is the trigger
of a business process may be the action of another business process. That is,
a business process may be the decision to trigger one or more internal busi-
ness event types, each of which must then be the trigger of another business
process.
Note that decisions themselves are not explicitly represented in this model.
The decision to trigger one internal business event type/business process
instead of another is contained in the logic of the triggering business process.
In Figure 6–3, the process fragment (a type of business process) “Classify
book” is initiated by an internal business event type, completion of the process
fragment “Title, quantity conﬁrmed”. An external business event type is some-
thing that happens outside the control of the enterprise. It may be something
that happens in the marketplace, an act of God, or simply the passage of time
(deﬁned by the “Temporal indicator” attribute’s being “True”). Temporal events,
by deﬁnition, cannot be internal events.
Note, by the way, that although a business process may be in the role of an
internal business event type, an event type is very different from a process.
A process, by deﬁnition, takes place over time, whereas an event type is instan-
taneous. If a business process is the decision to trigger a business event type, it
is not the entire process doing so. It is rather the point of time at the completion
of, at the beginning of, or somewhere else during the duration of the business
process that is acting as a business event.
The internal business event type attribute “Position ﬂag” takes the value
“Beginning” if the event type is at the beginning of the business process. It takes
the value “End” if the event type is at the end of the business process; or it takes
the value “Lag” if it is at a predeﬁned point after the start of the business process.
If it is “Lag”, the attribute “Lag quantity” is the length of time after the beginning
of the business process that constitutes the event. The “Lag quantity” must have

ROW TWO: BUSINESS EVENT TYPES
251
composed of
part of
triggered by
the
trigger
of
the decision 
to trigger
the
action
of
BUSINESS EVENT TYPE
# ID
* Name
* Description
EXTERNAL BUSINESS
EVENT TYPE
* Temporal indicator
ACTIVITY
# ID
* Name
° Description
* Date established
° Date discontinued
ESSENTIAL BUSINESS PROCESS
ELEMENTARY
BUSINESS
PROCESS
OTHER BUSINESS
PROCESS
FUNDAMENTAL
BUSINESS
PROCESS
ELEMENTARY BUSINESS
FUNCTION
OTHER FUNCTION
CUSTODIAL
BUSINESS
PROCESS
INTERNAL BUSINESS
EVENT TYPE
* Position flag
° Lag quantity
° Lag unit of measure
the basis
for
part of
based on
composed of
carried out by
to carry out
BUSINESS PROCESS
° Scheduled start date
° Scheduled end date
° Actual start date
° Actual end date
FUNCTION
to implement
implemented via
Fig. 6–4: Internal business event types.
a “Unit of measure”, such as “Weeks” or “Days”, and this is stored in the attribute
“Lag unit of measure”.
Figure 6–4 also shows that both internal business event type and external
business event type are sub-types of business event type. Again, remember that
these are event types we are discussing here. The date and time of actual events
is not a subject of this model.

252
EVENTS AND TIMING
Motivation
Note that in the model so far a business event type deﬁnes a direct effect on
a business process. In Chapter Seven, we will encounter inﬂuencers, where
an inﬂuencer is “anything that can produce an effect on the enterprise without
apparent exertion of tangible force or direct exercise of command” [Business Rules
Group 2005, p. 21]. That is, whereas a business event type directly causes a
business process to occur, an inﬂuencer’s effect is more indirect. It ﬁrst must
be judged to be important.
As described in Chapter Seven, an inﬂuencer works by affecting the ends
(speciﬁcally, desired results) that describe what the enterprise is in the business
to accomplish (see Figure 6–5). It also affects the means (speciﬁcally, the courses
of action) that deﬁne any capability that may be called on, activated, or enforced
to achieve an organization’s objectives. The means available, then, constrain the
actual business processes that are possible.
Speciﬁcally, each inﬂuencer may be subject to one or more assessments,
each of which may be composed of one or more assessment elements. Each of
these in turn is an assessment of an inﬂuencer’s effect on a means or an end.
In response to such an assessment, a means may be used to a means effect on
a business process. A means effect can offer guidance or impose governance
on the business process, but more typically it is an effort using the business
process to achieve a desired result.
ROW THREE: SYSTEM EVENTS
Whereas Row Two (the Business Owner’s View) was concerned with the business
events that trigger the work of the enterprise, Row Three (the Architect’s View)
is concerned with the system events∗that deal with the enterprise’s data. Three
types of models are described in this chapter to recount event types.
–
The state-transition diagram, which represents the sequence of states an entity
class (or system) may go through, as triggered by deﬁned types of events
∗Again, it should be noted that the word system is used here to denote that we are looking at events
that could be automated, not that any particular technology is expected to be used.

ROW THREE: SYSTEM EVENTS
253
MEANS EFFECT
# ID
* Name
* Description
* Start date
° End date
ASSESSMENT
ELEMENT
# Effective date
° Until date
ASSESSMENT
# Effective date
* Description
° Until date
INFLUENCER
# Name
* Description
* Effective date
° Expiry date
MEANS
# Name
* Description
* Effective date
° Until date
composed
of
part
of
carried
out by
to carry
out
in the role of
BUSINESS EVENT TYPE
# ID
* Temporal indicator
* Name
* Description
EXTERNAL 
BUSINESS EVENT 
TYPE
ACTIVITY
# ID
* Name
° Description
* Date established
° Date discontinued
ESSENTIAL BUSINESS PROCESS
ELEMENTARY
BUSINESS
PROCESS
OTHER BUSINESS
PROCESS
FUNDAMENTAL
BUSINESS
PROCESS
ELEMENTARY 
BUSINESS FUNCTION
OTHER FUNCTION
CUSTODIAL
BUSINESS
PROCESS
EFFORT
° Scheduled start date
° Scheduled end date
OTHER
EFFORT
DESIRED
RESULT
EXTERNAL
INFLUENCER
INTERNAL
INFLUENCER
PROJECT
PROGRAM
INTERNAL BUSINESS
EVENT TYPE
* Position flag
° Lag quantity
° Lag unit of measure
the
basis
for
the
action
of
triggered
by
the
trigger
of
part of
based on
composed of
BUSINESS PROCESS
° Scheduled start date
° Scheduled end date
° Actual start date
° Actual end date
FUNCTION
part of
composed
of
to implement
implemented via
GUIDANCE
GOVERNANCE
on
subject to
of
the source
of
to achieve
on
on
achieved
via
the
object
of
the
object
of
in
composed
of
part
of
of
composed
of
subject
to
END
# Name
* Description
* Effective date
° Expiry date
Fig. 6–5: Events and inﬂuencers.
–
The entity life history, which also represents the sequence of states an entity
class may go through, but whose focus is more on the event types triggering
these state changes than on the states themselves
–
The essential system process diagram¸ which like the essential business process
diagram reduces processes to those required to carry out a company’s response
to a type of system event

254
EVENTS AND TIMING
State-Transition Diagram
Figure 6–6 shows a sample of a state-transition diagram. This is a relatively old
technique [e.g., Martin and McClure 1985, pp. 219–230], but is included as one of
those supported by UML [e.g., Booch et al. 1999, pp. 286–307]. The diagram as a
whole represents the life cycle of an entity class, although as a Row Two diagram
the same notation could be used to describe a sequence of states for a portion of
the company.
This ﬁgure is a modiﬁed UML version of a state-transition diagram. In it,
each round-cornered rectangle represents the state of an entity class. A state is
a condition the entity class is in, represented by a speciﬁc set of values for its
attributes and relationship roles. Each arrow represents an event type that causes
the entity class to change from one state to another.
Fig. 6–6: Sample state-transition diagram.

ROW THREE: SYSTEM EVENTS
255
In this example, the entity class is order, from the sample entity relationship
model described in Chapter Two. Speciﬁcally, it is purchase order. Once it has
become an “Issued Purchase Order”, the following transitions can take place as
shown in this model.
–
The need for a new line item is identiﬁed. This changes the state from “Issued”
to “Short 1 line item”. Subsequent to that, the event type “Addition of new
item(s)” changes the state back to “Issued”.
–
An error in the purchase order is identiﬁed. This changes the state from
“Issued” to “Erroneous”. Subsequently, the correction of the error changes
the state back to “Issued”. (Receipt of most items against the purchase order
does not change its state.)
–
“Receipt of the last item” against the purchase order changes its state to
“Complete”.
–
After the purchase order has been deemed complete, determination that one
of the received products is faulty causes it to be returned and the state of the
purchase order goes back to “Issued”.
–
When the last item has again been received, the state can again return to
“Complete”.
–
Once the decision is made to close the purchase order, its state is changed to
“Closed”.
–
Alternatively, at any point during its life, the purchase order can be found to
be unsatisfactory, which changes its state to “Canceled”.
The metamodel for all of this is shown in Figure 6–7. A system eventtype is the
deﬁnition of something that happens in the world that produces data affecting
the business. It is represented by a line on the state-transition diagram. It may be
triggered by a business event type.∗Ultimately, every system event type must be
a changer from one entity class state . . . to another entity class state. And of
course an entity class state must be of an entity class—either an elementary
entity class or an assembly of those embodied in a virtual entity class.
Like a business event type, a system event type is either a temporal system
event type (which is triggered by the passage of time) or another kind of event
∗Later we will see how it must be triggered by either a business event type or a business process.
This is why the relationship line is a mandatory solid in the ﬁgure even though the text says “may”.

BUSINESS EVENT TYPE
# ID
* Temporal indicator
* Name
* Description
EXTERNAL BUSINESS 
EVENT TYPE
INTERNAL BUSINESS
EVENT TYPE
* Position flag
° Lag quantity
° Lag unit of measure
SYSTEM EVENT TYPE
# Name
* Description
* External indicator
* Temporal indicator
° Position flag
° Lag quantity
° Lag unit of measure
ENTITY CLASS
STATE
# Name
* Description
ENTITY CLASS
STATE TYPE
# Name
* Description
the trigger of
triggered by
changed by
changer from
a result of
changer to
embodied in
an example of
BUSINESS CONCEPT
# ID
* Name
* Primary definition
about
a super-type of (2+)
described by
a sub-type of
ATTRIBUTE
° Default value
° Formula text
° Cardinality indicator
* Default optionality indicator
OTHER
BUSINESS
CONCEPT
ENTITY CLASS
VIRTUAL ENTITY CLASS
* Definition
ELEMENTARY ENTITY CLASS
in
of
Fig. 6–7: Entity class states.

ROW THREE: SYSTEM EVENTS
257
type, triggered by something in the world. This is represented by the attribute
“Temporal indicator”, which is “True” if an event is temporal. Also, like business
event type occurrences of system event type are either internal to the company
or external. Rather than representing this with sub-types, the system event type
entity class has the attribute “External indicator”, which is “True” if the event is
outside the enterprise’s control.
Note that similar to the case discussed for the Row Two model we are interested
in event types here, not in system processes. An event is something in the world
that happens, causing something else to happen. This means that there is no
elapsed time in an event—only a point in time. Even where a business or system
process is triggered by another process, what is triggering it is completion of
(or beginning of, and so on) the previous process, not its duration.
Speciﬁcally, whereas a system event type is caused by a system process, the
attribute “Position ﬂag” tells whether the system event type was the “Beginning”
of the business process, the “End” of the business process, or “Lagged” a speciﬁed
“Lag time” from the beginning of the business process. The attribute “Lag time”
is expressed in terms of the attribute “Lag unit of measure”, such as “weeks”
or “days”.
Entity Life History
The object-oriented community claims that the advantage of object modeling
over entity-relationship modeling is object models’ representation of object class
behavior. That is, what happens to an object in that class over the course of its
existence. In that object models are fundamentally about program design, this is
not that remarkable. This is especially true because behavior is not actually rep-
resented in a model by program logic but only by the name of a program. This
makes it very easy to do.
In principle, the entity boxes in an entity-relationship model could also be
expanded to include references to behavior. The problem is that in the real world
represented by such models behavior cannot be identiﬁed simply by named pack-
ages. It is possible to model the behavior of entity classes, of course, but this
results in a model that is much more complex than can be squeezed into an entity
class box on a model.
One type of model that speciﬁcally addresses this task is called the entity life
history [Jackson 1983; Eva 1994]. The idea here is that an entity class is described

258
EVENTS AND TIMING
(PURCHASE)
ORDER
• Contract number
• Issue date
• Due date
• Closure date
• Cancellation date
• Terms
• Status
• (Total value)
Completion life
Completion
event
Product
received (last)
Order life
Order issued
*
°
°
°
°
°
°
°
Product found
unsatisfactory (returned)
Order
event
*
Contract
found incorrect
Party no
longer needs
New line
item needed
Order end
Order found
obsolete (and deleted)
Order deemed
complete (and
closed)
Order no longer
needed (and
canceled)
Fig. 6–8: Sample entity life history.
in terms of the system events that affect a typical instance of the entity class
throughout its life.
Figure 6–8 shows an example. In it, the entity class (purchase) order is shown
at the top, with a collection of rectangles representing events hanging down from
it in a hierarchical formation. In this case, a (purchase) order is for the purpose
of acquiring products. There are three types of events.
–
Sequence: Each of these is expected to take place in the order shown.
–
Iteration: Each of these can happen more than once.
–
Alternative: Only one of a set of these can happen within an occurrence of a
parent event.

ROW THREE: SYSTEM EVENTS
259
before
before
after
after
SYSTEM EVENT TYPE
# Name
* Description
* External indicator
* Temporal indicator
° Position flag
° Lag value
° Lag unit of measure
ENTITY CLASS
STATE
# Name
* Description
ENTITY CLASS
STATE TYPE
# Name
* Description
changed by
changer from
a result of
changer to
SEQUENTIAL
SYSTEM EVENT
TYPE
EVENT TYPE
SEQUENCE
# Sequence number
ITERATIVE
SYSTEM EVENT
TYPE
ALTERNATIVE
SYSTEM EVENT
TYPE
before
part of
composed of
after
after
before
BUSINESS CONCEPT
# ID
* Name
* Primary definition
of
a super-
type of 
(2+)
in
a sub-
type of
embodied in
an example of
ENTITY CLASS
VIRTUAL ENTITY CLASS
* Definition
ELEMENTARY ENTITY 
CLASS
Fig. 6–9: System event types.
In the metamodel of this in Figure 6–9, an instance of the entity class system
event type is now shown to be a sequential system event type, an iterative
system event type, or an alternative system event type. This corresponds to the
three event types just described.∗The entity class sequential system event type
∗These sub-types are the reason I chose earlier not to represent internal event type and external
event type as sub-types of event type, but used the attribute “External indicator” to show that
distinction.

260
EVENTS AND TIMING
is shown to be after an event type sequence that is after another sequential
system event type. The ﬁgure also shows that each system event type may be
composed of one or more other system event types. In Figure 6–8, the primary
sequence of events (to be carried out in this order) is:
–
Order issued: Creating each instance of order
–
Order life: Consisting of the events that might take place during
its life
–
Completion life: Meeting the terms of the order
–
Order end: Triggering the ofﬁcial closure of an order
–
Obsolescence: Causing the physical deletion of an order
In this example, three of the sequential event types are indeed composed of
other system event types. “Order life”, for example, is composed of one iterative
system event type, “Order event”. “Order event” in turn is composed of three
alternative system event types.
–
Order found obsolete
–
Party no longer needs
–
New line item needed
Each “Order event” must be the fact of one (and only one) of the following:
–
The order was found to be incorrect (and therefore had to be corrected).
–
One of the parties participating in it left (and therefore had to be removed
from the order).
–
A new line item (referring to a new ordered physical asset type) was required
(and therefore must be added).
Note that the overall conﬁguration of this branch says that during the life of
the order one or more of these things may happen. Similarly, the sequential
system event type “Completion life” consists of one or more instances of the
iterative system event type, “Completion event”. Each instance of “Completion
event”, then, consists of either of the alternative system event types “Product
received (last)” or “Product found unsatisfactory (returned)”. If the latter happens,

ROW THREE: SYSTEM EVENTS
261
there subsequently may be another occurrence of “Completion event”, this time
implemented as “Product received (last)”.
In this particular example, it is company policy that an order is not considered
“Closed” until someone reviews all deliveries and says it is so (hence the event type
“Order end”, which may be either a person’s saying it is “Closed” or someone’s
canceling it).
In the logical model, this is the end of the order. In deference to the physical
maintenance of the data, however, it is possible to add the event type “Order
found obsolete (and deleted)”. That is, the order would remain on ﬁle with the
status “Deleted” until the event “Order found obsolete” caused it to be physically
deleted.
As with business event types, it is possible to talk about a system event type
that is the trigger of one or more system processes. The fact that an event can
trigger a system process is shown in the example in Figure 6–10. Each num-
bered box in the diagram represents an operation (ELH-speak for “process”) that
responds to the event. For example, in this ﬁgure the event type “Order issued”
would be implemented by eight system processes:
1. Create order.
2. Tie order to from party.
3. Tie order to to party.
4. Create one or more line items, and tie them to an order.
5. Set order (Issue date).
6. Set order (Due date).
7. Set order (State) to “open”.
8. Set order (Terms).
Note that the entity life history does not describe the source of the events.
The part of the metamodel shown in that is Figure 6–11 does, however, allow
us to specify that a system event type must be triggered by either a business
event type (as was described previously) or that it must be the action of a system
process.

(PURCHASE)
ORDER
• Contract number
• Issue date
• Due date
• Closure date
• Cancellation date
• Terms
• Status
• (Total value)
Completion life
Completion
event
Product
received (last)
Order life
Order issued
*
Product found
unsatisfactory (returned)
Order
event
*
Contract
found incorrect
Party no
longer needs
New line
item needed
Order end
Order found
obsolete (and deleted)
Order deemed
complete (and
closed)
Order no longer
needed (and
canceled)
1
2
3
4
5
6
7
8
9
10
15
16
17
18
11
12
13
14
19
21
20
22
°
°
°
°
°
°
°
Fig. 6–10: Operations in an entity life history.

ROW THREE: SYSTEM EVENTS
263
SYSTEM EVENT TYPE
# Name
* Description
* External indicator
* Temporal indicator
° Position flag
° Lag quantity
° Lag unit of measure
ENTITY CLASS
STATE
# Name
* Description
ENTITY CLASS
STATE TYPE
# Name
* Description
changed by
changer from
a result of
changer to
SEQUENTIAL
SYSTEM EVENT
TYPE
EVENT TYPE
SEQUENCE
# Sequence number
BUSINESS EVENT 
TYPE
# ID
* Name
* Description
ITERATIVE
SYSTEM EVENT
TYPE
ALTERNATIVE
SYSTEM EVENT
TYPE
part of
composed of
BUSINESS CONCEPT
# ID
* Name
* Primary definition
of
a super-
type of 
(2+)
in
a sub-
type of
the trigger of
triggered by
embodied in
an example
of
before
after
after
before
STANDARD ENTITY CLASS
ENTITY CLASS
VIRTUAL ENTITY CLASS
* Definition
ELEMENTARY ENTITY CLASS
SYSTEM PROCESS
# Identifier
* Name
* Description
in the role of
the action of
triggered by
a trigger of
Fig. 6–11: Events and processes.
Essential System Processes
Chapter Three discussed the process of developing an essential system process
model [McMenamin and Palmer 1984]. Figure 6–12 reproduces the sample data
ﬂow diagram from Chapter Three, showing the derivation of an essential data ﬂow
diagram from a set of process fragments. Here we examine it from the point of

264
EVENTS AND TIMING
Receive
each set
of books.
3.4
3.4 Receive each book.
Receipt of books
Book received
Check shipment
against purchase
order.
3.4.2
Receiving
Book
Supplier
b
Record
arrival of
shipment.
3.4.1
Receipt
of books
Book
Supplier
b
Accounts
Payable
r
Book received
Accounts
Payable
d
3/1
Pending purchase order
3/2
Book Archive
Title,
classification
number
Titles,
quantities
received
Titles,
quantities
due
Receiving
Classify
book.
3.4.3
Cataloguing
3/1
Pending purchase order
Titles,
quantities due
Titles,
quantities
received
Titles,
quantities
Return of books
Classification guidelines
Classi-
fication
Service
c
3/1
Book Archive
Title, “book
received”
Title, etc.
classi-
fication
Return
of books
Fig. 6–12: Sample essential data ﬂow diagram.

ROW THREE: SYSTEM EVENTS
265
defined by
defined by
SYSTEM EVENT TYPE
# Name
* Description
* External indicator
* Temporal indicator
° Position flag
° Lag quantity
° Lag unit of measure
SYSTEM PROCESS
# Identifier
* Name
* Description
ENTITY CLASS
STATE
# Name
* Description
ENTITY CLASS
STATE TYPE
# Name
* Description
changed by
changer from
a result of
changer to
SEQUENTIAL
SYSTEM EVENT
TYPE
EVENT TYPE
SEQUENCE
# Sequence number
BUSINESS EVENT 
TYPE
# ID 
* Temporal indicator
* Name
* Description
ITERATIVE
SYSTEM EVENT
TYPE
ALTERNATIVE
SYSTEM EVENT
TYPE
part of
composed of
of
in
the trigger of
triggered by
embodied in
an example
of
before
after
after
before
OTHER SYSTEM PROCESS
ELEMENTARY SYSTEM
PROCESS
in the role of
the action of
defined by
the basis for
triggered by
a trigger of
composed
of
part of
BUSINESS CONCEPT
# ID
* Name
* Primary definition
a super-
type of 
(2+)
a sub-
type of
ENTITY CLASS
VIRTUAL ENTITY CLASS
* Definition
ELEMENTARY ENTITY 
CLASS
ESSENTIAL SYSTEM
PROCESS
composed of
part of
Fig. 6–13: Essential system processes.
view of the external system event “Receipt of books”, and the internal system
events connecting “Book received” from system process “Check shipment against
purchase order” to system process “Classify book”.
The metamodel for this is shown in Figure 6–13. This includes entity classes
we have seen before, but adds a specialized relationship showing that each essen-
tial system process must be deﬁned by exactly one system event type. That is,

266
EVENTS AND TIMING
although it is true that a system event type may be a trigger of any type of system
process, it can only be the basis for an essential system process. And similar to
essential business process, each essential system process may be composed of
one or more elementary system processes.
Business Rule
A system event type may only be the basis for an essential system
process if its “External indicator” is “True”.
The Feedback Loop
The great insight from the ﬁeld of cybernetics in the twentieth century was its
representation of the structure of control. The premise is that any process must be
managed via some sort of controller. The controller sends commands to the process
and receives information back about its performance. The returning information is
evaluated in terms of speciﬁed set points that are values against which to compare
the information. (See Figure 6–14.)
The best-known example of this is the household thermostat. A target tem-
perature is set (the “Set point”), and the actual temperature of the room is
CONTROLLER
PROCESS
Commands
Set point
Values
Fig. 6–14: Feedback loop.

ROW FOUR: PROGRAM EVENTS
267
continuously monitored (“Values” coming back). If the temperature goes above
the set point, a command is sent to the air conditioner to turn it on.∗
This structure came out of engineering and process control during World
War II. Once it was articulated clearly [Ashby 1956], it became clear that it also
applies in the “softer” disciplines of enterprise management. Fundamentally, all
management data processing activities (data warehouses and the like) are con-
cerned with feeding back the appropriate information to management so that it can
make appropriate decisions to control and guide the organization. Indeed, Stafford
Beer wrote The Heart of Enterprise to document his speciﬁc cybernetic model for
describing a business [Beer 1979]. Your author has summarized these princi-
ples in Requirements Analysis: From Business Views to Architecture [Hay 2003,
pp. 210–235].
Figure 6–15 shows process objective and success criterion, which are
the basis for cybernetic control. (Success criterion here is the “Set point”.)
Each system process may be directed towards one or more process objectives.
Each of these in turn is controlled by one or more success criteria (set points).
A success criterion is deﬁned by either a “Maximum value” or a “Minimum
value”.
Figure 6–16 shows the feedback part of the loop. It adds the entity class process
measurement, which is of the attribute the success criterion is in terms of.
This process measurement can then be the source of a system event type, which
is in turn the trigger of another system process.
ROW FOUR: PROGRAM EVENTS
In traditional computer programming, events did not originally play a signiﬁcant
part. The implicit event was the launching of a program, and as a result, steps
were carried out in sequence. Two trends have changed that: object-orientation
and the movement to systems based on direct user interaction with the computer.
∗For those of you in more northern climates, if the temperature goes below the set point a command
is sent to the furnace to turn it on. Same idea.

PARTY
# ID
SYSTEM 
PROCESS
# Identifier
* Name
* Description
BUSINESS EVENT
TYPE
# ID 
* Name
* Description
ORGANIZATION
* Organization name
* Description
PERSON
* Given name
° Middle initial
* Surname
the 
trigger 
of
triggered
by
the source
of
in the role of
triggered by
a trigger of
controlled
by
to determine  
the success  
of
SUCCESS CRITERION
* Date established
° Date discontinued
° Minimum value
° Maximum value
PROCESS OBJECTIVE
* Date established
° Date discontinued
directed
toward
for
embodied
in
of
PROCESS
OBJECTIVE
TYPE
# Name
* Description
from
ATTRIBUTE
° Default value
° Formula text
° Cardinality indicator
* Default optionality indicator
term for
in 
terms 
of
the
action
of
SYSTEM EVENT TYPE
# Name
* Description
* External indicator
* Temporal indicator
° Position
° Lag quantity
° Lag unit of measure
part of
composed of
Fig. 6–15: Commands.
268

PARTY
# ID
SYSTEM PROCESS
# Identifier
* Name
* Description
ORGANIZATION
* Organization name
* Description
PERSON
* Given name
° Middle initial
* Surname
the
source
of
from
ATTRIBUTE
° Default value
° Formula text
° Cardinality indicator
* Default optionality indicator
SUCCESS CRITERION
* Date established
° Date discontinued
° Minimum value
° Maximum value
PROCESS OBJECTIVE
* Date established
° Date discontinued
PROCESS
MEASUREMENT
# Sequence number
*  Value
controlled
by
to determine
the success 
of
directed
toward
for
embodied
in
of
SYSTEM EVENT
TYPE
# Name
* Description
* External indicator
* Temporal indicator
° Position
° Lag quantity
° Lag unit of measure
BUSINESS EVENT 
TYPE
# ID
* Name
* Description
the
trigger
of
triggered 
by
in the role of
the
action
of
triggered by
a
trigger
of
in
terms
of
PROCESS
OBJECTIVE
TYPE
# Name
* Description
the source 
of
from
described
by
for
of
part of
composed of
term for
evaluated 
via
Fig. 6–16: Feedback.
269

270
EVENTS AND TIMING
Object Orientation
Figure 6–17 shows an expansion of the object-oriented metamodel from
Chapter Three. Note the addition of discrete instance attribute and other
instance attribute as sub-types of instance attribute. An other instance
attribute can take as a value any real number or piece of text. A discrete
instance attribute can only take one of a list of values, represented in the model
by the entity class discrete instance valid value. A particularly signiﬁcant dis-
crete instance attribute is state. If a discrete instance attribute is a state, its
valid attribute values describe the states of the class implementation that the
discrete instance attribute is part of. This is the value of the state the class
implementation is in at any point in time.
An instance attribute may be a state that describes a condition for each
object that is an instance of a class. A state is an instance attribute controlled
by business rules (legal transformations), which in turn constrain how an
object can move from one value of state to another. (See Figure 6–17.)∗
Business Rules
1. As stated previously, any discrete instance attribute may be given one
or more legal values. In the case of state, however, it must be given
one or more legal values.
2. In the model, a legal transformation appears to be a rule for chang-
ing the value of any discrete instance attribute from one discrete
instance legal value to another. In fact, a state legal transformation
speciﬁcally applies to the conversion of one discrete instance legal
value to another for a state, not for any other type of discrete attribute
instance. Similarly, an other legal transformation applies only to a
discrete instance legal value that is of an other discrete instance
attribute.
∗In practice, state is not usually recognized as an explicit attribute, but is a composite of the values
of other attributes. That is, the complete “state” of a class is the sum of the values of all of its state
attributes. For the sake of this model, however, it is easier to represent it this way.

ROW FOUR: PROGRAM EVENTS
271
acting
as
in
STATE 
TRIGGER
* Rule
LEGAL 
TRANSFORMATION
# Sequence number
* Description
* Rule
DISCRETE INSTANCE 
VALID VALUE
# ID
* Value
DISCRETE INSTANCE ATTRIBUTE
OTHER
INSTANCE
ATTRIBUTE
of
invoked by
from
the start of
to
the end of
CLASS ELEMENT
# Sequence number
* Name
* Visibility
INSTANCE ATTRIBUTE
for
evaluated
as
OTHER DISCRETE
INSTANCE ATTRIBUTE
CLASS ATTRIBUTE
STATE
a call to
on
an example of
embodied
in
an instance
of
embodied in
sent by
sender
of
implemented by
an implementation of
part of
inheriting from
composed of
a generalization of
performed by
objects in
source of
to invoke
invoked by
MESSAGE
# Sequence number
* Name
* Message text
MESSAGE TYPE
# Name
* Description
OPERATION
# ID
° Description
* Visibility
EXECUTABLE MODULE
CLASS IMPLEMENTATION
PROGRAM MODULE
# ID
* Name
* Description
° Scenario
° Program code 
OBJECT
# Name
* Program code
MESSAGE 
QUEUE
# ID
° Name
destination of
to
source of
from
temporary
holder of
to
the site of
for
part of
composed of
the use of
used as
METHOD
PACKAGE
Fig. 6–17: State triggers.

272
EVENTS AND TIMING
Note, by the way, that this concept of state can also be implemented in a
corresponding way in a relational design. Because object-oriented models began
in the real-time systems world, however, the concept is more central to this
approach.
Also shown in Figure 6–17 is the fact that a message type may be acting as
one or more state triggers of legal transformations from one valid attribute
value to another. That is, a state may move from one . . . value to another via a
legal transformation invoked by a state trigger in a message.
For example, assuming the previous examples are implemented by object-
oriented applications, a class implementation of order might have legal
transformations from the valid attribute value (for a state) of “Issued” to
“Complete”, and from “Complete” to “Closed”, but there may not be a legal
transformation from “Issued” to “Closed”. A message sent by the operation
“Receive shipment” to the operation “Catalogue book” could be acting as the
state trigger that is of the legal transformation from “Issued” to “Complete”.
In the program code example describing hominoid in Chapter Three, the
instance attribute facingWall is an example of a state. In this model, the busi-
ness rule governing the transformation is simply presented as a text attribute of
state trigger. Perhaps a more sophisticated model could represent the structure
of such a rule more explicitly. This is left as an exercise for the reader.

7
MOTIVATION
Hell, there are no rules here—we’re trying to accomplish something.
—Thomas A. Edison
There are two rules for success:
1. Never tell everything you know.
—Roger H. Lincoln
THE MOTIVATION COLUMN
The Motivation column is concerned with why the enterprise does what it does.
–
The planner lays out the vision and mission of the enterprise, along with
approaches for deﬁning business policies and rules.
–
The business owner is concerned with all factors that motivate business activ-
ities in an enterprise, from vision and mission bestowed by the planner’s view
to the goals and objectives and the strategies and tactics that make up the
business plan. Also included are the business policies and business rules that
constrain the operation of the business.
–
The architect is the one responsible for translating business rules into
constraints on the structure of the data in the architectural data model.
–
The designer is responsible for implementing constraints—both those that
reside directly inside a database management system and those that must be
programmed externally from the database itself.
–
The builder is responsible for constructing the systems and system components
that will monitor and enforce business rules.
–
The functioning system implements and enforces the business rules and
policies of an enterprise.
273

274
MOTIVATION
About Motivation
Figure 7–1 shows the architecture framework with the cells highlighted that will
be the subject of this chapter. In 2000, the Business Rules Group published a paper
describing the Motivation column from the perspective of the Business Owner’s
View. The paper, updated and republished in 2005, is the basis for the ﬁrst section
of this chapter [BRG 2005]. In that paper, the Group set out to describe both the
ends and means of business plans and the inﬂuencers that shape the elements of
those plans. Along with this, the paper describes the assessments of the impacts of
those inﬂuencers, as well as the directives that initiate and constrain the carrying
out of the plans.
The elements of business planning are considered metadata because they
describe the structures (and motivation) within which the actual business processes
take place. The concepts and facts needed to support the business are described
here, appropriately part of the metadata for the Business Owner’s View.
The enterprise as a whole is constrained by competition, the laws of physics,
and governments. Its goals and objectives and its strategies and tactics, like it
or not, are inﬂuenced by these constraints. Moreover, in expressing its goals
and objectives, management is imposing further constraints on its employees. For
these reasons, business rules from all perspectives are very important components
of the Motivation column.
Mission and Vision
According to the Business Rules Group (BRG), “if an enterprise prescribes a cer-
tain approach for its business activity, it ought to be able to say why; that is,
what result(s) the approach is meant to achieve. . . The BRG realized early on
that a cornerstone of any work addressing motivation had to be the enterprise’s
aspirations (its Vision) and its action plans for how to realize it (its Mission)”
[BRG 2005, p. 3].
Rather than Row Two, an enterprise’s mission and vision represent the plan-
ner’s Row One perspective on the company’s motivation. They do, however,
provide the context for understanding the Row Two elements, so we will take a
moment to address them. Figure 7–2 shows mission and vision as entity classes.
As stated, these really are the domain of Row One, the Planner’s View. Here, a

THE MOTIVATION COLUMN
275
Data
(What)
Activities
(How)
Locations
(Where)
People
(Who)
Time
(When)
Motivation
(Why)
Objectives/
Scope
(Planner’s
View)
Enterprise
Model
(Business
Owner’s
View)
Model of
Fundamental
Concepts
(Architect’s
View)
Technology
Model
(Designer’s
View)
Detailed
Representation
(Builder’s
View)
Functioning
System
(Working system)
Databases
Program
inventory,
logs
Communi-
cations
facilities
Trained
people
Business
events
Enforced
rules
Physical
storage
design
Detailed
program
design
Network
architecture,
protocols
Screens,
security
coding
Timing
definitions
Rule
specification
program
logic
Database
design
System
design,
program
structure
Hardware,
software
distribution
User
interface,
security
design
Event
processing
Business rule
design
Convergent
e/r model
Essential
data flow
diagram
Locations
of roles
The viable
system, use
cases
Entity life
history
Business rule
model
Language,
divergent
data model
Business
process
model
Logistics
network
Organization
chart
State/
transition
diagram
Business
strategies,
tactics,
policies, rule
List of things
important
to the
enterprise
List of
functions the
enterprise
performs
List of
enterprise
locations
Organization
approaches
Business
master
schedule
Business
vision and
mission
Fig. 7–1: The Motivation column.

276
MOTIVATION
to make
operative
made operative
by
MISSION
VISION
Fig. 7–2: Mission and vision.
vision is a description of a desired future state of the enterprise, without regard
to how it is to be achieved.∗
A particularly famous vision statement was developed by the pharmaceutical
giant Johnson & Johnson, as its “Credo” in 1943. Covering four paragraphs, one
paragraph is devoted to the company’s responsibilities to each of its partners:
doctors, nurses, and patients; its employees; the community; and its stockholders
[Johnson & Johnson 1943].
A mission, on the other hand, is the overall method for the ongoing operation
of the enterprise—what the business is or will be doing on a day-to-day basis.
Note that the model asserts that each vision may be made operative by more than
one mission, but that each mission may be to make operative one and only one
vision. Neither this cardinality nor this optionality may be true in your company.
In the original Business Rules Group model, no assertions were made about the
cardinality and optionality of relationships.∗∗
∗The deﬁnitions used in this section are paraphrased from “The Business Motivation Model” paper
[BRG 2005], but for simplicity they will not be individually footnoted. I assume responsibility for
any misinterpretations that may result from my paraphrasing.
∗∗The imposition of such assertions in this book is my responsibility, not that of the Business Rules
Group.

THE MOTIVATION COLUMN
277
Ends
Figure 7–3 shows that a vision is but one type of end. An end for an organization
is simply something it sets out to accomplish. Whereas the company’s vision is the
primary end, others include various types of desired result. A desired result
is an end that is a state or target the enterprise intends to maintain.
There are two types of desired results: goals and objectives. A goal is
a desired result that is a speciﬁc statement about a state or condition of the
enterprise to be brought about or sustained through appropriate means. (More
about means in a moment.) A goal is an ampliﬁer of a vision. That is, where a
vision describes a future state of the enterprise in general, a goal is one of the
steps to be taken to accomplish that vision. A goal, by deﬁnition, is more narrow
than a vision.
An objective is a statement of an attainable time-targeted and measurable
desired result the enterprise seeks to meet in order to achieve its goals. Note
quantified
by
quantifier
of
amplified
by
amplifier
of
DESIRED RESULT
END
# Name
* Description
* Effective date
° Expiry date
OBJECTIVE
GOAL
to make
operative
composed
of
made
operative
by
part
of
MISSION
VISION
Fig. 7–3: Ends.

278
MOTIVATION
that a goal is narrower than a vision, but is more general than an objective.
Unlike a goal, an objective is:
–
Attainable: You can tell when it has been achieved.
–
Time-targeted: There is either a speciﬁc date (such as “December 31, 2007”) or
a relative date (such as “within two years”).
–
Measurable: An objective must contain in its expression one or more spe-
ciﬁc criteria that can be measured to determine when the objective has been
achieved, such as “Increase sales by 10%”.
Whereas a goal is a general statement about a desirable future state, an objec-
tive is a similar expression, but in speciﬁc, quantiﬁable terms. A goal may be to
“Increase revenue every year”, but an objective would be to “Increase revenue
by 10% next year”. In addition to the explicit relationship that an objective may
be a quantiﬁer of a goal, a desired result may also be composed of one or more
other desired results. In general, this applies only within goals or objectives
(a goal may be composed of other goals, and an objective may be composed of
other objectives), but not always.
Means
Just as a vision is a type of end, so a mission is a type of means, as shown in
Figure 7–4. A means is any capability that can be called on, activated, or enforced
to achieve ends. Here, in addition to mission, the other principal type of means
is course of action—an approach or plan for conﬁguring some aspect of the
enterprise. This involves the use of things, processes, locations, people, timing, or
motivation. That is, even though we will not show it here, a course of action
may potentially be related to nearly every other entity class in the metamodel.
A course of action must be either a strategy or a tactic. A strategy is
the essential course of action attempted to achieve an enterprise’s ends—
particularly goals. Moreover, a strategy must be to carry out exactly one
mission.
Atactic is a courseofaction that represents one or more details of a strategy.
A strategy, then, may be implemented by one or more tactics. For example,
whereas a library’s vision is to “Provide reading and other intellectual materials
to the county”, its strategy is to “Operate the County Library”; and one of

THE MOTIVATION COLUMN
279
implemented by
implemented
via
implementer of
to
carry
out
enabled
via
of
COURSE OF ACTION
END
# Name
* Description
* Effective date
° Expiry date
MEANS
# Name
* Description
* Effective date
° Until date
ENABLEMENT
# Effective date
° Until date
TACTIC
STRATEGY
to make
operative
composed 
of
made operative
by
part 
of
MISSION
enabler
in
by
DESIRED RESULT
VISION
OBJECTIVE
GOAL
quantifier
of
quantified
by
amplifier
of
amplified
by
Fig. 7–4: Means.

280
MOTIVATION
its tactics is to “Obtain current books on a wide variety of subjects”. Note that
although the model does not impose this constraint, in general strategies address
goals and tactics address objectives.
In addition to the explicit relationship that each strategy may be implemented
by one or more tactics, in general any course of action may be composed of
one or more other courses of action. Also, one course of action may enable
another courseofaction. That is, one makes the other courseofaction possible.
Figure 7–4 shows the entity class enablement, which is the fact that a particular
course of action enables the carrying out of another course of action. In other
words, each enablement must be of a course of action by another course of
action. For example, the tactic “Provide each member of the sales force with a
laptop computer” enables the tactic “Input sales orders at the source”.
Directives
A third type of means is the directive—a speciﬁcation that constrains courses
of action. It does this in two ways. First, it may simply be designed to govern a
course of action. For example, “A loan is not to be granted to someone whose
credit rating is lower than B” governs the course of action concerned with
granting loans. A second effect is that sometimes a directive is itself the source of
a course of action. This is for those courses of actions whose whole purpose
is to enforce a directive. For example, a business policy for a library might be
“Make computers available to patrons as widely as possible”, and this is source of
the course of action (a tactic) to “Double the number of computers currently
available”; Figure 7–5 shows this. It also shows that a directive must be either a
business policy or a business rule.
A business policy is a nonactionable directive that guides the activities of
the business or governs them in a general way. Note that it “governs”, it does
not control or shape courses of action. For example, to say that “We will not
permit on-site visits” constrains the tactics available for meeting the strategy to
“Increase market share”. It does not specify what those tactics should be.
A business rule is a more speciﬁc and actionable constraint on the enterprise.
In particular, based on a business policy, it imposes a constraint on a fact or
fact type. A fact type could, for example, be the assertion that “A customer is
charged for damage to a rental car”. The business rule may add obligation to this
statement thus: “A customer must be charged for damage to a rental car”. Or the

THE MOTIVATION COLUMN
281
MISSION
implemented by
implemented
via
implementer of
to carry
out
constrained
by
constrained
by
a constraint on
a constraint on
the basis
for
based on
COURSE OF ACTION
MEANS
# Name
* Description
* Effective date
° Until date
TACTIC
STRATEGY
to make
operative
composed 
of
part 
of
DIRECTIVE
PROPOSITION
# Name
FACT
* Effective date
° Until date
BUSINESS RULE
* Rule type
BUSINESS
POLICY
OTHER
PROPOSITION
FACT TYPE
* Effective date
° Until date
DERIVATION
* Formula
RELATIONSHIP
ROLE
OTHER FACT
TYPE
CHARACTERISTIC
* Description
PROPOSITION TYPE
° Modal type
governed
by
to
govern
formulated
based on
the source
of
embodied in
an example of
END
# Name
* Description
* Effective date
° Expiry date
made
operative
by
VISION
DESIRED RESULT
OBJECTIVE
GOAL
amplifier
of
amplified
by
quantifier
of
quantified
by
OTHER PROPOSITION
TYPE
PROPOSITION TYPE
° Modal type
Fig. 7–5: Directives.

282
MOTIVATION
rule may add permission to the fact type: “A customer need not be charged for
damage to a rental car”.
In its submission to the Object Management Group, “The Semantics of Busi-
ness Vocabulary and Business Rules”, the Business Rules Team deﬁnes a business
rule as “an element of guidance that introduces an obligation or necessity, that is
under business jurisdiction” [BRT 2005, pp. 167–169]. In general, a business
policy sets direction and provides general guidelines for courses of action,
whereas a business rule is a more speciﬁc constraint on them.
Figure 7–6 shows more details about directives. Speciﬁcally, it shows that each
directive may be subject to one or more enforcement level implementations,
where each of these must be an example of a particular enforcement level.
An enforcement level is a measure of the extent to which a business rule is to
be enforced.
Although an enforcement level could be deﬁned in various ways, the Business
Rules Group has listed the following [BRG 2005, pp. 14–15]:
–
Strictly enforced: If the rule is violated, the penalty is always applied.
–
Pre-authorized override: Enforced, but exceptions are allowed with prior
approval.
–
Post-justiﬁed override: If not approved after the fact, there may be sanctions
or other consequences.
–
Override with explanation: When the violation occurs, there must be a
comment justifying it.
–
Guideline: A suggested rule, but not enforced.
An enforcement level implementation is the fact that a particular business rule
will be enforced at a speciﬁed enforcement level. It is this enforcement level
implementation that is the source of one or more consequence invocations.
Each consequence invocation, in turn, must be an example of a particular
consequence, such as “Termination”, “Salary deduction”, and so on.
Thus, for example, the business rule that a “company car may not be
used for personal business” may be subject to an enforcement level imple-
mentation that is of the enforcement level “Pre-authorized override” (you
can borrow it with prior approval), whereas the rule that “Material may not
be withdrawn from inventory without a signed pick ticket” may be the object
of an enforcement level implementation that is of the enforcement level

END
# Name
* Description
* Effective date
° Expiry date
made operative by
MISSION
DESIRED RESULT
VISION
OBJECTIVE
GOAL
quantifier of
quantified by
amplifier
of
amplified
by
determinant
determinant
of the value
of the value
of
of
implemented by
implemented
via
implementer of
to carry
out
a constraint on
a constraint on
the basis
for
based
on
COURSE OF ACTION
MEANS
# Name
* Description
* Effective date
° Until date
TACTIC
STRATEGY
composed 
of
part 
of
DIRECTIVE
BUSINESS RULE
* Rule type
BUSINESS
POLICY
governed
by
to
govern
formulated
based on
the source
of
CONSEQUENCE INVOCATION
# Effective date
° Until date
ENFORCEMENT LEVEL
ENFORCEMENT LEVEL 
IMPLEMENTATION
# Effective date
° Until date
CONSEQUENCE
# Name
* Description
the
source
of
the
result
of
embodied
in
of
of
embodied in
of
determinant
of the value
of
affected
by
to make
operative
constrained
by
constrained
by
PROPOSITION
# Name
FACT
* Effective date
° Until date
OTHER
PROPOSITION
embodied in
an example of
OTHER PROPOSITION
TYPE
FACT TYPE
* Effective date
° Until date
DERIVATION
* Formula
RELATIONSHIP
ROLE
OTHER FACT
TYPE
CHARACTERISTIC
* Description
PROPOSITION TYPE
° Modal type
subject to
Fig. 7–6: Enforcement levels.

284
MOTIVATION
“Strictly enforced”. This enforcement level implementation may in turn be
the source of the consequence invocation of the consequence “loss of pay”.
Note that the enforcement level implementation of a directive may be
affected by the tactic being governed by (or formulated based on) the direc-
tive. That is, under one tactic the directive may be “Strictly enforced” but under
another the same directive might be a “Post-justiﬁed override”.∗For example, the
assignment of the enforcement level “Strictly enforced” to the business rule
“Material may not be withdrawn from inventory without a signed pick ticket”
may be affected by (a response to) a tactic to “improve inventory accuracy”.
Inﬂuencers and Assessments
To fully understand the motivation of an organization, it is necessary to deal
with the environment within which it operates. In this model, the environment is
characterized as a set of inﬂuencers, where an inﬂuencer is anything that can
produce an effect on the enterprise without apparent exertion of tangible force or
direct exercise of command. An inﬂuencer often acts without deliberate effort
or intent.
An inﬂuencer must be either an internal inﬂuencer, originating within
the organization, or an external inﬂuencer, coming from the outside world
in some form. Each inﬂuencer must be an example of exactly one inﬂuencer
type. This redundant representation means that the ﬁrst two inﬂuencer types are
“Internal Inﬂuencer” and “External Inﬂuencer”.
According to the Business Rules Group, internal inﬂuencers include the
following.
–
Habit: A customary practice or use.
–
Assumption: An assertion that is taken for granted or is without proof.
–
Infrastructure: The basic underlying features of the enterprise.
–
Issue: A point in question or a matter in dispute between two contending
parties.
∗In recent years, various scandals and legislative responses to them (speciﬁcally the Sarbanes–Oxley
Act) have made companies more acutely aware of the importance of governance to their operations.
Although this can be immensely difﬁcult to accomplish in practice, the elements—as shown in
this model—are simplicity itself. Business policies translate into business rules, with a clear
enforcement policy.

THE MOTIVATION COLUMN
285
–
Prerogative: A right or privilege exercised by right of ownership or position
in the enterprise.
–
Resource: The resources available for carrying out the business of an enterprise,
especially their quality.
–
Corporate value: An ideal, custom, or institution the enterprise promotes or
agrees with. Each of these in turn must be an:

Explicit corporate value: A corporate value stated as a written policy

Implicit corporate value: A corporate value that is understood by some or
all in the enterprise, but that is not explicitly stated
–
Other internal inﬂuencer: An internal inﬂuencer not itemized here [BRG 2005,
p. 29].
Also according to the Business Rules Group, each external inﬂuencer of an
enterprise must be one of the following.
–
Environment: The aggregate of surrounding conditions that affect the existence
or the development of the enterprise.
–
Technology: The development and limitations of the technical processes,
methods, or knowledge applied to the enterprise.
–
Supplier: An individual or enterprise that can furnish or provide products or
services to the enterprise.
–
Customer: An individual or enterprise that has investigated, ordered, received,
or paid for products or services from the enterprise.
–
Competitor: A rival enterprise.
–
Partner: An enterprise that shares risks and proﬁts with the subject enterprise
because it is mutually beneﬁcial.
–
Regulation: An order prescribed by an authority such as a government body
or the management of the enterprise.
–
Other external inﬂuencer: An external inﬂuencer not itemized here [BRG 2005,
p. 26].
Figure 7–7 shows that the effect of inﬂuencers on means and ends is deter-
mined by one or more assessments, whereas an assessment is a judgment about
the implications of the inﬂuencer either with respect to one or more means (such
as a particular course of action) or with respect to one or more ends (such as a
particular desired result) because an assessment can have multiple implications.

286
MOTIVATION
INFLUENCER
TYPE
# Name
* Description
INFLUENCER
# Name
* Description
* Effective date
° Expiry date
INTERNAL
INFLUENCER
REGULATION
EXTERNAL INFLUENCER
OTHER EXTERNAL
INFLUENCER
ASSESSMENT
# Effective date
* Description
° Until date
ASSESSMENT
ELEMENT
# Effective date
° Until date
STRENGTH
THREAT
OPPORTUNITY
WEAKNESS
POTENTIAL IMPACT
# Name
* Description
° Probability
° Impact amount
° Unit of measure
* Start date
° End date
RISK
REWARD
BUSINESS POLICY
BUSINESS RULE
DIRECTIVE
MEANS
# Name
* Description
* Effective date
° Until date
revealed by
in
with
respect to
with
respect to
the
object
of
the
object
of
of
subject
to
embodied
in
an 
example
of
composed
of
to reveal
based on
formulated
based on
governed by
to govern
the source
of
the basis for
MISSION
implemented by
implemented
via
implementer of
to carry
out
COURSE OF ACTION
TACTIC
STRATEGY
to make
operative
composed 
of
part 
of
END
# Name
* Description
* Effective date
° Expiry date
made
operative
by
DESIRED RESULT
VISION
OBJECTIVE
GOAL
quantifier of
quantified by
amplifier
of
amplified
by
super-
type
of (2+)
sub-type
of
Fig. 7–7: Inﬂuencers and assessments.

THE MOTIVATION COLUMN
287
Thus, the model also shows that each assessment must be composed of one or
more assessment elements. It is then each of these that must be either on one
means or one end.
In addition, Figure 7–7 shows four sub-types for assessment element, based on
a particular approach to assessments called the “SWOT” method. This approach
asserts that the inﬂuencer can be assessed to constitute one of the following to
an end or a means.
–
strength: An advantage of area of excellence within the enterprise
–
weakness: An area of inadequacy within the enterprise
–
opportunity: A favorable impact
–
threat: An unfavorable impact
Other schemes for evaluating an inﬂuencer are possible. For example, a
“Corporate Value” could represent a strength with respect to a particular course
of action, if it is compatible with a new trend, or it could represent a weakness
with respect to a speciﬁc objective if it causes behavior that hurts sales. Problems
with a competitor’s marketing campaign could be an opportunity, whereas
problems with a partner could be a threat.
The net effect of an assessment element is the identiﬁcation of a measured
potential impact, which may be either a potential risk or potential reward.
Potential impact can be expressed in terms of the “Probability” of the risk or
reward, and its “Impact value”. The value is in terms of a “Unit of measure”.
For example, the potential impact of a “Corporate Value” could be an 80%
probability that there would be a reward for that strength.
Directive Motivation
As indicated by the original Business Rules Group Motivation Paper deﬁnition, an
assessment can trigger creation of one or more business rules or business poli-
cies. That is, as shown in Figure 7–8, each assessment element may be the source
of one or more directive motivations, each of which must be to create a direc-
tive (either a general business policy or a speciﬁc business rule). In other words,
each directive may be initiated by one or more directive motivations, each of
which is by an assessment element—a threat, an opportunity, a weakness, or
a strength.

INFLUENCER
TYPE
# Name
* Description
INTERNAL
INFLUENCER
ASSESSMENT
# Effective date
* Description
° Until date
ASSESSMENT
ELEMENT
# Effective date
° Until date
STRENGTH
THREAT
OPPORTUNITY
WEAKNESS
POTENTIAL 
IMPACT
# Name
* Description
° Probability
° Impact amount
° Unit of measure
* Start date
° End date
RISK
REWARD
BUSINESS POLICY
BUSINESS RULE
DIRECTIVE
MEANS
# Name
* Description
* Effective date
° Until date
revealed
by
in
with respect to
with respect to
the
object
of
the object of
of
subject
to
embodied
in
an example
of
composed of
to reveal
based on
formulated
based on
governed by
to govern
the source
of
the basis for
MISSION
implemented by
implemented
via
implementer of
to carry
out
COURSE OF ACTION
TACTIC
STRATEGY
REGULATION
to make
operative
composed 
of
part
of
END
# Name
* Description
* Effective date
° Expiry date
made
operative
by
DESIRED RESULT
VISION
OBJECTIVE
GOAL
quantifier of
quantified by
amplifier of
amplified
by
DIRECTIVE MOTIVATION
# Effective date
° Until date
* Description
by
the source
of
of
initiated by
DIRECTIVE ROLE
# Effective date
° Until date
° Description
as
an
expression
of
of
player of
super-
type
of (2+)
sub-
type
of
EXTERNAL INFLUENCER
INFLUENCER
# Name
* Description
* Effective date
° Expiry date
Fig. 7–8: Inﬂuences and directives.

THE MOTIVATION COLUMN
289
Note that a parent company’s business rule can be a subsidiary company’s
(or a department’s) regulation. That is, each directive by a parent organization
may be a player of one or more directive roles for subordinate organizations as
an inﬂuencer of inﬂuencer type “Regulation”.
Activities
Figure 7–9 brings back the activities entity class from Chapter Three. Recall from
Chapter Three that a business function (that is not part of another business
function) must be to carry out one of the enterprise’s missions.
The previous section described how a course of action is an approach or
plan for conﬁguring some aspect of the enterprise. This is to achieve its goals
and objectives in order to carry out its mission. Although that describes what
the enterprise is setting out to do, it does not describe how it will be done. It is
Figure 7–9 that shows how each course of action may be invoked via one or
more efforts.
Speciﬁcally, in the model an effort must be invoked by a course of action
to support a desired result through the use of a business process. If more than
one business process is involved, multiple efforts can be speciﬁed. An effort
is usually a project (to implement a technology, for example) or a program that
may be composed of many projects.
As it happens, effort is but one of the means effects a means can have on a
business process. (See Figure 7–10.) Among other things, each business process
may be subject to one or more instances of direction from a directive (either a
business policy or a business rule). That is, each directive may be the source
of either guidance (overall supervision) or governance (setting boundaries and
direction) through the use of a business process.
For example, the library business rule that “Overdue books shall be promptly
retrieved” provides governance through the use of the business process “Call
patron who has an overdue book”. The business policy that “The Library will
always provide an attractive and clean appearance” provides guidance through
the use of all business processes concerned with cleaning and maintenance.
Note that in general each means effect must be of one means and through the
use of one business process to support one desired result. But what you have
here is another example of relationships having sub-types. Clearly, an instance of
an effort being invoked by a course of action and an instance of a direction
being from a directive are also both sub-types of a means effect being of a means.

290
MOTIVATION
EFFORT
° Scheduled start date
° Scheduled end date
OTHER
EFFORT
PROJECT
PROGRAM
BUSINESS PROCESS
# Scheduled start date
° Scheduled end date
° Actual start date
° Actual end date
ELEMENTARY
BUSINESS
PROCESS
OTHER
BUSINESS
PROCESS
FUNCTION
OTHER
FUNCTION
ELEMENTARY
BUSINESS
FUNCTION
ACTIVITY
# ID
° Name
° Description
* Date established
° Date discontinued
part of
formulated
based on
governed
by
to govern
the source
of
implemented
via
to carry out
composed
of
to make
operative
part of
part of
composed of
composed of
to achieve
through the use of
employed in
invoked
by
invoked
via
supported
via
carried out via
to carry
out
carried
out by
implemented via
to implement
part
of
composed
of
to carry
out
BUSINESS RULE
BUSINESS POLICY
DIRECTIVE
based on
the basis for
MISSION
implemented by
implementer of
COURSE OF ACTION
TACTIC
OBJECTIVE
STRATEGY
END
# Name
* Description
* Effective date
° Expiry date
made
operative by
DESIRED RESULT
VISION
GOAL
quantifier of
quantified by
amplifier of
amplified
by
MEANS
# Name
* Description
* Effective date
°Until date
Fig. 7–9: Efforts and activities.

THE MOTIVATION COLUMN
291
MEANS EFFECT
* ID
* Name
* Description
* Start date
° End date
MEANS EFFECT
TYPE
# Name
* Description
OTHER
EFFORT
PROJECT
PROGRAM
part of
composed of
EFFORT
° Scheduled start date
° Scheduled end date
OTHER
MEANS
EFFECT
GUIDANCE
DIRECTION
GOVERNANCE
achieved via
part
of
composed
of
the
source of
the
source
of
from
invoked by
to 
achieve
an
example
of
of
through the
use of
embodied
in
BUSINESS PROCESS
# Scheduled start date
° Scheduled end date
° Actual start date
° Actual end date
ELEMENTARY
BUSINESS
PROCESS
OTHER
BUSINESS
PROCESS
FUNCTION
OTHER
FUNCTION
ELEMENTARY
BUSINESS
FUNCTION
ACTIVITY
# ID
° Name
° Description
* Date established
° Date discontinued
MEANS
# Name
* Description
* Effective date
° Until date
part
of
formulated
based on
governed
by
to govern
the source
of
implemented
via
to carry
out
composed
of
to make
operative
employed
in
subject
to
invoked
via
carried out via
to 
carry
out
composed
of
implemented via
to implement
part
of
composed
of
part
of
BUSINESS RULE
* Rule type
BUSINESS POLICY
DIRECTIVE
based on
the basis for
MISSION
implemented by
implementer of
COURSE OF ACTION
TACTIC
OBJECTIVE
STRATEGY
END
# Name
* Description
* Effective date
° Expiry date
made
operative by
DESIRED RESULT
VISION
GOAL
quantifier of
quantified by
amplifier of
amplified by
Fig. 7–10: Means effects.

292
MOTIVATION
Unfortunately, as we have seen before, this concept of a relationship being
a sub-type of another relationship cannot be directly shown in an entity-
relationship diagram. This confronts the modeler with a dilemma. If the purpose
of the model is to explain concepts, the approach used here is suitable. The
viewer sees the detailed relationship ﬁrst, and then sees how it is an example
of something more general. This, after all, is how entity classes are unveiled.
It has the disadvantage, however, of creating what could be a signiﬁcant task
when the model is turned over to the database designer. It will be very important
to remove such redundancy before generating a database design.
Alternatively, only the general relationships may be shown, but business rules
must be added to assert, for example, that an effort may only be of a course of
action.
ROW THREE: THE ARCHITECT’S VIEW
In addressing the topic of motivation, the architect is concerned with business
rules and sees them as system constraints. As stated at the beginning of this
chapter, the enterprise as a whole is constrained by competition, by the laws of
physics, logistics, and governments. Its goals and objectives as well as its strategies
and tactics are inﬂuenced by these constraints. Moreover, in expressing its goals
and objectives, management is imposing further constraints on its employees. For
these reasons, business rules from all perspectives are very important components
of the Motivation column. The Architect’s View of these constraints is speciﬁcally
concerned with how rules are interpreted in data.
About Business Rules
The Row Two model set out the parameters for describing a company’s motiva-
tion. When you get to the Architect’s View in Row Three, it is necessary to be
more speciﬁc in describing the business rules that constrain and direct an enter-
prise’s actions. Speciﬁcally, the architect is concerned with how business rules
constrain data.
In 1994, Ron Ross speciﬁed a syntax for describing business rules. At the same
time, he recognized that in the information processing context business rules

ROW THREE: THE ARCHITECT’S VIEW
293
apply to data more than they do to processes [Ross 1994, 1997]. Nearly every
rule is a constraint on what data can be updated, deleted, or accessed—and when.
In 1995 (updated in 2000), the Business Rules Group laid out the concept of
a business rule from the information system (Row Three) perspective. Although
they called it “a statement that deﬁnes or constrains some aspect of the business”
[BRG 2000], their intention was to describe the effects of business rules on data.
For this reason, here Row Three business rules will be referred to as system
constraints.∗In the “Deﬁning Business Rules” paper, the Business Rules Group
divided business rules into the following categories.
–
Structural assertions, including:

Terms (and the concepts behind them)

Facts (based on combinations of terms)

Derivations
–
Action assertions, which can be further categorized as:

Uniqueness constraints

Optionality and functionality

Referential integrity constraints

All other constraints on data [BRG 2000, p. 6]
Of these, only terms and facts can be readily described in entity-relationship
models, because they are about the structure of data. Action assertions, on
the other hand, are about the processing of data and are thus generally not
represented in an entity-relationship diagram. For this reason, the notions of
terms and facts are not part of the business rules discussion and are instead
described in Chapter Two as being column 1 (data) topics. This is also why the
Business Rules Team has more recently excluded terms and facts from the category
“business rules”. Instead they assert that business rules are built on fact types
[BRT 2005].
One thing Mr. Ross’s efforts highlighted was that for the most part a data
model cannot describe action assertions. For this, a different model is required.
∗Again, this is the Architect’s View, so the word system does not imply any particular technology.
It only means that the constraints have to be represented rigorously enough to allow implementation
by an automated system.

294
MOTIVATION
This is related to data modeling’s connection with relational theory. Although it is
possible to imagine a database management system enforcing referential integrity,
uniqueness, cardinality, and optionality constraints, for all others it would be
necessary to write a program to produce the constraint.∗
There are some structural constraints that are typically shown in data models
(cardinality, optionality, identiﬁers, and domains), but they are in fact constraints,
so they are properly discussed here in the context of business rules. The same is
true of derivations, even though derived attributes (like all other attributes) can
be shown in an entity-relationship model.
It is the action assertions that are the most difﬁcult constraints to address.
Not the least of it is to come up with a language for expressing them. Mr. Ross
created a notation that is the basis for The Business Rules Book [Ross 1997], and
the Object Role Modeling technique has some syntax for describing certain rules,
but neither of these have been widely accepted. The need for such a language was
part of the motivation for the Business Rules Team to take up semantics as its
target in the work described in Chapter Two [BRT 2005].
We can use a metamodel, however, to dissect the meaning of Row Three con-
straints on data. The model here describes just what it is such a language should
express. It will begin by addressing the constraints typically addressed by data
models (unique identiﬁers, optionality and cardinality, domains, and derivations).
It will then address action assertions, here called system constraints.
Sample Model
To illustrate the topics in this and the following sections, Figure 7–11 shows
the same sample entity-relationship model ﬁrst shown in Chapter Two. In it, an
order must be from one party (the buyer) to another party (the seller). It may
also be composed of one or more line items, each of which must be either for
one product type or one service type. This the following diagram illustrates the
constraints that can be represented in such a model.
∗I consider the constraint language that is now part of many database management systems to be
a programming language. Yes, implementation of constraints thus become intimate parts of the
database but they are not fundamentally part of the data’s structure.

ROW THREE: THE ARCHITECT’S VIEW
295
Fig. 7–11: Sample entity-relationship model.
–
Any attribute participating in a unique identiﬁer is annotated with an
octothorpe (#), and any relationship role participating is shown with a short
line across the relationship line, near the identiﬁed entity class. Other notations
represent this differently, but the meaning is the same.
Thus, occurrences of purchase order are uniquely identiﬁed by values of
the attribute “Order number”, just as occurrences of party are identiﬁed by
its “Id”. The unique identiﬁer of an occurrence of line item, on the other
hand, is a combination of the attribute “Line number” and the relationship
role “part of one and only one order”. That is, to uniquely identify a line
item, you must know both the “Line number” and the order it is related to.
–
Each solid half-line for a relationship means that each occurrence of the entity
class it is next to must be related to at least one instance of the opposite entity
class (optionality constraint).
–
If an end of a relationship line is not marked by a “crow’s-foot”, an occur-
rence of the entity class opposite may not be associated with more than one
occurrence of the adjacent entity class (cardinality constraint).
–
Attributes shown in parentheses are derived. “(Value)” in line item, for
example, is derived by inferring the “Price” or the “Rate per hour” from
product type or service type, and multiplying that by “Quantity” in line
item. “(Total value)” in order is computed by summing “(Value)” across all
the line items that are part of an instance of order. (The algorithms for doing
these calculations must be described behind the scenes in most case tools.)

296
MOTIVATION
–
The arc across the two for relationships from line item means that each line
item must be either for one service type or for one product type (exclusivity
constraint).
These are described more fully and modeled in the sections that follow.
Unique Identiﬁers
The ﬁrst constraint that applies in a relational environment is that by deﬁnition
each occurrence of an entity class must be uniquely identiﬁed. That is you must
be able to distinguish one occurrence of an entity class from another. This is
done through the value of one or more attributes or relationship roles. The
combination of attributes and associative roles that can be used to uniquely
identify an occurrence of an entity class is the unique identiﬁer of that entity
class.
The model in Figure 7–12 shows that each unique identiﬁer of an entity
class (as a fact type) must be composed of one or more unique identiﬁer
elements (as fact type elements). Each unique identiﬁer element, then, must
be the use of either an attribute or an associative role.
Business Rules
1. Each unique identiﬁer element must be part of only a unique
identiﬁer.
2. Each unique identiﬁer must be composed of at least one and possibly
more unique identiﬁer elements.
Optionality Constraint
In a data model, one of the arguments for a relationship role is whether there must
be an occurrence of the second entity class for each occurrence of the ﬁrst class.
In other words, is the role mandatory or optional? Similarly, for each occurrence
of an entity class is each attribute mandatory or optional?
Most notations have symbols to represent this. In the notation used in this
book, a role is optional if the half of the line closest to the ﬁrst entity class is

ROW THREE: THE ARCHITECT’S VIEW
297
the use of
the use of
part of
composed
of
about
the
object
of
a sub-
type of
described
by
a super-
type of
(2+)
about
used as
used as
indentified
via
BUSINESS CONCEPT ELEMENT
UNIQUE
IDENTIFIER
ELEMENT
of
GENERALIZATION ROLE
ASSOCIATIVE ROLE
° Cardinality indicator
° Default optionality indicator
PROPOSITION TYPE
FACT TYPE
* Effective date
° Until date
RELATIONSHIP ROLE
BUSINESS CONCEPT
# ID
* Name
* Primary definition
ATTRIBUTE
° Default value
° Formula text
° Cardinality indicator
* Default optionality indicator
CHARACTERISTIC ASSIGNMENT
* Essential indicator
* Delimiting indicator
PROPOSITION TYPE ELEMENT
* Effective date
° Until date
° Predicate
FACT TYPE ELEMENT
OTHER FACT TYPE
CHARACTERISTIC
* Description
UNIQUE
IDENTIFIER
ENTITY CLASS
INFORMATION ENGINEERING ROLE
Fig. 7–12: Unique identiﬁers.

298
MOTIVATION
dashed; it is mandatory if that line half is solid. An attribute is optional if its
name on the diagram is preceded by a circle (o), and mandatory if it is preceded
by an asterisk (*) or an octothorpe (#).
In the metadata model displayed so far (see Figure 7–13), associative role
does have the attribute “Default optionality indicator”, as does attribute. This is
misleading, however. In the real world, things are rarely that simple. At the very
least, it would be useful to be able to say “initially may be, but eventually must
be”. For example, sometimes an attribute is ultimately required, but when data
are being entered, it is permissible to create the record even if that value is not
available. Clive Finklestein’s version of information engineering has just such a
symbol [Finklestein 1989, pp. 57–63]. But “initially may be, but eventually must
be” is not really sufﬁcient either.
What is needed is the ability to specify how optionality might change, depend-
ing on the state of the entity class involved. Perhaps the value is optional when
something is “pending”, but required before it can be “in force”, but optional
again when it becomes “obsolete”.∗
For example, in the model shown in Figure 7–14, an asset account is an
account in the company’s general ledger, whereas an asset is a physical item held
by the organization. It is easy to assert that each asset account must be an
accounting of one or more physical assets,∗∗and it is reasonable to expect that
eventually every asset acquired will be recorded. But it is also reasonable to expect
that this may not happen right away. What is needed is a way of expressing the
fact that each asset must be accounted for in an asset account within a speciﬁed
time limit.
Entity-relationship modeling notations and the CASE tools that support them
cannot show this, but we can put this in the metamodel. The optionality con-
straint entity class is shown in Figure 7–15. This determines whether a particular
relationship role or attribute is optional. An instance of the attribute “Option-
ality indicator” (of the entity class optionality constraint) is either “True” or
“False” for a particular attribute or associative role. This is based on the entity
class state type. Whether a particular attribute or relationship role is optional
∗Your author is indebted to Larry English for conversations with him that helped clarify this point.
∗∗The Corporate Controller and the IRS frown on having assets on the books that don’t correspond
to real stuff.

ROW THREE: THE ARCHITECT’S VIEW
299
of
to
about
part of
constrained by
used in
a
constraint
on
the
object
of
the
object
of
composed
of
a sub-
type of
a super-
type of
(2+)
about
player
of
described
by
BUSINESS CONCEPT ELEMENT
connected to
connected from
played by
INFORMATION ENGINEERING ROLE
GENERALIZATION ROLE
ASSOCIATIVE ROLE
° Cardinality indicator
° Default optionality indicator
PROPOSITION TYPE
FACT TYPE
* Effective date
° Until date
RELATIONSHIP ROLE
BUSINESS CONCEPT
# ID
* Name
* Primary definition
ATTRIBUTE
° Default value
° Formula text
° Cardinality indicator
* Default optionality indicator
CHARACTERISTIC ASSIGNMENT
* Essential indicator
* Delimiting indicator
PROPOSITION TYPE ELEMENT
* Effective date
° Until date
° Predicate
FACT TYPE ELEMENT
DOMAIN
* Format
° Description
° Maximum length
° Decimal length
° Default value
CHARACTERISTIC
* Description
ENTITY CLASS
Fig. 7–13: Default optionality.

300
MOTIVATION
Fig. 7–14: Optionality rule.
or not is based on the entity class the attribute is about or the entity class the
relationship role is played by.
Business Rules
1. An attribute is optional if the entity class it is about is in an entity
class state that is an example of an entity class state type that is the
basis for the optionality constraint the attribute is constrained by.
2. A relationship role is optional if the entity class it is played by is
in an entity class state that is an example of an entity class state
type that is the basis for the optionality constraint the attribute is
constrained by.
3. An optionality constraint may only be to constrain an attribute, an
n-ary role, or an associative role.
In the example, an optionality constraint can be deﬁned to constrain the
relationship role “accounted for in” such that when entity class “Asset” is in
the entity class state “Received” then “accounted for in” is optional (the value
of Optionality indicator is “True”). On the other hand, if the entity class state is
“Installed”, another optionality constraint establishes that “accounted for in”
is now mandatory (Optionality indicator is “False”).
Cardinality Constraint
A second constraint directly represented in an entity-relationship model is cardi-
nality. In the case of relationships, this is the issue of whether an instance of an

OPTIONALITY CONSTRAINT
° Mandatory indicator
# ID
° Description
* Condition indicator
to constrain
constrained
by
constrained
by
about
described by
player
of
played
by
to constrain
part of
composed of
ENTITY CLASS
STANDARD ENTITY CLASS
ELEMENTARY
ENTITY CLASS
VIRTUAL ENTITY
CLASS
* Definition
ASSOCIATIVE ROLE
° Cardinality indicator
° Default optionality indicator
GENERALIZATION ROLE
ASSOCIATION
CLASS ROLE
N-ARY ROLE
° Cardinality indicator
° Default optionality indicator
a super-
type of (2+)
a sub-
type of
connected
to
connected
from
ATTRIBUTE
° Default value
° Formula text
° Cardinality indicator
* Default optionality indicator
ENTITY CLASS STATE
TYPE
# Name
* Description
the
basis
for
embodied
in
based on
an
example
of
of
in
ENTITY CLASS STATE
# Name
* Description
RELATIONSHIP ROLE
INFORMATION ENGINEERING ROLE
Fig. 7–15: Optionality constraint.

302
MOTIVATION
entity class can be related to more than one occurrence of the related entity class.
Because the value of this is usually stable and will not change, this can be shown
in the metamodel with the attribute “Cardinality indicator” for associative role.
This is shown in Figure 7–16. The concept also applies to attributes, in that you
could specify whether it is permitted for an attribute to have more than one value.
The UML permits this, but in the relational world multi-valued attributes are not
permitted.
For entity/relationship notations, the value of “Cardinality indicator” must be
either “True” (only one instance of the attribute or relationship is possible) or
“False” (more than one are permitted). For UML, the “Cardinality indicator” can
take a value (“1”, “*”, “2–3”, etc.).
Derivations
A derivation is a statement of knowledge derived from other knowledge in the
business. In gathering Row Two information from business owners, it may
be appropriate to capture and record the most important derivations as fact
types. To add derivations to our Row Three metamodel, however, it is neces-
sary to express them in terms of the Row Three entity classes, attributes, and
relationship roles. This is shown in Figure 7–17.
Business Rules
1. As a fact type, a derivation must be composed of (a constraint on) one
or more fact types elements that are attributes and composed of one
or more fact types elements that are derivation elements.
2. Each derivation element must be part of one and only one derivation.
A derivation element may also be via (“SUM-THROUGH” or “INFER-
THROUGH”) an associative role (see page 306 for examples of this).
The calculation of the formula can be expressed using Reverse Polish Notation:
each variable in a formula is separated and assigned an “Operator”. Each deriva-
tion element, then, may be the use of a variable, which is another attribute,
a system variable, or a “Constant”. In addition to a variable, each derivation

ROW THREE: THE ARCHITECT’S VIEW
303
of
to
about
part of
constrained by
used in
a
constraint
on
the
object
of
the
object
of
composed
of
a sub-
type of
a super-
type of
(2+)
about
player
of
described
by
BUSINESS CONCEPT ELEMENT
connected to
connected from
played by
INFORMATION ENGINEERING ROLE
GENERALIZATION ROLE
ASSOCIATIVE ROLE
° Cardinality indicator
° Default optionality indicator
PROPOSITION TYPE
FACT TYPE
* Effective date
° Until date
RELATIONSHIP ROLE
BUSINESS CONCEPT
# ID
* Name
* Primary definition
ATTRIBUTE
° Default value
° Formula text
° Cardinality indicator
* Default optionality indicator
CHARACTERISTIC ASSIGNMENT
* Essential indicator
* Delimiting indicator
PROPOSITION TYPE ELEMENT
* Effective date
° Until date
° Predicate
FACT TYPE ELEMENT
DOMAIN
* Format
° Description
° Maximum length
° Decimal length
° Default value
CHARACTERISTIC
* Description
ENTITY CLASS
Fig. 7–16: Cardinality.

the use of
via
the use of
part of
composed
of
a
contraint
on
constrained by
the basis
for
BUSINESS CONCEPT ELEMENT
DERIVATION ELEMENT
# Sequence number
* Operator
° Constant
° Via operator
used
as
GENERALIZATION ROLE
ASSOCIATIVE ROLE
° Cardinality indicator
° Default optionality indicator
DOMAIN
* Format
° Description
° Maximum length
° Decimal length
° Default value
CHARACTERISTIC
* Description
PROPOSITION TYPE
FACT TYPE
* Effective date
° Until date
BUSINESS CONCEPT
# ID
* Name
* Primary definition
ATTRIBUTE
° Default value
° Formula text
° Cardinality indicator
* Default optionality indicator
OTHER FACT
TYPE ELEMENT
CHARACTERISTIC ASSIGNMENT
* Essential indicator
* Delimiting indicator
PROPOSITION TYPE ELEMENT
* Effective date
° Until date
° Predicate
FACT TYPE ELEMENT
ASSOCIATION
CLASS ROLE
SYSTEM
VARIABLE
# Name
* Definition
DERIVATION
* Formula
connected to
connected from
used as
INFORMATION ENGINEERING ROLE
RELATIONSHIP ROLE
N-ARY ROLE
° Cardinality indicator
° Default optionality indicator
Fig. 7–17: Derivations.

ROW THREE: THE ARCHITECT’S VIEW
305
element includes the attribute “Operator” to deﬁne the variable’s role in the for-
mula. For example, attribute “A” may be derived from attributes “B”, “C”, and
“D” according to the formula “A = B + C * D + 15”. This would be represented
as shown in Table 7–1.
In three cases, the derivation element is the use of other attributes as vari-
ables. In one case, it uses an attribute of derivation element itself: “Constant”.
Thus, ﬁrst the attribute “B” is added (to nothing), resulting in “B”. Then “C” is
added, resulting in “B + C”. Then “D” is multiplied by the result to this point,
resulting in turn in “(B + C) * D”.
Finally, the Constant “15” is added to come up with the ﬁnal result. As a more
realistic example, “Age last week” can be deﬁned as “<system date> – Birthdate –
7 days”, where <system date> is an example of a systemvariable. The derivation
elements for this formula are shown in Table 7–2.
Note that this description is for the Architect’s View of the framework, not the
designer’s view. Nothing is said here about whether the calculation will be done
when data are entered (and then stored), or whether it will be done dynamically
when the result is requested. That is a design decision, based on the relative
expected frequency of updates and retrievals.
Table 7–1: Derivation elements.
Attribute
Constant
Operator
B
+
C
+
D
*
15
+
Table 7–2: System variable.
Attribute
Constant
System Variable
Operator
Birthdate
−
<system date>
+
“7” (days)
−

306
MOTIVATION
Note also that calculations can be across relationships between entity classes.
For example, in Figure 7–11 the “Price” of a product may be inferred across the
relationship between line item and product. Because each line item must be for
one and only one product, after all, “Price” is then available to line item. Thus,
the “(Value)” of a line item then might be expressed something like “Quantity*
Price infer-through (for product type)”, as shown in Table 7–3.
Similarly, the “(Total value)” of a purchase order might be the sum of
“(Value)” in all line items the purchase order is composed of. This case might be
expressed as Value sum-through (composed of line item), as shown in Table 7–4.
This all is recognized in Figure 7–17 by the relationships asserting that each
derivation element may be the use of an attribute, via one and only one asso-
ciative role. (Although this example illustrates the point, the actual solution in
this case is made more complicated by the fact that the sample model actually
asserts that each line item must be either for one product type or for one service
type. The navigation would have to be sophisticated enough to choose which rela-
tionship to navigate. This is not adequately represented in the metamodel, and its
solution is left as an exercise for the reader.)
Derived attributes can be shown in an entity/relationship diagram, but of
course the derivation logic itself must be documented separately.∗(In the UML
Table 7–3: Navigation 1 (Value).
Attribute
Navigation
Constant
System
Operator
Variable
Quantity
+
Price
infer-through (for
*
product type)
Table 7–4: Navigation 2 (Total value).
Value
sum-through (composed of line item)
+
∗Note that by your author’s convention derived attributes are represented in parentheses. This makes
for effective graphics, but it does not work if the entity-relationship model is used to generate a
database design. In that environment, simply precede each derived attribute name with a letter,
such as d_.

ROW THREE: THE ARCHITECT’S VIEW
307
and ORM, the derivation formulae can be shown on the diagram, next to the
model.) Interestingly enough, in an object model all attributes are considered to
be derived, even if the derivation is simply “retrieve this from persistent memory”.
Exclusivity Constraint
The sample entity-relationship diagram shown in Figure 7–11 contains a partic-
ular constraint worth discussing. Speciﬁcally, each line item must be either for
one product type or for one service type. This is an example of an exclusivity
constraint.
The arc in the sample model constrained the entity class line item to being
related to one or the other associative roles. If there was a product type
instance, there could not be a service type instance, and vice versa. Figure 7–18
shows the metamodel for this.
An exclusivity constraint to constrain one or more entity classes must be
composed of two or more (2+) exclusivity constraint elements, each of which
is constrained by an associative role.
Business Rule
When two or more associative roles are constraints on exclusivity
constraint elements that are part of a single exclusivity constraint to
constrain an entity class, both associative roles must be played by the
same entity class.
If unique identiﬁers, optionality, cardinality, and exclusivity are constraints
that can be shown in an entity-relationship model, what then remains? Two types
of constraints remain: domains and other system constraints.
Domains
Figure 7–19 shows that an attribute must be a continuous attribute, a discrete
attribute, or an other attribute. The value of an occurrence of a continuous
attribute may be any real number or date. It may be subject to the limits “Max-
imum value” and “Minimum value”. The value of an occurrence of a discrete
attribute, on the other hand, must be equal to the value of a permitted attribute

308
MOTIVATION
RELATIONSHIP ROLE
N-ARY ROLE
* Cardinality indicator
* Default optionality indicator
ASSOCIATION
CLASS ROLE
ENTITY CLASS
played
by
connected from
connected to
player
of
INFORMATION ENGINEERING ROLE
ASSOCIATIVE ROLE
° Cardinality indicator
° Default optionality indicator
GENERALIZATION ROLE
a constraint on
composed
of (2+)
part of
constrained
by
EXCLUSIVITY 
CONSTRAINT 
ELEMENT
# Sequence number
EXCLUSIVITY CONSTRAINT
# ID
° Description
* Condition indicator
to
constrain
constrained
by
a super-type of (2+)
a sub-type of
Fig. 7–18: Exclusivity constraints.
value that is for the discrete attribute in question. That is, each discrete
attribute may be constrained to one or more permitted attribute values. Other
attributes include dates and Boolean expressions.
This validation of attribute values can be speciﬁed for each attribute, as
shown. Note that the model, however, requires that each attribute be constrained
by one domain. In practice, this requirement is often ignored, implying that

FACT TYPE
* Effective date
° Until date
PROPOSITION TYPE
° Modal type
BUSINESS CONCEPT
# ID
* Name
* Primary definition
DOMAIN
* Format
° Description
° Maximum length
° Decimal length
° Default value
OTHER DOMAIN
VALUE
EXPRESSION
° Minimum value
° Maximum value
a constraint
on
used
in
composed
of
PERMITTED 
ATTRIBUTE 
VALUE
# ID
* Value
for
part of
OTHER CHARACTERISTIC
OTHER FACT TYPE
OTHER PROPOSITION TYPE
OTHER BUSINESS CONCEPT
CHARACTERISTIC ASSIGNMENT
* Essential indicator
* Delimiting indicator
FACT TYPE ELEMENT
PROPOSITION TYPE ELEMENT
* Predicate
* Effective date
° Until date
BUSINESS CONCEPT ELEMENT
ATTRIBUTE
° Default value
° Formula text
° Cardinality indicator
° Default optionality
   indicator
OTHER
ATTRIBUTE
DISCRETE
ATTRIBUTE
CONTINUOUS
ATTRIBUTE
° Maximum value
° Minimum value
OTHER
CHARACTERISTIC
ASSIGNMENT
OTHER PROPOSITION
TYPE ELEMENT
OTHER BUSINESS
CONCEPT ELEMENT
constrained by
of
to
the
object
of
about
the
object
of
part
of
composed
of
evaluated at
VALUE SET
CHARACTERISTIC
* Description
Fig. 7–19: Domains.

310
MOTIVATION
the conditions described by the domain are identical to those of the attribute.
Alternatively, a domain can be speciﬁed to apply to numerous attributes. Each
domain, after all, may be a constraint on one or more attributes.
Similar to the sub-types of attribute, each domain must be a value set, a
value expression, or an other domain. A value set is used to validate discrete
attributes, and is similarly composed of one or more permitted attributevalues.
A value expression applies mathematics to constrain attributes. Among other
things, this can be a derivation for arriving at an attribute “Value”, or a “Maxi-
mum value” and/or a “Minimum value” for a set of continuous attributes. An
other domain can be used to specify formats or patterns.
Note that nothing is indicated as to how domain and permitted attribute
value will be expressed. Rather, given a particular permitted attribute value, it
must be represented by one or more valid code (see Figure 7–20). (Note that
this is a sub-type of the more generic relationship between business concept and
symbol.)
The difference between a valueset and a codeset is that a permittedattribute
value is the concept of the value. The permitted attribute value is represented
by a value code that in turn is the use of a signiﬁer, such as a word or
abbreviation. For example, the value set of “Canadian Provinces” consists of
permitted attribute values of the concepts “Quebec”, “Alberta”, “Ontario”, and
so on. Each of these may be represented by one or more valid codes. For example,
British Columbia might be represented by “British Columbia”, “BC”, “02”, and
so on.
Each valid code in turn must be part of a code set that is, in this case, a
representation of a value set. In the provincial Canadian example, the value set
of “Canadian Provinces” could be represented by the code sets “Ofﬁcial names”,
“Postal abbreviations”, and the like with “Ofﬁcial names” being the code set that
is the standard representation of the value set “Canadian Provinces”.
Business Rules
1. A value set may be a constraint on only a discrete attribute.
2. An other domain may be a constraint on only a continuous
attribute.

ROW THREE: THE ARCHITECT’S VIEW
311
CODE SET
# ID
* Name
* Description
composed
of
SIGNIFIER 
# ID
WORD
* Word text
° Pronunciation guide
GRAPHIC
° Graphic blob
PHRASE
° Phrase text
BUSINESS TERM
INSTANCE NAME
ICON
part of
to represent
to represent
the use of
used
as
FACT TYPE
* Effective date
° Until date
PROPOSITION TYPE
° Modal type
BUSINESS CONCEPT
# ID
* Name
* Primary definition
DOMAIN
* Format
°Description
° Maximum length
° Decimal length
° Default value
OTHER DOMAIN
VALUE SET
VALUE
EXPRESSION
° Minimum value
° Maximum value
a constraint
on
used
in
primarily represented by
represented by
represented
by
PERMITTED 
ATTRIBUTE 
VALUE
# ID
* Value
for
part of
OTHER CHARACTERISTIC
OTHER FACT TYPE
OTHER PROPOSITION TYPE
OTHER BUSINESS CONCEPT
CHARACTERISTIC ASSIGNMENT
* Essential indicator
* Delimiting indicator
FACT TYPE ELEMENT
PROPOSITION TYPE ELEMENT
* Predicate
* Effective date
° Until date
ATTRIBUTE
°Default value
° Formula text
° Cardinality indicator
° Default optionality indicator
OTHER
ATTRIBUTE
DISCRETE
ATTRIBUTE
CONTINUOUS
ATTRIBUTE
° Maximum value
° Minimum value
OTHER
CHARACTERISTIC
ASSIGNMENT
OTHER PROPOSITION
TYPE ELEMENT
OTHER BUSINESS
CONCEPT ELEMENT
constrained by
of
to
the
object
of
about
the
object
of
part
of
composed
of
composed of
SYMBOL
# Sequence number
* Effective date
° Until date
° Comment
BUSINESS CONCEPT ELEMENT
VALID CODE
* Value
OTHER
INSTANCE 
NAME
to represent
evaluated at
represented
by
the standard 
representation of
a representation of
CHARACTERISTIC
* Description
represented
by
Fig. 7–20: Code sets.

312
MOTIVATION
3. A permitted attribute value may be represented by only one valid
code that is part of the code set that is the standard representation of
the value set the permitted attibute value is part of.
System Constraints
Because a data model can represent cardinality and optionality, unique identi-
ﬁers, and derived attributes, the metamodel for these constraints (as well as
the metamodel for domains) is closely connected to that for the data model
described in Chapter Two. There are many other constraints, however, that the
entity-relationship model cannot represent. Consequently, the metadata for data
modeling is not adequate to represent them either. But where notations are lim-
ited, this metamodel is not. The model can easily be extended, as shown in
Figure 7–21.∗
This ﬁgure introduces the concept of a system constraint, which must be
to constrain an attribute, an associative role, or an entity class. That is, a
system constraint is an assertion limiting what data can be created or updated.
Presumably, this is a reﬂection of a business rule that asserts what can or can-
not be done in the business. This link to business rules is discussed further in
material to follow.
Each system constraint may be part of a more complex system constraint.
Note that system constraint is but a generalization of the optionality con-
straint and the exclusivity constriant we have already seen. Those were special
cases, though, and this is a far more extensive model.
The attribute “Condition indicator” determines whether the system con-
straint is an integrity constraint (the indicator’s value is “False”)—meaning that
it is asserting that something must be the case—or whether it is a condition (the
indicator’s value is “True”), meaning that if a situation exists then some other
speciﬁed action must take place. (Note that both the optionality constraint and
the exclusivity constraint are by deﬁnition integrity constraints.)
∗This section is largely derived from Ron Ross’s previously cited book [Ross 1997].

connected
to
connected
from
ASSOCIATIVE ROLE
° Cardinality indicator
° Default optionality indicator
GENERALIZATION ROLE
ASSOCIATION
CLASS ROLE
N-ARY ROLE
° Cardinality indicator
° Default optionality indicator
RELATIONSHIP ROLE
player of
described by
played by
CONSEQUENCE OF VIOLATION 
OF ASSIGNMENT
# Effective date
°Until date
° Description
CONSEQUENCE
OF VIOLATION
# Name
* Description
SYSTEM CONSTRAINT
# ID
° Description
* Condition indicator
SYSTEM 
PROCESS
# Identifier
* Name
* Description
SYSTEM CONSTRAINT TRIGGER
# Sequence number
* Description
OPTIONALITY
CONSTRAINT
° Mandatory indicator
EXCLUSIVITY
CONSTRAINT
OTHER SYSTEM 
CONSTRAINT
to
of
by
the
source
of
subject
to
embodied
in
initiated
by
part
of
composed
of
of
of
initiated by
STANDARD ENTITY CLASS
ELEMENTARY
ENTITY CLASS
VIRTUAL ENTITY
CLASS
* Definition
ENTITY CLASS
constrained by
constrained
by
a constraint
on
constrained
by
about
to constrain
to constrain
to 
constrain
constrained by
a super- 
type of (2+)
a sub-
type of
SYSTEM
CONSTRAINT
TYPE
# Name
° Description
an example
of
embodied
in
DOMAIN
* Format
°Description
° Maximum length
° Decimal length
° Default value
ATTRIBUTE
° Default value
° Formula text
° Cardinality indicator
* Default optionality indicator
INFORMATION ENGINEERING ROLE
Fig. 7–21: System constraints.

314
MOTIVATION
Figure 7–21 also shows the fact that a system constraint may be the source
of one or more system constraint triggers, each of which must be of either a
system process or of another system constraint. Note that this is only possible
if the system constraint attribute “Condition indicator” is “True”.
Business Rules
1. Only system constraints whose “Condition indicator” is “True” may
be the source of one or more system constraint triggers.
2. By deﬁnition,
each exclusivity constraint must be an integrity
constraint (“Condition indicator” is “False”).
3. An optionality constraint must be based on one and only one entity
class state. (This is not shown here, but it was shown in Figure 7–15
on page 301.)
Also shown in Figure 7–21, each system constraint must be subject to one
or more consequence of violation assignments of a consequence of viola-
tion. A consequence of violation assignment, then, might assert that if a
particular system constraint is violated the consequence of violation would
be “Flag for subsequent correction”.
In addition to optionality constraint and exclusivity constraint there
are many other (types of) system constraint. Each system constraint must
be an example of exactly one system constraint type, repeating the structure
shown in the sub-types. As before, when the . . . type entity class reproduces
the sub-type structure, the ﬁrst three instances of system constraint type here
must be “Optionality Constraint”, “Exclusivity Constraint”, and “Other System
Constraint”.
System Constraint Elements and Arguments
If the system constraint is to constrain something, what is doing the constrain-
ing? Exclusivity constraint, for example, constrained entity classes with the
value of associative roles. That is, the . . . constraint was constrained by two
or more exclusivity constraint elements, each of which must be constrained by
exactly one associative role. Most system constraints are not limited to having

ROW THREE: THE ARCHITECT’S VIEW
315
a single thing doing the constraining, so we need an additional entity class, system
constraint element. This, a generalization of exclusivity constraint element, is
the fact that a particular attribute, relationship role, or entity class participates
in a system constraint.
Figure 7–22 shows that each system constraint is composed of one or more
system constraint elements, each of which is a constraint by another entity
class, attribute, or relationship role. Or, it could be a constraint by another
system constraint. The ﬁgure also shows how either a system constraint or a
system constraint element may be qualiﬁed by one or more system constraint
arguments.
Mr. Ross, in his book [Ross 1997], has itemized forty system constrainttypes,
grouped into seven categories.
–
Instance veriﬁers:
The integrity constraint requires an instance of the
constrained object to exist. This includes the optionality constraint described
previously. The condition tests to see whether it exists.
–
Type veriﬁers: The integrity constraint requires an instance of the constrained
object to be related to objects in a speciﬁed relationship (mutually exclusive,
mutually inclusive, and so on). This includes the mutually exclusive arc shown
in Figure 7–11. In that example, the notation asserts that “Each line item must
be for either one product type or one service type”. The condition tests to see
whether this is so.
–
Position veriﬁers: The integrity constraint requires a speciﬁc ranking of the
constrained object relative to other objects (lowest, highest, oldest, newest, or
a speciﬁed ranking, such as ﬁfth). The condition tests to see whether this is so.
–
Functional veriﬁers: The integrity constraint requires an object to assume
a function relative to the constrained object. For example, the value of an
attribute may be required to be unique within an entity class. The condition
tests to see whether this is so.
–
Comparative evaluators:
Usually applying to attributes,
the integrity
constraint requires that an object be greater than, less than, or equal to the
constrained object. The condition tests to see whether this is so.
–
Mathematical evaluators: This is an alternative way to specify derived
attributes as presented previously. In this case, an integrity constraint speciﬁes
that an attribute be calculated according to a formula (or a function, such as
SUM) for a constrained entity class. A condition tests to see whether this is so.

316
MOTIVATION
SYSTEM CONSTRAINT
# ID
° Description
* Condition indicator
EXCLUSIVITY 
CONSTRAINT
OPTIONALITY 
CONSTRAINT
° Mandatory indicator
CONSEQUENCE OF VIOLATION 
ASSIGNMENT
# Effective date
°Until date
°Description
SYSTEM
CONSTRAINT 
TYPE
# Name
° Description
OTHER SYSTEM
CONSTRAINT
constrained by
a constraint in
constrained
by
a constraint
on
constrained by
a constraint
on
a constraint
on
constrained
by
constrained
by
about
composed of
qualified
by
qualified
by
embodied
in
part of
part
of
composed
of
for
for
an
example
of
SYSTEM 
CONSTRAINT 
ELEMENT
# Sequence number
SYSTEM CONSTRAINT ARGUMENT
# ID
° Numeric value
° Text value
° Date value
SYSTEM
CONSTRAINT
ARGUMENT
TYPE
EXCLUSIVITY
CONSTRAINT 
ELEMENT
to
an example of
subject
to
embodied in
CONSEQUENCE OF
VIOLATION
# Name
* Description
embodied in
of
SYSTEM CONSTRAINT 
TRIGGER
# Sequence number
* Description
SYSTEM PROCESS
# Identifier
* Name
* Description
by
of
initiated by
the 
source
of
initiated
by
of
connected
to
connected
from
ASSOCIATIVE ROLE
° Cardinality indicator
° Default optionality indicator
GENERALIZATION ROLE
ASSOCIATION
CLASS ROLE
N-ARY ROLE
° Cardinality indicator
° Default optionality indicator
ATTRIBUTE
° Default value
° Formula text
° Cardinality indicator
* Default optionality indicator
DOMAIN
* Format
° Description
° Maximum length
° Decimal length
° Default value
player of
described  by
played by
STANDARD ENTITY CLASS
ELEMENTARY
ENTITY CLASS
VIRTUAL ENTITY
CLASS
* Definition
ENTITY CLASS
constrained by
constrained
by
to constrain
to constrain
to constrain
constrained by
RELATIONSHIP ROLE
INFORMATION ENGINEERING ROLE
a constraint 
on
Fig. 7–22: System constraint elements.

ROW THREE: THE ARCHITECT’S VIEW
317
–
Projection controllers: Where other types of constraints prevent things from
happening, a projection controller asserts that under speciﬁed circumstances
something must happen. A state is enabled, something is copied, or an action
is executed.
In addition, there are a number of rule types derived from these. Figure 7–23
shows the Ross notation for a different way of dealing with the optionality
problem we see in Figure 7–14. The notation shows one system constraint (Tim-
ing) represented by the bicycle seat-shaped symbol with a “TI”, and another
system constraint (Optionality) represented by the arrowhead with an “X” in it.
The bicycle seat symbol shows that the timing constraint is a Condition, and the
arrowhead symbol shows that the optionality constraint is an integrity constraint.
TI and X are examples of the system constraint types discussed previously. TI
is a derived system constraint type that means that if something happens within
a speciﬁed time period something else should happen. In this case, the “something
else” is an “X” system constraint (an “Instance Veriﬁer” from the previous list),
which means that the thing it is pointing to (in this case, the accounted for in
relationship role) must happen. In other words, after the timing interval shown
for the TI constraint, the accounted for in relationship must be populated.
LIABILITY
ACCOUNT
EQUITY
ACCOUNT
ASSET ACCOUNT
ACCOUNT
* Balance
INVENTORY
DISCRETE
ITEM
ASSET
° Actual unit cost
GT
TI
1
wk
X
accounted for in
an accounting of
Fig. 7–23: Business rule argument example.

318
MOTIVATION
In each case, the thing being constrained is at the other end of the line pointing
into the constraint, and the things doing the constraining are at the end of lines
pointing away from the constraint. That is, TI is constraining the entity class
“Asset”, and X is constraining the constraint TI. An alternative way of under-
standing the “constrained by” / “a constraint on” syntax is to imagine each rule
as an if/then statement: (1) If an asset exists for greater than 1 week, then invoke
the mandatory (“X”) constraint; (2) if the timing (“TI”) constraint ﬁres, then the
accounted for in relationship role must exist.
Note that the circles showing “GT” (representing “greater than”) and “1 wk”
(for “one week”) are examples of system constraint arguments to the con-
straint, in this case meaning “If a time period of greater than one week transpires”
then. . . In Figure 7–22, system constraint argument is shown to be either for
one system constraint element or for one system constraint, and it must be
an example of one system constraint argument type, such as “operator” or
“duration”.
Business Rule Mapping
Note the assumption that all system constraints described in this section are
derived from business rules, as speciﬁed for Row Two in the previous section.
Figure 7–24 shows speciﬁcally how a business rule from Row Two can be mapped
to any of the constraints described here for Row Three.
–
Unique Identiﬁers
–
Domains
–
System Constraints
Speciﬁcally, each business rule may be subject to one or more business rule
mappings, where each of these in turn must be composed of one or more business
rule mapping elements. Each business rule mapping element, then, must be a
mapping to a domain, unique identiﬁer, or system constraint.
Parties
Figure 7–25 shows how the party and access roles described in Chapter Four
come into play here. Note that either a management role or an enforcement

ROW THREE: THE ARCHITECT’S VIEW
319
SYSTEM CONSTRAINT
# ID
° Description
* Condition indicator
EXCLUSIVITY 
CONSTRAINT
OPTIONALITY 
CONSTRAINT
° Mandatory indicator
SYSTEM
CONSTRAINT 
TYPE
# Name
° Description
OTHER SYSTEM
CONSTRAINT
constrained
by
a constraint 
on
a constraint
on
a
constraint
on
a
constraint
on
constrained
by
about
composed
of
part of
part of
composed of
SYSTEM 
CONSTRAINT 
ELEMENT
# Sequence number
EXCLUSIVITY
CONSTRAINT 
ELEMENT
an example of
embodied
in
connected
to
connected
from
ASSOCIATIVE ROLE
° Cardinality indicator
° Default optionality indicator
GENERALIZATION ROLE
ASSOCIATION
CLASS ROLE
UNIQUE IDENTIFIER
N-ARY ROLE
° Cardinality indicator
° Default optionality indicator
ATTRIBUTE
° Default value
° Formula text
° Cardinality indicator
* Default optionality indicator
DOMAIN
* Format
° Description
° Maximum length
° Decimal length
° Default value
player of
described
by
identified
via
of
played by
STANDARD ENTITY CLASS
ELEMENTARY
ENTITY CLASS
VIRTUAL ENTITY
CLASS
* Definition
ENTITY CLASS
constrained by
constrained
by
to constrain
to constrain
to
constrain
constrained by
a sub-type of
a super-type of (2+)
BUSINESS RULE MAPPING ELEMENT
# Sequence number
* Effective date
° Until date
BUSINESS
RULE
MAPPING
# Sequence number
* Effective date
° Until date
to
to
the
object of
of
composed
of
part of
to
MEANS
# Name
* Description
* Effective date
° Until date
BUSINESS 
RULE
* Rule type
DIRECTIVE
BUSINESS 
POLICY
the basis
for
based on
subject to
constrained
by
constrained
by
a
constraint
on
constrained
by
RELATIONSHIP ROLE
INFORMATION ENGINEERING ROLE
the 
object
of
the
object
of
Fig. 7–24: Business rule mapping.

320
MOTIVATION
SYSTEM CONSTRAINT
# ID
° Description
* Condition indicator
EXCLUSIVITY 
CONSTRAINT
OPTIONALITY 
CONSTRAINT
° Mandatory indicator
SYSTEM
CONSTRAINT 
TYPE
# Name
° Description
OTHER SYSTEM
CONSTRAINT
constrained
by
constrained
by
a constraint
on
a constraint on
constrained
by
a constraint
on
a constraint
on
a
constraint
on
constrained
by
constrained
by
about
composed of
part of
part of
composed of
managed
via
SYSTEM 
CONSTRAINT 
ELEMENT
# Sequence number
an example of
embodied in
connected
to
connected
from
ASSOCIATIVE ROLE
° Cardinality indicator
° Default optionality indicator
GENERALIZATION ROLE
ASSOCIATION
CLASS ROLE
N-ARY ROLE
* Cardinality indicator
* Default optionality indicator
ATTRIBUTE
° Default value
° Formula text
° Cardinality indicator
* Default optionality indicator
DOMAIN
* Format
° Description
° Maximum length
° Decimal length
° Default value
player of
described
by
played by
STANDARD ENTITY CLASS
ELEMENTARY
ENTITY CLASS
VIRTUAL ENTITY
CLASS
* Definition
ENTITY CLASS
constrained by
constrained
by
to constrain
for
to constrain
to
constrain
constrained 
by
ACCESS ROLE
# ID
* Effective date
° Until date
* Description
OTHER ACCESS
ROLE
MANAGEMENT 
ROLE
ENFORCEMENT
ROLE
PARTY
# ID
ORGANIZATION
* Organization name
* Description
PERSON
* Given name
° Middle initial
* Surname
a sub-type of
a super-type of (2+)
played by
player of
RELATIONSHIP ROLE
INFORMATION ENGINEERING ROLE
Fig. 7–25: Access roles and constraints.

ROW THREE: THE ARCHITECT’S VIEW
321
role played by a party (or, by extension, by a position, position responsibility,
or any of the other entity classes described in Chapter Four) can be speciﬁed for
a system constraint.
Data Quality
The quality of the data that constitute the attributes and relationship roles of
our system is usually measured in terms of one or more quality characteristics.
According to Larry English, these include two major categories [English 1999,
pp. 147–153]. First, there are measures of the inherent quality of the data.
–
Deﬁnition conformance: The consistency of the meaning of the actual data
values with its data deﬁnition.
–
Completeness (of values): A measure of the extent to which an attribute has
values for all instances of an entity class.
–
Validity or business rule conformance: A measure of the degree of conformance
of data to its domain values and business rules.
–
Accuracy (to surrogate source): A measure of the degree to which data agrees
with an original source of data, such as a form, document, or unaltered
electronic data received from outside the control of the organization that is
acknowledged to be an authoritative source.
–
Accuracy (to reality): The degree to which data accurately reﬂects the real-
world object or event being described. Accuracy is the highest degree of
inherent information quality possible.
–
Precision: The characteristic of having the right level of granularity in the
data values.
–
Nonduplication: The degree to which there is a one-to-one correlation between
records and the real-world object or events being represented.
–
Equivalence of redundant or distributed data: The degree to which data in one
data collection or database is semantically equivalent to data about the same
object or event in another data collection or database.
–
Concurrency of redundant or distributed data: The information ﬂoat or lag
time between when data is knowable (created or changed) in one database and
is also knowable in a redundant or distributed database.
–
Accessibility: The characteristic of being able to access data when it is
required.

322
MOTIVATION
Second, there are measures of the pragmatic quality, including intuitiveness of
presentation and value to knowledge workers.
–
Timeliness: A measure of the relative availability of data to support a given
process within the timetable required to perform the process.
–
Contextual clarity: A measure of the relative degree to which data presentation
enables the knowledge worker to understand the meaning of the data and avoid
misinterpretation.
–
Derivation integrity: A measure of the correctness with which derived or
calculated data are calculated from its base data.
–
Usability: A measure of the degree to which the information presentation is
directly and efﬁciently usable for its purpose.
–
“Rightness” or fact completeness: A measure of having the right type of data
with the right quality to support a given process or a decision.
Figure 7–26 shows quality characteristic as an entity class, where each
quality characteristic may be deﬁned in terms of one or more valid quality
characteristic values. For example, the quality characteristic “Accuracy (to
surrogate source)” may be rated on a scale with ﬁve valid quality characteristic
values: “Not at all”, “Approximate”, “Moderately accurate”, “Very accurate”, and
“Perfectly accurate”.
The data captured to describe an attribute or a relationship role may then
be evaluated via one or more quality standards, where each quality stan-
dard must be the use of a single valid quality characteristic value.
Thus,
a business policy for the model shown in Figure 7–11 in Chapter Two might
dictate that a person “Last Name” must be “Very accurate” and that the iden-
tity of the party identiﬁed in the from role from order must be “Perfectly
accurate”.
ROW FOUR: THE DESIGNER’S VIEW
Whereas in Row Two we looked at the overall motivation and constraints on the
operation of the business and in Row Three at the speciﬁc structure of business
rules in terms of data (system constraints), Row Four is concerned with how

ROW FOUR: THE DESIGNER’S VIEW
323
evaluated via
QUALITY STANDARD
# ID
* Effective date
° Until date
QUALITY 
CHARACTERISTIC
°Description
# Code
VALID QUALITY 
CHARACTERISTIC 
VALUE
# Sequence number
* Effective date
°Until date
* Value
for the evaluation of
for the evaluation of
the use of
used as
evaluated via
constrained
by
for
a constraint on
constrained
by
about
INFORMATION ENGINEERING ROLE
connected
to
connected
from
ASSOCIATIVE ROLE
° Cardinality indicator
° Default optionality indicator
GENERALIZATION ROLE
ASSOCIATION
CLASS ROLE
N-ARY ROLE
° Cardinality indicator
° Default optionality indicator
ATTRIBUTE
° Default value
° Formula text
° Cardinality indicator
* Default optionality indicator
DOMAIN
* Format
° Description
° Maximum length
° Decimal length
° Default value
RELATIONSHIP ROLE
player of
described
by
played by
STANDARD ENTITY CLASS
ELEMENTARY
ENTITY CLASS
VIRTUAL ENTITY
CLASS
* Definition
ENTITY CLASS
a sub-type of
a super-type of (2+)
Fig. 7–26: Data quality.
business rules are implemented using database technology as well as others. To the
extent possible, we will use relational database structures, but to the extent the
system constraints go outside such structures, we will have to extend the model
to refer to programs that would do the processing.

324
MOTIVATION
Sample Database Design
Figure 7–27 is a copy of a diagram originally presented in Chapter Two. It shows
a sample database design that could be derived from the sample entity class model
from Figure 7–11.
Unique Keys
In the preceding section, one type of constraint was the unique identiﬁer.
A unique identiﬁer is implemented in relational technology with a unique key,
which may be either a primary key or an alternative key.
According to relational theory, each row in a table must be uniquely identiﬁed
by the values of one or more columns in the table. Figure 7–28 shows the meta-
model of this. In this model, each table must be organized around one or more
unique keys. Each unique key in turn must be composed of one or more unique
key elements, each of which must be the use of a column. A unique key must be
either a primary key or an alternative key.
Business Rule
Each table must be organized around exactly one primary key, but it
may be organized around one or more alternative keys as well.
Note that in Figure 7–27 parties, orders, line items, product types, and
service types are all examples of the entity class table shown in Figure 7–29.
In that example, an order may be uniquely identiﬁed by its “order_number”.
That is, the table whose Name is “Order” is organized around a unique key (in
this case, a primary key) that is composed of one unique key element that in turn
is the use of a speciﬁed column whose Name is “order_number”.
Business Rule
A column used as a unique key element that is part of a unique key
must be part of the table the unique key is on.

ORD_ORDER_NUMBER
LINE_NUMBER
QUANTITY
VALUE
PDTY_PDTY_ID
ST_SERVICE_TYPE_ID
# *  A
# *  789
   *  789
      789 
      789 
      789
LINE_ITEMS
FK_PART_OF
FK_FROM
PDTY_ID
PRICE
PRODUCT_TYPE_ID
PRODUCT_TYPES
# *  789 123
      789 
   *  789
SERVICE_TYPE_ID
RATE_PER_HOUR
# *  789 
      789 
SERVICE_TYPES
FK_FOR_PROD
FK_FOR_SVC
ID
PARTY_TYPE 
ORGANIZATION_NAME 
GIVEN_NAME 
MIDDLE_INITIAL
SURNAME
# *   789 
   *   A
       A
       A
       A
       A
PARTIES
ORD_ORDER_NUMBER
ORDER_TYPE
TOTAL_VALUE
PART_ID_TO
PART_ID_FROM
# *   A
   *   A
       789
   *   789 
   *   789
ORDERS
FK_TO
Fig. 7–27: Sample database design.

326
MOTIVATION
UNIQUE KEY ELEMENT
# Sequence number
UNIQUE KEY
PRIMARY 
KEY
ALTERNATIVE
KEY
COLUMN
# Sequence number
* Label
* Format
°Length
°Decimal places
* Mandatory indicator
° Default value
DATA GROUP
# ID
° Description
TABLE
part of
part of
composed of
the use of
used as
organized
around
composed of
on
PERSISTENCE MECHANISM
° Name
Fig. 7–28: Unique keys.
Foreign Keys
Just as entity classes are related to each other through relationships, tables in
a relational database are logically related to each other through foreign keys. A
foreign key is the reference by one or more columns in one table to one or more
columns in another table in order to represent a relationship. Speciﬁcally, as shown
in Figure 7–29, when an entity-relationship model is converted to a database
design, each one-to-many relationship is converted to a set of new columns in
the table corresponding to the “many” side of the relationship (the child table).
This set of columns constitutes a foreign key that is a reference to a unique key
on a different (or, occasionally, the same) table. That is, a foreign key consists of

UNIQUE KEY
ELEMENT
# Sequence number
FOREIGN KEY
ELEMENT
FOREIGN KEY
# ID
° Name
* Referential integrity constraint
UNIQUE KEY
ALTERNATE
KEY
PRIMARY
KEY
the use of
used as
part
of
composed
of
referred
to by
a reference
to
the
use of
used as
COLUMN
* Label
* Format
° Length
° Decimal place
* Mandatory indicator
° Default value
TABLE
in
composed
of
a reference
to
referred
to by
a 
constraint 
on
constrained
by
on
organized
around
in
composed of
Fig. 7–29: Foreign keys.

328
MOTIVATION
columns that refer to the columns that constitute a unique key of the table on
the “one” side of the relationship (the parent table).
In Figure 7–29, then, each table may be constrained by one or more foreign
keys. Each foreign key, then, must be composed of one or more foreign key
elements, each of which is the use of a speciﬁed column and a reference to
another column. This second column must then also be used as a unique key
element in the primary key referred to by the foreign key in question.
For example, as shown in Figure 7–27, “Ord_order_number” is a column in
the line items table that is used as a foreign key element. It in turn is a reference
to the column “Order number”, used as a unique key element in the primary key
on the orders table. This foreign key represents a constraint on the line_items
table, in that a row usually cannot be created if it does not have a value in the
foreign key column (“ord_order_number”) that matches a value for the primary
key (“order_number”) in a parent table. Whether it can or not depends on the
referential integrity constraint that is an attribute of the foreign key.
A referential integrity constraint deﬁnes the extent to which a table is con-
strained by a foreign key. The attribute “Referential integrity constraint” may
have one of the following values.
•
Restricted: Deletion of an occurrence of a parent table may not take place if the
occurrence is related through foreign keys to occurrences of the child table.
•
Cascade delete: Deletion of an occurrence of a parent table causes deletion of
all related occurrences of the child table.
•
Nullify: Deletion of an occurrence of a parent table may leave occurrences of
the child table without parents. In this case, there is no constraint, and child
occurrences may be created without specifying a parent.
Business Rules
1. A foreign key element is a reference to a column that is part of a
table. The same foreign key element is part of a foreign key that is a
reference to a primary key that is on the same table.
2. A foreign key element is the use of a column that is part of a table.
The same foreignkeyelement is partof a foreignkey that is aconstraint
on the same table.

ROW FOUR: THE DESIGNER’S VIEW
329
3. If the attribute “Referential integrity constraint” of an occurrence of
foreign key has the value “Restricted”, then occurrences of the table
organized around the primary key referred to by the foreign key may
not be deleted if occurrences exist of the table constrained by the
foreign key.
4. If the attribute “Referential integrity constraint” of an occurrence of
foreign key has the value “Cascade delete”, and if an occurrence of the
table organized around the primary key that it is a reference to is deleted,
then each occurrence of the table that is constrained by the same foreign
key must also be deleted.
5. If the attribute “Referential integrity constraint” of an occurrence of
foreign key has the value “Nullify”, then occurrences of the table
organized around the primary key that it is a reference to may be
deleted. If this happens, the value of the column used as a foreign
key element is set to “<null>”.
Computed Columns
In the preceding Row Three section, a derivation was shown to calculate the
value of an attribute. The derivation was composed of one or more derivation
elements, each of which was either the use of a constant, the use of another
attribute, or the use of a system variable, such as “Today’s date”. Because that
was a conceptual model, the point was made that describing the derivation at that
point made no assumptions as to whether the calculation was done when data
were collected or on the ﬂy when the derived value was requested.
In the system design represented here, any columns whose values are calcu-
lated before data are stored are no different from any others in this metamodel.
They require no special treatment. If the design provides for the ability to calcu-
late values dynamically when they are requested, however, a structure similar to
the one seen previously is required. This is shown in Figure 7–30.
Speciﬁcally, a column may be calculated via one or more computations, each
of which must be composed of one or more computation elements. Each com-
putation element in turn must be either the use of a constant, the use of another
column, or the use of a system variable, such as “Today’s date”. The Reverse
Polish Notation approach described previously applies here as well.

COMPUTATION ELEMENT
* Operator
° Constant
COMPUTATION
# Sequence number
* Formula
COLUMN
* Label
* Format
° Length
° Decimal places
* Mandatory indicator
° Default value
CONTINUOUS
COLUMN
° Maximum value
° Minimum value
DISCRETE
COLUMN
DATA GROUP
VIEW
* SQL expression
* Effective date
° Until date
TABLE
part of
composed of
part of
composed
of
calculated
via
to calculate
the value of
the
use
of
the use of
based on
used
as
BUSINESS CONCEPT ELEMENT
DERIVATION ELEMENT
# Sequence number
* Operator
° Constant
° Via operator
PROPOSITION TYPE ELEMENT
# Effective date
° Until date
° Predicate
PROPOSITION TYPE
FACT TYPE ELEMENT
ASSOCIATIVE ROLE
° Cardinality indicator
° Default optionality indicator
GENERALIZATION
ROLE
FACT TYPE
* Effective date
° Until date
DERIVATION
* Formula
the
basis
for
part
of
composed
of
about
the
object
of
via
the basis
for
the
use
of
connected from
connected to
SYSTEM VARIABLE
# Name
* Definition
used as
used as
RELATIONSHIP ROLE
based
on
the basis for
BUSINESS CONCEPT
# ID
* Name
* Primary definition
INFORMATION ENGINEERING ROLE
Fig. 7–30: Computed columns.

ROW FOUR: THE DESIGNER’S VIEW
331
Business Rules
1. The derivation element that a computation element is based on
must be part of the derivation that the corresponding computation
is based on.
2. If a column to be calculated is based on an attribute (using a col-
umn attribute mapping), the attribute must also be derived from a
set of derivation elements that exactly correspond to the computation
elements for the column.
Column Domains
In Figure 7–31 we see that a column must be either a discrete column or a
continuous column. A continuous column can take as a value any real number,
although this value may be constrained to be between its “Maximum value” and
“Minimum value”. A discrete column, however, can only take as a value a valid
code that is part of a speciﬁed code set. That is, each discrete column must be
evaluated by one and only one code set.
Note that this is similar to the structure we saw for continuous and
discrete attributes in the Row Three part of the model, shown previously. There,
an attribute may be constrained by a domain that, if the attribute is a discrete
attribute, is a value set.
The difference between a value set and a code set is that a permitted
attribute value is the concept of the value. The permitted attribute value is
represented by a value code that in turn is the use of a signiﬁer, such as a word
or abbreviation.
For example, a value set may describe the states of the United States, but
there may be multiple code sets that actually describe the states. In one code
set (Postal Abbreviations), Alabama is represented by the value code that is
the use of the signiﬁer (an abbreviation) “AL”. In another code set (Obso-
lete Postal Abbreviations), it is represented by the value code that is the use
of the signiﬁer (an abbreviation) “ALA”. In a third code set (State Codes),
Alabama is represented by the value code that is the use of the signiﬁer
(an abbreviation) “01”.

332
MOTIVATION
to represent
to represent
represented by
represented by
constrained by
constrained by
the standard representation of
the standard representation of
primarily represented by
primarily represented by
represented by
represented by
TABLE ENTITY
CLASS MAPPING
# Effective date
° Until date
SIGNIFIER
# ID
CODE SET
# ID
* Name
* Description
COLUMN ATTRIBUTE MAPPING
# Effective date
° Until date
TABLE
VIEW
* SQL expression
* Effective date
° Until date
DATA GROUP
SYMBOL
# Sequence number
* Effective date
° Until date
° Comment
ICON
BUSINESS TERM
VALID CODE
* Value
INSTANCE NAME
OTHER
INSTANCE
NAME
part
of
to represent
part of
for
composed of
represented by
composed of
a representation of
PERSISTENCE MECHANISM
# Name
* Description
CONTINUOUS
COLUMN
° Maximum value
° Minimum value
OTHER
COLUMN
DISCRETE
COLUMN
COLUMN
* Label
* Format
° Length
° Decimal places
* Mandatory indicator
° Default value
PERMITTED
ATTRIBUTE
VALUE
# ID
* Value
OTHER DOMAIN
° Maximum value
° Minimum value
DOMAIN
* Format
° Description
° Maximum length
° Decimal length
° Default value
VALUE EXPRESSION
VALUE SET
about
constrained
by
a constraint
on
described
by
CONTINUOUS
ATTRIBUTE
° Maximum value
° Minimum value
DISCRETE
ATTRIBUTE
OTHER
ATTRIBUTE
ATTRIBUTE
° Default value
° Formula text
° Cardinality indicator
* Default optionality indicator
ENTITY CLASS
evaluated by
used
in
from
subject to
part of
composed
of
to
to
the object of
the object of
a sub-type
a super-type of (2+)
used
as
the use
of
the standard
representation of
primarily represented by
represented by
from
subject
to
evaluated at
evaluated at
evaluated at
Fig. 7–31: Column domains.

ROW FOUR: THE DESIGNER’S VIEW
333
The point is that when designing a column it will be necessary to identify
which code set is to be used for that implementation. As described previously,
because permitted attribute values have to be identiﬁed somehow each value
set must be primarily represented by one code set. In the example, the value set
“States of the United States” must be primarily represented by a code set such
as “State names”. In this case, the valid code for Alabama would be the use of
the signiﬁer (a word) “Alabama”.
Business Rules
1. A valid code may only be to represent a permitted attribute value.
2. If a discrete column is subject to a single column attribute mapping
to an attribute, then the attribute must be a discrete attribute.
3. If a discrete column is subject to a single column attribute mapping
to an attribute, then the code set that it is evaluated by must be a
representation of a value set that is a constraint on that attribute.
Database Constraints
Figure 7–32 shows that unique keys, computations, and foreign keys are but
examples of the more general concept database constraint. Having said that, we
can postulate that there might be other database constraints on either columns
or tables.
Object-Oriented Constraints
As with attributes and relational columns, object-oriented instance attributes
are of two types, as shown in Figure 7–33. Discrete instance attributes (such as
“State” or “Color”) take values from a discrete list of the discrete instance valid
values. (See the description of discrete columns earlier in this chapter and that
of discrete instance attributes in the material that follows.) An other instance
attribute, such as “Speciﬁc gravity”, takes values from a continuous range and
may have a “Minimum value” and a “Maximum value”. A particular type of
discrete instance attribute, state, is described in detail in the material following.
Note that a common usage of discrete instance valid value is to record valid
values for state, with the mechanism of legaltransformation (described in more
detail in Chapter Six) to move class implementations from one state to another.

334
MOTIVATION
SYSTEM
VARIABLE
# Name
* Definition
TABLE
COLUMN
* Label
* Format
° Length
° Decimal places
* Mandatory indr
° Default value
DATABASE CONSTRAINT
# ID
° Name
* Description
COMPUTATION
# Sequence number
* Formula
FOREIGN KEY
# ID
° Name
* Referential integration
OTHER
CONSTRAINT
PRIMARY
KEY
ALTERNATIVE
KEY
UNIQUE KEY
DATABASE CONSTRAINT 
ELEMENT
# Sequence number
UNIQUE KEY ELEMENT
# Sequence number
COMPUTATION
ELEMENT
* Operator
° Constant
OTHER CONSTRAINT 
ELEMENT
FOREIGN KEY
ELEMENT
part of
composed
of
constrained
by
constrained
by
on
on
composed of
part of
the
use
of
the
use
of
the use of
the use of
used as
used
as
used as
used as
constrained by
constrained by
a constraint on
a constraint on
a reference to
referred to by
a reference 
to
referred
to by
Fig. 7–32: Database constraints.
Although it is reasonable to suggest that domains could be speciﬁed to validate
groups of instance attributes, as is done with conceptual attributes and rela-
tional columns, the literature about object-orientation does not mention them
in this context. Instead, “domain” in the object-oriented community refers to an
area of interest.∗(See Figure 7–33.)
∗Indeed, beyond the concept of a list of discrete instance valid values, I have not been able to ﬁnd
any discussions of the validation of instance attributes.

DISCRETE INSTANCE
VALID VALUE
# ID 
* Value
DISCRETE INSTANCE
ATTRIBUTE
OTHER
INSTANCE
ATTRIBUTE
OTHER
DISCRETE
INSTANCE
ATTRIBUTE
STATE
CLASS ATTRIBUTE
INSTANCE ATTRIBUTE
EXECUTABLE MODULE
METHOD
PACKAGE
CLASS ELEMENT
# Sequence number
* Name
* Visibility
MESSAGE
# Sequence number
* Name
* Message text
MESSAGE TYPE
# Name
* Description
PROGRAM MODULE
# ID
* Name
* Description
° Scenario
° Program code
OBJECT
# Name
* Program code
MESSAGE
QUEUE
# ID
° Name
LEGAL  
TRANSFORMATION
# Sequence number
* Description
* Rule
STATE LEGAL 
TRANSFORMATION
OTHER LEGAL 
TRANSFORMATION
the
start
of
from
to
for
a call to
the use
of
part of
an
instance
of
source of
destination of
the site of
for
on
from
to
to
embodied in
sender
of
invoked
by
source
of
composed
of
embodied
in
composed
of
used
as
an implementation
of
an example of
to invoke
performed by
objects in
implemented
by
part of
sent by
temporary
holder of
evaluated
as
the end
of
CLASS IMPLEMENTATION
OPERATION
# ID
° Description
* Visibility
inheriting
from
a
generalization
of
Fig. 7–33: Class elements.

336
MOTIVATION
Links
The Architect’s View (Row Three)
Previously, we saw how entity classes in the Architect’s View became tables
in the database design and attributes became columns. Then we saw how
computations in the Designer’s View are derived from derivations in the
Architect’s View.
Figure 7–34 continues this by showing the connection between unique keys
and unique identiﬁers, between foreign keys and information engineering
roles, and between other constraints and system constraints. This shows
that foreign key in the Designer’s View is based on an associative relationship
role in the Architect’s View. Similarly, unique key and unique key element of the
Designer’s View are based on unique identiﬁer and unique identiﬁer element,
respectively, of the Architect’s View. Note that where a unique identiﬁer element
may be the use of either an attribute or a relationship role, a unique key
element is only the use of a column. This is because roles are in fact implemented
as foreign key columns in relational design.
And ﬁnally, each of one or more other constraints in the Designer’s View is
based on a system constraint in the Architect’s View. Note that in all of this link-
ing between the Architect’s View and the Designer’s View, it is not assumed that
the designer will simply take the default design implied by the entity-relationship
model. That model is intended to describe the inherent structure of data, with-
out regard to technology. When a database is built on a real computer with real
database management system software, the structures often have to be modiﬁed
based on the actual use to which the data will be put.
What is important, though, is to maintain the information about where the
design came from. Even if one attribute is implemented as many columns, or
vice versa, this model shows how the links can be documented. For the sake of
future maintenance, it is important that this be done.
Programming Constraints
Foreign key and primary key constraints can be implemented by database man-
agement systems. Computations require software to implement the Reverse
Polish Notation approach. other constraints certainly require software as well,
whether in the form of database triggers, stored procedures, or other programs.

ROW FOUR: THE DESIGNER’S VIEW
337
constrained by
constrained by
constrained by
constrained by
the use of
the use of
the use of
the use of
a reference to
a reference to
TABLE
VIEW
* SQL expression
* Effective date
° Until date
COLUMN
* Label
* Format
° Length
° Decimal places
* Mandatory indicator
° Default value
DATABASE CONSTRAINT
# ID
° Name
* Description
FOREIGN KEY
# ID
° Name
* Referential integrity constraint
SYSTEM CONSTRAINT
# ID
° Description
* Condition indicator
OTHER SYSTEM
CONSTRAINT
OPTIONALITY
CONSTRAINT
° Mandatory indicator
OTHER
CONSTRAINT
PRIMARY
KEY
ALTERNATIVE
KEY
UNIQUE KEY
DATABASE CONSTRAINT 
ELEMENT
# Sequence number
UNIQUE KEY ELEMENT
# Sequence number
OTHER
CONSTRAINT
ELEMENT
FOREIGN KEY
ELEMENT
constrained
by
on
based
on
constrained
by
the use of
the use of
used as
used
as
used as
a
constraint
on
constrained by
 a constraint on
the basis for
the
basis
for
used as
a reference to
referred to by
part of
composed
of
on
a
constraint
on
constrained
by
constrained
by
on
organized
around
a reference
to
referred
to by
based
on
based
on
based on
the use
of
the use
of
to constrain
about
of
to constrain
to constrain
the
basis for
described by
constrained by
constrained
by
connected
to
connected
from
player of
played by
identified via
ATTRIBUTE
° Default value
° Formula text
° Cardinality indicator
* Default optionality indicator
ENTITY CLASS
UNIQUE
IDENTIFIER
ELEMENT
INFORMATION ENGINEERING
ROLE
ASSOCIATIVE 
ROLE
° Cardinality indicator
° Default optionality indicator
RELATIONSHIP ROLE
UNIQUE
IDENTIFIER
a super-
type of (2+)
a sub-
type of
GENERALIZATION
ROLE
N-ARY ROLE
* Cardinality indicator
* Default optionality indicator
ASSOCIATION
CLASS ROLE
DATA GROUP
the
basis
for
composed of
composed of
composed of
part of
Fig. 7–34: Unique keys, foreign keys, and the conceptual model.

338
MOTIVATION
Figure 7–35 shows that each constraint must be implemented by one and
only one program module. Among the types of program modules commonly
employed at this are the dbms itself, stored procedures, and triggers, as well
as other executable modules.
Data Quality
To the extent that quality standards are applied to entityclasses and relationship
roles, it is even more important that they be applied to the columns of an actual
database. This, after all, is where data quality will be enforced. Figure 7–36 shows
the extension of quality standard (shown in Figure 7–26) to apply also to a col-
umn. That is, each quality standard is the use of a valid quality characteristic
value used as a quality standard for the evaluation of a column.
Business Rule
The valid quality characteristic value used as a quality standard
for the evaluation of a column should be greater than the valid quality
characteristic value used as a quality standard for the evaluation of
either the attribute or the relationship role that is implemented as the
column.
ROW SIX: MEASURING DATA QUALITY
As we have seen in the preceding chapters, Row Six is the view of actual systems
as implemented. In the Motivation column, we have been concerned with, among
other things, rules and constraints. To examine the full range of constraints in
all systems is a bit too ambitious for this book, but it is possible to model the
implementation of data quality constraints, as is done in Figure 7–37.
The deﬁnition of data standards as applied to attributes and relationships was
shown in Figure 7–26 as part of the Row Three model discussed previously.
This was extended to cover columns in the Row Four model in Figure 7–36. Here,
we see that an actual quality value assignment is the assignment of a valid
quality characteristic value to a particular cell instance.

ROW SIX: MEASURING DATA QUALITY
339
SYSTEM VARIABLE
# Name
* Definition
TABLE
COLUMN
* Label
* Format
° Length
° Decimal places
* Mandatory indicator
° Default value
DATABASE CONSTRAINT
° Name
FOREIGN KEY
# ID
° Name
* Referential integrity
   constant
OTHER
CONSTRAINT
PRIMARY
KEY
ALTERNATIVE
KEY
UNIQUE KEY
DATABASE ELEMENT
# Sequence number
UNIQUE KEY 
ELEMENT
# Sequence number
COMPUTATION
ELEMENT
* Operator
° Constant
OTHER 
CONSTRAINT 
ELEMENT
FOREIGN KEY
ELEMENT
part
of
composed
of
constrained
by
constrained by
on
on
composed of
part of
the use of
the use of
the use of
the use of
used as
used
as
used as
used as
constrained 
by
constrained 
by
a constraint on
an implementation of
a constraint on
a reference 
to
referred to by
a reference
to
referred
to by
COMPUTATION
# Sequence number
* Formula
PROGRAM MODULE
° Scenario
° Program code
CLASS IMPLEMENTATION
PACKAGE
EXECUTABLE MODE
part of
composed
of
METHOD
STORED
PROCEDURE
INTERACTIVE
MODULE
DBMS
TRIGGER
DATABASE
MANAGEMENT
SYSTEM
OTHER
EXECUTABLE
MODULE
acted
on by
to act
on
inheriting
from
a generalization
of
implemented by
Fig. 7–35: Constraint implementation.

QUALITY
STANDARD
# ID
* Effective date
° Until date
QUALITY CHARACTERISTIC
° Description
# Code
RELATIONSHIP ROLE
ENTITY CLASS
ATTRIBUTE
° Default value
° Formula text
° Cardinality indicator
* Default optionality indicator
ASSOCIATIVE ROLE
° Cardinality indicator
° Default optionality indicator
N-ARY ROLE
* Cardinality indicator
* Default optionality indicator
ASSOCIATION
CLASS ROLE
GENERALIZATION ROLE
for the evaluation of
for the
evaluation
of
for the
evaluation
of
player
of
played
by
the use
of
used
as
PERSISTENCE MECHANISM
# Name
* Description
COLUMN
* Label
* Format
° Length
° Decimal places
* Mandatory indicator
° Default value
VIEW
* SQL expression
* Effective date
° Until date
DATA GROUP
TABLE
part
of
evaluated via
described
by
evaluated
via
evaluated
via
about
a super
type of
(2+)
a sub-
type of
connected to
connected  from
for
constrained by
VALID QUALITY
CHARACTERISTIC VALUE
# Sequence number
* Effective date
° Until date
* Value
INFORMATION ENGINEERING ROLE
composed
of
Fig. 7–36: Extended data quality.
340

ROW SIX: MEASURING DATA QUALITY
341
ROW
INSTANCE
# ID
QUALITY
STANDARD
# ID
* Effective date
° Until date
QUALITY
CHARACTERISTIC
° Description
# Code
RELATIONSHIP ROLE
ATTRIBUTE
° Default value
° Formula text
° Cardinality indicator
* Default optionality indicator
TABLE
INSTANCE
# ID
* Name
* Date created
° Date removed
ENTITY CLASS
QUALITY
VALUE
ASSIGNMENT
* Effective date
° Until date
CELL
INSTANCE
° Date last updated
INFORMATION ENGINEERING ROLE
ASSOCIATIVE ROLE
* Cardinality indicator
* Default optionality indicator
GENERALIZATION ROLE
N-ARY ROLE
* Cardinality indicator
* Default optionality indicator
ASSOCIATION
CLASS ROLE
COLUMN
INSTANCE
# ID
* Name
evaluated
in
to
in
part
of
a
reference
for
in
a
reference
for
composed
of
part
of
composed
of
for the
evaluation
of
for the
evaluation
of
for the
evaluation
of
evaluated
via
evaluated
via
played
by
player
of
about
described
by
of
assigned
as
the use
of
used
as
an
implementation
of
based
on
PERSISTENCE MECHANISM
# Name
* Description
COLUMN
* Label
* Format
° Length
° Decimal places
* Mandatory indicator
° Default value
VIEW
* SQL expression
* Effective date
° Until date
DATA GROUP
TABLE
part
of
evaluated via
the
basis
for
implemented
as
a super-
type of
(2+)
a sub-
type of
for
constrained by
VALID QUALITY
CHARACTERISTIC VALUE
# Sequence number
* Effective date
° Until date
* Value
composed
of
connected to
connected from
Fig. 7–37: Measuring data quality.

342
MOTIVATION
Business Rule
The valid quality assigned here for a particular cell instance should
be at least as high as the valid quality characteristic value that was for
the evaluation of all instances of the column that was the basis for the
column instance that this cell instance is in.

GLOSSARY
The following pages contain deﬁnitions of the specialized words highlighted in the
text of this book, as well as deﬁnitions of all the classes present in its models. In the
deﬁnitions, other deﬁned words are also highlighted. Words in small capitals are
the names of entity classes in the model. Other words deﬁned are simply various
terms referred to in this book. To the right of each deﬁnition is a list of the
chapters in which the term is discussed; the primary chapter is listed ﬁrst.
Term
Deﬁnition
Chapter
abstract
model
The universal data model that encodes everything into thing, thing
type, characteristic, thing relationship, thing type relationship,
characteristic, characteristic assignment, and characteristic value.
1
access role
The fact that a party, position, and so on plays a speciﬁed role with
respect to anything else in the model.
5, 2,
3, 7
access role
type
The deﬁnition of a kind of access role. By deﬁnition, the ﬁrst of these
must correspond to the sub-types of access role: “Management role”,
“Enforcement role”, “Permission role”, and so forth.
5, 2,
7
accessibility
An inherent quality characteristic that is a measure of the ability to
access data when it is required.
7
accuracy (to
a surrogate
source)
An inherent quality characteristic that is a measure of the degree to
which data agrees with an original source of data (such as a form,
document, or unaltered electronic data) received from an acknowledged
source outside the control of the organization.
accuracy (to
reality)
An inherent quality characteristic that is a measure of the degree to
which data accurately reﬂects the real-world object or event being
described. Accuracy is the highest degree of inherent information
quality possible.
7
Continued
343

344
GLOSSARY
Term
Deﬁnition
Chapter
action assertion
A business rule that constrains data in explicit ways, such as
requiring uniqueness, speciﬁed optionality and functionality,
referential integrity, or other constraints.
7, 2
activities
The column in the Architecture Framework describing how an
enterprise does what it does
1
activity
A general term to describe something that is done. It is used
when a more speciﬁc deﬁnition is not available. An activity must
be either a function or a process.
3, 1
alethic
proposition
An assertion of necessity (something must be true) or possibility
(something can be true). This is the realm of the sciences.
2
alternative key
In relational theory, any unique key that is not a primary key.
7
alternative
system event
type
One of a set of system event types that are part of another
system event type. When the parent system event type happens,
it involves the triggering of only one of the alternative system
event types it is composed of.
6
application
class
A class implementation in object-oriented design that is
valuable for one application. Speciﬁcally this is either an event
recognizer class or an event manager class [Page-Jones 2000].
2
application
system
A collection of tables and program modules developed together
to address one or more business functions.
2, 3
architect
Someone skilled at deriving fundamental structures from the
Business Owner’s View.
Architect’s
View
(Row Three of the Architecture Framework) A view of the
underlying structures of Row Two, rendered in a more disciplined
fashion, completing the conceptual model of the business. This is
still without reference to any particular technology.
1–7
architectural
class
A class implementation in object-oriented design that
implements physical architecture, such as database
manipulation class, human interface class, or machine
communication class [Page-Jones 2000].
2
Architecture
Framework
A scheme for representing a body of knowledge systematically.
In this context, it consists of six rows describing the six
perspectives of actors in the development of information systems,
and six columns representing the six types of information
involved: what, how, where, who, when, and why. Each cell
represents a way of looking at one of these types of information
from a particular perspective.
1

GLOSSARY
345
Term
Deﬁnition
Chapter
assessment
A judgment about the implications of an inﬂuencer on either
one or more means (such as particular courses of action) or one
or more ends, such as particular desired results.
7, 1, 4,
6
assessment
element
The fact that an assessment concerns a particular end or means.
7, 4, 6
association
class role
In UML, a relationship role that relates an association entity
class to a relationship.
2
association
entity class
In UML, an entity class that records attributes of a
relationship. It is connected to the relationship via an
association class role.
2
associative
role
An information engineering role that describes a relationship
from one entity class to another that is not a super-type or a
sub-type.
2
assumption
An inﬂuencer type (a kind of “internal inﬂuencer”) that is an
assertion taken for granted or without proof.
7
attainable
A characteristic of objectives: it is always possible to tell whether
(and when) an objective has been achieved.
7
attribute
1. (UML diagram) A descriptor of a kind of information
captured about an object class.
2. (Relational theory) The deﬁnition of a descriptor of a relation.
2, 1, 5
attribute
A fact type element (speciﬁcally a characteristic assignment)
that is a descriptor of an entity class.
2, 1
attribute class
A business class in object-oriented design that is a property of
something.
2
attribute
deﬁnition
The fact that an instance attribute in a Row Four object-
oriented design is based on the deﬁnition of an attribute in a
Row Three entity-relationship diagram.
2
attribute name
A business term that describes a particular instance of an
attribute in an occurrence of an entity class; probably its
“Name”.
2
attribute
selection
The fact that a particular attribute is included in the deﬁnition
of a virtual entity.
2
authorship
role
An access role in which a party is the creator of a resourse.
This is an access role that is an example of an access role type
of “Authorship Role”.
5, 2
Continued

346
GLOSSARY
Term
Deﬁnition
Chapter
binary relationship
A relationship between exactly two entity classes.
2, 1
Boyce-Codd
normal form
In relational theory, a reﬁnement of third normal form: No
part of a primary key may be dependent on another part of
that primary key.
2
BPR
(See business process re-engineering.)
3
builder
A person with the technological skills to create system
artifacts such as program modules and databases.
1–7
Builder’s View
(Row Five of the Architecture Framework) A view of the
details of a particular language, database storage speciﬁcations,
networks, and so forth. The builder’s view is what ANSI called
the physical schema.
1–7
business class
A class implementation in object-oriented design that is
valuable for one industry or company, such as a relationship
class, a role class, an attribute class, or a class of entity
[Page-Jones 2000]. (This Row Four entity class is linked to the
appropriate Row Three entity classes via class deﬁnition.)
2
business
communication
link
The fact that there is a physical means of communicating
from one site to another site.
4
business
communication
link type
The deﬁnition of a kind of business communication link.
4
business concept
Something we understand to exist or to be the case.
2, 5
business event
type
The deﬁnition of a kind of thing that can happen. It may be
an external business event type (outside the enterprise’s
control) or an internal business event type, which occurs
within the enterprise and under its control.
6, 5
business location
The fact that a particular business event type or business
process is located in a particular site.
4
business location
type
The deﬁnition of a kind of business location.
4
business metadata
Data describing a body of information from a business
person’s point of view. That is, these are descriptions of what
data are available and in what terms.
1
business owner
Someone who carries out the daily business of the enterprise.
This could be a middle manager, an accountant, a shop
foreman, or some such person.
1–7

GLOSSARY
347
Term
Deﬁnition
Chapter
Business Owner’s
View
(Row Two of the Architecture Framework) Deﬁnes—in
business terms—the nature of the business, including its
structure, processes, organization, and so forth. There are
usually multiple business owners’ views of a given enterprise,
and these may overlap or even contradict each other.
1–7
business policy
A nonactionable directive that guides the activities of the
business or governs them in a general way. Note that it
“governs”; it does not control or shape courses of action.
For example, to say that “We will not permit on-site visits”
constrains the tactics available for meeting the strategy to
“Increase market share”. It does not specify what those
tactics should be.
7
business process
An activity as carried out by business people, including the
mechanisms involved. This is in the domain of Row Two, the
Business Owner’s View. Alternatively, the architect in Row
Three sees a system process which is about the data
transformations involved in carrying out a business
process.∗In either case, processes can be viewed at a high
level or in atomic detail.
3, 5
business process
design
The fact that a system process is used for the design of a
business process.
3
business process
re-engineering
(BPR)
A technique for evaluating how an enterprise (or part of an
enterprise) operates. This involves process modeling,
speciﬁcally with an eye to identifying processes that do not
contribute to the enterprise’s proﬁtability.
3
business rule
Either a set of conditions, a directive, or an “element of
guidance”. A constraint on a business’s behavior.
7
There is not yet an industry standard deﬁnition of
business rule although authors seem to be converging.
Barbara von Halle deﬁnes it as “the set of conditions that
govern a business event so that it occurs in a way that is
acceptable to the business” (2002, p. 28). In its original
∗Note that, in spite of the use of the word system to distinguish what are Row Three activities from the
“business processes” of the Business Owner’s View, this is still not describing any particular computer system
technology. It is only concerned with what processing of data might be carried out, and it remains completely
independent of any particular technology that might be used.
Continued

348
GLOSSARY
Term
Deﬁnition
Chapter
business rule
(cont’d)
Motivation Paper, the Business Rules Group deﬁned a
business rule as “a directive, intended to govern, guide or
inﬂuence business behavior, in support of a business policy
that has been formulated in response to an opportunity,
threat, strength or weakness” [BRG 2005, p. 18].
In its submission to the Object Management Group,
“The Semantics of Business Vocabulary and Business Rules”,
the Business Rules Team∗deﬁnes a business rule as “an
element of guidance that introduces an obligation or necessity,
[and] that is under business jurisdiction” [BRT 2005,
pp. 162–163].
business rule
mapping
The association of a business rule to one or more domains,
unique identiﬁers, or system constraints.
7
business rule
mapping
element
The fact that a particular business rule mappping is to a unique
identifer, a domain, or a system constraint. A component of a
business rule mapping.
7
business term
The fact that a particular word or phrase can have a particular
meaning. That is, it is the fact that a particular business concept
can be described by a particular signiﬁer (a word or phrase).
2, 7
cascade delete
A referential integrity constraint on a foreign key that requires,
upon deletion of a row in a table, deletion of any rows in other
tables with foreign key values that point to the row in question.
7
CASE
(See computer-aided systems engineering.)
1
cell instance
A physical datum captured in a row and column of a physical
table instance.
2, 3
characteristic
1. An attribute or parameter in the abstract model that can be
used to describe something of interest.
2. A fact type that is something you can measure about one or
more business concepts. The fact that a particular
characteristic is about a particular business concept is a
characteristic assignment, a kind of fact type element.
2, 1
characteristic
assignment
1. In the abstract model, the fact that a particular characteristic
is appropriate to describe members of a thing type.
2. The fact that a particular characteristic is about a particular
business concept.
2, 1
characteristic
value
(Abstract model) The fact that a particular thing has a particular
value for a characteristic.
1
∗The Business Rules Team now includes vendors as members, while the Business Rules Group did not.

GLOSSARY
349
Term
Deﬁnition
Chapter
Chen notation
The ﬁrst version of entity/relationship modeling, created by
Dr. Peter Chen in 1976. It is noteworthy in its use of diamond
shapes to represent relationships as things.
2
chronosynclastic
infundibula
Places in the Universe where each Daddy could ﬁnally catch on
to what the other Daddy was talking about. These places are
where all the different kinds of truths ﬁt together as nicely as
the parts in your Daddy’s solar watch [Vonnequt 1959].
Preface
class attribute
A class element that is a descriptor of an entire class
implementation, such as “Number of instances”.
2
class deﬁnition
The fact that a business class in a Row Four object-oriented
design is based on an entity class in a Row Three entity-
relationship model.
2
class element
A component or characteristic of a class implementation. This
may be either an instance attribute, which is a characteristic
that is distinct for each occurrence (instance) of a class
implementation, or a class attribute, which is a characteristic
that applies to the entire class and all of its occurrences.
2, 7
class
implementation
The deﬁnition of a kind of object as implemented in
program code.
2, 3
class of entity
A business class in object-oriented design that is behaving as an
entity class in an object model.
2
class type
The deﬁnition of a kind of class implementation. By
deﬁnition, the ﬁrst instances of this will be the same as the
sub-types shown for class implementation: “Business class”,
“Architectural class”, and so on.
2
code set
The collection of valid codes that constitutes a representation
of a value set.
7
column
An area of interest or a kind of information for each
perspective in an Architecture Framework. Columns describe
“Data”, “Activities”, “Locations”, “People and Organizations”,
“Timing and Events”, and “Motivation”.
1
column
If a table represents data about something, a column is the
place in a table to keep information about some aspect of
that thing. Each row in the table contains one value in
each column.
2
Continued

350
GLOSSARY
Term
Deﬁnition
Chapter
column
attribute
mapping
The fact that a particular attribute in a Row Three
entity-relationship model is implemented as a particular
column in a Row Four database design.
2
column instance
An actual occurrence of a column as designed, but existing in a
physical database.
2
column selection
The fact that a column in a particular table is part of the
deﬁnition of a view.
2
Common
Warehouse
Metamodel
A data warehousing and analysis domain metadata model
created by the Object Management Group.
1
Company
An organization recognized as a legal entity.
5
comparative
evaluator
If this is an integrity constraint (condition indicator = “False”),
it is a system constraint argument to a system constraint,
requiring that an object be greater than, less than, or equal to
the constrained object. This is an example of an other system
constraint type.
7
completeness
(of values)
An inherent quality characteristic that is a measure of the
extent to which an attribute has values for all instances of an
entity class.
7
computation
An expression used to calculate the value of a column.
7
computation
element
The fact that a column, a “Constant”, or a system variable is
used in the computation to calculate the value of a column.
7
computer-aided
systems engineer-
ing (CASE)
An approach to developing systems that involve using
computers to assist in modeling a universe of discourse and
then to generate a system based on that model.
1
computer
time-sharing
A technology developed in the late 1960s that permitted
multiple people to use a single computer at the same time by
dividing tasks and providing a split second of service to each
user.
conceptual data
model (schema)
In the ANSI four-schema architecture, this is a description of a
portion of an enterprise in terms of the fundamental things of
signiﬁcant interest to it. They are fundamental in that most
things seen by business owners are examples of these. The
model is constructed in a rigorous manner, being fully
normalized, eschewing many-to-many relationships and is
expressed in terms of binary relationships only.
1, 2

GLOSSARY
351
Term
Deﬁnition
Chapter
concurrency
An inherent quality characteristic that is a measure of the
information ﬂoat or lag time between when data is knowable
(created or changed) in one database and is also knowable in a
redundant or distributed database.
7
consequence
An action or other implication of failing to follow a
business rule.
7
consequence
invocation
The fact that a particular business rule can invoke a particular
consequence.
7
consequence of
violation
Something that can happen as a result of data being entered
that violates a system constraint.
7
consequence of
violation
assignment
The fact that violation of a particular system constraint can
invoke a particular consequence of violation.
7
constraint
A business rule that constrains behavior in some way or
constrains what data may or may not be updated.
2
contextual clarity
A pragmatic quality characteristic that is a measure of the
relative degree to which data presentation enables the
knowledge worker to understand the meaning of the data and
avoid misinterpretation.
7
continuous
attribute
An attribute whose values are taken from the set of real
numbers. This is as opposed to discrete attributes, whose
values come from a list of permitted values.
7
continuous
column
A column whose value can be any real number.
7
contributor
According to the Dublin Core, a party that participated in
creating a document or other resource.
2
copy
A physical representation of a document. This is either a
physical copy (with a physical substance) or a virtual copy
(sent or stored electronically).
2, 5
copy library
A listing of data layouts constructed so as to be usable by
many programs, usually in COBOL.
1
corporate value
An inﬂuencer type (a kind of “internal inﬂuencer”) that is an
ideal, custom, or institution the enterprise promotes or agrees
with. Each of these in turn must be an explicit corporate value
or an implicit corporate value.
7
course of action
An approach or plan for conﬁguring some aspect of the
enterprise. This involves the use of things, processes, locations,
people, timing, or motivation.
7, 3, 5
Continued

352
GLOSSARY
Term
Deﬁnition
Chapter
coverage
1. According to the Dublin Core, the extent to which a
document or other resource describes a particular part
of the earth.
2. The fact that a resource applies to a particular geographic
location.
2
creator
According to the Dublin Core, a party that was instrumental
in producing a document or other resource.
2
custodial
business
process
An essential business process required to provide data to
support a fundamental business process.
3
custodial process
An essential process required to provide data to support a
fundamental business process.
3
custodial
system process
An essential system process required to provide data to
support a fundamental system process.
3
CWM
(See Common Warehouse Metamodel.)
1
cybernetics
The science of communications and control.
6
data
The column in the Architecture Framework that is concerned
with what things are signiﬁcant enough to an enterprise that
they require holding information about them.
1
data dictionary
In the days of mainframe computers, this was a listing of
record layouts, describing each ﬁeld in each type of ﬁle.
1
data ﬂow
The fact that data, in the form of a virtual entity class, can
be sent from a party, position, external entity, or system
process to a party, position, external entity, or system
process.
3, 4, 5
data ﬂow
diagram
A graphic representation of the interactions between different
processes in an organization in terms of data ﬂow communica-
tions among them. This may be a physical data ﬂow diagram
that describes processes and ﬂows in terms of the mechanisms
involved, a logical data ﬂow diagram that is without any
representation of the mechansm, or an essential data ﬂow
diagram that is a logical data ﬂow diagram organized in terms
of the processes that respond to each external event.
3
data group
A relation that may be either a physical table or a virtual
view.
2

GLOSSARY
353
Term
Deﬁnition
Chapter
data group
collection
A set of data groups (tables or views) that are viewed
together for some reason. They may have related meanings
or related purposes.
2, 3, 5
data mart
A database in a data warehouse conﬁguration that holds a
subset of data speciﬁcally organized for a particular kind
of reporting.
2
data model
A representation of the structure of data. As used in this book,
the term refers to a conceptual data model, which describes
data in terms of their inherent semantics, without regard to
how they might be organized in a physical database. Some use
the term to describe a logical data model that organizes data in
terms of a speciﬁc data management technology, such as
relational tables and columns, object-oriented classes, or
ISAM hierarchies.
data resource
data
Michael Brackett’s term for metadata [Brackett 2000].
data store
A medium for storing data temporarily.
3
data warehouse
1. A centralized database for collecting the data from
numerous other systems so that they can be made available
for management reporting. The database is close to 3rd
Normal Form.
2. A system that includes the central database described in 1;
plus procedures for extracting, transforming, and loading
data from other systems; and one or more data marts that
organize subsets of the data for particular reporting
purposes.
1
database
constraint
In relational database design, a conﬁguration that restricts the
updating or deletion of data. This includes unique key, foreign
key, computation, or any other encoded restriction on the
updating of data.
7
database
constraint
element
Because a constraint usually involves more than one column,
this is the fact that a particular column is part of the deﬁnition
of a particular constraint.
7
database
installation
The fact that a table instance exists in a particular database
instance.
4, 2, 5
Continued

354
GLOSSARY
Term
Deﬁnition
Chapter
database
instance
A virtual site that is a collection of tables managed as an
identiﬁed group by a particular database installation.
4, 2, 5
database
management
system
A software product used to create and manage data in a
coherent fashion. Different database management systems are
created and sold by different companies.
3
database
manipulation
class
An architectural class in object-oriented design such as
“Transaction” and “Backup” [Page-Jones 2000].
2
date
According to the Dublin Core, the point in time when a
document or other resource was created.
2
DBMS version
A particular edition of a database management system.
2, 4, 5
decussate
Intersect, cross.
4
deﬁnition
conformance
An inherent quality characteristic that is a measure of the
consistency of the meaning of the actual value of each datum
with its deﬁnition.
7
delimiting
indicator
An attribute of characteristic assignment that determines
whether this use of this characteristic is sufﬁcient to identify
occurrences of the business concept being described by that
characteristic assignment.
2
deontic
proposition
An assertion of obligation (something is required to be so) or
permission (something is permitted to be so). This is the realm
of business rules.
2
derivation
A business rule (including laws of nature) that deﬁnes how
knowledge in one form may be transformed into other
knowledge, possibly in a different form.
2
derivation
A domain that speciﬁes how attributes constrained by that
domain are calculated from other attribute variables.
7
derivation
element
The use of a variable in a derivation. This may be either
another attribute, a “Constant”, or a system variable, such as
“Today’s date”. It includes an “Operator” that tells a computing
engine the role of this derivation element in the overall
derivation.
7
derivation
integrity
A pragmatic quality characteristic that is a measure of the
correctness with which derived or calculated data are calculated
from their base data.
7
derived fact
A fact whose value is derived mathematically from other
facts.
2

GLOSSARY
355
Term
Deﬁnition
Chapter
description
According to the Dublin Core, full text description of the
document or other resource.
2
design
communication
link
The fact that a communication link between two sites is part of
the system design.
4
designer
A person with sufﬁcient knowledge of the technologies required
to deﬁne the structure and nature of a proposed system.
1–7
design link
implementation
The fact that a particular programming unit communication
will make use of a design communication link.
4
Designer’s View
(Row Four of the Architecture Framework) A view of how
technology may be used to address the information-processing
needs identiﬁed in the previous rows. Here, object-oriented
databases are chosen over relational ones (or vice versa), kinds
of programming languages are selected (third or fourth
generation, object-oriented, and so on), program structures are
deﬁned, user interfaces are speciﬁed, and so forth.
1–7
desired result
An end that is a state or target that the enterprise intends to
maintain. There are two kinds of desired results: goals and
objectives.
7, 3, 6
detailed
representation
The model seen by the builder in Row Five of the Architecture
Framework.
1
direction
A means effect that is the fact that a directive affects the
operation of a business process. It must be either a guidance
or a governance.
6, 7
directive
A speciﬁcation that constrains courses of action. It does this
in two ways. First, it may simply be designed to govern one or
more courses of action. For example, “A loan is not to be
granted to someone whose credit rating is lower than B”
governs the course of action concerned with granting loans.
A second effect is that sometimes a directive is itself the
source of a course of action. That is, a directive may be the
source of those courses of action whose whole purpose is to
enforce that directive.
7, 5
directive
motivation
The fact that a particular assessment element (a strength,
weakness, opportunity, or threat) is the reason for a
particular directive (business policy or business rule).
7
Continued

356
GLOSSARY
Term
Deﬁnition
Chapter
directive role
The fact that a particular directive (business policy or
business rule) is acting as the internal inﬂuencer.
7
discrete
attribute
An attribute whose value must be taken from an explicit list
of permitted attribute values.
7
discrete
instance
attribute
An object-oriented instance attribute that can only take a
value from a list of explicit values.
2, 6, 7
discrete
instance valid
value
A value that can be assumed by a discrete instance attribute.
6
display element
An interface element that simply displays text or a graphic.
5
display group
A collection of elements displayed on a screen that is part of a
window.
5
document
A kind of resource usually embodied as either a representation
of words and symbols on paper or as the virtual equivalent of
that in electronic storage.
2
domain
A characteristic fact type that may be a constraint on one or
more attributes.
7, 2
Dublin Core
An organization that has set out to standardize the way
documents, recordings, web pages, and other media are
described.
2
effort
A means effect that is the use of a business process to achieve
a desired result. It is invoked by a course of action.
7, 3, 4,
6
elementary
business
function
A most atomic function—one that cannot be broken into
smaller functions. Once started, an elementary function
cannot be interrupted before completion.
3
elementary
business
process
The most atomic business process that cannot be broken down
into smaller processes. Once started, an elementary business
process cannot be interrupted before completion.
3
elementary
entity class
The deﬁnition of a thing of signiﬁcance to the organization
about which it wishes to hold information. This is as opposed
to a virtual entity class, which is a composition based on
other entity classes.
2, 6
elementary
system process
The most atomic system process that cannot be broken down
into smaller processes. Once started, an elementary business
process cannot be interrupted before completion.
3, 6

GLOSSARY
357
Term
Deﬁnition
Chapter
e-mail site
A virtual site identiﬁed by a domain name and an e-mail
address.
4
employment
A party relationship that involves a person working for an
organization in a formal way, normally in exchange for
pecuniary compensation.
5
enablement
The fact that one course of action makes another course of
action possible. That is, a particular course of action enables
the carrying out of another course of action.
7
encapsulation
In object-oriented design, the principle that it should be
possible to refer to an object with behavior and not know
anything about how that behavior is implemented.
end
Something that the enterprise sets out to accomplish. Primary
among these, of course is the company’s vision, but the concept
of end also includes various kinds of desired result.
7, 4, 5,
6
enforcement
level
A measure of the extent to which any business rule can be
enforced.
7
enforcement
level
implementation
The fact that a particular business rule is subject to a particular
enforcement level.
7
enforcement
role
A kind of access role that is the fact that a party, position
assignment, position, and so on is responsible for the
enforcement of business rules for a site, symbol, a business
concept, a copy of a document, a resource, a business
description speciﬁcation, an activity, an inﬂuencer,
a means, an end, a system process, a system constraint, a
persistence mechanism (a table, a view, or a column), a
program copy, a database installation, or a table instance.
This is an access role that is an example of an access role
type of “Enforcement Role”.
5, 7
enterprise model
A comprehensive model (usually a data model) of an entire
organization, or a signiﬁcant part of it, as seen by the business
owner in Row Two of the Architecture Framework.
1
entity class
A thing of signiﬁcance to the enterprise about which it wishes
to capture information.
2, 1, 5,
6
entity class
(See entity class.)
1
Continued

358
GLOSSARY
Term
Deﬁnition
Chapter
entity class
name
A business term that describes a particular occurrence of an
entity class. Normally, this is also the value of the entity
class’s “Name”.
2
entity class
selection
The fact that a particular entity class is part of the deﬁnition
of a virtual entity class.
2
entity class
state
An entity class typically moves through various states.
Depending on the entity class, the state could describe its
degree of completion, relevance of an activity, or a speciﬁc set
of values for other characteristics.
6
entity class
state type
The deﬁnition of a particular kind of entity class state.
6
entity life history
A modeling technique that describes the events that affect an
entity class state.
1, 6
entity-
relationship
model
(See conceptual data model.)
entity-
relationship
modeling
A modeling technique that represents data structure in terms of
the things of signiﬁcance to an enterprise (entity classes) about
which it wishes to hold information (attributes), and binary
relationships between them.
2, 1
epistemological
proposition
An assertion that something is known to be the case. These are
the assertions of a typical data model.
2
equivalence of
redundant or
distributed data
An inherent quality characteristic that is a measure of the
degree to which data in one data collection or database is
semantically equivalent to data about the same object or event
in another data collection or database.
7
essential
business
process
A business process that is a collection of elementary business
processes to constitute the complete response to an external
business event type.
3, 6
essential data
ﬂow diagram
A data ﬂow diagram (consisting of either business processes
or system processes) whose processes each represent the
complete response to an external event.
3, 1
essential
indicator
An attribute of characteristic assignment that determines
whether an occurrence of a business concept described by the
characteristic assignment must have a value for the
characteristic involved.
2

GLOSSARY
359
Term
Deﬁnition
Chapter
essential system
process
A system process that is a collection of elementary system
processes to constitute the complete response to an external
system event type—that is, one whose External Indicator
is “True”.
3, 6, 1
essential system
process
diagram
A representation of the processes carried out by an enterprise
or a signiﬁcant part of an enterprise, where system processes
are constrained each to be the complete response to an external
system event whose External Indicator is “True”.
3, 6, 1
ETL
(See extraction, transfer, and load facility.)
1
event
Something that happens at an instant in the world that
causes a process to be launched.
1, 2, 6
event manager
An application class in object-oriented design that carries out
an appropriate policy when an event recognizer signals the
occurrence of a speciﬁc event.
2
event
recognizer
An application class in object-oriented design that monitors or
checks for the occurrence of speciﬁc events.
2
event type
The deﬁnition of a category of events.
event type
sequence
The fact that one sequential system event type comes after
another sequential system event type, in the context of a
parent system event type that it is a part of.
6
executable
module
A program module that describes processing of some sort.
This is as opposed to a class implementation that describes the
structure of the objects a program is to work on.
3
explicit corporate
value
An “internal inﬂuencer” that is a corporate value explicitly
stated.
7
external
business event
type
A business event type that is outside the enterprise’s control.
6, 5
external entity
In a data ﬂow diagram, this is an ultimate source or destination
of data. Usually, this is a party.
3
external event
Something that happens outside the control of the enterprise,
and to which the enterprise must react.
external schema
In the ANSI four-schema architecture, this is a description
of a particular individual’s view of the enterprise. Different
individuals will see it differently, so these views may overlap
or conﬂict.
1, 2
Continued

360
GLOSSARY
Term
Deﬁnition
Chapter
extraction,
transfer, and
load facility
Software that specializes in copying data from one place to another
according to speciﬁcations.
1
fact
An instance of a fact type.
2
fact element
An instance of a fact type element.
2
fact type
An expression that links business concepts together. Both the
nature and the operating structure of an organization can be
described in terms of the facts that relate the enterprise’s terms
to each other. A fact may be expressed in a sentence.
2
fact type
element
The fact that a business concept is part of a fact type.
2
ﬁeld
An interface element that displays a column from the database or
accepts a typed-in value to be added to the database. (A ﬁeld may
be the use or display of one and only one column in a database.
It also may be a trigger of an executable module when the “Enter”
key is pressed.)
5
ﬁfth normal
form
In relational theory, the ﬁfth of Dr. Codd’s constraints on a rela-
tional design: A three-way (or more) relationship is redundant if
all of its occurrences can be derived from combinations of two-way
occurrences.
2
ﬁrst normal
form
In relational theory, the ﬁrst of Dr. Codd’s constraints on a rela-
tional design: Every tuple may have only one value for an
attribute in a relation.
2
foreign key
A combination of columns in a table, where the value of each
column is equal to the value of a primary key element in another
table. The set of columns that constitute the foreign key must
correspond to the set of columns that constitute the primary key
in the other table.
7
foreign key
element
The fact that a particular column is used as a component of a
foreign key. Each foreign key element is the use of a column
in the table containing the foreign key, and a reference to a
column in the table that the foreign key is pointing to
(a primary key element in that table).
7
format
According to the Dublin Core, the physical nature of the document
or other resource: newspaper, book, TV program, and so on.
2
foundation
class
A class implementation in object-oriented design that is valuable
across all businesses and architectures, including fundamental,
structural, and semantic classes [Page-Jones 2000]
2

GLOSSARY
361
Term
Deﬁnition
Chapter
four-schema
architecture
A view, developed in 1975 by the ANSI/X3/SPARC Study Group on
Data Base Management Systems, which sees various business people
as having different “schemas” in their heads and that each represents
a particular view of the enterprise’s data. These external schemas
overlap and often conﬂict. A conceptual schema can be drawn up
that integrates all these external views. This can then be reformed
into one or more logical schemas to reﬂect particular database
management approaches. Each logical schema is then rendered on
physical media in terms of a physical schema. The point of this
approach is that these views are relatively independent of each
other.
1, 2
fourth normal
form
In relational theory, the fourth of Dr. Codd’s constraints on a
relational design: No column within a primary key may be
completely dependent on another column within the same
primary key.
2
framework
cell
The intersection of a row and a column in the Architecture
Framework. Speciﬁcally, a particular kind of information (“Data”,
“Activities”, and so on) from a particular perspective (“Planner’s
View”, “Business Owner’s View”, and so on).
1
function
A type of activity to carry out a mission, goal, or objective of the
enterprise. It is described solely in terms of what it is intended to
accomplish, without regard to the technology used to carry it out or
who is to perform it. This is also described without reference to time.
3, 1,
5
functional
veriﬁer
If this is an integrity constraint (Condition indicator = “False”), it
requires an object to assume a function relative to the constrained
object. For example, the value of an attribute may be required to be
unique within an entity class. If this is a condition (Condition
indicator = “True”), it tests to see whether this is so. This is an
example of an other system constraint type.
7
functioning
system
That which is seen in Row Six in the Architecture Framework.
This describes existing programs, databases, procedures, and
responsibilities.
1
fundamental
business
process
An essential business process that is used to directly implement
a business function.
3
Continued

362
GLOSSARY
Term
Deﬁnition
Chapter
fundamental
class
A kind of foundation class. This is a basic class such as
“Integer”, “Boolean”, or “Char” [Page-Jones 2000].
2
fundamental
process
An essential process that is central to the functioning of the
enterprise.
3
fundamental
system process
An essential system process used for the business process
design of a business process (an essential business process)
that is directly to implement a business function.
3
generalization
role
An information engineering role that is an entity class’s
being a super-type or a sub-type of another entity class.
2
generation
The fact that a program module was in fact generated via a
generation speciﬁcation.
3
generation
speciﬁcation
The fact that a program module can be generated according
to speciﬁcations contained in a persistence mechanism (for
example, a table or a column).
3
geographic area
A geographic location that is two-dimensional, covering an
identiﬁed area.
2
geographic
location
Any identiﬁed place on the Earth∗in one, two, or three
dimensions. Sub-types can include geographic area,
geographic point, and geographic solid (although the last
is not included in this metamodel).
2
geographic
location type
The deﬁnition of a kind of geographic location. The ﬁrst
occurrences of these must be the same as the sub-types of
geographic location in the model—“Geopolitical area”,
“Management area”, and so on.
4
geographic
point
A geographic location that is a point in one dimension.
Geographic points are used to deﬁne the boundaries of
geographic areas.
4
geographic
structure
The fact that one geographic location may overlap or include
another geographic location. The Attribute Inclusive
Indicator is “True” if the ﬁrst geographic location is entirely
contained within the second. It is “False” if they simply overlap.
4
geopolitical
area
A geographic area whose boundaries are deﬁned by law or
treaty, such as a state or country.
2
∗Yes, it’s true: This is a very geocentric book. The reader is encouraged to produce the inter-planetary
(inter-stellar?) version.

GLOSSARY
363
Term
Deﬁnition
Chapter
goal
A speciﬁc statement about a state or condition of the enterprise
to be brought about or sustained through appropriate means
[BRG 2005, p. 8]. A goal is an ampliﬁer of a vision. That is,
whereas a vision describes a future state of the enterprise in
general, a goal is one of the steps to be taken to accomplish that
vision. A goal, by deﬁnition, is more narrow than a vision.
7, 5, 1
governance
A kind of direction from a directive describing the
boundaries and direction for a business process.
7, 6
government
agency
An organization that is part of an international, national,
state, or local government.
5
guidance
A kind of direction from a directive describing an overall
supervision of a business process.
7, 6
guideline
A kind of business rule that is suggested, but not enforced.
7
habit
An inﬂuencer type (a kind of “internal inﬂuencer”) that is a
customary practice or use.
7
homonym
If a word or phrase is used in a business term to represent a
business concept, and it is also being used in another business
term to represent a different business concept, the two are
“homonyms” of each other.
2
human interface
class
An architectural class in object-oriented design that is part of a
human interface. This includes “window”, “IconicTrigger”, and
so on [Page-Jones 2000].
2
ICAM DEFinition
A collection of techniques originally developed as the
“Integrated Computer Aided Manufacturing” (ICAM) initiative
of the federal government. It encompasses techniques for
modeling data, processes, ontology, objects, and others.
iconic trigger
An interface element that, when touched on a display screen
by a user, invokes an executable module.
5
IDEF
(See ICAM DEFinition.)
3
IDEF0
An IDEF technique designed to model the decisions, actions,
and activities of an organization or system. Although it does
have provisions for explicitly describing mechanisms, it is
organized in a sequence; the emphasis is on the functions being
represented, not on processes [KBSI 2005].
3
Continued

364
GLOSSARY
Term
Deﬁnition
Chapter
IDEF1
An IDEF technique for both analysis and communication in the
establishment of requirements. IDEF1 is generally used to
(1) identify what information is currently managed in the
organization, (2) determine which of the problems identiﬁed
during the needs analysis are caused by lack of management of
appropriate information, and (3) specify what information will
be managed in the TO-BE implementation [KBSI 2005].
3
IDEF1X
An IDEF technique for designing relational databases with a
syntax designed to support the semantic constructs necessary in
developing a conceptual schema. Because it is a design method,
IDEF1X is not particularly suited to serve as an AS-IS analysis
tool, although it is often used in that capacity as an alternative
to IDEF1. The IDEF1X system perspective is focused on the
actual data elements in a relational database [KBSI 2005].
3
IDEF3
An IDEF technique for collecting and documenting processes.
IDEF3 captures precedence and causality relations between
situations and events in a form natural to domain experts by
providing a structured method for expressing knowledge about
how a system, process, or organization works [KBSI 2005].
3
IDEF4
An IDEF technique that views object-oriented design as part
of a larger system development framework rather than an
object-oriented analysis and design method that is ambiguous.
IDEF4 stresses the object-oriented design process over graphical
syntax, using the graphical syntax and diagrams as aids to
focus and communicate important design issues.
IDEF4 is signiﬁcantly different from other object design
methods, primarily in its support of “least commitment”
strategies and its support for assessing the design impact of
the interaction among class inheritance, object composition,
functional decomposition, and polymorphism [KBSI 2005].
3
IDEF5
An IDEF technique designed to assist in creating, modifying,
and maintaining ontologies. Standardized procedures—the
ability to represent ontology information in an intuitive and
natural form—and higher-quality results enabled through
IDEF5 application also serve to reduce the cost of these
activities [KBSI 2005].
3
identiﬁer
According to the Dublin Core, a unique identiﬁer of a
document or other resource. (See also unique identiﬁer.)
2

GLOSSARY
365
Term
Deﬁnition
Chapter
implicit corporate
value
An inﬂuencer type (a kind of “internal inﬂuencer”) that is a
corporate value understood by some or all in the enterprise,
but it is not explicitly stated.
7
infer
An operation in a derivation where a value in a “parent” is
made available to a “child” entity class.
7
inﬂuencer
Something either within the enterprise or in its environment
that affects the outcome of its end.
7, 1, 4,
5, 6
inﬂuencer type
The deﬁnition of a kind of inﬂuencer.
7, 4
Information
Designer’s View
John Zachman’s term for Row Three of his Zachman
Framework; equivalent to the Architect’s View in the
Architecture Framework.
1
information
engineering
role
A relationship role between exactly two entity classes.
2
infrastructure
An inﬂuencer type (a kind of “internal inﬂuencer”) that is the
basic underlying feature of the enterprise.
7
inherent quality
characteristic
A quality characteristic whose measurement is independent
of the way data are used. These characteristics are measures of
the data themselves, regardless of how they might be presented
to knowledge workers [English 1999].
instance
attribute
A class element that assumes a different value for every
instance of the class implementation.
2
instance name
A business term that describes a particular occurrence of an
attribute, an entity class, or something else.
2, 7
instance veriﬁer
If this is an integrity constraint (Condition indicator = “False”),
it requires an instance of the constrained object to exist. This
includes the optionality constraint. If this is a condition
(Condition indicator = “True”), it tests to see whether an
instance of the constrained object exists. This is an example of
an other system constraint type.
7
interactive
module
A program that is part of an application system’s user interface.
5
interactive
module
An executable module that involves a human being entering or
requesting data.
3
Continued

366
GLOSSARY
Term
Deﬁnition
Chapter
interface
element
An item appearing on a video display device that furthers the
interaction between a human being and a system. It may be a
display element, an iconic trigger, a ﬁeld, or an other
interface element.
5
internal
business
event type
The deﬁnition of a kind of event. Something that occurs
within the enterprise and is under its control.
6, 5
internal
organization
Any permanent or temporary department, section, branch, or
other group within either a company or a government agency.
5
issue
An inﬂuencer type (a kind of “internal inﬂuencer”) that is a
point in question or a matter in dispute between two
contending parties.
7
iterative system
event type
A system event type that can be triggered more than once in
the context of its parent system event type.
6
language
According to the Dublin Core, the natural language (English,
French, Arabic, and so on) the document or other resource
was rendered in.
2
language
A collection of spoken sounds and written symbols that
represent a system for communicating a person’s under-
standing of the world.
2
legal
transformation
The deﬁnition of a speciﬁc change in value of a discrete
instance attribute from one discrete instance valid
value to another.
6
locations
The column in the Architecture Framework that describes
the places where the enterprise does business and how these
places are connected.
1
logical data ﬂow
diagram
A data ﬂow diagram that describes the ﬂow of information in
an enterprise without regard to any mechanisms that might be
required to support that ﬂow.
3, 1
logical data
model (schema)
In the ANSI four-schema architecture, this is the organization
of data for use with a particular data management technology.
In a relational environment, this is in terms of tables and
columns. In an object-oriented one, it is in terms of object
classes and attributes. It could also be a COBOL record layout
or a set of ISAM segments.
3, 1

GLOSSARY
367
Term
Deﬁnition
Chapter
machine
communication
class
An architectural class in object-oriented design that participates
in messages between machines. Examples include “Port” and
“RemoteMachine” [Page-Jones 2000].
2
mailing address
Often the description of a physical site used to tell postal
authorities how to deliver mail to the site. This usually
includes a reference to one or more streets (plus the city, state,
or province, and country where the site is located), but it could
also be in terms of a post ofﬁce box number.
4
management
area
A geographic area whose boundaries are deﬁned by the
enterprise, as in “Southwestern sales region”.
2
management
prerogative
An inﬂuencer type (a kind of “internal inﬂuencer”) that is a
right or privilege exercised by right of ownership or position in
the enterprise.
7
management
role
A kind of access role that is the fact that a party, postion,
position responsibility, and so on is responsible for the
supervision of a site, symbol, business concept, a copy of a
document, a resource, a business description speciﬁcation,
an activity, an inﬂuencer¸ a means, an end, a system process,
a system constraint, a persistence mechanism (a table, a
view, or a column), a program copy, a database installation,
or a table instance. This is an access role that is an example
of an access role type of “Management role”.
5, 2, 3,
7
mandatory
A characteristic of an attribute or a relationship role
asserting that for each instance of the thing involved a value
is required for this attribute or relationship role. This is
controlled by the “Default optionality” attribute and the
optionality constraint that is a sub-type of system
constraint.
7
many-to-many
relationship
A relationship where an occurrence of each entity class may
be associated with one or more occurrences of the other
entity class.
2
mathematical
evaluator
If this is an integrity constraint (Condition indicator = “False”),
it speciﬁes that an attribute be calculated according to a formula
(or a function, such as SUM) for a constrained entity class.
If this is a condition (Condition indicator = “True”), it tests
7
Continued

368
GLOSSARY
Term
Deﬁnition
Chapter
mathematical
evaluator (cont’d)
to see whether this is so. This is a kind of other system
constraint type.
means
Any capability that may be called on, activated, or enforced to
achieve an organization’s objectives.
7, 3, 4,
5, 6
means effect
The fact that a particular business process is used to carry out
a means. This must be either a direction from a directive on
a business process, an effort invoked by a course of action
to achieve a desired effect through the use of a business
process, or an other means effect.
7, 6
means effect
type
The deﬁnition of a kind of means effect. Three means effect
types must be the same as the sub-types of means effect:
“Guidance”, “Governance”, and “Effort”.
7, 6
measurable
A characteristic of all objectives: all objectives contain in their
expression one or more speciﬁc criteria that can be measured
to determine when the objective has been achieved, such as
“Increase sales by 10%”.
7
mechanism
The fact that a particular business process (such as “take
order”) is the user of a particular mechanism type (such as
“terminal attached to the Framis System”).
3, 1
mechanism type
A system, form, or some other tangible tool required to carry
out the business process.
3
message
A communication from one object to another, via a program
module communication, which has the effect of invoking
an operation.
3
message
argument
A parameter included with a message to affect the behavior of
the object receiving it.
3
message queue
A mechanism for storing messages when an object cannot
receive them as quickly as they are sent.
3
message type
The deﬁnition of a kind of message.
3
metadata
The data that describe the structure and workings of an
organization’s use of information, as well as the systems it
uses to manage that information.
1
metadata
repository
A database constructed for the purpose of storing, managing,
and making available metadata.
1

GLOSSARY
369
Term
Deﬁnition
Chapter
Meta Object
Facility
An Object Management Group standard deﬁning a common,
abstract language for the speciﬁcation of metamodels
[Poole et al. 2002, p. 40].
1
method
An executable module that acts on a class implementation.
3
mission
An overall method for the ongoing operation of the enterprise
(what the business is or will be doing on a day-to-day basis).
7, 1, 3,
5
model of
fundamental
concepts
The model seen by the architect in Row Three of the
Architecture Framework. This perspective completes the
conceptual model of the business, seeing the underlying
structures of Row Two rendered in a more disciplined fashion.
This is still without reference to any particular technology.
1
module data
usage
The fact that a particular persistence mechanism (that is, a
column, table, or view) is referred to by a program module.
The module data usage must be either “Create”, “Retrieve”,
“Update”, and/or “Delete”. The settings of the attributes
“Create indicator”, “Retrieve indicator”, “Update indicator”,
and “Delete indicator” determine which is the case.
3
module data
usage type
This is a different way to show whether the module data
usage is “Create”, “Update”, “Retrieve”, or “Delete”.
3
module
location
The fact that an object, operation, or program module is
to be found in a particular site.
4
MOF
(See Meta Object Facility.)
1
motivation
This column of the Architecture Framework describes why an
enterprise does what it does. This includes mission and vision
at Row One, through goals, objectives, strategies, and tactics in
Row Two. The business rules and business policies that also
arise in Row Two feed the deﬁnition of constraints in lower
rows.
1
motivation
location
The fact that a particular inﬂuencer, objective, or effort is
speciﬁc to a particular site.
4
multi-valued
attributes
An attribute that can have more than one value for a row in a
relational table.
2
multi-variate
relationship
A relationship between three or more entity classes.
2
Continued

370
GLOSSARY
Term
Deﬁnition
Chapter
n-ary
relationship
(See multi-variate relationship.)
2
n-ary role
A relationship role that is part of a relationship that is among
more than two entity classes.
2
nihilartikel
A fake word in a dictionary to prove copyright violations.
non-duplication
An inherent quality characteristic that is a measure of the
degree to which there is a one-to-one correlation between
records and the real-world objects or events being represented.
7
normalization
The process, originally articulated by Dr. E. F. Codd in his
relational theory, for organizing data to reduce redundancy
to the minimum possible. It involves guaranteeing that each
attribute in a “relation” (table or entity class) is truly an
attribute of that relation and none other. The process involves
organizing data to follow the constraints of at least ﬁrst normal
form, second normal form, and third normal form. Additional
value is found in Boyce-Codd normal form, fourth normal form,
and ﬁfth normal form.
2
nullify
A Referential integrity constraint on a table that permits
deletion of a row, even if there are rows in other tables with
foreign key values that point to the row in question. Those
values are replaced with nulls so that those rows no longer
point to another table.
7
object
An occurrence of a class implementation that is manipulated at
runtime. In object-oriented design an object encapsulates data
and only allows manipulation of data through controlled
methods (also called “behavior”).
2
object model
A description of the structure of objects being assembled into
a software product. The object may be a business object or
a computer artifact.
1
Object Role
Modeling
A form of representing the structure and constraints of an
enterprise. It is similar to entity relationship modeling but uses a
different syntax.
2
objective
A statement of an attainable, time-targeted, and measurable
desired result the enterprise seeks to meet to achieve its goals.
7, 5, 1
objectives/scope
What is seen by the Planner in Row One of the Architecture
Framework.
1

GLOSSARY
371
Term
Deﬁnition
Chapter
object-oriented
design
An approach to program design that organizes a computer
program’s manipulations in terms of the “objects” being
manipulated and the behavior of each. This is as opposed to
more traditional approaches, which began with the program
logic and collected data about things only as necessary to
complete the logic.
3, 2
occurrence
A row in an entity class. An instance of the thing of
signiﬁcance represented by the entity class.
2
ontological
classiﬁcation
The fact that a particular symbol (the use of a signiﬁer to
represent a business concept) is part of an ontology.
2
ontology
1. A branch of metaphysics concerned with the nature and
relations of being [Merriam-Webster 2005].
2. A catalogue of terms describing the types of things that exist
in an area of interest, with rules governing how those terms
can be combined to make valid inferences [KBSI 1994].
If the relationships are hierarchical, it is called a taxonomy.
3. “It is closely related to semantics, the primary distinction
being that ontology concerns itself with the organization
of knowledge, once you know what it means. Semantics
concerns itself with what something means” [McComb
2004, p. 9].
2
operation
The fact that the behavior of objects in a class implementation
is implemented by a method.
3
operational data
store
A database designed to integrate data from multiple sources to
facilitate operations. This is as opposed to a data warehouse,
which integrates data from multiple sources to facilitate
reporting and analysis.
optionality
A characteristic of an attribute or a relationship role that
asserts that for each instance of the thing involved a value is
not required for this attribute or relationship role. This is
controlled by the Default optionality attribute and the
optionality constraint, a sub-type of system constraint.
7
optionality
constraint
A kind of system constraint asserting that if an entity class
is in a particular entity class state then a particular attribute
or relationship role associated with that entity class either
7
Continued

372
GLOSSARY
Term
Deﬁnition
Chapter
optionality
constraint
(cont’d)
must (Optionality indicator = “False”) or is not required to
(Optionality indicator = “True”) have a value.
organization
A collection of people brought together for a speciﬁc purpose
and generally recognized as such.
5, 2, 3,
4, 6, 7
ORM
(See Object Role Modeling.)
2
other access role
This is an access role that is not a programming role, an
authorship role, an enforcement role, a placement role, a
permission role, a speciﬁcation role, or a management role.
5, 2, 3,
4, 7
other attribute
An attribute, such as a date, that is neither a discrete
attribute nor a continuous attribute.
7
other business
process
A business process that is not an essential business process
or an elementary business process.
3
other column
A column, such as a date, that is neither a discrete column
nor a continuous column.
7
other database
constraint
A database constraint that is not a foreign key, a unique
identiﬁer, or a computation.
other discrete
instance
attribute
A discrete instance attribute that is not a state.
2, 6
other domain
A domain that is not a value set or a value expression.
7
other entity
class
An entity class that is not an association entity class, a
virtual entity class, or an elementary entity class.
2
other executable
module
An executable module that is not an interactive module, a
package, a method, a database management system, or a
stored procedure.
3
other fact type
A fact type that is not a characteristic.
2
other fact type
element
A fact type element that is not a characteristic element.
2
other function
A function that is not an elementary business function.
3
other instance
attribute
An instance attribute that is not a discrete instance
attribute.
2, 6
other instance
name
An instance name that is not an instance name, an entity
class name, or a valid code.
2
other interface
element
An interface element that is not a display element, an
iconic trigger, or a ﬁeld.
5

GLOSSARY
373
Term
Deﬁnition
Chapter
other internal
inﬂuencer
An internal inﬂuencer that is not a habit, an assumption, an
infrastructure, a management prerogative, a resource, or
corporate value.
7
other legal
transformation
A legal transformation that is not a state legal trans-
formation.
7
other
organization
An organization that is not a company, a government agency,
an internal organization, a semantic community, or a speech
community.
5
other party
relationship
A party relationshp that is not employment.
5
other resource
A resource that is not a document.
2
other system
constraint
A system constraint that is not an optionality constraint.
7
other system
process
A system process that is not an essential system process or an
elementary system process.
3
other virtual
site
A virtual site that is not a database instance, a telephonic site,
an e-mail site, or a web site.
4
override with
explanation
An enforcement level that can be assigned to a business rule:
speciﬁcally, when the violation occurs there must be a comment
justifying it.
7
package
An executable module that is a collection of class implementa-
tions.
3
party
A person or an organization of interest to the enterprise. This
includes parties who are playing roles of “Vendor”, “Customer”,
and “Employee”, among others.
5, 2, 3,
4, 6, 7
party
relationship
The fact that a party is in some way associated with another
party. The nature of the relationship is deﬁned by the party
relationship type the party relationship is an example of.
5
party
relationship
type
The deﬁnition of the nature of one or more party relationships.
These include “Employment”, “Corporate structure”, “Union
membership”, “Husband”, and so on.
5
people and
organizations
This column of the Architecture Framework describes who is
responsible for the various aspects of the enterprise’s operations,
as well as the population that constitutes its environment of
vendors, suppliers, government regulators, and so on.
1
Continued

374
GLOSSARY
Term
Deﬁnition
Chapter
permission role
A kind of access role that is the fact that a party, position,
position responsibility, and so on is responsible for granting
permission to gain access to a site, a copy of a document, a
resource, a business description speciﬁcation, an activity,
a system process, a persistence mechanism (a table, a view,
or a column), a program copy, a database installation, or a
table instance.
5, 3, 7
permitted
attribute value
Either one of a list of values allowed to be speciﬁed by a
particular discrete attribute or one of a list of values allowed
to be speciﬁed by any attributes constrained by a value set.
7
persistence
mechanism
A mechanism for keeping the values of class implementations
(speciﬁcally, their instance attributes) after a program ceases
execution. Typically, this is a column that is part of a data
group, speciﬁcally a table.
2, 3, 5
persistence
mechanism
location
The fact that a particular persistence mechanism has been
deﬁned at a particular site.
4
person
A human individual.
2–7
phrase
A collection of words that form a single semantic meaning.
2
physical
comunication
link
The fact that one site has the facilities to communicate with
another site.
4
physical copy
A copy of a document that has physical existence, typically on
paper. This is as opposed to a virtual copy, which exists only in
the electronics of a computer system or network.
2
physical data
ﬂow diagram
A data ﬂow diagram that identiﬁes and represents data ﬂows
and processes in terms of the mechanisms currently used to
carry them out.
3, 1
physical data
model (schema)
In the ANSI four-schema architecture, this is the organization
of data used to place it in speciﬁc storage media. This is in
terms of “Tablespaces”, “Cylinders”, and so on.
1
physical link
implementation
The fact that a particular program copy makes use of a
particular physical communication link.
4
physical site
A site that is located in space—as opposed to a virtual site,
which is only a location in an electronic network.
4, 2

GLOSSARY
375
Term
Deﬁnition
Chapter
placement role
An access role that is the fact that a party, position, and so
on is located at a particular site. This is an access role that is
an example of an access role type of “Placement Role”.
Sub-types of “Placement Role” could describe the nature
of the placement, such as “Home address”, “Work address”,
“Corporate headquarters”, and so on.
5, 4, 7
planner
A person concerned with the overall direction and description
of the enterprise.
Planner’s View
(Row One in the Architecture Framework) A view that deﬁnes
the enterprise’s direction and business purpose. This is
necessary to establish the context for any system development
effort. It includes deﬁnitions of the boundaries of systems or
other development projects.
1–7
polymorphism
In object-oriented design, the principle that the same deﬁnition
can be used with different types of data (speciﬁcally, different
class implementations), resulting in more general and abstract
implementations.
position
The deﬁnition of a particular category of work to be done by
someone with a speciﬁc set of skills.
5, 3
position veriﬁer
If this is an integrity constraint (Condition indicator = “False”),
it requires a speciﬁc ranking of the constrained object relative
to other objects (“lowest”, “highest”, “oldest”, “newest”, or a
speciﬁed ranking, like “5th”). If this is a condition (Condition
indicator = “True”), it tests to see whether this is so. This is a
kind of other system constraint type.
7
post-justiﬁed
override
An enforcement level that can be assigned to a business rule.
Speciﬁcally, if not approved after the fact, there may be
sanctions or other consequences, but if approved, the action is
acceptable.
7
potential impact
Either a potential risk or potential reward revealed by an
assessment element. Potential impact can be expressed in
terms of the “Probability” of the risk or reward, and its
“Impact value”. The value is in terms of a “Unit of measure”.
7
pragmatic
quality
characteristic
A quality characteristic associated with data presentation
quality and how well data supports speciﬁc business processes
and how well it meets both information producers’ and
knowledge workers’ needs [English 1999].
7
Continued

376
GLOSSARY
Term
Deﬁnition
Chapter
preauthorized
override
An enforcement level that can be assigned to a business rule.
Speciﬁcally, the rule is enforced, but exceptions are allowed
with prior approval.
7
precision
An inherent quality characteristic that is a measure of
an attribute’s having the right level of granularity in the
data values.
7
predicate
Something that is afﬁrmed or denied of the subject in a
proposition in logic [Merriam-Webster 2005].
2
primary key
In relational theory, the set of columns whose values can be
used to uniquely identify each row (tuple in Dr. Codd’s
original terminology) in a table (relation to Dr. Codd).
primary key
The unique key (normally) used for creating foreign keys
pointing to the subject table from other tables.
7
private
A kind of visibility, where a class element can only be seen
within the context of its class implementation.
process
A kind of activity performed by the enterprise to produce a
speciﬁc output or achieve a goal. It may or may not be described
in terms of the mechanisms used or the parties performing it.
A set of processes is usually described in sequence.
3
process
criterion
A value or set point used to determine the success of a process
objective for a system process.
7
process
implementation
The fact that a system process has been implemented either as
an application system or as a particular program module.
3
process map
A kind of data ﬂow diagram used in business process
engineering to represent the tasks performed in an enterprise
and the links between them.
3
process
measurement
An evaluation of the performance of a system process.
A measurement from the system process is compared to
determine whether it is below the “Minimum value’‘ or above
the “Maximum value’‘ of the success criterion for that
system process. If so, it is the source of a system event type
that is the trigger of another system process to correct the
situation.
6
process
objective
Each system process may be directed toward one or more
process objectives. Each of these in turn is controlled by one
or more success criteria (set points).
6

GLOSSARY
377
Term
Deﬁnition
Chapter
process
objective type
The deﬁnition of a kind of process objective.
6
program copy
A program module is the logic of a program. It is replicated in
one or more program copies. That is, a program copy is the
physical manifestation of a program module.
3, 4, 5
program
location
The fact that a particular program copy is to be found in a
particular site.
4
program module
A unit of program code.
3, 5
program module
communication
The fact that one program module can send messages to
another program module.
3
program module
structure
The fact that one program module is a component of another
program module.
3
program module
type
The deﬁnition of a type of program module. The ﬁrst set of
program module types must correspond to the sub-types of
program module: “Executable module”, “Class implementa-
tion”, and so on.
3
programming
language
A scheme for expressing computer commands.
3
programming
unit role
An access role for a program module that is played by a
party only. access role types that are a sub-type of
“Programming unit role” could include “Programmer”,
“Designer”, “Project manager”, and so on.
5, 3
projection
controller
Whereas other kinds of constraints prevent things from
happening, a projection controller asserts that under speciﬁed
circumstances something must happen. A state is enabled,
something is copied, or an action is executed. This is a kind of
other system constraint type.
7
protected
A kind of visibility, where a class element can be seen and
used only within its class implementation and by classes that
are inheriting from that class.
public
A kind of visibility, where a class element can be seen and
used by any other class implementation or operation.
publisher
According to the Dublin Core, the company that physically
produces the document or other resource.
2
Continued

378
GLOSSARY
Term
Deﬁnition
Chapter
quality
characteristic
A parameter that describes a particular aspect of data quality to
be measured. This may be an inherent quality characteristic
(independent of the way data are used) or a pragmatic quality
characteristic, associated with data presentation quality and
how well it meets both information producers’ and knowledge
workers’ needs.
7
quality
standard
The assignment of a valid quality characteristic value to a
relationship role or to an attribute. Note that the values of
either of these will then be evaluated in terms of this quality
standard.
7
recursion
(See recursion.)
1, 2
reference data
Data that describe the infrastructure of an enterprise. These
comprise the “type” entity classes that provide lists of values
for other attributes.
2
referential
integrity
In a relational database, the quality of a table that all its
associations are with real instances of other tables.
7
relation
1. According to the Dublin Core, reference to a related
document or other resource.
2. In Dr. Codd’s original relational theory, an array of data
consisting of rows and columns that describe instances of a
particular thing of signiﬁcance (implemented as a table in
a relational database management system).
2
relational
database
management
system
A database management system whose architecture is based on
Dr. E. F. Codd’s relational theory. That is, it stores data in terms
of simple, two dimensional tables.
relational theory
The theory of data organization proposed by Dr. E. F. Codd
that recommends organizing data in terms of simple
two-dimensional structures called relations, consisting of
uniform rows (called tuples), each of which is in terms of a
speciﬁed set of attributes. The attributes must be speciﬁed
according to a set of rules (normalization) that guarantee
minimum redundancy.
2
relationship
The complete association among speciﬁc entity classes
consisting of two or more relationship roles.
2
relationship
class
A kind of business class in object-oriented design that
corresponds to a relationship role in an entity-relationship
model [Page-Jones 2000].
2

GLOSSARY
379
Term
Deﬁnition
Chapter
relationship
role
A fact type that describes the fact that instances of an entity
class have a particular named association with instances of
another entity class.
2
RelationshipEnd
The fact that instances of a particular entity class have a
particular named association with instances of another entity
class.
1
resource
An inﬂuencer type (a kind of “internal inﬂuencer”) that is
the resources available for carrying out the business of an
enterprise, especially their quality.
resource
The physical source of information about business concepts in
the form of symbols. That is, each resource may be the source
of one or more symbols. A resource may be a document, a
video, a musical recording, or any other kind of resource.
2, 5
resource
distribution
The fact that a copy of a resource has been (or will be sent) to
a party or a site.
2
resource
structure
The fact that one resource may be part of another resource.
2
resource
structure type
The deﬁnition of a kind of resource structure.
2
resource topic
The fact that a particular resource may be the source of a
particular symbol.
2, 5
resource type
The deﬁnition of a kind of resource. The ﬁrst of these must
correspond to the sub-types of resource: “Document”,
“Other resource”, and so on.
2
restricted
A referential integrity constraint on a foreign key that
prevents the deletion of a row in a table if there are rows
in different tables with foreign key values that point to the
row in question.
7
reticulate
To divide, mark, or construct so as to form a network.
4
Reverse Polish
Notation
A system of representing a mathematical formula, which
involves organizing it in terms of variables and operations on
each variable.
7
rightness or fact
completeness
A pragmatic quality characteristic that is a measure of
having the right kind of data with the right quality to support a
given process, such as to support a performance of the process
or the making of a decision.
7
Continued

380
GLOSSARY
Term
Deﬁnition
Chapter
rights
According to the Dublin Core, the ownership of some aspect of
the document or other resource.
2
role
(See relationship role.)
1
role class
In a class implementation, a business class that describes the
role someone plays, such as “Employee” or “Patient” [Page-Jones
2000].
2
row
1. In relational theory, a set of values for a speciﬁed set of
attributes.
2. In the architecture framework, representation of a perspective
of a particular observer on the information management
world. Observers include the Planner, the Business Owner,
the Architect, the Designer, and the Functioning System.
2, 1
Row Five
(See Builder’s View.)
1
Row Four
(See Designer’s View.)
1
row instance
A physical example of a ROW as deﬁned for a table design.
2
Row One
(See Planner’s View.)
1
Row Six
(See Functioning System.)
1
Row Three
(See Architect’s View.)
1
Row Two
(See Business Owner’s View.)
1
second normal
form
In relational theory, the second of Dr. Codd’s constraints on
a relational design: Each attribute must depend on the entire
primary key.
2
selection
condition
The fact that a particular attribute or relationship role is used
to select occurrences in an underlying entity class to populate
a virtual entity class. The value of each occurrence of an
attribute or each occurrence of a relationship is compared with
a “Value” using an “Operator” (“equal to”, “greater than”,
and so on) to determine whether that occurrence is part of the
virtual entity class.
2
semantic class
In a class implementation, a kind of foundation class that is
a common term, such as “Date”, “Time”, “Angle”, and so on.
Semantic classes have a richer meaning than plain “Integer”
and “Char” [Page-Jones 2000].
2
semantic
community
The set of people whose unifying characteristic is a shared
understanding (or perception) of the things that they have to
deal with. This includes, for example, “Doctors” or “Economists”.
2

GLOSSARY
381
Term
Deﬁnition
Chapter
semantic web
A machine-processable web of smart data, [where] smart data is data
that is application-independent, composeable, classiﬁed, and part of a
larger information ecosystem (ontology) [Daconta et al. 2003, p. 4].
2
semantics
The branch of philosophy concerned with describing meaning.
2
sequential
system
event type
One of a set of system event types that will be triggered in sequ-
ence as part of a single other system event type.
6
set point
In cybernetics, a value used in controlling a process. When the
process returns a value that is above or below the set point (depend-
ing on the “Set point above indicator”), a speciﬁed other process is
launched.
6
signiﬁer
A set of marks (either a graphic, or a word or phrase) that
can represent one or more business concepts.
2, 5
site
An address used for locating a person, resource, or other item. This
can be a physical site, which is a place on Earth that has a purpose,
such as an ofﬁce building, a home, or an oil well. Alternatively, it
can be a virtual class, such as a telephone number or an e-mail
address.
4, 2, 5
site
location
The fact that a particular physical site is to be found in a particular
geographic location.
4
site type
The deﬁnition of a kind of site. The ﬁrst of these must be the same
as the sub-types of site shown in the model—“Physical site”,
“Virtual site”, “E-mail site”, and so on.
4
source
According to the Dublin Core, another document or other resource
from which this resource was derived.
2
speciﬁcation
role
An access role that is the fact that a party, position, and so on is
empowered to design or specify the characteristics of a resource,
program module, or other element.
speech
community
Any group of people either inside or outside the enterprise whose
unifying characteristic is the vocabulary it uses. At a general level,
this could be “The population of the United Kingdom” or simply
“English speakers”, but it could also be as speciﬁc as a particular
dialect.
2
state
A discrete instance attribute whose value for an object repre-
sents the current status of that object. It is deﬁned for all objects
in a class implementation.
2, 6
Continued

382
GLOSSARY
Term
Deﬁnition
Chapter
state legal
transformation
A legal transformation that applies only to discrete instance
attributes that are states.
7
state trigger
The fact that a particular message can be used to initiate a
particular legal transformation.
6
state-transition
diagram
A diagram that graphically represents the states an entity class
(or a part of the enterprise) goes through in response to events.
1
stored
procedure
An executable module stored in a database instance, to
be invoked as part of the veriﬁcation process for particular
data elements.
3
strategy
The essential course of action attempted to achieve an
enterprise’s end—particularly goals. Moreover, a strategy must
be to carry out exactly one mission. In general, strategies
address goals, and tactics address objectives.
7, 3
strictly enforced
(business rule)
An enforcement level that can be assigned to a business rule.
Speciﬁcally, if the rule is violated a penalty is always applied.
7
structural
assertion
A business rule that is a term, a fact, or a derivation.
2, 7
structural class
A kind of foundation class in object-oriented design that
implements a structure. This includes “Stack”, “Queue”,
“BinaryTree”, and so on [Page-Jones 2000].
2
subcontractor’s
view
John Zachman assigned the subcontractor to the Row Five
perspective in his Zachman Framework. This is equivalent to
the Builder’s View in the Architecture Framework.
1
subject
According to the Dublin Core, a topic that categorizes this
document or other resource.
2
sub-type
An entity class is a sub-type of another if an occurrence of
it is also an occurrence of the other (called a super-type).
The sub-type is a sub-categorization of the super-type.
2
sub-type role
A kind of generalization role that is the fact that an
entity class is a sub-type of another entity class. That is,
all occurrences of the ﬁrst entity class are also occurrences
of the second entity class.
2
success criterion
According to cybernetic theory, in a feedback loop the set point
that determines the extent to which a system process meets
its process objective. This must be expressed in terms of
either a “Minimum value” or a “Maximum value” of an
attribute.
6

GLOSSARY
383
Term
Deﬁnition
Chapter
sum
An operation in a derivation in which the value of an
attribute in a parent table is equal to the sum of the values of
a speciﬁed attribute of all related instances in a child table.
7
super-type
A entity class is a super-type of one or more other entity
classes, if an occurrence of the ﬁrst is also an occurrence of
exactly one of the others.
2
super-type role
A kind of generalization role that is the fact that an entity
class is a super-type of another entity class. That is, each
occurrence of the ﬁrst entity class is also an occurrence
of one of several other entity classes.
2
symbol
The fact that a business concept may be represented by a
signiﬁer (a word, phrase, or graphic).
2, 5, 7
symbol context
The scope for a business term. For example, in a rental car
company the word site means different things in the context of
a rental than it does in the context of a repair.
2
synonym
If a word or phrase is used in a business term to represent the
same business concept as another word or phrase used in
another business term, the two words or phrases are
“synonyms” of each other.
2
system
A mechanism type that consists of one or more linked
computers, along with associated software.
3
system
constraint
A business rule described in terms of its effect on data.
Speciﬁcally, a system constraint must be to constrain either
an entity class, a relationship role, or an attribute.
7, 5
system
constraint
argument
A qualiﬁer for either a system constraint element or a
system constraint as a whole.
7
system
constraint
argument type
The deﬁnition of a kind of system constraint argument.
7
system
constraint
element
A component of a system constraint that identiﬁes something
doing the constraining—an entity class, a relationshp role,
or an attribute.
7
system
constraint
trigger
The fact that a system constraint or a system process may be
initiated by another system constraint.
7
Continued

384
GLOSSARY
Term
Deﬁnition
Chapter
system con-
straint type
The deﬁnition of a kind of system constraint.
7
system event
type
The deﬁnition of something that happens in the world that
produces data affecting the business.
6, 3
system process
The implementation of a business process that consists of the
conversion of data from one form to another.
3, 5, 6,
7
system variable
A variable whose values are maintained by the operating system.
It could be “Today’s date”, “Computer identiﬁer”, or something
similar.
7
table
A two-dimensional array of data, consisting of one or more
rows representing instances of the thing the table describes and
one or more columns each containing a kind of data describing
that thing.
2
table cell
A place for a datum in a table: a particular attribute in a parti-
cular row.
2
table entity
mapping
The fact that a particular entity class (in a Row Three entity-
relationship model) is implemented by a particular column in a
Row Four database design.
2
table instance
The physical implementation of a table design in a real database.
2, 5
table selection
The fact that a particular table is a component of a view.
2
tactic
A course of action that represents one or more details of a
strategy. A strategy, then, may be implemented by one or more
tactics. In general, strategies address goals, and tactics
address objectives.
7, 3, 1
technical
metadata
Descriptions of the physical technologies used to store and
manage data. This includes database schemas as well as
physical storage parameters.
1
technology
model
The model seen by the Designer on Row Four of the Architec-
ture Framework.
1
telephonic site
A virtual site that is a node on a telephone system, identiﬁed
by a “Telephone number”.
4
temporal event
The fact that time, as represented by a clock or a calender,
passed a certain point.
6
term
A rule that describes how people think and talk about things.
Thus, the deﬁnition of terms (that is, their underlying business
concepts) establishes a category of business rule. See also
2

GLOSSARY
385
Term
Deﬁnition
Chapter
term (cont’d)
business term—the fact that a particular word or phrase can
have a particular meaning.
ternary role
A relationship role that is part of a relationship among three
entity classes.
2
thing
Something of interest in the abstract model.
1
thing
relationship
In the abstract model, the fact that something of interest is
associated with something else of interest.
1
thing type
In the abstract model, a classiﬁcation of something of interest.
1
thing type
relationship
In the abstract model, the fact that a classiﬁcation of something
of interest is related to another classiﬁcation of something of
interest.
1
third normal
form
In relational theory, the third of Dr. Codd’s constraints on a
relational design: Each attribute must depend only on the
primary key.
2
time
(See timing and events.)
1
timeliness
A pragmatic quality characteristic that is a measure of the
relative availability of data to support a given process within the
timetable required to perform the process.
7
time-targeted
A characteristic of objectives: it is always possible to specify a
speciﬁc date (such as “December 31, 2007”) or a relative date
(such as “within two years”) when the objective is expected to
be achieved.
7
timing and
events
The column in the Architecture Framework concerned with
when things happen and how they are triggered.
1
title
According to the Dublin Core, text brieﬂy deﬁning the content
of a document. The name by which the document or other
resource is commonly known.
2
transformation
run
The actual running of a particular program copy on a particular
date. This transformation run is meant to be used to place a
value in a cell instance. It may be composed of one or more
transformation elements, each of which must be the use of a
different cell instance.
3
Continued

386
GLOSSARY
Term
Deﬁnition
Chapter
transformation
run element
The fact that a particular transformation run is the use of a
particular cell instance.
3
tuple
In Dr. Codd’s original relational theory, this was a row in a
relation.
2
type
According to the Dublin Core, a general category—ideally
selected from a controlled vocabulary.
2
type veriﬁer
(other system constraint type) If this is an integrity
constraint (Condition indicator = “False”), it requires an
instance of the constrained object to be related to objects of
a speciﬁed relationship to each other—mutually exclusive,
mutually inclusive, and so on. If this is a condition (Condition
indicator = “True”), this kind of system constraint tests to see
whether this is so.
7
UML
A suite of modeling notations to support object-oriented
design. Notations are available for modeling classes, states,
processes, and other dimensions. The class diagram can be used
to develop both entity-relationship models and object
(implementation) models.
1, 2
uniform resource
identiﬁer
A means of identifying a document page or another kind of
resource. It consists of a scheme name and a schematic-speciﬁc
name.
2
uniform resource
locator
A kind of uniform resource identiﬁer used to deﬁne locations
on the Internet. The term “uniform resource identiﬁer” is a
general term describing anything that can be used to identify a
web site. Uniform resource locator (URL) is part of a formal
identiﬁcation scheme currently (2005) used for identifying sites
on the World Wide Web.
2
unique
identiﬁer
element
The fact that a particular attribute or relationship role is
part of a particular unique identiﬁer.
7
unique
identiﬁer
The fact that the values of a speciﬁed set of attributes and
relationship roles are sufﬁcient to uniquely identify each
instance of an entity class.
7
unique key
The speciﬁcation of a set of columns, whose values can
uniquely identify every row in a table. This is the imple-
mentation of a unique identiﬁer in a relational database.
7

GLOSSARY
387
Term
Deﬁnition
Chapter
unique key
element
The fact that a particular column is part of a unique key.
7
universe of
discourse
The set of concepts that are the meaning behind the terms
and fact types.
2
URL
(See uniform resource locator.)
usability
A pragmatic quality characteristic that is a measure of
the degree to which the information presentation is directly
and efﬁciently usable for its purpose.
7
use case
A model of human/machine interaction similar to data ﬂow
diagrams, in that it represents communications between
external entities (here called “Actors”) and processes, but
the assumption is that the processes involved represent
systems (typically shown only as a single process represen-
ting the entire system). The content of data ﬂows are not
documented and, rather than being decomposed into lower-
level detail, these details are simply described in text as
“steps.” There is no notion of storing data in intermediate
“data stores.”
3
valid code
The fact that a particular value may be used to represent a
particular permitted attribute value. Each valid code must
be to represent a permitted attribute value. Valid code is
a business term that is to represent the business concept
called permitted attribute value.
7
valid quality
characteristic
value
A value for a quality characteristic that may used as a
quality standard for an attribute or for a relationship
role.
7
validity or
business rule
conformance
An inherent quality characteristic that is a measure of
the degree of conformance of data to its domain values
and business rules.
7
value expression
A domain that describes a constraint in terms of a
mathematical formula.
7
value set
A domain that is a set of permitted attribute values a
discrete attribute can assume.
7
view
A virtual table consisting of columns and selected
instances from other tables assembled in a systematic way.
2
Continued

388
GLOSSARY
Term
Deﬁnition
Chapter
view selection
condition
The use of a column to determine which instances of a selected
table populate a view. Each instance of a table in a table
selection for a view is chosen based the “Value” of a selected
column. That value is compared with the “Value” in the view
selection condition in terms of its “Operator”.
2
virtual copy
A copy of a document that has no physical existence. Rather,
it is stored and/or transmitted only in the electronics of a
computer system or network. This is as opposed to a physical
copy, which has a tangible existence.
2
virtual entity
class
An entity class composed of other entity classes, attributes,
and relationship roles.
2, 6
virtual site
A site that does not have a physical reality beyond bits in a
computer somewhere. It is identiﬁed by an address that is
meaningful only in an electronic environment.
4, 2
visibility
An attribute of operation in object-oriented design that tells
whether the operation can be “seen” by any program, or
whether it is “private”—only accessible within the model
involved.
7
vision
A description of a desired future state of the enterprise,
without regard to how it is to be achieved.
7, 1, 5
Web
(See World Wide Web.)
web site
A virtual site that contains resources identiﬁed by uniform
resource identiﬁers.
4
window
A deﬁned, bounded region on a video display screen. A
window has an identity, and can usually be manipulated—
moved, changed in size, and so on.
5
word
1. A speech sound or series of speech sounds that symbolize
and communicate a meaning without being divisible into
smaller units capable of independent use.
2. Any segment of written or printed discourse ordinarily
appearing between spaces or between a space and a
punctuation mark [Merriam-Webster 2005].
2
word usage
The fact that a particular word appears in a phrase.
2
World Wide Web
(Also called “the Web”.) A system of Internet servers that
support specially formatted documents. The documents are
2

GLOSSARY
389
Term
Deﬁnition
Chapter
World Wide Web
(cont’d)
formatted in a markup language called HTML (HyperText
Markup Language) that supports links to other documents, as
well as graphics, audio, and video ﬁles. This means you can
jump from one document to another simply by clicking on hot
spots. Not all Internet servers are part of the World Wide Web.
XML attribute
In an XML document type declaration, this qualiﬁer of an
XML element is the deﬁnition an XML attribute value that
constrains an XML tag.
2
XML attribute
value
The actual value of an XML attribute for a speciﬁc instance
of an XML tag.
2
XML blank tag
An XML tag that contains no data between its initial
expression and its termination.
2
XML content
tag
An XML tag that contains data between its initial expression
and its termination.
2
XML document
A body of text organized in terms of XML tags. It has a speciﬁc
structure deﬁned by its creator to be understood in detail by
its recipient.
2
XML document
declaration
A speciﬁcation of the kinds of XML tags that can be used for
any XML document based on this declaration.
2
XML element
A component in an XML document type declaration that is
the speciﬁcation for a particular XML tag.
2
XML element
content
The fact that a particular XML content tag contains data that
constitute a business term (the use of a word or phrase to
represent a business concept).
2
XML tag
A text label that identiﬁes a portion of an XML document.
2
XML tag
deﬁnition
The fact that an XML tag or an XML element (in an XML
document type declaration) is deﬁned in terms of either
an entity class or an attribute.
2
XML version
The particular edition of the XML language used as the
basis for a particular XML document.
2
Zachman
Framework
The original Architecture Framework as deﬁned by John
Zachman [1987].
1

This Page Intentionally Left Blank

REFERENCES AND FURTHER READING
If I have seen farther, it is by standing on the shoulders of giants.
—Isaac Newton
Letter to Robert Hooke, 1676
American National Standards Institute (ANSI). (1975). “ANSI/X3/SPARC Study
Group on Data Base Management Systems; Interim Report.” FDT (Bulletin of
ACM SIGMOD) 7:2.
Aristotle. 350 BCE. Posterior Analytics, Book II, 1. Translated by G.R.G. Mure,
1962. Ninth Year Course, Volume 2. Chicago: The Great Books Foundation.
Ashby, W. R. (1956). An Introduction to Cybernetics, New York: John Wiley and
Sons (Science Editions).
Barker, R., and C. Longman. (1992). CASE Method: Function and Process Models.
Wokingham, England: Addison-Wesley.
Beer, S. (1979). The Heart of Enterprise. Chichester, UK: John Wiley and Sons.
Berners-Lee, T. (1998). “Uniform Resource Identiﬁers (URI): Generic Syntax,”
Internet Engineering Task Force/Network Working Group.
Available at
http://www.ietf.org/rfc/rfc2396.
Booch, G., J. Rumbaugh, and I. Jacobson. (1999). The Uniﬁed Modeling Language
User Guide. Reading, MA: Addison-Wesley.
Brackett, M. H. (2000). Data Resource Quality. Boston: Addison-Wesley.
The Business Rules Group (BRG) (1995, 2000). “Deﬁning Business Rules: What
Are They Really?” (4th ed.), formerly titled the “GUIDE Business Rules Project
Report” (1995). Available at http://www.BusinessRulesGroup.org.
The Business Rules Group. (2005). “The Business Motivation Model: Business
Governance in a Volatile World,” release 1.2. Formerly titled “Organizing
391

392
REFERENCES AND FURTHER READING
Business Plans: The Standard Model for Business Rule Motivation” (November
2000). Available at http://www.BusinessRulesGroup.org.
Business Rules Team (BRT). (2005) unpublished. “Semantics of Business Vocab-
ulary and Business Rules,” submitted to the Object Management Group.
Cockburn, A. (2001). Writing Effective Use Cases. Boston: Addison-Wesley.
Codd, E. F. (1970). “A Relational Model of Data for Large Shared Data Banks,”
Communications of the ACM 13(6).
Daconta, M. C., L. J. Obrst, and K. T. Smith. (2003). The Semantic Web.
Indianapolis: Wiley Publishing.
DeMarco, T. (1978). Structured Analysis and System Speciﬁcation. Englewood
Cliffs, NJ: Prentice-Hall.
Dublin Core Metadata Initiative (DCMI). (2004). “DCMI Type Vocabulary.”
Available at http://dublincore.org/documents/dcmi-type-vocabulary.
Dublin Core Metadata Initiative (DCMI). (2005). “DCMI Metadata Terms.”
Available at http://dublincore.org/documents/dcmi-terms.
English,
L. (1999).
Improving Data Warehouse and Business Information
Quality. New York: John Wiley & Sons.
Eva, M. (1994). SSADM Version 4: A User’s Guide, Second Edition. London:
McGraw-Hill.
Feldmann, C. G. (1998). The Practical Guide to Business Process Reengineering
Using IDEF0. New York: Dorset House.
Finkelstein, C. 1989. An Introduction to Information Engineering: From Strategic
Planning to Information Systems. Sydney: Addison-Wesley.
Gane, C., and T. Sarson. (1979). Structured Systems Analysis. Englewood Cliffs,
NJ: Prentice-Hall.
GUIDE. (1989). “Repository Data Model Addendum,” GUIDE Publication No.
GRP-336.
GUIDE. (1987). “Repository Data Model,” GUIDE Publication No. GRP-254.
Hall, J. (2004). “Business Semantics of Business Rules,” Business Rule Journal
5(4). Available at http://www.BRCommunity.com/a2004/b182.html.
Hay, D. C. (1996). Data Model Patterns: Conventions of Thought. New York:
Dorset House.

REFERENCES AND FURTHER READING
393
Hay, D. C. (2003). Requirements Analysis: From Business Views to Architecture.
Upper Saddle River, NJ: Prentice Hall PTR.
International Standards Organization (ISO). 2003. “Information and Documenta-
tion—the Dublin Core Metadata Element Set”, ISO 15836:2003(E). Available
at http://www.niso.org/international/SC4/n515.pdf.
Jackson, M. (1983). System Development. Englewood Cliffs, NJ: Prentice-Hall.
Jacobson, I. (1992). Object-Oriented Software Engineering. Harlow, UK: Addison-
Wesley.
Johnson & Johnson, Inc.
(1943).
Credo. Available at http://www.jnj.com/
our_company/our_credo.
Johnson, S. (1755). Dictionary of the English Language. Ceder City, UT: Classic
Books.
Jupiter Media Corporation (JMC/URL). (2006). Webopedia. Available at http://
www.webopedia.com/term/u/url.
Kemerling, G. (1997–2002a). Philosophy Pages (semantics). Available at http://
www.philosophypages.com/dy/s4.htm#sems.
Kemerling, G. (1997–2002b). Philosophy Pages (ontology). Available at http://
www.philosophypages.com/dy/ix2.htm#o.
Knowledge Based Systems, Inc. (KBSI). (2005). IDEF Web Site at http://idef.com.
Marco, D. (2000). Building and Managing the Meta Data Repository. New York:
John Wiley & Sons.
Marco, D., and M. Jennings. (2004). Universal Meta Data Models. Indianapolis:
Wiley.
Martin, J., and C. McClure. (1985). Diagramming Techniques for Analysts
and Programmers. Englewood Cliffs, NJ: Prentice Hall.
McComb, D. (2004). Semantics in Business Systems:The Savvy Manager’s Guide.
San Francisco: Morgan Kaufmann.
McMenamin, S., and J. Palmer. (1984). Essential Systems Analysis. Englewood
Cliffs, NJ: Yourdon Press.
Merriam-Webster.
(2005).
Merriam-Webster Online.
Available at http://
merriam-webster.com.

394
REFERENCES AND FURTHER READING
Miller, G. A. (1956). “The Magical Number Seven, Plus or Minus Two: Some
Limits on Our Capacity for Processing Information,” ThePsychologicalReview,
63(2):81–97.
Object Management Group (OMG). (2003). UML 2.0 Infrastructure Speci-
ﬁcation. OMG Adopted Speciﬁcation ptc/03-09-15.
Olsen, D. H., and N. Forsgren. (2002). “A General E-Commerce Data Model
for Strategic Advantage: Mapping Site Structure to Site Visit Behavior,”
The Review of Business Information Systems 6(1):17–24.
Page-Jones, M. (2000). Fundamentals of Object-Oriented Design in UML. Boston:
Addison-Wesley.
Poole, J., D. Chang, D. Tolbert, and D. Mellor. (2002). Common Warehouse
Metamodel. New York: John Wiley & Sons.
Ross, R. (1997). The Business Rule Book: Classifying, Deﬁning, and Modeling
Rules, Second Edition. Boston: Database Research Group.
Ross, R. (1994). The Business Rule Book: Classifying, Deﬁning, and Modeling
Rules, First Edition. Boston: Database Research Group.
Rumbaugh, J., I. Jacobson, and G. Booch. (1999). The Uniﬁed Modeling Language
Reference Manual. Reading, MA: Addison-Wesley.
Rummler, G. A., and A. P. Brache. (1995). Improving Performance: How
to Manage the White Space on the Organization Chart.
San Francisco:
Jossey-Bass.
Sowa, J. F., and J. A. Zachman. (1992). “Extending and Formalizing the Framework
for Information Systems Architecture,” IBM Systems Journal 31(3). IBM
Publication G321-5488.
Tannenbaum, A. (2002). Metadata Solutions. Boston: Addison-Wesley.
von Halle, B. (2002). Business Rules Applied. New York: John Wiley & Sons.
Vonnegut, K. (1959). The Sirens of Titan. New York: Dell Publishing.
Zachman, J. (1987). “A Framework for Information Systems Architecture,”
IBM Systems Journal 26(3). IBM Publication G321-5298.

ABOUT THE AUTHOR
David C. Hay is founder of Essential Strategies, Inc., a consulting ﬁrm dedicated
to helping clients deﬁne corporate information architecture, identify require-
ments, and plan strategies for the implementation of new systems, including
data warehouses. A pioneer in the use of standard data models for standard busi-
ness situations, he is the author of Data Model Patterns: Conventions of Thought.
Taking advantage of more than thirty years of experience helping companies iden-
tify systems requirements, he is also the author of Requirements Analysis: From
Business Views to Architecture. Dave is a member of DAMA International and
the Oracle Development Tools User Group and has spoken frequently at events
sponsored by these groups and others.
395

This Page Intentionally Left Blank

INDEX
A
access role, 142, 143,
150–152, 153, 164,
218–221, 219, 224, 225,
230, 234, 243, 320
access role type, 164, 167,
219, 220, 221, 224
accessibility, 321, 321–322
account type, 5
accuracy (to reality), 321
accuracy (to surrogate source),
321
action assertions, 36
activities, 15–16, 224–225
and architecture framework,
123–125
overview, 123–126
program modules, 157–178
basic structure, 157–164
object modules, 171–178
overview, 157
program roles, 164–171
activity, 12, 34, 125, 126, 142,
185, 224, 228, 230,
289, 290
address, 185
alethic, 48
Alternative events, 258
alternative key, 324
alternative system event
type, 259, 260
application class, 99, 100
application system, 96,
163, 164, 171,
243
architects, 34, 123, 183, 209,
245, 273
Architect’s View, 292–322
about business rules,
292–294
Business Rule Mapping,
318
data quality, 321–322
accessibility, 321–322
accuracy (to reality), 321
accuracy (to surrogate
source), 321
completeness (of values),
321
concurrency of redundant
or distributed data, 321
contextual clarity, 322
deﬁnition conformance,
321
derivation integrity, 322
equivalence of redundant
or distributed data, 321
nonduplication, 321
overview, 321
precision, 321
“rightness” or fact
completeness, 322
timeliness, 322
usability, 322
validity or business rule
conformance, 321
Domains, 307–312
overview, 292
Parties, 318–321
sample model, 294–307
cardinality constraint,
300–302
derivations, 302–307
exclusivity constraint,
307
optionality constraint,
296–300
overview, 294–296
unique identiﬁers, 296
System Constraints,
312–318
architectural class, 99,
100, 239
architecture class, 103
Architecture Framework, 7–8
assessment, 225, 252, 253,
285, 286
assessment element, 196,
229, 253, 286, 287
asset, 298
asset account, 298
association class, 74–75, 78
association class role, 76,
77, 82
association entity class, 76,
77, 78
397

398
INDEX
association navigation, 25
associative class, 306
associative role, 72–73, 296,
298, 300, 302, 307, 312,
314
attribute, 14, 18, 20–21, 26,
27, 30, 31, 64, 68, 69,
70, 73, 83, 86, 88, 89,
101, 103, 106, 115, 147,
164, 230, 233, 234, 268,
295, 296, 298, 300, 302,
305, 306, 307, 310, 312,
321, 322, 331, 336, 338
attribute assignment, 30
attribute class, 98, 99, 103
attribute column mapping,
14
attribute deﬁnition, 106,
107
attribute legal values, 108
attribute name, 69
attribute selection, 83, 84,
86, 94
attribute the success
criterion, 267
attribute value, 30
authorship, 57–60
authorship role, 59, 60, 224,
226
B
builder, 34, 123, 183, 209, 245,
273
business class, 99
business activity, 195
business class, 98, 106
business concept, 14, 37, 38,
39, 40, 41, 44, 45, 47,
48, 49, 51, 52, 56, 64,
67, 69, 70, 72, 73, 82,
221–224, 222, 230
business concept element,
48, 67, 221, 222,
224
business constraint
argument, 318
business constraint
element, 318
business constraint element
type, 318
business constraint type,
317
business entity class, 171
business event, 192
business event type, 136, 155,
247, 250, 255, 257, 260
business function, 132, 138,
289
business location, 192, 193
business location type, 192,
193
business metadata, 2
business owner, 33, 123, 183,
209, 245, 273
Business Owner’s View, 8,
218–230
business policies, 17
business policy, 280, 282, 289
business process, 125, 133,
133–138, 140, 142, 145,
146, 147, 152, 192, 195,
224, 230, 231, 247, 250,
257, 289
access roles, 140–142
motivating, 140
overview, 129–130
re-engineering, 128
sample process model,
138–140
business process design, 146
business role, 289
business rule, 17, 185, 282,
284, 292, 318
business rule mapping, 318,
319
business rule mapping
element, 318, 319
business term, 38, 39, 40, 41,
45, 54, 67, 82, 221
C
cardinality constraint, 295,
300–302
cell instance, 118, 119, 180,
181, 338, 342
cells, 119
characteristic, 30, 52–54, 53,
69
characteristic assignment,
52, 69
characteristic value, 30
Chen notation, 78
class, 97–103, 171
class attribute, 101
class deﬁnition, 106, 107
class deﬁnition element,
106, 107
class element, 101, 102, 103,
171, 199
class implementation, 98, 99,
101, 103, 108, 110, 171,
172, 175, 178, 199, 239,
241, 270, 333
class implementation of
order, 272
class implementation type,
99, 101
class model (UML), 18–24
class of entity, 98, 99
class type, 101
code set, 310, 331, 333
collaborative medium, 47
column, 11–13, 89–95,
104–106, 108, 110, 119,
164, 199, 241, 324, 326,
328, 329, 331, 333, 334,
338, 342
column attribute, 106
column attribute mapping,
103, 105, 333
column instance, 118, 119,
180, 181, 342
column selection, 92, 93, 94
Common Warehouse
Metamodel (CWM), 7

INDEX
399
company, 119, 150, 205, 210,
212, 213, 225
comparative veriﬁers, 315
completeness, 321, 322
completion, 38
completion life, 260
composition, 25
computation, 234, 329, 330
computation element, 329,
330, 331
computer time-sharing, 239
computer-aided systems
engineering (CASE), 6
concurrency of redundant or
distributed data, 321
connected to, 23, 27, 70, 73
connected via, 23, 27
consequence, 283
consequence invocation,
282, 283
consequence of violation,
313, 314
consequence of violation of
assignment, 313
constraint, 17, 36, 338
contextual clarity, 322
continuous attribute, 309,
310, 331
continuous column, 331,
332
contract, 101
contract employment, 215
copy, 60, 61, 226
copy libraries, 5
course of action, 140, 141,
192–195, 278, 280, 287,
289, 292
coverage, 60–62
currency, 86
custodial business function,
138
custodial business process,
138
custodial processes, 127
custodial system process,
155
customer, 83, 93
cybernetics, 266
D
dashed line half, 26
data, 11–12, 15, 33–121
and architecture framework,
33–34
authorship, 57–60
business owner and
business rules, 34–37
characteristics, 52–54
coverage, 60–62
data stewardship, 64
design of, 87–115
links, 101–112
object-oriented data
design, 97–115
overview, 87–88
relational database design,
88–96
document distribution, 60
Dublin Core, 63
entity-relationship diagram,
64–65
entity class views, 82–86
entity classes and
attributes, 67–70
overview, 64–65
reference data, 86–87
relationships and
relationship roles,
70–82
sample model of, 66–67
ontologies, 45–51
fact types, 49–52
overview, 45–48
propositions, 48–49
overview, 33
production system, 115–121
resources, 54–57
terms and concepts, 38–45
data dictionaries, 5
data ﬂow, 146, 147, 148, 150,
157, 160, 164, 195, 198,
230, 232
data ﬂow diagrams, 127, 144,
144–146, 195–199
data group, 93–94, 110, 119,
163, 164, 168, 202
data group collection, 96,
163, 164, 238
data group collections, 96
data groups, 93, 96, 163–164
data steward, 221, 230
data stewardship, 64
data store, 127, 144, 147,
149, 164, 195
data warehouse, 1
database constraint, 234,
237, 333, 334
database constraint
element, 234, 237,
334
database design, 90
database instance, 119, 120,
187, 202–205, 204, 243,
244
database management
system, 119, 120, 159,
204, 205, 243, 244
database manipulation
class, 99, 100
day of the week, 5
DBMS trigger, 159
deﬁnition conformance, 321
deontic, 48
derivation, 302, 333
derivation element, 302, 305,
306
derivation integrity, 322
derivations, 36, 302–307
derived facts, 36
design link, 202, 203
design link implementation,
202
designer, 10, 34, 123, 183, 209,
245, 273

400
INDEX
Designer’s View, 322–338
data quality, 338
Database Constraints, 333
links, 336–338
Architect’s View, 336
overview, 336
programming constraints,
336–338
object-oriented constraints,
333–335
overview, 322–323
sample database design,
324–333
column domains, 331–333
computed columns,
329–331
foreign keys, 326–329
overview, 324
unique keys, 324–326
desired result, 140, 141, 195,
230, 277, 278, 289
detailed representations
(Builder’s View), 11
deviation, 329
deviation element, 329, 331
directive, 192, 195, 225, 281,
282, 284, 287, 289
directive motivation, 288
directive role, 288
discrete attribute, 108, 307,
308, 309, 310, 331
discrete attribute instance,
270
discrete column, 331, 332,
333
discrete instance attribute,
108, 269, 270, 333, 335
discrete instance legal
values, 108, 270
discrete instance valid
value, 269, 333, 335
display element, 241
display group, 240, 241
display group type, 241
doctype, 111
document, 56, 111, 224
document distribution, 60
document type declaration
(DTD), 111
domain, 68, 69, 108, 308, 309,
310, 331
domains, 307–312
Dublin Core, 63
E
effort, 140, 141, 142,
192–195, 194, 230, 231,
252, 289, 290, 292
elementary business
function, 130, 132,
136, 290
elementary business process,
133, 134, 138, 142, 152,
247, 248, 249, 290
elementary entity class,
82, 85
elementary functions, 152
elementary system process,
152, 154, 155, 266
e-mail site, 186
employment, 214, 215
enablement, 279, 280
end, 192–195, 194, 225–230,
229, 253, 276, 277, 287
ends, 192, 225, 252, 285
enforcement, 225
enforcement level, 282, 283
enforcement level
implementation,
282, 284
enforcement role, 221, 222,
224, 230, 234, 243, 318
entities, 28
entity class, 14, 26, 27, 28,
31, 66, 67–70, 68, 72,
73, 76, 82–86, 88, 89,
97, 98, 101, 103, 106,
115, 147, 164, 230, 233,
234, 255, 256, 296, 300,
312, 314
entity class fact type, 73
entity class fact type
element, 73
entity class name, 67
entity class party, 83
entity class selection, 83,
84, 86, 94
entity class state, 255, 256,
300, 301
entity class state type, 256,
301
entity life history, 17, 253,
257, 257–263
entity table entity class
mapping, 64
entity-relationship model,
24–29
epistemological, 47
equivalence of redundant or
distributed data, 321
essential business process,
136, 137, 138, 139,
152, 155, 247, 248,
265, 266
essential data ﬂow diagram,
15–16, 17, 127
essential processes, 127
essential system process,
152–157, 154, 263–266,
265
essential system process
diagram, 253
essential system process
model, 263
event manager, 99, 100
event recognizer, 99, 100
event type, 86, 155, 247, 257
event type sequence, 259, 260
events, 34, 224–225, 247
business event types,
245–252
external business event
types, 247–249
internal business event
types, 249–251
overview, 245

INDEX
401
program events, 267–269
object orientation,
270–272
overview, 267
system events, 252–253
entity life history,
257–263
essential system
processes, 263–266
feedback loop, 266–267
overview, 252–253
state-transition diagram,
254–257
exclusivity constraint, 307,
308, 312, 314
exclusivity constraint
element, 307, 308
executable module, 171, 172,
175, 239, 241
executable program, 205
Extensible Markup Language
(XML), 110–115
external business event, 155
external business event type,
136, 137, 140, 152, 247,
248, 250
external entity, 147,
150, 230
external event type, 138, 140,
247–249
external system event, 155,
265
extraction, transfer, and load
(ETL), 6
F
facility, 185
fact, 36, 49, 50, 51, 281
fact completeness, 322
fact type, 37, 50, 51, 52, 54,
64, 69, 72, 222, 280,
281, 282, 302
fact type element, 50, 51, 52,
69, 70, 72, 222
feedback loop, 266–267
ﬁeld, 241
foreign key, 234, 326, 327,
328, 329, 333, 336
foreign key element, 327,
328, 329
foundation class, 99, 100,
103
function, 123–126, 125, 130,
130–133, 135, 146, 152,
224
functional veriﬁers, 315
functioning system, 11,
34, 123, 183, 209,
245, 273
fundamental business
process, 138
fundamental class, 99, 100
fundamental process, 127,
155
fundamental system process,
155
G
generalization role, 72–73
generation, 168, 169
generation speciﬁcation,
168, 169
geographic area, 60, 62, 189,
191
geographic location, 60, 62,
189–192, 190
geographic location type,
189, 190
geographic point, 60, 189
geographic structure, 190,
191
geopolitical area, 62,
189
goal, 277, 278
goals, 17
governance, 252, 289
government agency, 150,
210, 213, 225
graphic, 41, 45
guidance, 252
H
higher-order, 38
homonyms, 39
human interface class, 99,
100, 239, 241
I
iconic trigger, 241
icons, 41, 45, 54
idef, 128
IDEF0, 129
IDEF1, 128
IDEF1X, 128
IDEF3, 129
identiﬁcation role, 81, 82
identiﬁcation role element,
81, 82
imperative message type, 175
implementation class, 178
implementations, 171
inﬂuencer, 195, 225, 229,
252, 253, 284,
285, 286
inﬂuencer type, 286, 289
information engineering
classes, 78
information engineering
role, 74, 76, 77, 83,
336
informative message type,
175
instance attribute, 98, 101,
103, 106, 108, 110, 171,
174, 270, 272, 333, 334
instance name, 67, 68
instance veriﬁers, 315
integrity constraint, 312
interactive element, 241, 242
interactive module, 159, 239,
240
interface classes, 239
interface element type, 241
internal business event, 135,
155, 249–251

402
INDEX
internal business event type,
135, 138, 140, 192, 249,
250, 251
internal event type, 138, 140,
247, 250
internal inﬂuencers, 195,
284
internal organization, 210,
212, 213, 225
internal system events, 265
interrogative message type,
175
intersect entity class, 74
Iteration, 258
iterative system event type,
259, 260
L
language, 41, 42, 56
legal transformation, 269,
272, 333, 335
legal values, 270
license type, 86
line item, 66, 294, 295, 296,
306, 307, 324, 325
line_items, 91
links, 101–112
conceptual model to
object-oriented design,
106–108
conceptual model to
relational database
design, 103–106
Extensible Markup
Language (XML),
110–115
object-oriented model to
relational model:
persistence, 108–110
overview, 103
locations, 12, 183–185
business locations, 192
data ﬂow diagrams, 195–199
efforts, 192–195
ends, 192–195
geographic location,
189–192
means, 192–195
overview, 183–185
placing data and programs,
199–202
servers, 205–208
site entity class, 185–189
system inventory, 202–208
logical data ﬂow diagram, 127
M
machine communication
class, 99, 100
management, 225, 234
management area, 60–62,
189
management role, 64, 65,
142, 164, 167, 220,
221, 224, 230, 234,
243, 318
mandatory, 22
many-to-many relationships,
38
mathematical evaluators, 315
means, 140, 142, 192–195,
194, 225–230, 229,
252, 253, 279, 285,
287, 289
means effect, 252, 253, 289,
291
means effect type, 291
measuring data quality,
338–342
mechanism, 134, 135
mechanism type, 133, 134, 135
message, 175, 176, 178, 272
message argument, 175,
176, 178
message argument type,
176, 178
message queue, 175, 176
message type, 175, 176, 272
messages, 178
Meta Object Facility (MOF), 7
metadata, 1, 4
overview, 1–5
repository development, 5–7
metadata models, 1–31
activities, 15–16
columns, 11–13
data, 15
level of abstraction, 29–31
locations, 16
motivation, 17
notation: object and entity
classes, 17–28
class model (UML), 18–24
entity-relationship model,
24–29
overview, 17
organizations, 16
overview, 1, 7–8, 13–14
people, 16
rows, 8–11
timing, 16–17
meta-metadata, 2
methods, 171, 175
mission, 130, 132, 133, 140,
274, 276, 278
model of the business
(Business Owner’s
View), 8
model of the fundamental
concepts (Architect’s
View), 10
module communication, 164
module data usage, 164, 166
module location, 199, 201
motivation, 13, 17
Motivation column, 273–292
Activities, 289–292
Directive Motivation,
287–289
Directives, 280–284
Ends, 277–278
Inﬂuencers and
Assessments, 284–287
Means, 278–280

INDEX
403
mission and vision,
274–276
overview, 273
motivation location, 195,
196
movement, 205, 207
multi-valued attributes, 10, 38
N
n-ary role, 78–82, 81, 300
natural area, 62
nonduplication, 321
notations, 26
O
object, 103, 104, 175, 178
object class, 18
object class behavior, 257
object modules, 171–178
object orientation, 270–272
object role modeling (ORM),
78
ObjectClass, 20
objective, 277, 278, 280
objectives, 17
object-oriented design, 97–115
classes, 97–103
conceptual model to,
106–108
objects, 103–104
overview, 97
objects, 103–104, 175
obsolescence, 260
occurrences, 89
one symbol, 221
ontological classiﬁcation,
45, 46, 47
ontology, 45–51, 46, 221
fact types, 49–52
overview, 45–48
propositions, 48–49
operation, 103, 171, 173, 174,
175, 261, 272
opportunity, 287
optional, 23
optionality constraint, 295,
296–300, 301, 312, 314
optionality constraint
element, 314
order, 51, 66, 83, 294, 295,
324, 325
organization, 57, 142, 147,
150, 157, 210, 212, 214,
220, 230
other access role, 167, 220,
225
other attribute, 309
other business concept,
49, 67
other business concept
element, 49
other business process, 133,
134, 140, 248, 290
other business term, 67, 68
other column, 332
other constraint, 336
other database constraint,
333
other domain, 310
other entity class, 77, 78,
82, 83
other executable module,
159, 161, 338
other fact type, 53
other function, 132, 133, 290
other instance attribute,
269, 270, 335
other instance name, 311
other legal transformation,
270
other organizations, 212
other party relationship,
215
other persistence
mechanism, 108
other program module
structure, 161
other proposition, 50
other proposition type, 222
other proposition type
element, 50, 222
other resource, 224
other site structure, 187
other system process,
152, 154
other value expression, 310
P
packages, 171, 175, 178, 239
party, 57, 60, 64, 66, 86, 93,
140, 142, 143, 147, 150,
151, 152, 164, 195, 212,
213, 220, 224, 225, 230,
294, 295, 318–321, 320,
322, 324, 325
party relationship, 213, 214
party relationship type,
213, 215
people, 12, 74, 140, 147,
210, 230
people and organizations, 16,
209–218
Architect’s View, 230–234
Business Owner’s View,
218–230
access roles, 218–221
activities, 224–225
concepts, 221–224
decisions, 224–225
events, 224–225
means and ends, 225–230
overview, 218–221
signiﬁers, 221–224
symbols, 221–224
Designer’s View, 234–236
interactive modules,
236–242
overview, 209–218
security and governance,
243–244
permission role, 142,
164, 167, 220, 224,
234, 243
permitted attribute, 307

404
INDEX
permitted attribute value,
308, 309, 310, 312,
331, 333
persistence mechanism, 108,
109, 199, 234, 238, 241
persistence mechanism
location, 199, 200
persistent, 88
persistent objects, 108
person, 57, 66, 74, 78, 142,
212, 213, 216, 220, 322
phrase, 38, 39, 40, 41, 45, 67
physical communication
links, 187, 199, 205
physical copy, 60
physical data ﬂow diagram,
127
physical link
implementation,
205, 208
physical platform, 179,
205, 207
physical site, 185, 191, 192,
199, 205
physical unit
implementation, 205
placement role, 220
planner, 33, 123, 183, 209,
245, 273
player, 220, 230
position, 142, 143, 150, 151,
152, 164, 216, 217, 230
position assignment, 216,
217
position responsibility, 216,
218, 230
position responsibility
holding, 216, 218, 220
position veriﬁers, 315
positions, 140, 195
post ofﬁce box, 186
potential impact, 286, 287
precision, 321
preposition element, 49
preposition type element, 49
prestige client, 34
primary key, 324, 328, 329
private, 103
process fragment, 250
process implementation, 169,
170
process map, 128
process measurement, 267,
269
process objective, 267, 268
process objective type, 268
processes, 125, 140–150
access roles and system
events, 150–152
data ﬂow diagram, 144–146
essential system processes,
152–157
overview, 123–126, 142–146
system processes and data
ﬂows, 146–150
types of models, 127–129
product, 69, 306
product category, 5
product type, 5, 34, 52, 66,
294, 295, 296, 306, 307,
324, 325
product_types, 91
production system, 115–121
program, 195, 289
program copy, 119, 120, 179,
205, 206, 243, 244
program inventory, 178–181
program module, 157, 158,
159, 161, 164, 168, 171,
175, 178, 179, 202, 205,
234, 236, 243, 338
program module
communication, 160,
161, 164, 175, 202
program module
composition, 159, 160
program module
decomposition, 161
program module
dependency, 160, 161
program module structure,
161, 162
program module types, 159
program roles, 164–171
programming language,
158
programming module type,
158
programming role, 164, 167,
234, 236, 243
programming unit role, 234
project, 289
project assignment, 74, 75
projection controllers, 317
projects, 74, 78, 140, 195
proposition, 48, 49
proposition element, 48, 51
proposition type, 48, 49
proposition type element, 48
protected, 103
public, 103
purchase order, 255, 258,
295, 306
Q
quality characteristic, 321,
322, 323
quality standard, 322, 323,
338
quality value assignment,
341
R
reference data, 86–87
relational database design,
88–96
conceptual model to,
103–106
data group collections and
application systems, 96
overview, 88–89
sample database design, 90
tables and columns, 89–90
views, 90–93

INDEX
405
relational database
management system,
108
relational model, 108–110
relational theory, 87
relationship, 29, 30, 70–82
association class roles,
74–78
N-ary relationships, 78–82
overview, 70
relationship roles, 70–73
relationship class, 98, 99
relationship role, 26, 27, 28,
67, 70, 71, 72, 73, 76,
86, 106, 147, 295, 298,
321, 322, 336, 338
relationship role element,
72
resource, 54–57, 55, 60, 224,
226
resource distribution, 60, 61
resource element, 54
resource structure, 57, 58
resource structure type, 57,
58, 63
resource topic, 55, 226
resource type, 55, 56
retrieves, 164
rightness, 322
role class, 98, 99
row instance, 118, 119, 180,
181
row/column cell, 119
rows, 8–11, 89
S
Scope (Planner’s View), 8
security and governance,
243–244
selection condition, 83, 84
selection criterion, 86, 93,
94
semantic class, 99, 100
semantic community, 40, 41,
45, 47, 210
semantic web, 47
semantics, 10, 38
sequence, 258
sequential system event
type, 259, 260
server, 179, 187, 205–208, 206
server implementation, 179,
205, 206
service type, 66, 294, 295, 296,
306, 307, 324, 325
service_types, 91
set points, 266
signiﬁer, 44, 45, 221–224,
222, 331
site, 60, 61, 185–189, 186, 192,
195, 205, 219, 220
site composition, 187
site location, 190, 191, 192
site structure, 187, 188, 199
site structure type, 188, 189,
202
site type, 186, 187, 199
speciﬁcation role, 142, 221,
223, 224, 230, 234
speech community, 40–41, 42,
45, 210
standard entity class, 83
state, 67, 270, 333
state legal transformation,
270
state trigger, 269, 272
statement, 49
state-transition diagram,
16–17, 252, 254,
254–257
status, 5, 86
stored procedure, 158, 338
strategy, 17, 140, 278,
279, 280
street address, 185
strength, 287
structural assertions, 36
structural class, 99, 100
structure of data entity classes,
185
sub-type role, 73
sub-types, 187, 189
success criterion, 267, 268
super-type, 23, 187, 199
super-type role, 73
surveyed area, 62
symbol, 44, 45, 47, 54, 56, 60,
64, 221–224, 222
symbol context, 41, 43, 45
synonyms, 39
system constraint, 234, 235,
292, 293, 294, 312–318,
313, 336
system constraint
argument, 315, 316
system constraint argument
type, 316
system constraint element,
315, 316
system constraint trigger,
313, 314
system constraint type, 313,
314, 315
system event, 157, 258
system event type, 152, 153,
155, 255, 256, 257, 259,
260, 267
system inventory, 202–208
database instances, 202–205
overview, 202–205
servers, 205–208
system module, 159, 205
system process, 125, 142, 145,
146, 146–150, 152, 169,
195, 230, 232, 248, 257,
261, 263, 265, 267, 313,
314
system variable, 302, 305,
329
T
table, 89, 89–95, 103, 110,
164, 185, 199, 324, 326,
328, 329

406
INDEX
table entity class mapping,
103, 105, 106
table instance, 118, 119, 180,
181, 202, 243, 244
table selection, 92, 93, 94
table selection conditions,
94
tactic, 17, 140, 140, 278, 279,
280, 284
tag, 110, 115
taxonomy, 47
technical metadata, 2
technology model (Designer’s
View), 11
telephonic site, 187
temporal events, 247
temporal system event type,
255
terms, 34
ternary relationships, 38
thing, 29, 30, 31, 52
thing relationship,
30, 31
thing type, 29, 30, 31, 52
thing type relationship,
30, 31
threat, 287
time, 12–13
timeliness, 322
timing, 16–17
title, 55
transformation, 272
transformation run,
180, 181
transformation run
element, 180, 181
transformation run usage,
180, 181
triggers, 338
tuples, 88
type veriﬁers, 315
U
uniform resource locator
(URL), 55
unique identiﬁer, 295, 296,
297, 324, 336
unique identiﬁer element,
296, 297, 336
unique key, 324, 326, 328,
333, 336
unique key element, 324, 326,
328, 336
uniqueness constraint, 234
universe of discourse, 37
updates, 164
usability, 322
use cases, 128
utility, 159
V
valid attribute values,
270, 272
valid code, 311, 312, 333
valid quality characteristic
value, 322, 323, 338,
342
validity or business rule
conformance, 321
value code, 331
value expression, 310
value set, 310, 331, 333
values, 52
view, 90–93, 94, 110, 164, 199
view selection condition,
92, 93
virtual copy, 60
virtual entity class, 82, 85,
86, 94, 147, 148, 164
virtual entity customer, 83
virtual site, 119, 179, 186,
199, 202, 205
vision, 274, 276
vocabulary, 45
W
weakness, 287
web site, 187
window, 240, 241
word, 38, 39, 40, 41, 45
word usage, 38, 39
X
xml attribute, 114, 115
xml attribute value, 114, 115
xml document, 111, 112
xml document type
declaration, 113
xml element, 112, 113, 115
xml element content, 116
xml tag, 111, 112, 115
xml tag deﬁnition, 116
xml version, 111, 112
Z
Zachman Framework, 8

