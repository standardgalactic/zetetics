CHAPTER12
AN INTRODUCTION TO COMPUTER
PROGRAMMING
In addition to the statistical power of R you will nd that R also is a full-
featured, object-oriented programming language. In general, we use program-
ming to get the computer to perform tasks that need to be done many times.
Our problems can be quite complex and so we also need to control the problem-
solving route to include conditional statements, such as if this is true then
do task 1, otherwise do task 2. This is done a lot in biology for a variety of
problems. This introduction is meant to give you a taste of what is possible.
Knowing what's possible can allow you to think of new problems that you
might consider solving.
12.1 WHAT IS A “COMPUTER PROGRAM”?
Computers need to be told exactly what you want them to do. And they are
really good at doing what we tell them to do (like when it's time to show a
user the blue screen of death). And they're particularly good at doing things
repetitively.
For our programming needs computers run sets of instructions.
These
instructions are written by people like you and me that use a high-level
language that makes sense to us. Other programs, written by other humans,
then take the instructions and convert them into low-level instructions that
computers understand. My goal here is to introduce you to the high-level
language of R so you can solve problems in biology.
There are many high-level languages that can be used to create computer

194
AN INTRODUCTION TO COMPUTER PROGRAMMING
programs. You may have heard of some of these (e.g., Matlab, Maple,
Mathematica, Basic, Visual Basic [used within Excel], Pascal, Python,
and Perl).
Dierent languages have their own strengths and weaknesses.
Strangely, there is no best language. However, for modeling complex bio-
logical systems most any problem can be solved using either C, a relatively
low-level language, or R, or a combination of these two languages.
C is great for relatively complicated problems that need to run fast. R, on
the other hand, is easy to use but runs programs much slower than C. The
advantage of R, however, is that there is a very large set of easy-to-use, built-in
tools for creating graphs, running statistical tests, and analyzing mathematical
models. Therefore, although R programs run slowly the development time
for writing programs in R is very short compared to writing programs in C.
So, it really helps if you know what you're trying to do before you invest
a lot of time on your research project. Keep in mind, however, that if you
can program in one language it becomes relatively easy to migrate to a new
language.
Since this document is just an introduction we won't be tackling a complex
problem in biology. You will have to continue to explore and read about your
problem and programming. I hope, however, that you can get started and
see why you might want to do this and how programming can be used to
understand and predict patterns in biology.
Computers are great at doing lots of calculations that we'd nd pretty
boring after a while.
There are three basic constructs we use in building
programs:
1. if statements (conditional tests)
2. for loops (control ow)
3. while loops (control ow)
The if statement is used to test whether a condition is true. If the con-
dition evaluates to true, then the following statement is executed.
If the
conditional test is false, then the true expression is ignored. You can provide
an expression to execute if the statement is false with an else expression.
We use for and while loops when we want a particular expression executed
more than one time. The for loop should be used if the number of times
something needs to be done is known (we usually know this). If the number
of times a statement is to be executed is unknown, then it might be best to
use a while loop. The while loop is done until some criterion is satised.

AN INTRODUCTION TO COMPUTER PROGRAMMING
195
AN EXAMPLE: THE CENTRAL LIMIT THEOREM
Let's build a short program that tests the central limit theorem (CLT), which
states that the distribution of sample means from any distribution is approx-
imately normal. To accomplish this let's sample the standard normal distri-
bution (¯x = 0 and σ = 1) and a uniform distribution (x ∈[0, 1]) 5000 times
each. Since we know how many times we want to do the sampling it is most
appropriate to use a for loop.
To test the CLT we will perform a simulation which requires us to use a
random number generator. Let's begin by setting the random seed so we'll
get the same results:
> set.seed(20)
We can then declare our sample size (num.values) and the number of times
we take samples from each population (num.samples) like this:
> num.values = 100
> num.samples = 5000 # the number of samples to draw
For each of the 5000 samples we need to calculate and store the mean of the
100 values in each sample. We, therefore, need two structures that will each
hold a list of 5000 mean values.
For this we'll use arrays.
Arrays can be
declared as follows
> means.norm = numeric(num.samples) # will hold 5000 values
> means.unif = numeric(num.samples)
At last we are ready to perform our simulation and collect our data (stored
in the means.* variables):
> for (i in 1:num.samples) {
+
means.norm[i] = mean(rnorm(num.values))
+
means.unif[i] = mean(runif(num.values))
+ }
The above code does all the work. It tells R to run the two lines between the
curly braces ({ }) 5000 times (from 1 to num.samples). The rst line within
the for loop works like this:
1. send num.values (100) to the rnorm() function;

196
AN INTRODUCTION TO COMPUTER PROGRAMMING
2. the rnorm() function returns 100 random numbers drawn from the stan-
dard normal distribution;
3. those values from the standard normal distribution are then sent to the
mean() function;
4. the mean() function calculates the arithmetic mean of those numbers
and assigns that result to the ith element in the means.norm[] array.
Once the for loop is done the variables means.norm and means.unif should
hold 5000 values each. We now can look at the distributions of these means
using the hist() function (see section 5.2 on histograms). I've also plotted
the distributions of single samples from the standard normal and uniform
distributions for comparison (see Figure 12.1).
> par(mfrow = c(2,2))
> hist(rnorm(num.samples),xlab = "X",main = "Normal Sample",
+
ylim = c(0,1000))
> hist(runif(num.samples),xlab = "X",main = "Uniform Sample",
+
ylim = c(0,1000))
> hist(means.norm, xlab = "X",main = "Means from Normal Dist",
+
ylim = c(0,1000))
> hist(means.unif,xlab = "X",main = "Means from Uniform Dist",
+
ylim = c(0,1000))
> par(mfrow = c(1,1))
Now we can view the output by displaying four graphs in a single graphics
window (Figure 12.1). Interestingly, the histograms in the lower part of the
gure appear similarly bell-shaped.
Remember that the histogram in the
lower right is from 5000 means of samples drawn from a non-normal (uniform)
distribution. We can test them for normality using the Shapiro-Wilk test (see
section 4.4):
> shapiro.test(means.norm) # from normal pop
Shapiro-Wilk normality test
data:
means.norm
W = 0.9997, p-value = 0.7198
> shapiro.test(means.unif) # from unif pop

AN INTRODUCTION TO COMPUTER PROGRAMMING
197
Normal Sample
X
Frequency
−3
−1
0
1
2
3
0
200
600
1000
Uniform Sample
X
Frequency
0.0
0.2
0.4
0.6
0.8
1.0
0
200
600
1000
Means from Normal Dist
X
Frequency
−0.2
0.0
0.2
0.4
0
200
600
1000
Means from Uniform Dist
X
Frequency
0.40
0.45
0.50
0.55
0.60
0
200
600
1000
Figure 12.1: A visualization of the central limit theorem. The upper panels
show the distribution of two samples of 5000 deviates, one drawn from a
normal distribution (top left) and one drawn from a uniform distribution (top
right). The bottom panels demonstrate that the means of many samples drawn
from a normal (lower-left panel) and uniform (lower-right panel) distribution
result in relatively normal distributions, in agreement with the central limit
theorem (CLT).
Shapiro-Wilk normality test
data:
means.unif
W = 0.9996, p-value = 0.39
What do we conclude about these distributions? Does this result agree with
or contradict the central limit theorem?
What we did above was to write a computer program. As we discussed

198
AN INTRODUCTION TO COMPUTER PROGRAMMING
above, we sometimes want to have a computer test an idea that might require
many calculations.
This is a great example that has allowed us to verify
empirically (that means actually doing it) a theorem. Our next step is to
explore further how programming can be used to answer some questions in
the biological sciences.
12.2 INTRODUCING ALGORITHMS
Let's approach our introduction to algorithms with an example of simulating
genetic drift operating on two alleles found at a single locus. Genetic drift
is a mechanism that brings about evolution in a population, or the change in
gene frequencies. With this mechanism, unlike natural selection, there is no
selection at all. The process is governed by chance so that one allele might
become more or less frequent over time simply by chance.
For this exercise let's assume that individuals are haploid at a single
locus with just two alleles (we'll use the numbers 0 or 1 for our two alleles).
Using numbers like this for our alleles will make our lives easier. Imagine
that our population has six individuals (e.g., 0, 1, 1, 0, 0, 0).
To know
the number of 1 alleles all we need to do is add up the numbers (e.g., >
sum(0,1,1,0,0,0), which means there must be two of the type 1 alleles in
the population). Therefore, the proportion of allele 1 in this example is 0.333.
We'll assume that reproduction is really simplistic. The population size
will remain the same size over time and that reproduction is completed by
randomly choosing N individuals from the current population. The chosen
individuals simply make a baby that's identical to itself which gets placed
into the next generation.
What should happen over time? We might, just by chance, select more
individuals with the 0 allele than the 1 allele over time and end up with a
population of only the 0 alleles. Just as likely we might end up with the 1
allele becoming the only allele in the population.
Because this is actually
complicated, we need to develop an algorithm, which is a recipe that guides
us in writing our program to simulate this process. Here are the steps that I
follow to complete this simulation (there are many other ways you could do
this):
1. Declare the necessary variables (e.g., N);
2. Create an empty plot for our results;
3. Run the simulation many times (sounds like a for loop). In each sim-
ulation we:

AN INTRODUCTION TO COMPUTER PROGRAMMING
199
(a) Create a population;
(b) Store the proportion of 1s in a variable (e.g., P) for each time step;
(c) Perform the reproduction routine, randomly choosing individuals
that will contribute to the next generation and do this many times;
(d) Add a line for the P data to graph;
(e) If not done, repeat for next replicate.
We now need to implement these steps, assuming that the algorithm will
work. What I do is write the algorithm in my script le and then write the
code directly below each task. I can then test each task individually to make
sure it's doing what I think it should. If the tasks are more complicated I might
write a function to do the work. The code below creates Figure 12.2. Note
that the rst line calls the set.seed() function (with 10 as the argument)
so that if you run this code you should get exactly the same graph as I did.
(Remember that you need to omit the > and + symbols.)
> set.seed(10) # gives repeatable result
> # Step 1: Define variables
> n.time.steps = 100 # how long to run simulation
> pop.size = 50 # how many individuals there are
> n.reps = 20 # how many populations to simulate
> # Step 2: Create an empty plot for simulation
> plot(0,ylim = c(0,1),xlim = c(1,n.time.steps), type = "n",
+
ylab = "Proportion of Allele 1 in Population",
+
xlab = "Time Step", cex.lab = 1.5)
> abline(h=0.5,lty = 2, lwd = 3)
> # Step 3: Perform the reproduction routine many times;
> for (i in 1:n.reps) {
+
# Step 3a: Create population of 0 and 1 alleles
+
pop = c(rep(0,pop.size/2),rep(1,pop.size/2))
+
# Step 3b: Store proportion of 1s in variable
+
P = sum(pop)/pop.size
+
# Step 3c: Run the simulation for this replicate
+
for (j in 2:n.time.steps) {
+
pop = sample(pop,pop.size, replace = T)
+
P[j] = sum(pop)/pop.size
+
}
+
# Step 3d: Add line to graph for this replicate
+
lines(P)
+ }

200
AN INTRODUCTION TO COMPUTER PROGRAMMING
0
20
40
60
80
100
0.0
0.2
0.4
0.6
0.8
1.0
Time Step
Proportion of Allele 1 in Population
Figure 12.2: The proportion of allele 1 in 20 replicate populations over time.
Each line represents a separate population. Eighteen of the 20 replicates result
in either the loss or xation of allele 1. Two simulations continue with both
alleles persisting in these populations.
12.3 COMBINING PROGRAMMING AND
COMPUTER OUTPUT
Sometimes we would like to have code that solves a problem and provides the
answer to whomever is looking at the screen (ourselves or others). We can use
commands that will provide the answer with some regular English mixed in.
This can be great to help out lab mates, for instance. Here's how we might
solve a small problem with a contingent result and print the appropriate result
to the console.
Imagine that you want to provide your lab group with a routine that checks
to see if the data they collected are normally distributed. Here's a way to do
this using the cat() function.
> # x = c() # should enter data here
> set.seed(100) # so your numbers match mine
> x = rnorm(100) # using these data for demonstration

AN INTRODUCTION TO COMPUTER PROGRAMMING
201
> a = shapiro.test(x)
> {
+ if(a$p.value > 0.05)
+
cat("The data are normally distributed: p = ",a$p.value)
+ else
+
cat("The data are not normally distributed: p = ",a$p.value)
+ }
The data are normally distributed: p =
0.5349945
The above code performs the Shapiro-Wilk test, stores the result, and then
queries whether the p-value is or isn't greater than 0.05. Whichever is true,
the program will spit out the answer in a nice written format.
The tools we have used above represent really important components for
creating programs in R. With these tools, and perhaps a few more that you'll
pick up as you need them, you'll be able to answer some really interesting
questions in biology. Test yourself by trying the problems in the next section.
Have fun! The key to success in computer programming is play. If you're
interested in doing more programming, check out the many available sources
on using R. One good, complete guide is the book by Matlo (2011).
12.4 PROBLEMS
1. Create a program that uses a for loop to count the integers 1:100.
(For questions 23). The Fibonacci series begins with the numbers 0, 1, and
continues as the sum of the two previous numbers.
2. Write a program that generates the rst 10 numbers of the series.
3. Create side-by-side graphs (in a single graphics window) of this series.
On the left present the series on a linear scale; on the right present it
on a semi-log (ln) scale (y is logged, x is linear).
(For questions 47). Assume that zebra mussels (an invasive, freshwater gas-
tropod that is expanding its range in North America) are capable of growing
geometrically according to the following dierence equation.
Nt+1 = Nt · λ

202
AN INTRODUCTION TO COMPUTER PROGRAMMING
A new population of 100 individuals has just arrived in a lake. In a neighboring
lake, the population grew at a rate of 45% per year. Therefore, a population
of 100 will be 145 in the next year. (What is the value of λ? Hint: solve for
λ.)
4. Write a program that models the change in the population in this lake
over the next 9-year period. Note that N1 = 100 and the N2 = 145.
You'll want to model this up to N10, which is a total of 10 population
sizes.
5. Create a graph of how you expect this population to change over this
time period.
6. A control method could be implemented that would reduce the growth
rate by 10% annually. Show a graph of both the uncontrolled population
and the controlled population for comparison, as though you were asked
to show a town board what the dierence in the zebra mussel population
might look like over time.
7. Change the model so that it relies on the following generalized expression
to the geometric growth equation:
Nt = N0 · λt
8. We've spent time in this text thinking about p-values (you might want to
revisit the denition for the p-value on page 94). Write a program that
tests whether this works for the standard t-test. Below is a suggested
algorithm to solve this problem.
(a) Create two samples from normal distributions. One should have
¯x2 = 0, sd = 1; the other ¯x1 = 1, sd = 1.
(b) Perform a t-test on your two samples (see page 111).
(c) Store your t- and p-values in two variables (e.g., my.t.value and
my.p.value).
(d) Write a program that iteratively, using a for loop, generates two
samples, performs a t-test, records the t-value, and counts how
many of the t-values are as extreme as or greater than your t-value
from your original test. Do this 1000 times. Note that you do not
want to write each number down! Have R record the number of
times the new t-value is greater than your original t-value.
(e) Print to the console your original p-value and the proportion of
times you got a t-value as great as or greater than the original t-
value. Your proportion and the p-value from the rst test should
be similar.

AN INTRODUCTION TO COMPUTER PROGRAMMING
203
9. The following equation is called the logistic map.
Nt+1 = λ · Nt · (1 −Nt)
When λ lies in the range 3.57 < λ < 4.0 the series can produce chaotic
dynamics. Create a graph of what happens when λ = 3.75 over 100 time
steps. Begin with N1 = 0.5. [Note that 0 ≤N ≤1]
10. Ramanujan, a famous Indian mathematician who died at the age of 32,
proposed this estimate for π.
π = 1/
 
2
√
2
9801
∞
X
k=0
(4k)!(1103 + 26390k)
(k!)43964k
!
(a) Determine the estimates for π for k = 0 →5.
(b) Graph your estimates of π as a function of k.


